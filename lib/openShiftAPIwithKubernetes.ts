/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import * as Parameters from "./models/parameters";
import { OpenShiftAPIwithKubernetesContext } from "./openShiftAPIwithKubernetesContext";

class OpenShiftAPIwithKubernetes extends OpenShiftAPIwithKubernetesContext {
  /**
   * Initializes a new instance of the OpenShiftAPIwithKubernetes class.
   * @param [options] The parameter options
   */
  constructor(options?: Models.OpenShiftAPIwithKubernetesOptions) {
    super(options);
  }

  /**
   * get available API versions
   * @param [options] The optional parameters
   * @returns Promise<Models.GetCoreLegacyAPIVersionsResponse>
   */
  getCoreLegacyAPIVersions(options?: msRest.RequestOptionsBase): Promise<Models.GetCoreLegacyAPIVersionsResponse>;
  /**
   * @param callback The callback
   */
  getCoreLegacyAPIVersions(callback: msRest.ServiceCallback<Models.V1APIVersions>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getCoreLegacyAPIVersions(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.V1APIVersions>): void;
  getCoreLegacyAPIVersions(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.V1APIVersions>, callback?: msRest.ServiceCallback<Models.V1APIVersions>): Promise<Models.GetCoreLegacyAPIVersionsResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getCoreLegacyAPIVersionsOperationSpec,
      callback) as Promise<Models.GetCoreLegacyAPIVersionsResponse>;
  }

  /**
   * get available resources
   * @param [options] The optional parameters
   * @returns Promise<Models.GetCoreV1APIResourcesResponse>
   */
  getCoreV1APIResources(options?: msRest.RequestOptionsBase): Promise<Models.GetCoreV1APIResourcesResponse>;
  /**
   * @param callback The callback
   */
  getCoreV1APIResources(callback: msRest.ServiceCallback<Models.V1APIResourceList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getCoreV1APIResources(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.V1APIResourceList>): void;
  getCoreV1APIResources(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.V1APIResourceList>, callback?: msRest.ServiceCallback<Models.V1APIResourceList>): Promise<Models.GetCoreV1APIResourcesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getCoreV1APIResourcesOperationSpec,
      callback) as Promise<Models.GetCoreV1APIResourcesResponse>;
  }

  /**
   * list objects of kind ComponentStatus
   * @param [options] The optional parameters
   * @returns Promise<Models.ListCoreV1ComponentStatusResponse>
   */
  listCoreV1ComponentStatus(options?: Models.OpenShiftAPIwithKubernetesListCoreV1ComponentStatusOptionalParams): Promise<Models.ListCoreV1ComponentStatusResponse>;
  /**
   * @param callback The callback
   */
  listCoreV1ComponentStatus(callback: msRest.ServiceCallback<Models.V1ComponentStatusList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listCoreV1ComponentStatus(options: Models.OpenShiftAPIwithKubernetesListCoreV1ComponentStatusOptionalParams, callback: msRest.ServiceCallback<Models.V1ComponentStatusList>): void;
  listCoreV1ComponentStatus(options?: Models.OpenShiftAPIwithKubernetesListCoreV1ComponentStatusOptionalParams | msRest.ServiceCallback<Models.V1ComponentStatusList>, callback?: msRest.ServiceCallback<Models.V1ComponentStatusList>): Promise<Models.ListCoreV1ComponentStatusResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listCoreV1ComponentStatusOperationSpec,
      callback) as Promise<Models.ListCoreV1ComponentStatusResponse>;
  }

  /**
   * read the specified ComponentStatus
   * @param name name of the ComponentStatus
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadCoreV1ComponentStatusResponse>
   */
  readCoreV1ComponentStatus(name: string, options?: Models.OpenShiftAPIwithKubernetesReadCoreV1ComponentStatusOptionalParams): Promise<Models.ReadCoreV1ComponentStatusResponse>;
  /**
   * @param name name of the ComponentStatus
   * @param callback The callback
   */
  readCoreV1ComponentStatus(name: string, callback: msRest.ServiceCallback<Models.V1ComponentStatus>): void;
  /**
   * @param name name of the ComponentStatus
   * @param options The optional parameters
   * @param callback The callback
   */
  readCoreV1ComponentStatus(name: string, options: Models.OpenShiftAPIwithKubernetesReadCoreV1ComponentStatusOptionalParams, callback: msRest.ServiceCallback<Models.V1ComponentStatus>): void;
  readCoreV1ComponentStatus(name: string, options?: Models.OpenShiftAPIwithKubernetesReadCoreV1ComponentStatusOptionalParams | msRest.ServiceCallback<Models.V1ComponentStatus>, callback?: msRest.ServiceCallback<Models.V1ComponentStatus>): Promise<Models.ReadCoreV1ComponentStatusResponse> {
    return this.sendOperationRequest(
      {
        name,
        options
      },
      readCoreV1ComponentStatusOperationSpec,
      callback) as Promise<Models.ReadCoreV1ComponentStatusResponse>;
  }

  /**
   * list or watch objects of kind ConfigMap
   * @param [options] The optional parameters
   * @returns Promise<Models.ListCoreV1ConfigMapForAllNamespacesResponse>
   */
  listCoreV1ConfigMapForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListCoreV1ConfigMapForAllNamespacesOptionalParams): Promise<Models.ListCoreV1ConfigMapForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  listCoreV1ConfigMapForAllNamespaces(callback: msRest.ServiceCallback<Models.V1ConfigMapList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listCoreV1ConfigMapForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesListCoreV1ConfigMapForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1ConfigMapList>): void;
  listCoreV1ConfigMapForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListCoreV1ConfigMapForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1ConfigMapList>, callback?: msRest.ServiceCallback<Models.V1ConfigMapList>): Promise<Models.ListCoreV1ConfigMapForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listCoreV1ConfigMapForAllNamespacesOperationSpec,
      callback) as Promise<Models.ListCoreV1ConfigMapForAllNamespacesResponse>;
  }

  /**
   * list or watch objects of kind Endpoints
   * @param [options] The optional parameters
   * @returns Promise<Models.ListCoreV1EndpointsForAllNamespacesResponse>
   */
  listCoreV1EndpointsForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListCoreV1EndpointsForAllNamespacesOptionalParams): Promise<Models.ListCoreV1EndpointsForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  listCoreV1EndpointsForAllNamespaces(callback: msRest.ServiceCallback<Models.V1EndpointsList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listCoreV1EndpointsForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesListCoreV1EndpointsForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1EndpointsList>): void;
  listCoreV1EndpointsForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListCoreV1EndpointsForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1EndpointsList>, callback?: msRest.ServiceCallback<Models.V1EndpointsList>): Promise<Models.ListCoreV1EndpointsForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listCoreV1EndpointsForAllNamespacesOperationSpec,
      callback) as Promise<Models.ListCoreV1EndpointsForAllNamespacesResponse>;
  }

  /**
   * list or watch objects of kind Event
   * @param [options] The optional parameters
   * @returns Promise<Models.ListCoreV1EventForAllNamespacesResponse>
   */
  listCoreV1EventForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListCoreV1EventForAllNamespacesOptionalParams): Promise<Models.ListCoreV1EventForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  listCoreV1EventForAllNamespaces(callback: msRest.ServiceCallback<Models.V1EventList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listCoreV1EventForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesListCoreV1EventForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1EventList>): void;
  listCoreV1EventForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListCoreV1EventForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1EventList>, callback?: msRest.ServiceCallback<Models.V1EventList>): Promise<Models.ListCoreV1EventForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listCoreV1EventForAllNamespacesOperationSpec,
      callback) as Promise<Models.ListCoreV1EventForAllNamespacesResponse>;
  }

  /**
   * list or watch objects of kind LimitRange
   * @param [options] The optional parameters
   * @returns Promise<Models.ListCoreV1LimitRangeForAllNamespacesResponse>
   */
  listCoreV1LimitRangeForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListCoreV1LimitRangeForAllNamespacesOptionalParams): Promise<Models.ListCoreV1LimitRangeForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  listCoreV1LimitRangeForAllNamespaces(callback: msRest.ServiceCallback<Models.V1LimitRangeList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listCoreV1LimitRangeForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesListCoreV1LimitRangeForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1LimitRangeList>): void;
  listCoreV1LimitRangeForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListCoreV1LimitRangeForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1LimitRangeList>, callback?: msRest.ServiceCallback<Models.V1LimitRangeList>): Promise<Models.ListCoreV1LimitRangeForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listCoreV1LimitRangeForAllNamespacesOperationSpec,
      callback) as Promise<Models.ListCoreV1LimitRangeForAllNamespacesResponse>;
  }

  /**
   * list or watch objects of kind Namespace
   * @param [options] The optional parameters
   * @returns Promise<Models.ListCoreV1NamespaceResponse>
   */
  listCoreV1Namespace(options?: Models.OpenShiftAPIwithKubernetesListCoreV1NamespaceOptionalParams): Promise<Models.ListCoreV1NamespaceResponse>;
  /**
   * @param callback The callback
   */
  listCoreV1Namespace(callback: msRest.ServiceCallback<Models.V1NamespaceList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listCoreV1Namespace(options: Models.OpenShiftAPIwithKubernetesListCoreV1NamespaceOptionalParams, callback: msRest.ServiceCallback<Models.V1NamespaceList>): void;
  listCoreV1Namespace(options?: Models.OpenShiftAPIwithKubernetesListCoreV1NamespaceOptionalParams | msRest.ServiceCallback<Models.V1NamespaceList>, callback?: msRest.ServiceCallback<Models.V1NamespaceList>): Promise<Models.ListCoreV1NamespaceResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listCoreV1NamespaceOperationSpec,
      callback) as Promise<Models.ListCoreV1NamespaceResponse>;
  }

  /**
   * create a Namespace
   * @param body
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateCoreV1NamespaceResponse>
   */
  createCoreV1Namespace(body: Models.V1Namespace, options?: Models.OpenShiftAPIwithKubernetesCreateCoreV1NamespaceOptionalParams): Promise<Models.CreateCoreV1NamespaceResponse>;
  /**
   * @param body
   * @param callback The callback
   */
  createCoreV1Namespace(body: Models.V1Namespace, callback: msRest.ServiceCallback<Models.V1Namespace>): void;
  /**
   * @param body
   * @param options The optional parameters
   * @param callback The callback
   */
  createCoreV1Namespace(body: Models.V1Namespace, options: Models.OpenShiftAPIwithKubernetesCreateCoreV1NamespaceOptionalParams, callback: msRest.ServiceCallback<Models.V1Namespace>): void;
  createCoreV1Namespace(body: Models.V1Namespace, options?: Models.OpenShiftAPIwithKubernetesCreateCoreV1NamespaceOptionalParams | msRest.ServiceCallback<Models.V1Namespace>, callback?: msRest.ServiceCallback<Models.V1Namespace>): Promise<Models.CreateCoreV1NamespaceResponse> {
    return this.sendOperationRequest(
      {
        body,
        options
      },
      createCoreV1NamespaceOperationSpec,
      callback) as Promise<Models.CreateCoreV1NamespaceResponse>;
  }

  /**
   * create a Binding
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateCoreV1NamespacedBindingResponse>
   */
  createCoreV1NamespacedBinding(body: Models.V1Binding, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateCoreV1NamespacedBindingOptionalParams): Promise<Models.CreateCoreV1NamespacedBindingResponse>;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  createCoreV1NamespacedBinding(body: Models.V1Binding, namespace: string, callback: msRest.ServiceCallback<Models.V1Binding>): void;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  createCoreV1NamespacedBinding(body: Models.V1Binding, namespace: string, options: Models.OpenShiftAPIwithKubernetesCreateCoreV1NamespacedBindingOptionalParams, callback: msRest.ServiceCallback<Models.V1Binding>): void;
  createCoreV1NamespacedBinding(body: Models.V1Binding, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateCoreV1NamespacedBindingOptionalParams | msRest.ServiceCallback<Models.V1Binding>, callback?: msRest.ServiceCallback<Models.V1Binding>): Promise<Models.CreateCoreV1NamespacedBindingResponse> {
    return this.sendOperationRequest(
      {
        body,
        namespace,
        options
      },
      createCoreV1NamespacedBindingOperationSpec,
      callback) as Promise<Models.CreateCoreV1NamespacedBindingResponse>;
  }

  /**
   * list or watch objects of kind ConfigMap
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ListCoreV1NamespacedConfigMapResponse>
   */
  listCoreV1NamespacedConfigMap(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListCoreV1NamespacedConfigMapOptionalParams): Promise<Models.ListCoreV1NamespacedConfigMapResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  listCoreV1NamespacedConfigMap(namespace: string, callback: msRest.ServiceCallback<Models.V1ConfigMapList>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  listCoreV1NamespacedConfigMap(namespace: string, options: Models.OpenShiftAPIwithKubernetesListCoreV1NamespacedConfigMapOptionalParams, callback: msRest.ServiceCallback<Models.V1ConfigMapList>): void;
  listCoreV1NamespacedConfigMap(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListCoreV1NamespacedConfigMapOptionalParams | msRest.ServiceCallback<Models.V1ConfigMapList>, callback?: msRest.ServiceCallback<Models.V1ConfigMapList>): Promise<Models.ListCoreV1NamespacedConfigMapResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      listCoreV1NamespacedConfigMapOperationSpec,
      callback) as Promise<Models.ListCoreV1NamespacedConfigMapResponse>;
  }

  /**
   * create a ConfigMap
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateCoreV1NamespacedConfigMapResponse>
   */
  createCoreV1NamespacedConfigMap(body: Models.V1ConfigMap, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateCoreV1NamespacedConfigMapOptionalParams): Promise<Models.CreateCoreV1NamespacedConfigMapResponse>;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  createCoreV1NamespacedConfigMap(body: Models.V1ConfigMap, namespace: string, callback: msRest.ServiceCallback<Models.V1ConfigMap>): void;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  createCoreV1NamespacedConfigMap(body: Models.V1ConfigMap, namespace: string, options: Models.OpenShiftAPIwithKubernetesCreateCoreV1NamespacedConfigMapOptionalParams, callback: msRest.ServiceCallback<Models.V1ConfigMap>): void;
  createCoreV1NamespacedConfigMap(body: Models.V1ConfigMap, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateCoreV1NamespacedConfigMapOptionalParams | msRest.ServiceCallback<Models.V1ConfigMap>, callback?: msRest.ServiceCallback<Models.V1ConfigMap>): Promise<Models.CreateCoreV1NamespacedConfigMapResponse> {
    return this.sendOperationRequest(
      {
        body,
        namespace,
        options
      },
      createCoreV1NamespacedConfigMapOperationSpec,
      callback) as Promise<Models.CreateCoreV1NamespacedConfigMapResponse>;
  }

  /**
   * delete collection of ConfigMap
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteCoreV1CollectionNamespacedConfigMapResponse>
   */
  deleteCoreV1CollectionNamespacedConfigMap(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteCoreV1CollectionNamespacedConfigMapOptionalParams): Promise<Models.DeleteCoreV1CollectionNamespacedConfigMapResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteCoreV1CollectionNamespacedConfigMap(namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteCoreV1CollectionNamespacedConfigMap(namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteCoreV1CollectionNamespacedConfigMapOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteCoreV1CollectionNamespacedConfigMap(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteCoreV1CollectionNamespacedConfigMapOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteCoreV1CollectionNamespacedConfigMapResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      deleteCoreV1CollectionNamespacedConfigMapOperationSpec,
      callback) as Promise<Models.DeleteCoreV1CollectionNamespacedConfigMapResponse>;
  }

  /**
   * read the specified ConfigMap
   * @param name name of the ConfigMap
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadCoreV1NamespacedConfigMapResponse>
   */
  readCoreV1NamespacedConfigMap(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadCoreV1NamespacedConfigMapOptionalParams): Promise<Models.ReadCoreV1NamespacedConfigMapResponse>;
  /**
   * @param name name of the ConfigMap
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readCoreV1NamespacedConfigMap(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1ConfigMap>): void;
  /**
   * @param name name of the ConfigMap
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readCoreV1NamespacedConfigMap(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadCoreV1NamespacedConfigMapOptionalParams, callback: msRest.ServiceCallback<Models.V1ConfigMap>): void;
  readCoreV1NamespacedConfigMap(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadCoreV1NamespacedConfigMapOptionalParams | msRest.ServiceCallback<Models.V1ConfigMap>, callback?: msRest.ServiceCallback<Models.V1ConfigMap>): Promise<Models.ReadCoreV1NamespacedConfigMapResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readCoreV1NamespacedConfigMapOperationSpec,
      callback) as Promise<Models.ReadCoreV1NamespacedConfigMapResponse>;
  }

  /**
   * replace the specified ConfigMap
   * @param body
   * @param name name of the ConfigMap
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceCoreV1NamespacedConfigMapResponse>
   */
  replaceCoreV1NamespacedConfigMap(body: Models.V1ConfigMap, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceCoreV1NamespacedConfigMapOptionalParams): Promise<Models.ReplaceCoreV1NamespacedConfigMapResponse>;
  /**
   * @param body
   * @param name name of the ConfigMap
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replaceCoreV1NamespacedConfigMap(body: Models.V1ConfigMap, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1ConfigMap>): void;
  /**
   * @param body
   * @param name name of the ConfigMap
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceCoreV1NamespacedConfigMap(body: Models.V1ConfigMap, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplaceCoreV1NamespacedConfigMapOptionalParams, callback: msRest.ServiceCallback<Models.V1ConfigMap>): void;
  replaceCoreV1NamespacedConfigMap(body: Models.V1ConfigMap, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceCoreV1NamespacedConfigMapOptionalParams | msRest.ServiceCallback<Models.V1ConfigMap>, callback?: msRest.ServiceCallback<Models.V1ConfigMap>): Promise<Models.ReplaceCoreV1NamespacedConfigMapResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replaceCoreV1NamespacedConfigMapOperationSpec,
      callback) as Promise<Models.ReplaceCoreV1NamespacedConfigMapResponse>;
  }

  /**
   * delete a ConfigMap
   * @param body
   * @param name name of the ConfigMap
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteCoreV1NamespacedConfigMapResponse>
   */
  deleteCoreV1NamespacedConfigMap(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteCoreV1NamespacedConfigMapOptionalParams): Promise<Models.DeleteCoreV1NamespacedConfigMapResponse>;
  /**
   * @param body
   * @param name name of the ConfigMap
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteCoreV1NamespacedConfigMap(body: Models.V1DeleteOptions, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param name name of the ConfigMap
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteCoreV1NamespacedConfigMap(body: Models.V1DeleteOptions, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteCoreV1NamespacedConfigMapOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteCoreV1NamespacedConfigMap(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteCoreV1NamespacedConfigMapOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteCoreV1NamespacedConfigMapResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      deleteCoreV1NamespacedConfigMapOperationSpec,
      callback) as Promise<Models.DeleteCoreV1NamespacedConfigMapResponse>;
  }

  /**
   * partially update the specified ConfigMap
   * @param body
   * @param name name of the ConfigMap
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchCoreV1NamespacedConfigMapResponse>
   */
  patchCoreV1NamespacedConfigMap(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchCoreV1NamespacedConfigMapOptionalParams): Promise<Models.PatchCoreV1NamespacedConfigMapResponse>;
  /**
   * @param body
   * @param name name of the ConfigMap
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  patchCoreV1NamespacedConfigMap(body: any, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1ConfigMap>): void;
  /**
   * @param body
   * @param name name of the ConfigMap
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  patchCoreV1NamespacedConfigMap(body: any, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesPatchCoreV1NamespacedConfigMapOptionalParams, callback: msRest.ServiceCallback<Models.V1ConfigMap>): void;
  patchCoreV1NamespacedConfigMap(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchCoreV1NamespacedConfigMapOptionalParams | msRest.ServiceCallback<Models.V1ConfigMap>, callback?: msRest.ServiceCallback<Models.V1ConfigMap>): Promise<Models.PatchCoreV1NamespacedConfigMapResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      patchCoreV1NamespacedConfigMapOperationSpec,
      callback) as Promise<Models.PatchCoreV1NamespacedConfigMapResponse>;
  }

  /**
   * list or watch objects of kind Endpoints
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ListCoreV1NamespacedEndpointsResponse>
   */
  listCoreV1NamespacedEndpoints(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListCoreV1NamespacedEndpointsOptionalParams): Promise<Models.ListCoreV1NamespacedEndpointsResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  listCoreV1NamespacedEndpoints(namespace: string, callback: msRest.ServiceCallback<Models.V1EndpointsList>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  listCoreV1NamespacedEndpoints(namespace: string, options: Models.OpenShiftAPIwithKubernetesListCoreV1NamespacedEndpointsOptionalParams, callback: msRest.ServiceCallback<Models.V1EndpointsList>): void;
  listCoreV1NamespacedEndpoints(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListCoreV1NamespacedEndpointsOptionalParams | msRest.ServiceCallback<Models.V1EndpointsList>, callback?: msRest.ServiceCallback<Models.V1EndpointsList>): Promise<Models.ListCoreV1NamespacedEndpointsResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      listCoreV1NamespacedEndpointsOperationSpec,
      callback) as Promise<Models.ListCoreV1NamespacedEndpointsResponse>;
  }

  /**
   * create Endpoints
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateCoreV1NamespacedEndpointsResponse>
   */
  createCoreV1NamespacedEndpoints(body: Models.V1Endpoints, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateCoreV1NamespacedEndpointsOptionalParams): Promise<Models.CreateCoreV1NamespacedEndpointsResponse>;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  createCoreV1NamespacedEndpoints(body: Models.V1Endpoints, namespace: string, callback: msRest.ServiceCallback<Models.V1Endpoints>): void;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  createCoreV1NamespacedEndpoints(body: Models.V1Endpoints, namespace: string, options: Models.OpenShiftAPIwithKubernetesCreateCoreV1NamespacedEndpointsOptionalParams, callback: msRest.ServiceCallback<Models.V1Endpoints>): void;
  createCoreV1NamespacedEndpoints(body: Models.V1Endpoints, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateCoreV1NamespacedEndpointsOptionalParams | msRest.ServiceCallback<Models.V1Endpoints>, callback?: msRest.ServiceCallback<Models.V1Endpoints>): Promise<Models.CreateCoreV1NamespacedEndpointsResponse> {
    return this.sendOperationRequest(
      {
        body,
        namespace,
        options
      },
      createCoreV1NamespacedEndpointsOperationSpec,
      callback) as Promise<Models.CreateCoreV1NamespacedEndpointsResponse>;
  }

  /**
   * delete collection of Endpoints
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteCoreV1CollectionNamespacedEndpointsResponse>
   */
  deleteCoreV1CollectionNamespacedEndpoints(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteCoreV1CollectionNamespacedEndpointsOptionalParams): Promise<Models.DeleteCoreV1CollectionNamespacedEndpointsResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteCoreV1CollectionNamespacedEndpoints(namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteCoreV1CollectionNamespacedEndpoints(namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteCoreV1CollectionNamespacedEndpointsOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteCoreV1CollectionNamespacedEndpoints(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteCoreV1CollectionNamespacedEndpointsOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteCoreV1CollectionNamespacedEndpointsResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      deleteCoreV1CollectionNamespacedEndpointsOperationSpec,
      callback) as Promise<Models.DeleteCoreV1CollectionNamespacedEndpointsResponse>;
  }

  /**
   * read the specified Endpoints
   * @param name name of the Endpoints
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadCoreV1NamespacedEndpointsResponse>
   */
  readCoreV1NamespacedEndpoints(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadCoreV1NamespacedEndpointsOptionalParams): Promise<Models.ReadCoreV1NamespacedEndpointsResponse>;
  /**
   * @param name name of the Endpoints
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readCoreV1NamespacedEndpoints(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Endpoints>): void;
  /**
   * @param name name of the Endpoints
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readCoreV1NamespacedEndpoints(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadCoreV1NamespacedEndpointsOptionalParams, callback: msRest.ServiceCallback<Models.V1Endpoints>): void;
  readCoreV1NamespacedEndpoints(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadCoreV1NamespacedEndpointsOptionalParams | msRest.ServiceCallback<Models.V1Endpoints>, callback?: msRest.ServiceCallback<Models.V1Endpoints>): Promise<Models.ReadCoreV1NamespacedEndpointsResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readCoreV1NamespacedEndpointsOperationSpec,
      callback) as Promise<Models.ReadCoreV1NamespacedEndpointsResponse>;
  }

  /**
   * replace the specified Endpoints
   * @param body
   * @param name name of the Endpoints
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceCoreV1NamespacedEndpointsResponse>
   */
  replaceCoreV1NamespacedEndpoints(body: Models.V1Endpoints, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceCoreV1NamespacedEndpointsOptionalParams): Promise<Models.ReplaceCoreV1NamespacedEndpointsResponse>;
  /**
   * @param body
   * @param name name of the Endpoints
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replaceCoreV1NamespacedEndpoints(body: Models.V1Endpoints, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Endpoints>): void;
  /**
   * @param body
   * @param name name of the Endpoints
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceCoreV1NamespacedEndpoints(body: Models.V1Endpoints, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplaceCoreV1NamespacedEndpointsOptionalParams, callback: msRest.ServiceCallback<Models.V1Endpoints>): void;
  replaceCoreV1NamespacedEndpoints(body: Models.V1Endpoints, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceCoreV1NamespacedEndpointsOptionalParams | msRest.ServiceCallback<Models.V1Endpoints>, callback?: msRest.ServiceCallback<Models.V1Endpoints>): Promise<Models.ReplaceCoreV1NamespacedEndpointsResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replaceCoreV1NamespacedEndpointsOperationSpec,
      callback) as Promise<Models.ReplaceCoreV1NamespacedEndpointsResponse>;
  }

  /**
   * delete Endpoints
   * @param body
   * @param name name of the Endpoints
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteCoreV1NamespacedEndpointsResponse>
   */
  deleteCoreV1NamespacedEndpoints(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteCoreV1NamespacedEndpointsOptionalParams): Promise<Models.DeleteCoreV1NamespacedEndpointsResponse>;
  /**
   * @param body
   * @param name name of the Endpoints
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteCoreV1NamespacedEndpoints(body: Models.V1DeleteOptions, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param name name of the Endpoints
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteCoreV1NamespacedEndpoints(body: Models.V1DeleteOptions, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteCoreV1NamespacedEndpointsOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteCoreV1NamespacedEndpoints(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteCoreV1NamespacedEndpointsOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteCoreV1NamespacedEndpointsResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      deleteCoreV1NamespacedEndpointsOperationSpec,
      callback) as Promise<Models.DeleteCoreV1NamespacedEndpointsResponse>;
  }

  /**
   * partially update the specified Endpoints
   * @param body
   * @param name name of the Endpoints
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchCoreV1NamespacedEndpointsResponse>
   */
  patchCoreV1NamespacedEndpoints(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchCoreV1NamespacedEndpointsOptionalParams): Promise<Models.PatchCoreV1NamespacedEndpointsResponse>;
  /**
   * @param body
   * @param name name of the Endpoints
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  patchCoreV1NamespacedEndpoints(body: any, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Endpoints>): void;
  /**
   * @param body
   * @param name name of the Endpoints
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  patchCoreV1NamespacedEndpoints(body: any, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesPatchCoreV1NamespacedEndpointsOptionalParams, callback: msRest.ServiceCallback<Models.V1Endpoints>): void;
  patchCoreV1NamespacedEndpoints(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchCoreV1NamespacedEndpointsOptionalParams | msRest.ServiceCallback<Models.V1Endpoints>, callback?: msRest.ServiceCallback<Models.V1Endpoints>): Promise<Models.PatchCoreV1NamespacedEndpointsResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      patchCoreV1NamespacedEndpointsOperationSpec,
      callback) as Promise<Models.PatchCoreV1NamespacedEndpointsResponse>;
  }

  /**
   * list or watch objects of kind Event
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ListCoreV1NamespacedEventResponse>
   */
  listCoreV1NamespacedEvent(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListCoreV1NamespacedEventOptionalParams): Promise<Models.ListCoreV1NamespacedEventResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  listCoreV1NamespacedEvent(namespace: string, callback: msRest.ServiceCallback<Models.V1EventList>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  listCoreV1NamespacedEvent(namespace: string, options: Models.OpenShiftAPIwithKubernetesListCoreV1NamespacedEventOptionalParams, callback: msRest.ServiceCallback<Models.V1EventList>): void;
  listCoreV1NamespacedEvent(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListCoreV1NamespacedEventOptionalParams | msRest.ServiceCallback<Models.V1EventList>, callback?: msRest.ServiceCallback<Models.V1EventList>): Promise<Models.ListCoreV1NamespacedEventResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      listCoreV1NamespacedEventOperationSpec,
      callback) as Promise<Models.ListCoreV1NamespacedEventResponse>;
  }

  /**
   * create an Event
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateCoreV1NamespacedEventResponse>
   */
  createCoreV1NamespacedEvent(body: Models.V1Event, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateCoreV1NamespacedEventOptionalParams): Promise<Models.CreateCoreV1NamespacedEventResponse>;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  createCoreV1NamespacedEvent(body: Models.V1Event, namespace: string, callback: msRest.ServiceCallback<Models.V1Event>): void;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  createCoreV1NamespacedEvent(body: Models.V1Event, namespace: string, options: Models.OpenShiftAPIwithKubernetesCreateCoreV1NamespacedEventOptionalParams, callback: msRest.ServiceCallback<Models.V1Event>): void;
  createCoreV1NamespacedEvent(body: Models.V1Event, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateCoreV1NamespacedEventOptionalParams | msRest.ServiceCallback<Models.V1Event>, callback?: msRest.ServiceCallback<Models.V1Event>): Promise<Models.CreateCoreV1NamespacedEventResponse> {
    return this.sendOperationRequest(
      {
        body,
        namespace,
        options
      },
      createCoreV1NamespacedEventOperationSpec,
      callback) as Promise<Models.CreateCoreV1NamespacedEventResponse>;
  }

  /**
   * delete collection of Event
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteCoreV1CollectionNamespacedEventResponse>
   */
  deleteCoreV1CollectionNamespacedEvent(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteCoreV1CollectionNamespacedEventOptionalParams): Promise<Models.DeleteCoreV1CollectionNamespacedEventResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteCoreV1CollectionNamespacedEvent(namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteCoreV1CollectionNamespacedEvent(namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteCoreV1CollectionNamespacedEventOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteCoreV1CollectionNamespacedEvent(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteCoreV1CollectionNamespacedEventOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteCoreV1CollectionNamespacedEventResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      deleteCoreV1CollectionNamespacedEventOperationSpec,
      callback) as Promise<Models.DeleteCoreV1CollectionNamespacedEventResponse>;
  }

  /**
   * read the specified Event
   * @param name name of the Event
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadCoreV1NamespacedEventResponse>
   */
  readCoreV1NamespacedEvent(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadCoreV1NamespacedEventOptionalParams): Promise<Models.ReadCoreV1NamespacedEventResponse>;
  /**
   * @param name name of the Event
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readCoreV1NamespacedEvent(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Event>): void;
  /**
   * @param name name of the Event
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readCoreV1NamespacedEvent(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadCoreV1NamespacedEventOptionalParams, callback: msRest.ServiceCallback<Models.V1Event>): void;
  readCoreV1NamespacedEvent(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadCoreV1NamespacedEventOptionalParams | msRest.ServiceCallback<Models.V1Event>, callback?: msRest.ServiceCallback<Models.V1Event>): Promise<Models.ReadCoreV1NamespacedEventResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readCoreV1NamespacedEventOperationSpec,
      callback) as Promise<Models.ReadCoreV1NamespacedEventResponse>;
  }

  /**
   * replace the specified Event
   * @param body
   * @param name name of the Event
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceCoreV1NamespacedEventResponse>
   */
  replaceCoreV1NamespacedEvent(body: Models.V1Event, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceCoreV1NamespacedEventOptionalParams): Promise<Models.ReplaceCoreV1NamespacedEventResponse>;
  /**
   * @param body
   * @param name name of the Event
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replaceCoreV1NamespacedEvent(body: Models.V1Event, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Event>): void;
  /**
   * @param body
   * @param name name of the Event
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceCoreV1NamespacedEvent(body: Models.V1Event, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplaceCoreV1NamespacedEventOptionalParams, callback: msRest.ServiceCallback<Models.V1Event>): void;
  replaceCoreV1NamespacedEvent(body: Models.V1Event, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceCoreV1NamespacedEventOptionalParams | msRest.ServiceCallback<Models.V1Event>, callback?: msRest.ServiceCallback<Models.V1Event>): Promise<Models.ReplaceCoreV1NamespacedEventResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replaceCoreV1NamespacedEventOperationSpec,
      callback) as Promise<Models.ReplaceCoreV1NamespacedEventResponse>;
  }

  /**
   * delete an Event
   * @param body
   * @param name name of the Event
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteCoreV1NamespacedEventResponse>
   */
  deleteCoreV1NamespacedEvent(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteCoreV1NamespacedEventOptionalParams): Promise<Models.DeleteCoreV1NamespacedEventResponse>;
  /**
   * @param body
   * @param name name of the Event
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteCoreV1NamespacedEvent(body: Models.V1DeleteOptions, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param name name of the Event
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteCoreV1NamespacedEvent(body: Models.V1DeleteOptions, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteCoreV1NamespacedEventOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteCoreV1NamespacedEvent(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteCoreV1NamespacedEventOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteCoreV1NamespacedEventResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      deleteCoreV1NamespacedEventOperationSpec,
      callback) as Promise<Models.DeleteCoreV1NamespacedEventResponse>;
  }

  /**
   * partially update the specified Event
   * @param body
   * @param name name of the Event
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchCoreV1NamespacedEventResponse>
   */
  patchCoreV1NamespacedEvent(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchCoreV1NamespacedEventOptionalParams): Promise<Models.PatchCoreV1NamespacedEventResponse>;
  /**
   * @param body
   * @param name name of the Event
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  patchCoreV1NamespacedEvent(body: any, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Event>): void;
  /**
   * @param body
   * @param name name of the Event
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  patchCoreV1NamespacedEvent(body: any, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesPatchCoreV1NamespacedEventOptionalParams, callback: msRest.ServiceCallback<Models.V1Event>): void;
  patchCoreV1NamespacedEvent(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchCoreV1NamespacedEventOptionalParams | msRest.ServiceCallback<Models.V1Event>, callback?: msRest.ServiceCallback<Models.V1Event>): Promise<Models.PatchCoreV1NamespacedEventResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      patchCoreV1NamespacedEventOperationSpec,
      callback) as Promise<Models.PatchCoreV1NamespacedEventResponse>;
  }

  /**
   * list or watch objects of kind LimitRange
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ListCoreV1NamespacedLimitRangeResponse>
   */
  listCoreV1NamespacedLimitRange(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListCoreV1NamespacedLimitRangeOptionalParams): Promise<Models.ListCoreV1NamespacedLimitRangeResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  listCoreV1NamespacedLimitRange(namespace: string, callback: msRest.ServiceCallback<Models.V1LimitRangeList>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  listCoreV1NamespacedLimitRange(namespace: string, options: Models.OpenShiftAPIwithKubernetesListCoreV1NamespacedLimitRangeOptionalParams, callback: msRest.ServiceCallback<Models.V1LimitRangeList>): void;
  listCoreV1NamespacedLimitRange(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListCoreV1NamespacedLimitRangeOptionalParams | msRest.ServiceCallback<Models.V1LimitRangeList>, callback?: msRest.ServiceCallback<Models.V1LimitRangeList>): Promise<Models.ListCoreV1NamespacedLimitRangeResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      listCoreV1NamespacedLimitRangeOperationSpec,
      callback) as Promise<Models.ListCoreV1NamespacedLimitRangeResponse>;
  }

  /**
   * create a LimitRange
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateCoreV1NamespacedLimitRangeResponse>
   */
  createCoreV1NamespacedLimitRange(body: Models.V1LimitRange, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateCoreV1NamespacedLimitRangeOptionalParams): Promise<Models.CreateCoreV1NamespacedLimitRangeResponse>;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  createCoreV1NamespacedLimitRange(body: Models.V1LimitRange, namespace: string, callback: msRest.ServiceCallback<Models.V1LimitRange>): void;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  createCoreV1NamespacedLimitRange(body: Models.V1LimitRange, namespace: string, options: Models.OpenShiftAPIwithKubernetesCreateCoreV1NamespacedLimitRangeOptionalParams, callback: msRest.ServiceCallback<Models.V1LimitRange>): void;
  createCoreV1NamespacedLimitRange(body: Models.V1LimitRange, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateCoreV1NamespacedLimitRangeOptionalParams | msRest.ServiceCallback<Models.V1LimitRange>, callback?: msRest.ServiceCallback<Models.V1LimitRange>): Promise<Models.CreateCoreV1NamespacedLimitRangeResponse> {
    return this.sendOperationRequest(
      {
        body,
        namespace,
        options
      },
      createCoreV1NamespacedLimitRangeOperationSpec,
      callback) as Promise<Models.CreateCoreV1NamespacedLimitRangeResponse>;
  }

  /**
   * delete collection of LimitRange
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteCoreV1CollectionNamespacedLimitRangeResponse>
   */
  deleteCoreV1CollectionNamespacedLimitRange(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteCoreV1CollectionNamespacedLimitRangeOptionalParams): Promise<Models.DeleteCoreV1CollectionNamespacedLimitRangeResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteCoreV1CollectionNamespacedLimitRange(namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteCoreV1CollectionNamespacedLimitRange(namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteCoreV1CollectionNamespacedLimitRangeOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteCoreV1CollectionNamespacedLimitRange(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteCoreV1CollectionNamespacedLimitRangeOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteCoreV1CollectionNamespacedLimitRangeResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      deleteCoreV1CollectionNamespacedLimitRangeOperationSpec,
      callback) as Promise<Models.DeleteCoreV1CollectionNamespacedLimitRangeResponse>;
  }

  /**
   * read the specified LimitRange
   * @param name name of the LimitRange
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadCoreV1NamespacedLimitRangeResponse>
   */
  readCoreV1NamespacedLimitRange(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadCoreV1NamespacedLimitRangeOptionalParams): Promise<Models.ReadCoreV1NamespacedLimitRangeResponse>;
  /**
   * @param name name of the LimitRange
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readCoreV1NamespacedLimitRange(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1LimitRange>): void;
  /**
   * @param name name of the LimitRange
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readCoreV1NamespacedLimitRange(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadCoreV1NamespacedLimitRangeOptionalParams, callback: msRest.ServiceCallback<Models.V1LimitRange>): void;
  readCoreV1NamespacedLimitRange(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadCoreV1NamespacedLimitRangeOptionalParams | msRest.ServiceCallback<Models.V1LimitRange>, callback?: msRest.ServiceCallback<Models.V1LimitRange>): Promise<Models.ReadCoreV1NamespacedLimitRangeResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readCoreV1NamespacedLimitRangeOperationSpec,
      callback) as Promise<Models.ReadCoreV1NamespacedLimitRangeResponse>;
  }

  /**
   * replace the specified LimitRange
   * @param body
   * @param name name of the LimitRange
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceCoreV1NamespacedLimitRangeResponse>
   */
  replaceCoreV1NamespacedLimitRange(body: Models.V1LimitRange, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceCoreV1NamespacedLimitRangeOptionalParams): Promise<Models.ReplaceCoreV1NamespacedLimitRangeResponse>;
  /**
   * @param body
   * @param name name of the LimitRange
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replaceCoreV1NamespacedLimitRange(body: Models.V1LimitRange, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1LimitRange>): void;
  /**
   * @param body
   * @param name name of the LimitRange
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceCoreV1NamespacedLimitRange(body: Models.V1LimitRange, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplaceCoreV1NamespacedLimitRangeOptionalParams, callback: msRest.ServiceCallback<Models.V1LimitRange>): void;
  replaceCoreV1NamespacedLimitRange(body: Models.V1LimitRange, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceCoreV1NamespacedLimitRangeOptionalParams | msRest.ServiceCallback<Models.V1LimitRange>, callback?: msRest.ServiceCallback<Models.V1LimitRange>): Promise<Models.ReplaceCoreV1NamespacedLimitRangeResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replaceCoreV1NamespacedLimitRangeOperationSpec,
      callback) as Promise<Models.ReplaceCoreV1NamespacedLimitRangeResponse>;
  }

  /**
   * delete a LimitRange
   * @param body
   * @param name name of the LimitRange
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteCoreV1NamespacedLimitRangeResponse>
   */
  deleteCoreV1NamespacedLimitRange(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteCoreV1NamespacedLimitRangeOptionalParams): Promise<Models.DeleteCoreV1NamespacedLimitRangeResponse>;
  /**
   * @param body
   * @param name name of the LimitRange
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteCoreV1NamespacedLimitRange(body: Models.V1DeleteOptions, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param name name of the LimitRange
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteCoreV1NamespacedLimitRange(body: Models.V1DeleteOptions, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteCoreV1NamespacedLimitRangeOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteCoreV1NamespacedLimitRange(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteCoreV1NamespacedLimitRangeOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteCoreV1NamespacedLimitRangeResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      deleteCoreV1NamespacedLimitRangeOperationSpec,
      callback) as Promise<Models.DeleteCoreV1NamespacedLimitRangeResponse>;
  }

  /**
   * partially update the specified LimitRange
   * @param body
   * @param name name of the LimitRange
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchCoreV1NamespacedLimitRangeResponse>
   */
  patchCoreV1NamespacedLimitRange(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchCoreV1NamespacedLimitRangeOptionalParams): Promise<Models.PatchCoreV1NamespacedLimitRangeResponse>;
  /**
   * @param body
   * @param name name of the LimitRange
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  patchCoreV1NamespacedLimitRange(body: any, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1LimitRange>): void;
  /**
   * @param body
   * @param name name of the LimitRange
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  patchCoreV1NamespacedLimitRange(body: any, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesPatchCoreV1NamespacedLimitRangeOptionalParams, callback: msRest.ServiceCallback<Models.V1LimitRange>): void;
  patchCoreV1NamespacedLimitRange(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchCoreV1NamespacedLimitRangeOptionalParams | msRest.ServiceCallback<Models.V1LimitRange>, callback?: msRest.ServiceCallback<Models.V1LimitRange>): Promise<Models.PatchCoreV1NamespacedLimitRangeResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      patchCoreV1NamespacedLimitRangeOperationSpec,
      callback) as Promise<Models.PatchCoreV1NamespacedLimitRangeResponse>;
  }

  /**
   * list or watch objects of kind PersistentVolumeClaim
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ListCoreV1NamespacedPersistentVolumeClaimResponse>
   */
  listCoreV1NamespacedPersistentVolumeClaim(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListCoreV1NamespacedPersistentVolumeClaimOptionalParams): Promise<Models.ListCoreV1NamespacedPersistentVolumeClaimResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  listCoreV1NamespacedPersistentVolumeClaim(namespace: string, callback: msRest.ServiceCallback<Models.V1PersistentVolumeClaimList>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  listCoreV1NamespacedPersistentVolumeClaim(namespace: string, options: Models.OpenShiftAPIwithKubernetesListCoreV1NamespacedPersistentVolumeClaimOptionalParams, callback: msRest.ServiceCallback<Models.V1PersistentVolumeClaimList>): void;
  listCoreV1NamespacedPersistentVolumeClaim(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListCoreV1NamespacedPersistentVolumeClaimOptionalParams | msRest.ServiceCallback<Models.V1PersistentVolumeClaimList>, callback?: msRest.ServiceCallback<Models.V1PersistentVolumeClaimList>): Promise<Models.ListCoreV1NamespacedPersistentVolumeClaimResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      listCoreV1NamespacedPersistentVolumeClaimOperationSpec,
      callback) as Promise<Models.ListCoreV1NamespacedPersistentVolumeClaimResponse>;
  }

  /**
   * create a PersistentVolumeClaim
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateCoreV1NamespacedPersistentVolumeClaimResponse>
   */
  createCoreV1NamespacedPersistentVolumeClaim(body: Models.V1PersistentVolumeClaim, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateCoreV1NamespacedPersistentVolumeClaimOptionalParams): Promise<Models.CreateCoreV1NamespacedPersistentVolumeClaimResponse>;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  createCoreV1NamespacedPersistentVolumeClaim(body: Models.V1PersistentVolumeClaim, namespace: string, callback: msRest.ServiceCallback<Models.V1PersistentVolumeClaim>): void;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  createCoreV1NamespacedPersistentVolumeClaim(body: Models.V1PersistentVolumeClaim, namespace: string, options: Models.OpenShiftAPIwithKubernetesCreateCoreV1NamespacedPersistentVolumeClaimOptionalParams, callback: msRest.ServiceCallback<Models.V1PersistentVolumeClaim>): void;
  createCoreV1NamespacedPersistentVolumeClaim(body: Models.V1PersistentVolumeClaim, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateCoreV1NamespacedPersistentVolumeClaimOptionalParams | msRest.ServiceCallback<Models.V1PersistentVolumeClaim>, callback?: msRest.ServiceCallback<Models.V1PersistentVolumeClaim>): Promise<Models.CreateCoreV1NamespacedPersistentVolumeClaimResponse> {
    return this.sendOperationRequest(
      {
        body,
        namespace,
        options
      },
      createCoreV1NamespacedPersistentVolumeClaimOperationSpec,
      callback) as Promise<Models.CreateCoreV1NamespacedPersistentVolumeClaimResponse>;
  }

  /**
   * delete collection of PersistentVolumeClaim
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteCoreV1CollectionNamespacedPersistentVolumeClaimResponse>
   */
  deleteCoreV1CollectionNamespacedPersistentVolumeClaim(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteCoreV1CollectionNamespacedPersistentVolumeClaimOptionalParams): Promise<Models.DeleteCoreV1CollectionNamespacedPersistentVolumeClaimResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteCoreV1CollectionNamespacedPersistentVolumeClaim(namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteCoreV1CollectionNamespacedPersistentVolumeClaim(namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteCoreV1CollectionNamespacedPersistentVolumeClaimOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteCoreV1CollectionNamespacedPersistentVolumeClaim(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteCoreV1CollectionNamespacedPersistentVolumeClaimOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteCoreV1CollectionNamespacedPersistentVolumeClaimResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      deleteCoreV1CollectionNamespacedPersistentVolumeClaimOperationSpec,
      callback) as Promise<Models.DeleteCoreV1CollectionNamespacedPersistentVolumeClaimResponse>;
  }

  /**
   * read the specified PersistentVolumeClaim
   * @param name name of the PersistentVolumeClaim
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadCoreV1NamespacedPersistentVolumeClaimResponse>
   */
  readCoreV1NamespacedPersistentVolumeClaim(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadCoreV1NamespacedPersistentVolumeClaimOptionalParams): Promise<Models.ReadCoreV1NamespacedPersistentVolumeClaimResponse>;
  /**
   * @param name name of the PersistentVolumeClaim
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readCoreV1NamespacedPersistentVolumeClaim(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1PersistentVolumeClaim>): void;
  /**
   * @param name name of the PersistentVolumeClaim
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readCoreV1NamespacedPersistentVolumeClaim(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadCoreV1NamespacedPersistentVolumeClaimOptionalParams, callback: msRest.ServiceCallback<Models.V1PersistentVolumeClaim>): void;
  readCoreV1NamespacedPersistentVolumeClaim(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadCoreV1NamespacedPersistentVolumeClaimOptionalParams | msRest.ServiceCallback<Models.V1PersistentVolumeClaim>, callback?: msRest.ServiceCallback<Models.V1PersistentVolumeClaim>): Promise<Models.ReadCoreV1NamespacedPersistentVolumeClaimResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readCoreV1NamespacedPersistentVolumeClaimOperationSpec,
      callback) as Promise<Models.ReadCoreV1NamespacedPersistentVolumeClaimResponse>;
  }

  /**
   * replace the specified PersistentVolumeClaim
   * @param body
   * @param name name of the PersistentVolumeClaim
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceCoreV1NamespacedPersistentVolumeClaimResponse>
   */
  replaceCoreV1NamespacedPersistentVolumeClaim(body: Models.V1PersistentVolumeClaim, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceCoreV1NamespacedPersistentVolumeClaimOptionalParams): Promise<Models.ReplaceCoreV1NamespacedPersistentVolumeClaimResponse>;
  /**
   * @param body
   * @param name name of the PersistentVolumeClaim
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replaceCoreV1NamespacedPersistentVolumeClaim(body: Models.V1PersistentVolumeClaim, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1PersistentVolumeClaim>): void;
  /**
   * @param body
   * @param name name of the PersistentVolumeClaim
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceCoreV1NamespacedPersistentVolumeClaim(body: Models.V1PersistentVolumeClaim, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplaceCoreV1NamespacedPersistentVolumeClaimOptionalParams, callback: msRest.ServiceCallback<Models.V1PersistentVolumeClaim>): void;
  replaceCoreV1NamespacedPersistentVolumeClaim(body: Models.V1PersistentVolumeClaim, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceCoreV1NamespacedPersistentVolumeClaimOptionalParams | msRest.ServiceCallback<Models.V1PersistentVolumeClaim>, callback?: msRest.ServiceCallback<Models.V1PersistentVolumeClaim>): Promise<Models.ReplaceCoreV1NamespacedPersistentVolumeClaimResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replaceCoreV1NamespacedPersistentVolumeClaimOperationSpec,
      callback) as Promise<Models.ReplaceCoreV1NamespacedPersistentVolumeClaimResponse>;
  }

  /**
   * delete a PersistentVolumeClaim
   * @param body
   * @param name name of the PersistentVolumeClaim
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteCoreV1NamespacedPersistentVolumeClaimResponse>
   */
  deleteCoreV1NamespacedPersistentVolumeClaim(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteCoreV1NamespacedPersistentVolumeClaimOptionalParams): Promise<Models.DeleteCoreV1NamespacedPersistentVolumeClaimResponse>;
  /**
   * @param body
   * @param name name of the PersistentVolumeClaim
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteCoreV1NamespacedPersistentVolumeClaim(body: Models.V1DeleteOptions, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param name name of the PersistentVolumeClaim
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteCoreV1NamespacedPersistentVolumeClaim(body: Models.V1DeleteOptions, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteCoreV1NamespacedPersistentVolumeClaimOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteCoreV1NamespacedPersistentVolumeClaim(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteCoreV1NamespacedPersistentVolumeClaimOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteCoreV1NamespacedPersistentVolumeClaimResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      deleteCoreV1NamespacedPersistentVolumeClaimOperationSpec,
      callback) as Promise<Models.DeleteCoreV1NamespacedPersistentVolumeClaimResponse>;
  }

  /**
   * partially update the specified PersistentVolumeClaim
   * @param body
   * @param name name of the PersistentVolumeClaim
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchCoreV1NamespacedPersistentVolumeClaimResponse>
   */
  patchCoreV1NamespacedPersistentVolumeClaim(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchCoreV1NamespacedPersistentVolumeClaimOptionalParams): Promise<Models.PatchCoreV1NamespacedPersistentVolumeClaimResponse>;
  /**
   * @param body
   * @param name name of the PersistentVolumeClaim
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  patchCoreV1NamespacedPersistentVolumeClaim(body: any, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1PersistentVolumeClaim>): void;
  /**
   * @param body
   * @param name name of the PersistentVolumeClaim
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  patchCoreV1NamespacedPersistentVolumeClaim(body: any, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesPatchCoreV1NamespacedPersistentVolumeClaimOptionalParams, callback: msRest.ServiceCallback<Models.V1PersistentVolumeClaim>): void;
  patchCoreV1NamespacedPersistentVolumeClaim(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchCoreV1NamespacedPersistentVolumeClaimOptionalParams | msRest.ServiceCallback<Models.V1PersistentVolumeClaim>, callback?: msRest.ServiceCallback<Models.V1PersistentVolumeClaim>): Promise<Models.PatchCoreV1NamespacedPersistentVolumeClaimResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      patchCoreV1NamespacedPersistentVolumeClaimOperationSpec,
      callback) as Promise<Models.PatchCoreV1NamespacedPersistentVolumeClaimResponse>;
  }

  /**
   * read status of the specified PersistentVolumeClaim
   * @param name name of the PersistentVolumeClaim
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadCoreV1NamespacedPersistentVolumeClaimStatusResponse>
   */
  readCoreV1NamespacedPersistentVolumeClaimStatus(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadCoreV1NamespacedPersistentVolumeClaimStatusOptionalParams): Promise<Models.ReadCoreV1NamespacedPersistentVolumeClaimStatusResponse>;
  /**
   * @param name name of the PersistentVolumeClaim
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readCoreV1NamespacedPersistentVolumeClaimStatus(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1PersistentVolumeClaim>): void;
  /**
   * @param name name of the PersistentVolumeClaim
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readCoreV1NamespacedPersistentVolumeClaimStatus(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadCoreV1NamespacedPersistentVolumeClaimStatusOptionalParams, callback: msRest.ServiceCallback<Models.V1PersistentVolumeClaim>): void;
  readCoreV1NamespacedPersistentVolumeClaimStatus(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadCoreV1NamespacedPersistentVolumeClaimStatusOptionalParams | msRest.ServiceCallback<Models.V1PersistentVolumeClaim>, callback?: msRest.ServiceCallback<Models.V1PersistentVolumeClaim>): Promise<Models.ReadCoreV1NamespacedPersistentVolumeClaimStatusResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readCoreV1NamespacedPersistentVolumeClaimStatusOperationSpec,
      callback) as Promise<Models.ReadCoreV1NamespacedPersistentVolumeClaimStatusResponse>;
  }

  /**
   * replace status of the specified PersistentVolumeClaim
   * @param body
   * @param name name of the PersistentVolumeClaim
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceCoreV1NamespacedPersistentVolumeClaimStatusResponse>
   */
  replaceCoreV1NamespacedPersistentVolumeClaimStatus(body: Models.V1PersistentVolumeClaim, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceCoreV1NamespacedPersistentVolumeClaimStatusOptionalParams): Promise<Models.ReplaceCoreV1NamespacedPersistentVolumeClaimStatusResponse>;
  /**
   * @param body
   * @param name name of the PersistentVolumeClaim
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replaceCoreV1NamespacedPersistentVolumeClaimStatus(body: Models.V1PersistentVolumeClaim, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1PersistentVolumeClaim>): void;
  /**
   * @param body
   * @param name name of the PersistentVolumeClaim
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceCoreV1NamespacedPersistentVolumeClaimStatus(body: Models.V1PersistentVolumeClaim, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplaceCoreV1NamespacedPersistentVolumeClaimStatusOptionalParams, callback: msRest.ServiceCallback<Models.V1PersistentVolumeClaim>): void;
  replaceCoreV1NamespacedPersistentVolumeClaimStatus(body: Models.V1PersistentVolumeClaim, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceCoreV1NamespacedPersistentVolumeClaimStatusOptionalParams | msRest.ServiceCallback<Models.V1PersistentVolumeClaim>, callback?: msRest.ServiceCallback<Models.V1PersistentVolumeClaim>): Promise<Models.ReplaceCoreV1NamespacedPersistentVolumeClaimStatusResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replaceCoreV1NamespacedPersistentVolumeClaimStatusOperationSpec,
      callback) as Promise<Models.ReplaceCoreV1NamespacedPersistentVolumeClaimStatusResponse>;
  }

  /**
   * partially update status of the specified PersistentVolumeClaim
   * @param body
   * @param name name of the PersistentVolumeClaim
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchCoreV1NamespacedPersistentVolumeClaimStatusResponse>
   */
  patchCoreV1NamespacedPersistentVolumeClaimStatus(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchCoreV1NamespacedPersistentVolumeClaimStatusOptionalParams): Promise<Models.PatchCoreV1NamespacedPersistentVolumeClaimStatusResponse>;
  /**
   * @param body
   * @param name name of the PersistentVolumeClaim
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  patchCoreV1NamespacedPersistentVolumeClaimStatus(body: any, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1PersistentVolumeClaim>): void;
  /**
   * @param body
   * @param name name of the PersistentVolumeClaim
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  patchCoreV1NamespacedPersistentVolumeClaimStatus(body: any, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesPatchCoreV1NamespacedPersistentVolumeClaimStatusOptionalParams, callback: msRest.ServiceCallback<Models.V1PersistentVolumeClaim>): void;
  patchCoreV1NamespacedPersistentVolumeClaimStatus(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchCoreV1NamespacedPersistentVolumeClaimStatusOptionalParams | msRest.ServiceCallback<Models.V1PersistentVolumeClaim>, callback?: msRest.ServiceCallback<Models.V1PersistentVolumeClaim>): Promise<Models.PatchCoreV1NamespacedPersistentVolumeClaimStatusResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      patchCoreV1NamespacedPersistentVolumeClaimStatusOperationSpec,
      callback) as Promise<Models.PatchCoreV1NamespacedPersistentVolumeClaimStatusResponse>;
  }

  /**
   * list or watch objects of kind Pod
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ListCoreV1NamespacedPodResponse>
   */
  listCoreV1NamespacedPod(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListCoreV1NamespacedPodOptionalParams): Promise<Models.ListCoreV1NamespacedPodResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  listCoreV1NamespacedPod(namespace: string, callback: msRest.ServiceCallback<Models.V1PodList>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  listCoreV1NamespacedPod(namespace: string, options: Models.OpenShiftAPIwithKubernetesListCoreV1NamespacedPodOptionalParams, callback: msRest.ServiceCallback<Models.V1PodList>): void;
  listCoreV1NamespacedPod(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListCoreV1NamespacedPodOptionalParams | msRest.ServiceCallback<Models.V1PodList>, callback?: msRest.ServiceCallback<Models.V1PodList>): Promise<Models.ListCoreV1NamespacedPodResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      listCoreV1NamespacedPodOperationSpec,
      callback) as Promise<Models.ListCoreV1NamespacedPodResponse>;
  }

  /**
   * create a Pod
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateCoreV1NamespacedPodResponse>
   */
  createCoreV1NamespacedPod(body: Models.V1Pod, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateCoreV1NamespacedPodOptionalParams): Promise<Models.CreateCoreV1NamespacedPodResponse>;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  createCoreV1NamespacedPod(body: Models.V1Pod, namespace: string, callback: msRest.ServiceCallback<Models.V1Pod>): void;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  createCoreV1NamespacedPod(body: Models.V1Pod, namespace: string, options: Models.OpenShiftAPIwithKubernetesCreateCoreV1NamespacedPodOptionalParams, callback: msRest.ServiceCallback<Models.V1Pod>): void;
  createCoreV1NamespacedPod(body: Models.V1Pod, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateCoreV1NamespacedPodOptionalParams | msRest.ServiceCallback<Models.V1Pod>, callback?: msRest.ServiceCallback<Models.V1Pod>): Promise<Models.CreateCoreV1NamespacedPodResponse> {
    return this.sendOperationRequest(
      {
        body,
        namespace,
        options
      },
      createCoreV1NamespacedPodOperationSpec,
      callback) as Promise<Models.CreateCoreV1NamespacedPodResponse>;
  }

  /**
   * delete collection of Pod
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteCoreV1CollectionNamespacedPodResponse>
   */
  deleteCoreV1CollectionNamespacedPod(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteCoreV1CollectionNamespacedPodOptionalParams): Promise<Models.DeleteCoreV1CollectionNamespacedPodResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteCoreV1CollectionNamespacedPod(namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteCoreV1CollectionNamespacedPod(namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteCoreV1CollectionNamespacedPodOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteCoreV1CollectionNamespacedPod(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteCoreV1CollectionNamespacedPodOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteCoreV1CollectionNamespacedPodResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      deleteCoreV1CollectionNamespacedPodOperationSpec,
      callback) as Promise<Models.DeleteCoreV1CollectionNamespacedPodResponse>;
  }

  /**
   * read the specified Pod
   * @param name name of the Pod
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadCoreV1NamespacedPodResponse>
   */
  readCoreV1NamespacedPod(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadCoreV1NamespacedPodOptionalParams): Promise<Models.ReadCoreV1NamespacedPodResponse>;
  /**
   * @param name name of the Pod
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readCoreV1NamespacedPod(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Pod>): void;
  /**
   * @param name name of the Pod
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readCoreV1NamespacedPod(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadCoreV1NamespacedPodOptionalParams, callback: msRest.ServiceCallback<Models.V1Pod>): void;
  readCoreV1NamespacedPod(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadCoreV1NamespacedPodOptionalParams | msRest.ServiceCallback<Models.V1Pod>, callback?: msRest.ServiceCallback<Models.V1Pod>): Promise<Models.ReadCoreV1NamespacedPodResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readCoreV1NamespacedPodOperationSpec,
      callback) as Promise<Models.ReadCoreV1NamespacedPodResponse>;
  }

  /**
   * replace the specified Pod
   * @param body
   * @param name name of the Pod
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceCoreV1NamespacedPodResponse>
   */
  replaceCoreV1NamespacedPod(body: Models.V1Pod, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceCoreV1NamespacedPodOptionalParams): Promise<Models.ReplaceCoreV1NamespacedPodResponse>;
  /**
   * @param body
   * @param name name of the Pod
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replaceCoreV1NamespacedPod(body: Models.V1Pod, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Pod>): void;
  /**
   * @param body
   * @param name name of the Pod
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceCoreV1NamespacedPod(body: Models.V1Pod, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplaceCoreV1NamespacedPodOptionalParams, callback: msRest.ServiceCallback<Models.V1Pod>): void;
  replaceCoreV1NamespacedPod(body: Models.V1Pod, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceCoreV1NamespacedPodOptionalParams | msRest.ServiceCallback<Models.V1Pod>, callback?: msRest.ServiceCallback<Models.V1Pod>): Promise<Models.ReplaceCoreV1NamespacedPodResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replaceCoreV1NamespacedPodOperationSpec,
      callback) as Promise<Models.ReplaceCoreV1NamespacedPodResponse>;
  }

  /**
   * delete a Pod
   * @param body
   * @param name name of the Pod
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteCoreV1NamespacedPodResponse>
   */
  deleteCoreV1NamespacedPod(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteCoreV1NamespacedPodOptionalParams): Promise<Models.DeleteCoreV1NamespacedPodResponse>;
  /**
   * @param body
   * @param name name of the Pod
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteCoreV1NamespacedPod(body: Models.V1DeleteOptions, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param name name of the Pod
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteCoreV1NamespacedPod(body: Models.V1DeleteOptions, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteCoreV1NamespacedPodOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteCoreV1NamespacedPod(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteCoreV1NamespacedPodOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteCoreV1NamespacedPodResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      deleteCoreV1NamespacedPodOperationSpec,
      callback) as Promise<Models.DeleteCoreV1NamespacedPodResponse>;
  }

  /**
   * partially update the specified Pod
   * @param body
   * @param name name of the Pod
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchCoreV1NamespacedPodResponse>
   */
  patchCoreV1NamespacedPod(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchCoreV1NamespacedPodOptionalParams): Promise<Models.PatchCoreV1NamespacedPodResponse>;
  /**
   * @param body
   * @param name name of the Pod
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  patchCoreV1NamespacedPod(body: any, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Pod>): void;
  /**
   * @param body
   * @param name name of the Pod
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  patchCoreV1NamespacedPod(body: any, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesPatchCoreV1NamespacedPodOptionalParams, callback: msRest.ServiceCallback<Models.V1Pod>): void;
  patchCoreV1NamespacedPod(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchCoreV1NamespacedPodOptionalParams | msRest.ServiceCallback<Models.V1Pod>, callback?: msRest.ServiceCallback<Models.V1Pod>): Promise<Models.PatchCoreV1NamespacedPodResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      patchCoreV1NamespacedPodOperationSpec,
      callback) as Promise<Models.PatchCoreV1NamespacedPodResponse>;
  }

  /**
   * connect GET requests to attach of Pod
   * @param name name of the Pod
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ConnectCoreV1GetNamespacedPodAttachResponse>
   */
  connectCoreV1GetNamespacedPodAttach(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesConnectCoreV1GetNamespacedPodAttachOptionalParams): Promise<Models.ConnectCoreV1GetNamespacedPodAttachResponse>;
  /**
   * @param name name of the Pod
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  connectCoreV1GetNamespacedPodAttach(name: string, namespace: string, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param name name of the Pod
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  connectCoreV1GetNamespacedPodAttach(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesConnectCoreV1GetNamespacedPodAttachOptionalParams, callback: msRest.ServiceCallback<string>): void;
  connectCoreV1GetNamespacedPodAttach(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesConnectCoreV1GetNamespacedPodAttachOptionalParams | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.ConnectCoreV1GetNamespacedPodAttachResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      connectCoreV1GetNamespacedPodAttachOperationSpec,
      callback) as Promise<Models.ConnectCoreV1GetNamespacedPodAttachResponse>;
  }

  /**
   * connect POST requests to attach of Pod
   * @param name name of the Pod
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ConnectCoreV1PostNamespacedPodAttachResponse>
   */
  connectCoreV1PostNamespacedPodAttach(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesConnectCoreV1PostNamespacedPodAttachOptionalParams): Promise<Models.ConnectCoreV1PostNamespacedPodAttachResponse>;
  /**
   * @param name name of the Pod
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  connectCoreV1PostNamespacedPodAttach(name: string, namespace: string, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param name name of the Pod
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  connectCoreV1PostNamespacedPodAttach(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesConnectCoreV1PostNamespacedPodAttachOptionalParams, callback: msRest.ServiceCallback<string>): void;
  connectCoreV1PostNamespacedPodAttach(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesConnectCoreV1PostNamespacedPodAttachOptionalParams | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.ConnectCoreV1PostNamespacedPodAttachResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      connectCoreV1PostNamespacedPodAttachOperationSpec,
      callback) as Promise<Models.ConnectCoreV1PostNamespacedPodAttachResponse>;
  }

  /**
   * create binding of a Pod
   * @param body
   * @param name name of the Binding
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateCoreV1NamespacedPodBindingResponse>
   */
  createCoreV1NamespacedPodBinding(body: Models.V1Binding, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateCoreV1NamespacedPodBindingOptionalParams): Promise<Models.CreateCoreV1NamespacedPodBindingResponse>;
  /**
   * @param body
   * @param name name of the Binding
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  createCoreV1NamespacedPodBinding(body: Models.V1Binding, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Binding>): void;
  /**
   * @param body
   * @param name name of the Binding
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  createCoreV1NamespacedPodBinding(body: Models.V1Binding, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesCreateCoreV1NamespacedPodBindingOptionalParams, callback: msRest.ServiceCallback<Models.V1Binding>): void;
  createCoreV1NamespacedPodBinding(body: Models.V1Binding, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateCoreV1NamespacedPodBindingOptionalParams | msRest.ServiceCallback<Models.V1Binding>, callback?: msRest.ServiceCallback<Models.V1Binding>): Promise<Models.CreateCoreV1NamespacedPodBindingResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      createCoreV1NamespacedPodBindingOperationSpec,
      callback) as Promise<Models.CreateCoreV1NamespacedPodBindingResponse>;
  }

  /**
   * create eviction of a Pod
   * @param body
   * @param name name of the Eviction
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateCoreV1NamespacedPodEvictionResponse>
   */
  createCoreV1NamespacedPodEviction(body: Models.V1beta1Eviction, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateCoreV1NamespacedPodEvictionOptionalParams): Promise<Models.CreateCoreV1NamespacedPodEvictionResponse>;
  /**
   * @param body
   * @param name name of the Eviction
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  createCoreV1NamespacedPodEviction(body: Models.V1beta1Eviction, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1beta1Eviction>): void;
  /**
   * @param body
   * @param name name of the Eviction
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  createCoreV1NamespacedPodEviction(body: Models.V1beta1Eviction, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesCreateCoreV1NamespacedPodEvictionOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1Eviction>): void;
  createCoreV1NamespacedPodEviction(body: Models.V1beta1Eviction, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateCoreV1NamespacedPodEvictionOptionalParams | msRest.ServiceCallback<Models.V1beta1Eviction>, callback?: msRest.ServiceCallback<Models.V1beta1Eviction>): Promise<Models.CreateCoreV1NamespacedPodEvictionResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      createCoreV1NamespacedPodEvictionOperationSpec,
      callback) as Promise<Models.CreateCoreV1NamespacedPodEvictionResponse>;
  }

  /**
   * connect GET requests to exec of Pod
   * @param name name of the Pod
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ConnectCoreV1GetNamespacedPodExecResponse>
   */
  connectCoreV1GetNamespacedPodExec(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesConnectCoreV1GetNamespacedPodExecOptionalParams): Promise<Models.ConnectCoreV1GetNamespacedPodExecResponse>;
  /**
   * @param name name of the Pod
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  connectCoreV1GetNamespacedPodExec(name: string, namespace: string, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param name name of the Pod
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  connectCoreV1GetNamespacedPodExec(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesConnectCoreV1GetNamespacedPodExecOptionalParams, callback: msRest.ServiceCallback<string>): void;
  connectCoreV1GetNamespacedPodExec(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesConnectCoreV1GetNamespacedPodExecOptionalParams | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.ConnectCoreV1GetNamespacedPodExecResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      connectCoreV1GetNamespacedPodExecOperationSpec,
      callback) as Promise<Models.ConnectCoreV1GetNamespacedPodExecResponse>;
  }

  /**
   * connect POST requests to exec of Pod
   * @param name name of the Pod
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ConnectCoreV1PostNamespacedPodExecResponse>
   */
  connectCoreV1PostNamespacedPodExec(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesConnectCoreV1PostNamespacedPodExecOptionalParams): Promise<Models.ConnectCoreV1PostNamespacedPodExecResponse>;
  /**
   * @param name name of the Pod
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  connectCoreV1PostNamespacedPodExec(name: string, namespace: string, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param name name of the Pod
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  connectCoreV1PostNamespacedPodExec(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesConnectCoreV1PostNamespacedPodExecOptionalParams, callback: msRest.ServiceCallback<string>): void;
  connectCoreV1PostNamespacedPodExec(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesConnectCoreV1PostNamespacedPodExecOptionalParams | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.ConnectCoreV1PostNamespacedPodExecResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      connectCoreV1PostNamespacedPodExecOperationSpec,
      callback) as Promise<Models.ConnectCoreV1PostNamespacedPodExecResponse>;
  }

  /**
   * read log of the specified Pod
   * @param name name of the Pod
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadCoreV1NamespacedPodLogResponse>
   */
  readCoreV1NamespacedPodLog(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadCoreV1NamespacedPodLogOptionalParams): Promise<Models.ReadCoreV1NamespacedPodLogResponse>;
  /**
   * @param name name of the Pod
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readCoreV1NamespacedPodLog(name: string, namespace: string, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param name name of the Pod
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readCoreV1NamespacedPodLog(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadCoreV1NamespacedPodLogOptionalParams, callback: msRest.ServiceCallback<string>): void;
  readCoreV1NamespacedPodLog(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadCoreV1NamespacedPodLogOptionalParams | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.ReadCoreV1NamespacedPodLogResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readCoreV1NamespacedPodLogOperationSpec,
      callback) as Promise<Models.ReadCoreV1NamespacedPodLogResponse>;
  }

  /**
   * connect GET requests to portforward of Pod
   * @param name name of the Pod
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ConnectCoreV1GetNamespacedPodPortforwardResponse>
   */
  connectCoreV1GetNamespacedPodPortforward(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesConnectCoreV1GetNamespacedPodPortforwardOptionalParams): Promise<Models.ConnectCoreV1GetNamespacedPodPortforwardResponse>;
  /**
   * @param name name of the Pod
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  connectCoreV1GetNamespacedPodPortforward(name: string, namespace: string, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param name name of the Pod
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  connectCoreV1GetNamespacedPodPortforward(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesConnectCoreV1GetNamespacedPodPortforwardOptionalParams, callback: msRest.ServiceCallback<string>): void;
  connectCoreV1GetNamespacedPodPortforward(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesConnectCoreV1GetNamespacedPodPortforwardOptionalParams | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.ConnectCoreV1GetNamespacedPodPortforwardResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      connectCoreV1GetNamespacedPodPortforwardOperationSpec,
      callback) as Promise<Models.ConnectCoreV1GetNamespacedPodPortforwardResponse>;
  }

  /**
   * connect POST requests to portforward of Pod
   * @param name name of the Pod
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ConnectCoreV1PostNamespacedPodPortforwardResponse>
   */
  connectCoreV1PostNamespacedPodPortforward(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesConnectCoreV1PostNamespacedPodPortforwardOptionalParams): Promise<Models.ConnectCoreV1PostNamespacedPodPortforwardResponse>;
  /**
   * @param name name of the Pod
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  connectCoreV1PostNamespacedPodPortforward(name: string, namespace: string, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param name name of the Pod
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  connectCoreV1PostNamespacedPodPortforward(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesConnectCoreV1PostNamespacedPodPortforwardOptionalParams, callback: msRest.ServiceCallback<string>): void;
  connectCoreV1PostNamespacedPodPortforward(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesConnectCoreV1PostNamespacedPodPortforwardOptionalParams | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.ConnectCoreV1PostNamespacedPodPortforwardResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      connectCoreV1PostNamespacedPodPortforwardOperationSpec,
      callback) as Promise<Models.ConnectCoreV1PostNamespacedPodPortforwardResponse>;
  }

  /**
   * connect GET requests to proxy of Pod
   * @param name name of the Pod
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ConnectCoreV1GetNamespacedPodProxyResponse>
   */
  connectCoreV1GetNamespacedPodProxy(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesConnectCoreV1GetNamespacedPodProxyOptionalParams): Promise<Models.ConnectCoreV1GetNamespacedPodProxyResponse>;
  /**
   * @param name name of the Pod
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  connectCoreV1GetNamespacedPodProxy(name: string, namespace: string, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param name name of the Pod
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  connectCoreV1GetNamespacedPodProxy(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesConnectCoreV1GetNamespacedPodProxyOptionalParams, callback: msRest.ServiceCallback<string>): void;
  connectCoreV1GetNamespacedPodProxy(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesConnectCoreV1GetNamespacedPodProxyOptionalParams | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.ConnectCoreV1GetNamespacedPodProxyResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      connectCoreV1GetNamespacedPodProxyOperationSpec,
      callback) as Promise<Models.ConnectCoreV1GetNamespacedPodProxyResponse>;
  }

  /**
   * connect PUT requests to proxy of Pod
   * @param name name of the Pod
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ConnectCoreV1PutNamespacedPodProxyResponse>
   */
  connectCoreV1PutNamespacedPodProxy(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesConnectCoreV1PutNamespacedPodProxyOptionalParams): Promise<Models.ConnectCoreV1PutNamespacedPodProxyResponse>;
  /**
   * @param name name of the Pod
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  connectCoreV1PutNamespacedPodProxy(name: string, namespace: string, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param name name of the Pod
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  connectCoreV1PutNamespacedPodProxy(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesConnectCoreV1PutNamespacedPodProxyOptionalParams, callback: msRest.ServiceCallback<string>): void;
  connectCoreV1PutNamespacedPodProxy(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesConnectCoreV1PutNamespacedPodProxyOptionalParams | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.ConnectCoreV1PutNamespacedPodProxyResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      connectCoreV1PutNamespacedPodProxyOperationSpec,
      callback) as Promise<Models.ConnectCoreV1PutNamespacedPodProxyResponse>;
  }

  /**
   * connect POST requests to proxy of Pod
   * @param name name of the Pod
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ConnectCoreV1PostNamespacedPodProxyResponse>
   */
  connectCoreV1PostNamespacedPodProxy(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesConnectCoreV1PostNamespacedPodProxyOptionalParams): Promise<Models.ConnectCoreV1PostNamespacedPodProxyResponse>;
  /**
   * @param name name of the Pod
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  connectCoreV1PostNamespacedPodProxy(name: string, namespace: string, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param name name of the Pod
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  connectCoreV1PostNamespacedPodProxy(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesConnectCoreV1PostNamespacedPodProxyOptionalParams, callback: msRest.ServiceCallback<string>): void;
  connectCoreV1PostNamespacedPodProxy(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesConnectCoreV1PostNamespacedPodProxyOptionalParams | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.ConnectCoreV1PostNamespacedPodProxyResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      connectCoreV1PostNamespacedPodProxyOperationSpec,
      callback) as Promise<Models.ConnectCoreV1PostNamespacedPodProxyResponse>;
  }

  /**
   * connect DELETE requests to proxy of Pod
   * @param name name of the Pod
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ConnectCoreV1DeleteNamespacedPodProxyResponse>
   */
  connectCoreV1DeleteNamespacedPodProxy(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesConnectCoreV1DeleteNamespacedPodProxyOptionalParams): Promise<Models.ConnectCoreV1DeleteNamespacedPodProxyResponse>;
  /**
   * @param name name of the Pod
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  connectCoreV1DeleteNamespacedPodProxy(name: string, namespace: string, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param name name of the Pod
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  connectCoreV1DeleteNamespacedPodProxy(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesConnectCoreV1DeleteNamespacedPodProxyOptionalParams, callback: msRest.ServiceCallback<string>): void;
  connectCoreV1DeleteNamespacedPodProxy(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesConnectCoreV1DeleteNamespacedPodProxyOptionalParams | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.ConnectCoreV1DeleteNamespacedPodProxyResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      connectCoreV1DeleteNamespacedPodProxyOperationSpec,
      callback) as Promise<Models.ConnectCoreV1DeleteNamespacedPodProxyResponse>;
  }

  /**
   * connect HEAD requests to proxy of Pod
   * @param name name of the Pod
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ConnectCoreV1HeadNamespacedPodProxyResponse>
   */
  connectCoreV1HeadNamespacedPodProxy(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesConnectCoreV1HeadNamespacedPodProxyOptionalParams): Promise<Models.ConnectCoreV1HeadNamespacedPodProxyResponse>;
  /**
   * @param name name of the Pod
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  connectCoreV1HeadNamespacedPodProxy(name: string, namespace: string, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param name name of the Pod
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  connectCoreV1HeadNamespacedPodProxy(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesConnectCoreV1HeadNamespacedPodProxyOptionalParams, callback: msRest.ServiceCallback<string>): void;
  connectCoreV1HeadNamespacedPodProxy(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesConnectCoreV1HeadNamespacedPodProxyOptionalParams | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.ConnectCoreV1HeadNamespacedPodProxyResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      connectCoreV1HeadNamespacedPodProxyOperationSpec,
      callback) as Promise<Models.ConnectCoreV1HeadNamespacedPodProxyResponse>;
  }

  /**
   * connect PATCH requests to proxy of Pod
   * @param name name of the Pod
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ConnectCoreV1PatchNamespacedPodProxyResponse>
   */
  connectCoreV1PatchNamespacedPodProxy(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesConnectCoreV1PatchNamespacedPodProxyOptionalParams): Promise<Models.ConnectCoreV1PatchNamespacedPodProxyResponse>;
  /**
   * @param name name of the Pod
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  connectCoreV1PatchNamespacedPodProxy(name: string, namespace: string, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param name name of the Pod
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  connectCoreV1PatchNamespacedPodProxy(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesConnectCoreV1PatchNamespacedPodProxyOptionalParams, callback: msRest.ServiceCallback<string>): void;
  connectCoreV1PatchNamespacedPodProxy(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesConnectCoreV1PatchNamespacedPodProxyOptionalParams | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.ConnectCoreV1PatchNamespacedPodProxyResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      connectCoreV1PatchNamespacedPodProxyOperationSpec,
      callback) as Promise<Models.ConnectCoreV1PatchNamespacedPodProxyResponse>;
  }

  /**
   * connect GET requests to proxy of Pod
   * @param name name of the Pod
   * @param namespace object name and auth scope, such as for teams and projects
   * @param path path to the resource
   * @param path1 Path is the URL path to use for the current proxy request to pod.
   * @param [options] The optional parameters
   * @returns Promise<Models.ConnectCoreV1GetNamespacedPodProxyWithPathResponse>
   */
  connectCoreV1GetNamespacedPodProxyWithPath(name: string, namespace: string, path: string, path1: string, options?: msRest.RequestOptionsBase): Promise<Models.ConnectCoreV1GetNamespacedPodProxyWithPathResponse>;
  /**
   * @param name name of the Pod
   * @param namespace object name and auth scope, such as for teams and projects
   * @param path path to the resource
   * @param path1 Path is the URL path to use for the current proxy request to pod.
   * @param callback The callback
   */
  connectCoreV1GetNamespacedPodProxyWithPath(name: string, namespace: string, path: string, path1: string, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param name name of the Pod
   * @param namespace object name and auth scope, such as for teams and projects
   * @param path path to the resource
   * @param path1 Path is the URL path to use for the current proxy request to pod.
   * @param options The optional parameters
   * @param callback The callback
   */
  connectCoreV1GetNamespacedPodProxyWithPath(name: string, namespace: string, path: string, path1: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
  connectCoreV1GetNamespacedPodProxyWithPath(name: string, namespace: string, path: string, path1: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.ConnectCoreV1GetNamespacedPodProxyWithPathResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        path,
        path1,
        options
      },
      connectCoreV1GetNamespacedPodProxyWithPathOperationSpec,
      callback) as Promise<Models.ConnectCoreV1GetNamespacedPodProxyWithPathResponse>;
  }

  /**
   * connect PUT requests to proxy of Pod
   * @param name name of the Pod
   * @param namespace object name and auth scope, such as for teams and projects
   * @param path path to the resource
   * @param path1 Path is the URL path to use for the current proxy request to pod.
   * @param [options] The optional parameters
   * @returns Promise<Models.ConnectCoreV1PutNamespacedPodProxyWithPathResponse>
   */
  connectCoreV1PutNamespacedPodProxyWithPath(name: string, namespace: string, path: string, path1: string, options?: msRest.RequestOptionsBase): Promise<Models.ConnectCoreV1PutNamespacedPodProxyWithPathResponse>;
  /**
   * @param name name of the Pod
   * @param namespace object name and auth scope, such as for teams and projects
   * @param path path to the resource
   * @param path1 Path is the URL path to use for the current proxy request to pod.
   * @param callback The callback
   */
  connectCoreV1PutNamespacedPodProxyWithPath(name: string, namespace: string, path: string, path1: string, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param name name of the Pod
   * @param namespace object name and auth scope, such as for teams and projects
   * @param path path to the resource
   * @param path1 Path is the URL path to use for the current proxy request to pod.
   * @param options The optional parameters
   * @param callback The callback
   */
  connectCoreV1PutNamespacedPodProxyWithPath(name: string, namespace: string, path: string, path1: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
  connectCoreV1PutNamespacedPodProxyWithPath(name: string, namespace: string, path: string, path1: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.ConnectCoreV1PutNamespacedPodProxyWithPathResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        path,
        path1,
        options
      },
      connectCoreV1PutNamespacedPodProxyWithPathOperationSpec,
      callback) as Promise<Models.ConnectCoreV1PutNamespacedPodProxyWithPathResponse>;
  }

  /**
   * connect POST requests to proxy of Pod
   * @param name name of the Pod
   * @param namespace object name and auth scope, such as for teams and projects
   * @param path path to the resource
   * @param path1 Path is the URL path to use for the current proxy request to pod.
   * @param [options] The optional parameters
   * @returns Promise<Models.ConnectCoreV1PostNamespacedPodProxyWithPathResponse>
   */
  connectCoreV1PostNamespacedPodProxyWithPath(name: string, namespace: string, path: string, path1: string, options?: msRest.RequestOptionsBase): Promise<Models.ConnectCoreV1PostNamespacedPodProxyWithPathResponse>;
  /**
   * @param name name of the Pod
   * @param namespace object name and auth scope, such as for teams and projects
   * @param path path to the resource
   * @param path1 Path is the URL path to use for the current proxy request to pod.
   * @param callback The callback
   */
  connectCoreV1PostNamespacedPodProxyWithPath(name: string, namespace: string, path: string, path1: string, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param name name of the Pod
   * @param namespace object name and auth scope, such as for teams and projects
   * @param path path to the resource
   * @param path1 Path is the URL path to use for the current proxy request to pod.
   * @param options The optional parameters
   * @param callback The callback
   */
  connectCoreV1PostNamespacedPodProxyWithPath(name: string, namespace: string, path: string, path1: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
  connectCoreV1PostNamespacedPodProxyWithPath(name: string, namespace: string, path: string, path1: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.ConnectCoreV1PostNamespacedPodProxyWithPathResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        path,
        path1,
        options
      },
      connectCoreV1PostNamespacedPodProxyWithPathOperationSpec,
      callback) as Promise<Models.ConnectCoreV1PostNamespacedPodProxyWithPathResponse>;
  }

  /**
   * connect DELETE requests to proxy of Pod
   * @param name name of the Pod
   * @param namespace object name and auth scope, such as for teams and projects
   * @param path path to the resource
   * @param path1 Path is the URL path to use for the current proxy request to pod.
   * @param [options] The optional parameters
   * @returns Promise<Models.ConnectCoreV1DeleteNamespacedPodProxyWithPathResponse>
   */
  connectCoreV1DeleteNamespacedPodProxyWithPath(name: string, namespace: string, path: string, path1: string, options?: msRest.RequestOptionsBase): Promise<Models.ConnectCoreV1DeleteNamespacedPodProxyWithPathResponse>;
  /**
   * @param name name of the Pod
   * @param namespace object name and auth scope, such as for teams and projects
   * @param path path to the resource
   * @param path1 Path is the URL path to use for the current proxy request to pod.
   * @param callback The callback
   */
  connectCoreV1DeleteNamespacedPodProxyWithPath(name: string, namespace: string, path: string, path1: string, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param name name of the Pod
   * @param namespace object name and auth scope, such as for teams and projects
   * @param path path to the resource
   * @param path1 Path is the URL path to use for the current proxy request to pod.
   * @param options The optional parameters
   * @param callback The callback
   */
  connectCoreV1DeleteNamespacedPodProxyWithPath(name: string, namespace: string, path: string, path1: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
  connectCoreV1DeleteNamespacedPodProxyWithPath(name: string, namespace: string, path: string, path1: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.ConnectCoreV1DeleteNamespacedPodProxyWithPathResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        path,
        path1,
        options
      },
      connectCoreV1DeleteNamespacedPodProxyWithPathOperationSpec,
      callback) as Promise<Models.ConnectCoreV1DeleteNamespacedPodProxyWithPathResponse>;
  }

  /**
   * connect HEAD requests to proxy of Pod
   * @param name name of the Pod
   * @param namespace object name and auth scope, such as for teams and projects
   * @param path path to the resource
   * @param path1 Path is the URL path to use for the current proxy request to pod.
   * @param [options] The optional parameters
   * @returns Promise<Models.ConnectCoreV1HeadNamespacedPodProxyWithPathResponse>
   */
  connectCoreV1HeadNamespacedPodProxyWithPath(name: string, namespace: string, path: string, path1: string, options?: msRest.RequestOptionsBase): Promise<Models.ConnectCoreV1HeadNamespacedPodProxyWithPathResponse>;
  /**
   * @param name name of the Pod
   * @param namespace object name and auth scope, such as for teams and projects
   * @param path path to the resource
   * @param path1 Path is the URL path to use for the current proxy request to pod.
   * @param callback The callback
   */
  connectCoreV1HeadNamespacedPodProxyWithPath(name: string, namespace: string, path: string, path1: string, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param name name of the Pod
   * @param namespace object name and auth scope, such as for teams and projects
   * @param path path to the resource
   * @param path1 Path is the URL path to use for the current proxy request to pod.
   * @param options The optional parameters
   * @param callback The callback
   */
  connectCoreV1HeadNamespacedPodProxyWithPath(name: string, namespace: string, path: string, path1: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
  connectCoreV1HeadNamespacedPodProxyWithPath(name: string, namespace: string, path: string, path1: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.ConnectCoreV1HeadNamespacedPodProxyWithPathResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        path,
        path1,
        options
      },
      connectCoreV1HeadNamespacedPodProxyWithPathOperationSpec,
      callback) as Promise<Models.ConnectCoreV1HeadNamespacedPodProxyWithPathResponse>;
  }

  /**
   * connect PATCH requests to proxy of Pod
   * @param name name of the Pod
   * @param namespace object name and auth scope, such as for teams and projects
   * @param path path to the resource
   * @param path1 Path is the URL path to use for the current proxy request to pod.
   * @param [options] The optional parameters
   * @returns Promise<Models.ConnectCoreV1PatchNamespacedPodProxyWithPathResponse>
   */
  connectCoreV1PatchNamespacedPodProxyWithPath(name: string, namespace: string, path: string, path1: string, options?: msRest.RequestOptionsBase): Promise<Models.ConnectCoreV1PatchNamespacedPodProxyWithPathResponse>;
  /**
   * @param name name of the Pod
   * @param namespace object name and auth scope, such as for teams and projects
   * @param path path to the resource
   * @param path1 Path is the URL path to use for the current proxy request to pod.
   * @param callback The callback
   */
  connectCoreV1PatchNamespacedPodProxyWithPath(name: string, namespace: string, path: string, path1: string, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param name name of the Pod
   * @param namespace object name and auth scope, such as for teams and projects
   * @param path path to the resource
   * @param path1 Path is the URL path to use for the current proxy request to pod.
   * @param options The optional parameters
   * @param callback The callback
   */
  connectCoreV1PatchNamespacedPodProxyWithPath(name: string, namespace: string, path: string, path1: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
  connectCoreV1PatchNamespacedPodProxyWithPath(name: string, namespace: string, path: string, path1: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.ConnectCoreV1PatchNamespacedPodProxyWithPathResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        path,
        path1,
        options
      },
      connectCoreV1PatchNamespacedPodProxyWithPathOperationSpec,
      callback) as Promise<Models.ConnectCoreV1PatchNamespacedPodProxyWithPathResponse>;
  }

  /**
   * read status of the specified Pod
   * @param name name of the Pod
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadCoreV1NamespacedPodStatusResponse>
   */
  readCoreV1NamespacedPodStatus(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadCoreV1NamespacedPodStatusOptionalParams): Promise<Models.ReadCoreV1NamespacedPodStatusResponse>;
  /**
   * @param name name of the Pod
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readCoreV1NamespacedPodStatus(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Pod>): void;
  /**
   * @param name name of the Pod
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readCoreV1NamespacedPodStatus(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadCoreV1NamespacedPodStatusOptionalParams, callback: msRest.ServiceCallback<Models.V1Pod>): void;
  readCoreV1NamespacedPodStatus(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadCoreV1NamespacedPodStatusOptionalParams | msRest.ServiceCallback<Models.V1Pod>, callback?: msRest.ServiceCallback<Models.V1Pod>): Promise<Models.ReadCoreV1NamespacedPodStatusResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readCoreV1NamespacedPodStatusOperationSpec,
      callback) as Promise<Models.ReadCoreV1NamespacedPodStatusResponse>;
  }

  /**
   * replace status of the specified Pod
   * @param body
   * @param name name of the Pod
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceCoreV1NamespacedPodStatusResponse>
   */
  replaceCoreV1NamespacedPodStatus(body: Models.V1Pod, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceCoreV1NamespacedPodStatusOptionalParams): Promise<Models.ReplaceCoreV1NamespacedPodStatusResponse>;
  /**
   * @param body
   * @param name name of the Pod
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replaceCoreV1NamespacedPodStatus(body: Models.V1Pod, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Pod>): void;
  /**
   * @param body
   * @param name name of the Pod
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceCoreV1NamespacedPodStatus(body: Models.V1Pod, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplaceCoreV1NamespacedPodStatusOptionalParams, callback: msRest.ServiceCallback<Models.V1Pod>): void;
  replaceCoreV1NamespacedPodStatus(body: Models.V1Pod, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceCoreV1NamespacedPodStatusOptionalParams | msRest.ServiceCallback<Models.V1Pod>, callback?: msRest.ServiceCallback<Models.V1Pod>): Promise<Models.ReplaceCoreV1NamespacedPodStatusResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replaceCoreV1NamespacedPodStatusOperationSpec,
      callback) as Promise<Models.ReplaceCoreV1NamespacedPodStatusResponse>;
  }

  /**
   * partially update status of the specified Pod
   * @param body
   * @param name name of the Pod
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchCoreV1NamespacedPodStatusResponse>
   */
  patchCoreV1NamespacedPodStatus(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchCoreV1NamespacedPodStatusOptionalParams): Promise<Models.PatchCoreV1NamespacedPodStatusResponse>;
  /**
   * @param body
   * @param name name of the Pod
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  patchCoreV1NamespacedPodStatus(body: any, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Pod>): void;
  /**
   * @param body
   * @param name name of the Pod
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  patchCoreV1NamespacedPodStatus(body: any, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesPatchCoreV1NamespacedPodStatusOptionalParams, callback: msRest.ServiceCallback<Models.V1Pod>): void;
  patchCoreV1NamespacedPodStatus(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchCoreV1NamespacedPodStatusOptionalParams | msRest.ServiceCallback<Models.V1Pod>, callback?: msRest.ServiceCallback<Models.V1Pod>): Promise<Models.PatchCoreV1NamespacedPodStatusResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      patchCoreV1NamespacedPodStatusOperationSpec,
      callback) as Promise<Models.PatchCoreV1NamespacedPodStatusResponse>;
  }

  /**
   * list or watch objects of kind PodTemplate
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ListCoreV1NamespacedPodTemplateResponse>
   */
  listCoreV1NamespacedPodTemplate(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListCoreV1NamespacedPodTemplateOptionalParams): Promise<Models.ListCoreV1NamespacedPodTemplateResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  listCoreV1NamespacedPodTemplate(namespace: string, callback: msRest.ServiceCallback<Models.V1PodTemplateList>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  listCoreV1NamespacedPodTemplate(namespace: string, options: Models.OpenShiftAPIwithKubernetesListCoreV1NamespacedPodTemplateOptionalParams, callback: msRest.ServiceCallback<Models.V1PodTemplateList>): void;
  listCoreV1NamespacedPodTemplate(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListCoreV1NamespacedPodTemplateOptionalParams | msRest.ServiceCallback<Models.V1PodTemplateList>, callback?: msRest.ServiceCallback<Models.V1PodTemplateList>): Promise<Models.ListCoreV1NamespacedPodTemplateResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      listCoreV1NamespacedPodTemplateOperationSpec,
      callback) as Promise<Models.ListCoreV1NamespacedPodTemplateResponse>;
  }

  /**
   * create a PodTemplate
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateCoreV1NamespacedPodTemplateResponse>
   */
  createCoreV1NamespacedPodTemplate(body: Models.V1PodTemplate, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateCoreV1NamespacedPodTemplateOptionalParams): Promise<Models.CreateCoreV1NamespacedPodTemplateResponse>;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  createCoreV1NamespacedPodTemplate(body: Models.V1PodTemplate, namespace: string, callback: msRest.ServiceCallback<Models.V1PodTemplate>): void;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  createCoreV1NamespacedPodTemplate(body: Models.V1PodTemplate, namespace: string, options: Models.OpenShiftAPIwithKubernetesCreateCoreV1NamespacedPodTemplateOptionalParams, callback: msRest.ServiceCallback<Models.V1PodTemplate>): void;
  createCoreV1NamespacedPodTemplate(body: Models.V1PodTemplate, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateCoreV1NamespacedPodTemplateOptionalParams | msRest.ServiceCallback<Models.V1PodTemplate>, callback?: msRest.ServiceCallback<Models.V1PodTemplate>): Promise<Models.CreateCoreV1NamespacedPodTemplateResponse> {
    return this.sendOperationRequest(
      {
        body,
        namespace,
        options
      },
      createCoreV1NamespacedPodTemplateOperationSpec,
      callback) as Promise<Models.CreateCoreV1NamespacedPodTemplateResponse>;
  }

  /**
   * delete collection of PodTemplate
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteCoreV1CollectionNamespacedPodTemplateResponse>
   */
  deleteCoreV1CollectionNamespacedPodTemplate(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteCoreV1CollectionNamespacedPodTemplateOptionalParams): Promise<Models.DeleteCoreV1CollectionNamespacedPodTemplateResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteCoreV1CollectionNamespacedPodTemplate(namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteCoreV1CollectionNamespacedPodTemplate(namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteCoreV1CollectionNamespacedPodTemplateOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteCoreV1CollectionNamespacedPodTemplate(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteCoreV1CollectionNamespacedPodTemplateOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteCoreV1CollectionNamespacedPodTemplateResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      deleteCoreV1CollectionNamespacedPodTemplateOperationSpec,
      callback) as Promise<Models.DeleteCoreV1CollectionNamespacedPodTemplateResponse>;
  }

  /**
   * read the specified PodTemplate
   * @param name name of the PodTemplate
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadCoreV1NamespacedPodTemplateResponse>
   */
  readCoreV1NamespacedPodTemplate(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadCoreV1NamespacedPodTemplateOptionalParams): Promise<Models.ReadCoreV1NamespacedPodTemplateResponse>;
  /**
   * @param name name of the PodTemplate
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readCoreV1NamespacedPodTemplate(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1PodTemplate>): void;
  /**
   * @param name name of the PodTemplate
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readCoreV1NamespacedPodTemplate(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadCoreV1NamespacedPodTemplateOptionalParams, callback: msRest.ServiceCallback<Models.V1PodTemplate>): void;
  readCoreV1NamespacedPodTemplate(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadCoreV1NamespacedPodTemplateOptionalParams | msRest.ServiceCallback<Models.V1PodTemplate>, callback?: msRest.ServiceCallback<Models.V1PodTemplate>): Promise<Models.ReadCoreV1NamespacedPodTemplateResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readCoreV1NamespacedPodTemplateOperationSpec,
      callback) as Promise<Models.ReadCoreV1NamespacedPodTemplateResponse>;
  }

  /**
   * replace the specified PodTemplate
   * @param body
   * @param name name of the PodTemplate
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceCoreV1NamespacedPodTemplateResponse>
   */
  replaceCoreV1NamespacedPodTemplate(body: Models.V1PodTemplate, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceCoreV1NamespacedPodTemplateOptionalParams): Promise<Models.ReplaceCoreV1NamespacedPodTemplateResponse>;
  /**
   * @param body
   * @param name name of the PodTemplate
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replaceCoreV1NamespacedPodTemplate(body: Models.V1PodTemplate, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1PodTemplate>): void;
  /**
   * @param body
   * @param name name of the PodTemplate
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceCoreV1NamespacedPodTemplate(body: Models.V1PodTemplate, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplaceCoreV1NamespacedPodTemplateOptionalParams, callback: msRest.ServiceCallback<Models.V1PodTemplate>): void;
  replaceCoreV1NamespacedPodTemplate(body: Models.V1PodTemplate, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceCoreV1NamespacedPodTemplateOptionalParams | msRest.ServiceCallback<Models.V1PodTemplate>, callback?: msRest.ServiceCallback<Models.V1PodTemplate>): Promise<Models.ReplaceCoreV1NamespacedPodTemplateResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replaceCoreV1NamespacedPodTemplateOperationSpec,
      callback) as Promise<Models.ReplaceCoreV1NamespacedPodTemplateResponse>;
  }

  /**
   * delete a PodTemplate
   * @param body
   * @param name name of the PodTemplate
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteCoreV1NamespacedPodTemplateResponse>
   */
  deleteCoreV1NamespacedPodTemplate(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteCoreV1NamespacedPodTemplateOptionalParams): Promise<Models.DeleteCoreV1NamespacedPodTemplateResponse>;
  /**
   * @param body
   * @param name name of the PodTemplate
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteCoreV1NamespacedPodTemplate(body: Models.V1DeleteOptions, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param name name of the PodTemplate
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteCoreV1NamespacedPodTemplate(body: Models.V1DeleteOptions, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteCoreV1NamespacedPodTemplateOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteCoreV1NamespacedPodTemplate(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteCoreV1NamespacedPodTemplateOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteCoreV1NamespacedPodTemplateResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      deleteCoreV1NamespacedPodTemplateOperationSpec,
      callback) as Promise<Models.DeleteCoreV1NamespacedPodTemplateResponse>;
  }

  /**
   * partially update the specified PodTemplate
   * @param body
   * @param name name of the PodTemplate
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchCoreV1NamespacedPodTemplateResponse>
   */
  patchCoreV1NamespacedPodTemplate(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchCoreV1NamespacedPodTemplateOptionalParams): Promise<Models.PatchCoreV1NamespacedPodTemplateResponse>;
  /**
   * @param body
   * @param name name of the PodTemplate
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  patchCoreV1NamespacedPodTemplate(body: any, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1PodTemplate>): void;
  /**
   * @param body
   * @param name name of the PodTemplate
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  patchCoreV1NamespacedPodTemplate(body: any, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesPatchCoreV1NamespacedPodTemplateOptionalParams, callback: msRest.ServiceCallback<Models.V1PodTemplate>): void;
  patchCoreV1NamespacedPodTemplate(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchCoreV1NamespacedPodTemplateOptionalParams | msRest.ServiceCallback<Models.V1PodTemplate>, callback?: msRest.ServiceCallback<Models.V1PodTemplate>): Promise<Models.PatchCoreV1NamespacedPodTemplateResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      patchCoreV1NamespacedPodTemplateOperationSpec,
      callback) as Promise<Models.PatchCoreV1NamespacedPodTemplateResponse>;
  }

  /**
   * list or watch objects of kind ReplicationController
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ListCoreV1NamespacedReplicationControllerResponse>
   */
  listCoreV1NamespacedReplicationController(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListCoreV1NamespacedReplicationControllerOptionalParams): Promise<Models.ListCoreV1NamespacedReplicationControllerResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  listCoreV1NamespacedReplicationController(namespace: string, callback: msRest.ServiceCallback<Models.V1ReplicationControllerList>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  listCoreV1NamespacedReplicationController(namespace: string, options: Models.OpenShiftAPIwithKubernetesListCoreV1NamespacedReplicationControllerOptionalParams, callback: msRest.ServiceCallback<Models.V1ReplicationControllerList>): void;
  listCoreV1NamespacedReplicationController(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListCoreV1NamespacedReplicationControllerOptionalParams | msRest.ServiceCallback<Models.V1ReplicationControllerList>, callback?: msRest.ServiceCallback<Models.V1ReplicationControllerList>): Promise<Models.ListCoreV1NamespacedReplicationControllerResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      listCoreV1NamespacedReplicationControllerOperationSpec,
      callback) as Promise<Models.ListCoreV1NamespacedReplicationControllerResponse>;
  }

  /**
   * create a ReplicationController
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateCoreV1NamespacedReplicationControllerResponse>
   */
  createCoreV1NamespacedReplicationController(body: Models.V1ReplicationController, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateCoreV1NamespacedReplicationControllerOptionalParams): Promise<Models.CreateCoreV1NamespacedReplicationControllerResponse>;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  createCoreV1NamespacedReplicationController(body: Models.V1ReplicationController, namespace: string, callback: msRest.ServiceCallback<Models.V1ReplicationController>): void;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  createCoreV1NamespacedReplicationController(body: Models.V1ReplicationController, namespace: string, options: Models.OpenShiftAPIwithKubernetesCreateCoreV1NamespacedReplicationControllerOptionalParams, callback: msRest.ServiceCallback<Models.V1ReplicationController>): void;
  createCoreV1NamespacedReplicationController(body: Models.V1ReplicationController, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateCoreV1NamespacedReplicationControllerOptionalParams | msRest.ServiceCallback<Models.V1ReplicationController>, callback?: msRest.ServiceCallback<Models.V1ReplicationController>): Promise<Models.CreateCoreV1NamespacedReplicationControllerResponse> {
    return this.sendOperationRequest(
      {
        body,
        namespace,
        options
      },
      createCoreV1NamespacedReplicationControllerOperationSpec,
      callback) as Promise<Models.CreateCoreV1NamespacedReplicationControllerResponse>;
  }

  /**
   * delete collection of ReplicationController
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteCoreV1CollectionNamespacedReplicationControllerResponse>
   */
  deleteCoreV1CollectionNamespacedReplicationController(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteCoreV1CollectionNamespacedReplicationControllerOptionalParams): Promise<Models.DeleteCoreV1CollectionNamespacedReplicationControllerResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteCoreV1CollectionNamespacedReplicationController(namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteCoreV1CollectionNamespacedReplicationController(namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteCoreV1CollectionNamespacedReplicationControllerOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteCoreV1CollectionNamespacedReplicationController(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteCoreV1CollectionNamespacedReplicationControllerOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteCoreV1CollectionNamespacedReplicationControllerResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      deleteCoreV1CollectionNamespacedReplicationControllerOperationSpec,
      callback) as Promise<Models.DeleteCoreV1CollectionNamespacedReplicationControllerResponse>;
  }

  /**
   * read the specified ReplicationController
   * @param name name of the ReplicationController
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadCoreV1NamespacedReplicationControllerResponse>
   */
  readCoreV1NamespacedReplicationController(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadCoreV1NamespacedReplicationControllerOptionalParams): Promise<Models.ReadCoreV1NamespacedReplicationControllerResponse>;
  /**
   * @param name name of the ReplicationController
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readCoreV1NamespacedReplicationController(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1ReplicationController>): void;
  /**
   * @param name name of the ReplicationController
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readCoreV1NamespacedReplicationController(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadCoreV1NamespacedReplicationControllerOptionalParams, callback: msRest.ServiceCallback<Models.V1ReplicationController>): void;
  readCoreV1NamespacedReplicationController(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadCoreV1NamespacedReplicationControllerOptionalParams | msRest.ServiceCallback<Models.V1ReplicationController>, callback?: msRest.ServiceCallback<Models.V1ReplicationController>): Promise<Models.ReadCoreV1NamespacedReplicationControllerResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readCoreV1NamespacedReplicationControllerOperationSpec,
      callback) as Promise<Models.ReadCoreV1NamespacedReplicationControllerResponse>;
  }

  /**
   * replace the specified ReplicationController
   * @param body
   * @param name name of the ReplicationController
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceCoreV1NamespacedReplicationControllerResponse>
   */
  replaceCoreV1NamespacedReplicationController(body: Models.V1ReplicationController, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceCoreV1NamespacedReplicationControllerOptionalParams): Promise<Models.ReplaceCoreV1NamespacedReplicationControllerResponse>;
  /**
   * @param body
   * @param name name of the ReplicationController
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replaceCoreV1NamespacedReplicationController(body: Models.V1ReplicationController, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1ReplicationController>): void;
  /**
   * @param body
   * @param name name of the ReplicationController
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceCoreV1NamespacedReplicationController(body: Models.V1ReplicationController, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplaceCoreV1NamespacedReplicationControllerOptionalParams, callback: msRest.ServiceCallback<Models.V1ReplicationController>): void;
  replaceCoreV1NamespacedReplicationController(body: Models.V1ReplicationController, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceCoreV1NamespacedReplicationControllerOptionalParams | msRest.ServiceCallback<Models.V1ReplicationController>, callback?: msRest.ServiceCallback<Models.V1ReplicationController>): Promise<Models.ReplaceCoreV1NamespacedReplicationControllerResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replaceCoreV1NamespacedReplicationControllerOperationSpec,
      callback) as Promise<Models.ReplaceCoreV1NamespacedReplicationControllerResponse>;
  }

  /**
   * delete a ReplicationController
   * @param body
   * @param name name of the ReplicationController
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteCoreV1NamespacedReplicationControllerResponse>
   */
  deleteCoreV1NamespacedReplicationController(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteCoreV1NamespacedReplicationControllerOptionalParams): Promise<Models.DeleteCoreV1NamespacedReplicationControllerResponse>;
  /**
   * @param body
   * @param name name of the ReplicationController
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteCoreV1NamespacedReplicationController(body: Models.V1DeleteOptions, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param name name of the ReplicationController
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteCoreV1NamespacedReplicationController(body: Models.V1DeleteOptions, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteCoreV1NamespacedReplicationControllerOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteCoreV1NamespacedReplicationController(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteCoreV1NamespacedReplicationControllerOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteCoreV1NamespacedReplicationControllerResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      deleteCoreV1NamespacedReplicationControllerOperationSpec,
      callback) as Promise<Models.DeleteCoreV1NamespacedReplicationControllerResponse>;
  }

  /**
   * partially update the specified ReplicationController
   * @param body
   * @param name name of the ReplicationController
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchCoreV1NamespacedReplicationControllerResponse>
   */
  patchCoreV1NamespacedReplicationController(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchCoreV1NamespacedReplicationControllerOptionalParams): Promise<Models.PatchCoreV1NamespacedReplicationControllerResponse>;
  /**
   * @param body
   * @param name name of the ReplicationController
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  patchCoreV1NamespacedReplicationController(body: any, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1ReplicationController>): void;
  /**
   * @param body
   * @param name name of the ReplicationController
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  patchCoreV1NamespacedReplicationController(body: any, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesPatchCoreV1NamespacedReplicationControllerOptionalParams, callback: msRest.ServiceCallback<Models.V1ReplicationController>): void;
  patchCoreV1NamespacedReplicationController(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchCoreV1NamespacedReplicationControllerOptionalParams | msRest.ServiceCallback<Models.V1ReplicationController>, callback?: msRest.ServiceCallback<Models.V1ReplicationController>): Promise<Models.PatchCoreV1NamespacedReplicationControllerResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      patchCoreV1NamespacedReplicationControllerOperationSpec,
      callback) as Promise<Models.PatchCoreV1NamespacedReplicationControllerResponse>;
  }

  /**
   * read scale of the specified ReplicationController
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadCoreV1NamespacedReplicationControllerScaleResponse>
   */
  readCoreV1NamespacedReplicationControllerScale(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadCoreV1NamespacedReplicationControllerScaleOptionalParams): Promise<Models.ReadCoreV1NamespacedReplicationControllerScaleResponse>;
  /**
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readCoreV1NamespacedReplicationControllerScale(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Scale>): void;
  /**
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readCoreV1NamespacedReplicationControllerScale(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadCoreV1NamespacedReplicationControllerScaleOptionalParams, callback: msRest.ServiceCallback<Models.V1Scale>): void;
  readCoreV1NamespacedReplicationControllerScale(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadCoreV1NamespacedReplicationControllerScaleOptionalParams | msRest.ServiceCallback<Models.V1Scale>, callback?: msRest.ServiceCallback<Models.V1Scale>): Promise<Models.ReadCoreV1NamespacedReplicationControllerScaleResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readCoreV1NamespacedReplicationControllerScaleOperationSpec,
      callback) as Promise<Models.ReadCoreV1NamespacedReplicationControllerScaleResponse>;
  }

  /**
   * replace scale of the specified ReplicationController
   * @param body
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceCoreV1NamespacedReplicationControllerScaleResponse>
   */
  replaceCoreV1NamespacedReplicationControllerScale(body: Models.V1Scale, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceCoreV1NamespacedReplicationControllerScaleOptionalParams): Promise<Models.ReplaceCoreV1NamespacedReplicationControllerScaleResponse>;
  /**
   * @param body
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replaceCoreV1NamespacedReplicationControllerScale(body: Models.V1Scale, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Scale>): void;
  /**
   * @param body
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceCoreV1NamespacedReplicationControllerScale(body: Models.V1Scale, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplaceCoreV1NamespacedReplicationControllerScaleOptionalParams, callback: msRest.ServiceCallback<Models.V1Scale>): void;
  replaceCoreV1NamespacedReplicationControllerScale(body: Models.V1Scale, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceCoreV1NamespacedReplicationControllerScaleOptionalParams | msRest.ServiceCallback<Models.V1Scale>, callback?: msRest.ServiceCallback<Models.V1Scale>): Promise<Models.ReplaceCoreV1NamespacedReplicationControllerScaleResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replaceCoreV1NamespacedReplicationControllerScaleOperationSpec,
      callback) as Promise<Models.ReplaceCoreV1NamespacedReplicationControllerScaleResponse>;
  }

  /**
   * partially update scale of the specified ReplicationController
   * @param body
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchCoreV1NamespacedReplicationControllerScaleResponse>
   */
  patchCoreV1NamespacedReplicationControllerScale(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchCoreV1NamespacedReplicationControllerScaleOptionalParams): Promise<Models.PatchCoreV1NamespacedReplicationControllerScaleResponse>;
  /**
   * @param body
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  patchCoreV1NamespacedReplicationControllerScale(body: any, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Scale>): void;
  /**
   * @param body
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  patchCoreV1NamespacedReplicationControllerScale(body: any, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesPatchCoreV1NamespacedReplicationControllerScaleOptionalParams, callback: msRest.ServiceCallback<Models.V1Scale>): void;
  patchCoreV1NamespacedReplicationControllerScale(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchCoreV1NamespacedReplicationControllerScaleOptionalParams | msRest.ServiceCallback<Models.V1Scale>, callback?: msRest.ServiceCallback<Models.V1Scale>): Promise<Models.PatchCoreV1NamespacedReplicationControllerScaleResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      patchCoreV1NamespacedReplicationControllerScaleOperationSpec,
      callback) as Promise<Models.PatchCoreV1NamespacedReplicationControllerScaleResponse>;
  }

  /**
   * read status of the specified ReplicationController
   * @param name name of the ReplicationController
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadCoreV1NamespacedReplicationControllerStatusResponse>
   */
  readCoreV1NamespacedReplicationControllerStatus(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadCoreV1NamespacedReplicationControllerStatusOptionalParams): Promise<Models.ReadCoreV1NamespacedReplicationControllerStatusResponse>;
  /**
   * @param name name of the ReplicationController
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readCoreV1NamespacedReplicationControllerStatus(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1ReplicationController>): void;
  /**
   * @param name name of the ReplicationController
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readCoreV1NamespacedReplicationControllerStatus(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadCoreV1NamespacedReplicationControllerStatusOptionalParams, callback: msRest.ServiceCallback<Models.V1ReplicationController>): void;
  readCoreV1NamespacedReplicationControllerStatus(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadCoreV1NamespacedReplicationControllerStatusOptionalParams | msRest.ServiceCallback<Models.V1ReplicationController>, callback?: msRest.ServiceCallback<Models.V1ReplicationController>): Promise<Models.ReadCoreV1NamespacedReplicationControllerStatusResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readCoreV1NamespacedReplicationControllerStatusOperationSpec,
      callback) as Promise<Models.ReadCoreV1NamespacedReplicationControllerStatusResponse>;
  }

  /**
   * replace status of the specified ReplicationController
   * @param body
   * @param name name of the ReplicationController
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceCoreV1NamespacedReplicationControllerStatusResponse>
   */
  replaceCoreV1NamespacedReplicationControllerStatus(body: Models.V1ReplicationController, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceCoreV1NamespacedReplicationControllerStatusOptionalParams): Promise<Models.ReplaceCoreV1NamespacedReplicationControllerStatusResponse>;
  /**
   * @param body
   * @param name name of the ReplicationController
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replaceCoreV1NamespacedReplicationControllerStatus(body: Models.V1ReplicationController, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1ReplicationController>): void;
  /**
   * @param body
   * @param name name of the ReplicationController
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceCoreV1NamespacedReplicationControllerStatus(body: Models.V1ReplicationController, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplaceCoreV1NamespacedReplicationControllerStatusOptionalParams, callback: msRest.ServiceCallback<Models.V1ReplicationController>): void;
  replaceCoreV1NamespacedReplicationControllerStatus(body: Models.V1ReplicationController, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceCoreV1NamespacedReplicationControllerStatusOptionalParams | msRest.ServiceCallback<Models.V1ReplicationController>, callback?: msRest.ServiceCallback<Models.V1ReplicationController>): Promise<Models.ReplaceCoreV1NamespacedReplicationControllerStatusResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replaceCoreV1NamespacedReplicationControllerStatusOperationSpec,
      callback) as Promise<Models.ReplaceCoreV1NamespacedReplicationControllerStatusResponse>;
  }

  /**
   * partially update status of the specified ReplicationController
   * @param body
   * @param name name of the ReplicationController
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchCoreV1NamespacedReplicationControllerStatusResponse>
   */
  patchCoreV1NamespacedReplicationControllerStatus(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchCoreV1NamespacedReplicationControllerStatusOptionalParams): Promise<Models.PatchCoreV1NamespacedReplicationControllerStatusResponse>;
  /**
   * @param body
   * @param name name of the ReplicationController
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  patchCoreV1NamespacedReplicationControllerStatus(body: any, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1ReplicationController>): void;
  /**
   * @param body
   * @param name name of the ReplicationController
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  patchCoreV1NamespacedReplicationControllerStatus(body: any, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesPatchCoreV1NamespacedReplicationControllerStatusOptionalParams, callback: msRest.ServiceCallback<Models.V1ReplicationController>): void;
  patchCoreV1NamespacedReplicationControllerStatus(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchCoreV1NamespacedReplicationControllerStatusOptionalParams | msRest.ServiceCallback<Models.V1ReplicationController>, callback?: msRest.ServiceCallback<Models.V1ReplicationController>): Promise<Models.PatchCoreV1NamespacedReplicationControllerStatusResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      patchCoreV1NamespacedReplicationControllerStatusOperationSpec,
      callback) as Promise<Models.PatchCoreV1NamespacedReplicationControllerStatusResponse>;
  }

  /**
   * list or watch objects of kind ResourceQuota
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ListCoreV1NamespacedResourceQuotaResponse>
   */
  listCoreV1NamespacedResourceQuota(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListCoreV1NamespacedResourceQuotaOptionalParams): Promise<Models.ListCoreV1NamespacedResourceQuotaResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  listCoreV1NamespacedResourceQuota(namespace: string, callback: msRest.ServiceCallback<Models.V1ResourceQuotaList>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  listCoreV1NamespacedResourceQuota(namespace: string, options: Models.OpenShiftAPIwithKubernetesListCoreV1NamespacedResourceQuotaOptionalParams, callback: msRest.ServiceCallback<Models.V1ResourceQuotaList>): void;
  listCoreV1NamespacedResourceQuota(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListCoreV1NamespacedResourceQuotaOptionalParams | msRest.ServiceCallback<Models.V1ResourceQuotaList>, callback?: msRest.ServiceCallback<Models.V1ResourceQuotaList>): Promise<Models.ListCoreV1NamespacedResourceQuotaResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      listCoreV1NamespacedResourceQuotaOperationSpec,
      callback) as Promise<Models.ListCoreV1NamespacedResourceQuotaResponse>;
  }

  /**
   * create a ResourceQuota
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateCoreV1NamespacedResourceQuotaResponse>
   */
  createCoreV1NamespacedResourceQuota(body: Models.V1ResourceQuota, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateCoreV1NamespacedResourceQuotaOptionalParams): Promise<Models.CreateCoreV1NamespacedResourceQuotaResponse>;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  createCoreV1NamespacedResourceQuota(body: Models.V1ResourceQuota, namespace: string, callback: msRest.ServiceCallback<Models.V1ResourceQuota>): void;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  createCoreV1NamespacedResourceQuota(body: Models.V1ResourceQuota, namespace: string, options: Models.OpenShiftAPIwithKubernetesCreateCoreV1NamespacedResourceQuotaOptionalParams, callback: msRest.ServiceCallback<Models.V1ResourceQuota>): void;
  createCoreV1NamespacedResourceQuota(body: Models.V1ResourceQuota, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateCoreV1NamespacedResourceQuotaOptionalParams | msRest.ServiceCallback<Models.V1ResourceQuota>, callback?: msRest.ServiceCallback<Models.V1ResourceQuota>): Promise<Models.CreateCoreV1NamespacedResourceQuotaResponse> {
    return this.sendOperationRequest(
      {
        body,
        namespace,
        options
      },
      createCoreV1NamespacedResourceQuotaOperationSpec,
      callback) as Promise<Models.CreateCoreV1NamespacedResourceQuotaResponse>;
  }

  /**
   * delete collection of ResourceQuota
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteCoreV1CollectionNamespacedResourceQuotaResponse>
   */
  deleteCoreV1CollectionNamespacedResourceQuota(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteCoreV1CollectionNamespacedResourceQuotaOptionalParams): Promise<Models.DeleteCoreV1CollectionNamespacedResourceQuotaResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteCoreV1CollectionNamespacedResourceQuota(namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteCoreV1CollectionNamespacedResourceQuota(namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteCoreV1CollectionNamespacedResourceQuotaOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteCoreV1CollectionNamespacedResourceQuota(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteCoreV1CollectionNamespacedResourceQuotaOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteCoreV1CollectionNamespacedResourceQuotaResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      deleteCoreV1CollectionNamespacedResourceQuotaOperationSpec,
      callback) as Promise<Models.DeleteCoreV1CollectionNamespacedResourceQuotaResponse>;
  }

  /**
   * read the specified ResourceQuota
   * @param name name of the ResourceQuota
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadCoreV1NamespacedResourceQuotaResponse>
   */
  readCoreV1NamespacedResourceQuota(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadCoreV1NamespacedResourceQuotaOptionalParams): Promise<Models.ReadCoreV1NamespacedResourceQuotaResponse>;
  /**
   * @param name name of the ResourceQuota
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readCoreV1NamespacedResourceQuota(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1ResourceQuota>): void;
  /**
   * @param name name of the ResourceQuota
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readCoreV1NamespacedResourceQuota(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadCoreV1NamespacedResourceQuotaOptionalParams, callback: msRest.ServiceCallback<Models.V1ResourceQuota>): void;
  readCoreV1NamespacedResourceQuota(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadCoreV1NamespacedResourceQuotaOptionalParams | msRest.ServiceCallback<Models.V1ResourceQuota>, callback?: msRest.ServiceCallback<Models.V1ResourceQuota>): Promise<Models.ReadCoreV1NamespacedResourceQuotaResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readCoreV1NamespacedResourceQuotaOperationSpec,
      callback) as Promise<Models.ReadCoreV1NamespacedResourceQuotaResponse>;
  }

  /**
   * replace the specified ResourceQuota
   * @param body
   * @param name name of the ResourceQuota
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceCoreV1NamespacedResourceQuotaResponse>
   */
  replaceCoreV1NamespacedResourceQuota(body: Models.V1ResourceQuota, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceCoreV1NamespacedResourceQuotaOptionalParams): Promise<Models.ReplaceCoreV1NamespacedResourceQuotaResponse>;
  /**
   * @param body
   * @param name name of the ResourceQuota
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replaceCoreV1NamespacedResourceQuota(body: Models.V1ResourceQuota, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1ResourceQuota>): void;
  /**
   * @param body
   * @param name name of the ResourceQuota
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceCoreV1NamespacedResourceQuota(body: Models.V1ResourceQuota, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplaceCoreV1NamespacedResourceQuotaOptionalParams, callback: msRest.ServiceCallback<Models.V1ResourceQuota>): void;
  replaceCoreV1NamespacedResourceQuota(body: Models.V1ResourceQuota, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceCoreV1NamespacedResourceQuotaOptionalParams | msRest.ServiceCallback<Models.V1ResourceQuota>, callback?: msRest.ServiceCallback<Models.V1ResourceQuota>): Promise<Models.ReplaceCoreV1NamespacedResourceQuotaResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replaceCoreV1NamespacedResourceQuotaOperationSpec,
      callback) as Promise<Models.ReplaceCoreV1NamespacedResourceQuotaResponse>;
  }

  /**
   * delete a ResourceQuota
   * @param body
   * @param name name of the ResourceQuota
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteCoreV1NamespacedResourceQuotaResponse>
   */
  deleteCoreV1NamespacedResourceQuota(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteCoreV1NamespacedResourceQuotaOptionalParams): Promise<Models.DeleteCoreV1NamespacedResourceQuotaResponse>;
  /**
   * @param body
   * @param name name of the ResourceQuota
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteCoreV1NamespacedResourceQuota(body: Models.V1DeleteOptions, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param name name of the ResourceQuota
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteCoreV1NamespacedResourceQuota(body: Models.V1DeleteOptions, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteCoreV1NamespacedResourceQuotaOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteCoreV1NamespacedResourceQuota(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteCoreV1NamespacedResourceQuotaOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteCoreV1NamespacedResourceQuotaResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      deleteCoreV1NamespacedResourceQuotaOperationSpec,
      callback) as Promise<Models.DeleteCoreV1NamespacedResourceQuotaResponse>;
  }

  /**
   * partially update the specified ResourceQuota
   * @param body
   * @param name name of the ResourceQuota
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchCoreV1NamespacedResourceQuotaResponse>
   */
  patchCoreV1NamespacedResourceQuota(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchCoreV1NamespacedResourceQuotaOptionalParams): Promise<Models.PatchCoreV1NamespacedResourceQuotaResponse>;
  /**
   * @param body
   * @param name name of the ResourceQuota
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  patchCoreV1NamespacedResourceQuota(body: any, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1ResourceQuota>): void;
  /**
   * @param body
   * @param name name of the ResourceQuota
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  patchCoreV1NamespacedResourceQuota(body: any, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesPatchCoreV1NamespacedResourceQuotaOptionalParams, callback: msRest.ServiceCallback<Models.V1ResourceQuota>): void;
  patchCoreV1NamespacedResourceQuota(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchCoreV1NamespacedResourceQuotaOptionalParams | msRest.ServiceCallback<Models.V1ResourceQuota>, callback?: msRest.ServiceCallback<Models.V1ResourceQuota>): Promise<Models.PatchCoreV1NamespacedResourceQuotaResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      patchCoreV1NamespacedResourceQuotaOperationSpec,
      callback) as Promise<Models.PatchCoreV1NamespacedResourceQuotaResponse>;
  }

  /**
   * read status of the specified ResourceQuota
   * @param name name of the ResourceQuota
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadCoreV1NamespacedResourceQuotaStatusResponse>
   */
  readCoreV1NamespacedResourceQuotaStatus(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadCoreV1NamespacedResourceQuotaStatusOptionalParams): Promise<Models.ReadCoreV1NamespacedResourceQuotaStatusResponse>;
  /**
   * @param name name of the ResourceQuota
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readCoreV1NamespacedResourceQuotaStatus(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1ResourceQuota>): void;
  /**
   * @param name name of the ResourceQuota
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readCoreV1NamespacedResourceQuotaStatus(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadCoreV1NamespacedResourceQuotaStatusOptionalParams, callback: msRest.ServiceCallback<Models.V1ResourceQuota>): void;
  readCoreV1NamespacedResourceQuotaStatus(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadCoreV1NamespacedResourceQuotaStatusOptionalParams | msRest.ServiceCallback<Models.V1ResourceQuota>, callback?: msRest.ServiceCallback<Models.V1ResourceQuota>): Promise<Models.ReadCoreV1NamespacedResourceQuotaStatusResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readCoreV1NamespacedResourceQuotaStatusOperationSpec,
      callback) as Promise<Models.ReadCoreV1NamespacedResourceQuotaStatusResponse>;
  }

  /**
   * replace status of the specified ResourceQuota
   * @param body
   * @param name name of the ResourceQuota
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceCoreV1NamespacedResourceQuotaStatusResponse>
   */
  replaceCoreV1NamespacedResourceQuotaStatus(body: Models.V1ResourceQuota, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceCoreV1NamespacedResourceQuotaStatusOptionalParams): Promise<Models.ReplaceCoreV1NamespacedResourceQuotaStatusResponse>;
  /**
   * @param body
   * @param name name of the ResourceQuota
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replaceCoreV1NamespacedResourceQuotaStatus(body: Models.V1ResourceQuota, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1ResourceQuota>): void;
  /**
   * @param body
   * @param name name of the ResourceQuota
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceCoreV1NamespacedResourceQuotaStatus(body: Models.V1ResourceQuota, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplaceCoreV1NamespacedResourceQuotaStatusOptionalParams, callback: msRest.ServiceCallback<Models.V1ResourceQuota>): void;
  replaceCoreV1NamespacedResourceQuotaStatus(body: Models.V1ResourceQuota, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceCoreV1NamespacedResourceQuotaStatusOptionalParams | msRest.ServiceCallback<Models.V1ResourceQuota>, callback?: msRest.ServiceCallback<Models.V1ResourceQuota>): Promise<Models.ReplaceCoreV1NamespacedResourceQuotaStatusResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replaceCoreV1NamespacedResourceQuotaStatusOperationSpec,
      callback) as Promise<Models.ReplaceCoreV1NamespacedResourceQuotaStatusResponse>;
  }

  /**
   * partially update status of the specified ResourceQuota
   * @param body
   * @param name name of the ResourceQuota
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchCoreV1NamespacedResourceQuotaStatusResponse>
   */
  patchCoreV1NamespacedResourceQuotaStatus(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchCoreV1NamespacedResourceQuotaStatusOptionalParams): Promise<Models.PatchCoreV1NamespacedResourceQuotaStatusResponse>;
  /**
   * @param body
   * @param name name of the ResourceQuota
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  patchCoreV1NamespacedResourceQuotaStatus(body: any, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1ResourceQuota>): void;
  /**
   * @param body
   * @param name name of the ResourceQuota
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  patchCoreV1NamespacedResourceQuotaStatus(body: any, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesPatchCoreV1NamespacedResourceQuotaStatusOptionalParams, callback: msRest.ServiceCallback<Models.V1ResourceQuota>): void;
  patchCoreV1NamespacedResourceQuotaStatus(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchCoreV1NamespacedResourceQuotaStatusOptionalParams | msRest.ServiceCallback<Models.V1ResourceQuota>, callback?: msRest.ServiceCallback<Models.V1ResourceQuota>): Promise<Models.PatchCoreV1NamespacedResourceQuotaStatusResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      patchCoreV1NamespacedResourceQuotaStatusOperationSpec,
      callback) as Promise<Models.PatchCoreV1NamespacedResourceQuotaStatusResponse>;
  }

  /**
   * list or watch objects of kind Secret
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ListCoreV1NamespacedSecretResponse>
   */
  listCoreV1NamespacedSecret(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListCoreV1NamespacedSecretOptionalParams): Promise<Models.ListCoreV1NamespacedSecretResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  listCoreV1NamespacedSecret(namespace: string, callback: msRest.ServiceCallback<Models.V1SecretList>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  listCoreV1NamespacedSecret(namespace: string, options: Models.OpenShiftAPIwithKubernetesListCoreV1NamespacedSecretOptionalParams, callback: msRest.ServiceCallback<Models.V1SecretList>): void;
  listCoreV1NamespacedSecret(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListCoreV1NamespacedSecretOptionalParams | msRest.ServiceCallback<Models.V1SecretList>, callback?: msRest.ServiceCallback<Models.V1SecretList>): Promise<Models.ListCoreV1NamespacedSecretResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      listCoreV1NamespacedSecretOperationSpec,
      callback) as Promise<Models.ListCoreV1NamespacedSecretResponse>;
  }

  /**
   * create a Secret
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateCoreV1NamespacedSecretResponse>
   */
  createCoreV1NamespacedSecret(body: Models.V1Secret, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateCoreV1NamespacedSecretOptionalParams): Promise<Models.CreateCoreV1NamespacedSecretResponse>;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  createCoreV1NamespacedSecret(body: Models.V1Secret, namespace: string, callback: msRest.ServiceCallback<Models.V1Secret>): void;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  createCoreV1NamespacedSecret(body: Models.V1Secret, namespace: string, options: Models.OpenShiftAPIwithKubernetesCreateCoreV1NamespacedSecretOptionalParams, callback: msRest.ServiceCallback<Models.V1Secret>): void;
  createCoreV1NamespacedSecret(body: Models.V1Secret, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateCoreV1NamespacedSecretOptionalParams | msRest.ServiceCallback<Models.V1Secret>, callback?: msRest.ServiceCallback<Models.V1Secret>): Promise<Models.CreateCoreV1NamespacedSecretResponse> {
    return this.sendOperationRequest(
      {
        body,
        namespace,
        options
      },
      createCoreV1NamespacedSecretOperationSpec,
      callback) as Promise<Models.CreateCoreV1NamespacedSecretResponse>;
  }

  /**
   * delete collection of Secret
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteCoreV1CollectionNamespacedSecretResponse>
   */
  deleteCoreV1CollectionNamespacedSecret(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteCoreV1CollectionNamespacedSecretOptionalParams): Promise<Models.DeleteCoreV1CollectionNamespacedSecretResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteCoreV1CollectionNamespacedSecret(namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteCoreV1CollectionNamespacedSecret(namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteCoreV1CollectionNamespacedSecretOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteCoreV1CollectionNamespacedSecret(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteCoreV1CollectionNamespacedSecretOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteCoreV1CollectionNamespacedSecretResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      deleteCoreV1CollectionNamespacedSecretOperationSpec,
      callback) as Promise<Models.DeleteCoreV1CollectionNamespacedSecretResponse>;
  }

  /**
   * read the specified Secret
   * @param name name of the Secret
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadCoreV1NamespacedSecretResponse>
   */
  readCoreV1NamespacedSecret(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadCoreV1NamespacedSecretOptionalParams): Promise<Models.ReadCoreV1NamespacedSecretResponse>;
  /**
   * @param name name of the Secret
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readCoreV1NamespacedSecret(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Secret>): void;
  /**
   * @param name name of the Secret
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readCoreV1NamespacedSecret(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadCoreV1NamespacedSecretOptionalParams, callback: msRest.ServiceCallback<Models.V1Secret>): void;
  readCoreV1NamespacedSecret(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadCoreV1NamespacedSecretOptionalParams | msRest.ServiceCallback<Models.V1Secret>, callback?: msRest.ServiceCallback<Models.V1Secret>): Promise<Models.ReadCoreV1NamespacedSecretResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readCoreV1NamespacedSecretOperationSpec,
      callback) as Promise<Models.ReadCoreV1NamespacedSecretResponse>;
  }

  /**
   * replace the specified Secret
   * @param body
   * @param name name of the Secret
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceCoreV1NamespacedSecretResponse>
   */
  replaceCoreV1NamespacedSecret(body: Models.V1Secret, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceCoreV1NamespacedSecretOptionalParams): Promise<Models.ReplaceCoreV1NamespacedSecretResponse>;
  /**
   * @param body
   * @param name name of the Secret
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replaceCoreV1NamespacedSecret(body: Models.V1Secret, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Secret>): void;
  /**
   * @param body
   * @param name name of the Secret
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceCoreV1NamespacedSecret(body: Models.V1Secret, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplaceCoreV1NamespacedSecretOptionalParams, callback: msRest.ServiceCallback<Models.V1Secret>): void;
  replaceCoreV1NamespacedSecret(body: Models.V1Secret, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceCoreV1NamespacedSecretOptionalParams | msRest.ServiceCallback<Models.V1Secret>, callback?: msRest.ServiceCallback<Models.V1Secret>): Promise<Models.ReplaceCoreV1NamespacedSecretResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replaceCoreV1NamespacedSecretOperationSpec,
      callback) as Promise<Models.ReplaceCoreV1NamespacedSecretResponse>;
  }

  /**
   * delete a Secret
   * @param body
   * @param name name of the Secret
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteCoreV1NamespacedSecretResponse>
   */
  deleteCoreV1NamespacedSecret(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteCoreV1NamespacedSecretOptionalParams): Promise<Models.DeleteCoreV1NamespacedSecretResponse>;
  /**
   * @param body
   * @param name name of the Secret
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteCoreV1NamespacedSecret(body: Models.V1DeleteOptions, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param name name of the Secret
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteCoreV1NamespacedSecret(body: Models.V1DeleteOptions, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteCoreV1NamespacedSecretOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteCoreV1NamespacedSecret(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteCoreV1NamespacedSecretOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteCoreV1NamespacedSecretResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      deleteCoreV1NamespacedSecretOperationSpec,
      callback) as Promise<Models.DeleteCoreV1NamespacedSecretResponse>;
  }

  /**
   * partially update the specified Secret
   * @param body
   * @param name name of the Secret
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchCoreV1NamespacedSecretResponse>
   */
  patchCoreV1NamespacedSecret(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchCoreV1NamespacedSecretOptionalParams): Promise<Models.PatchCoreV1NamespacedSecretResponse>;
  /**
   * @param body
   * @param name name of the Secret
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  patchCoreV1NamespacedSecret(body: any, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Secret>): void;
  /**
   * @param body
   * @param name name of the Secret
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  patchCoreV1NamespacedSecret(body: any, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesPatchCoreV1NamespacedSecretOptionalParams, callback: msRest.ServiceCallback<Models.V1Secret>): void;
  patchCoreV1NamespacedSecret(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchCoreV1NamespacedSecretOptionalParams | msRest.ServiceCallback<Models.V1Secret>, callback?: msRest.ServiceCallback<Models.V1Secret>): Promise<Models.PatchCoreV1NamespacedSecretResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      patchCoreV1NamespacedSecretOperationSpec,
      callback) as Promise<Models.PatchCoreV1NamespacedSecretResponse>;
  }

  /**
   * list or watch objects of kind ServiceAccount
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ListCoreV1NamespacedServiceAccountResponse>
   */
  listCoreV1NamespacedServiceAccount(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListCoreV1NamespacedServiceAccountOptionalParams): Promise<Models.ListCoreV1NamespacedServiceAccountResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  listCoreV1NamespacedServiceAccount(namespace: string, callback: msRest.ServiceCallback<Models.V1ServiceAccountList>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  listCoreV1NamespacedServiceAccount(namespace: string, options: Models.OpenShiftAPIwithKubernetesListCoreV1NamespacedServiceAccountOptionalParams, callback: msRest.ServiceCallback<Models.V1ServiceAccountList>): void;
  listCoreV1NamespacedServiceAccount(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListCoreV1NamespacedServiceAccountOptionalParams | msRest.ServiceCallback<Models.V1ServiceAccountList>, callback?: msRest.ServiceCallback<Models.V1ServiceAccountList>): Promise<Models.ListCoreV1NamespacedServiceAccountResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      listCoreV1NamespacedServiceAccountOperationSpec,
      callback) as Promise<Models.ListCoreV1NamespacedServiceAccountResponse>;
  }

  /**
   * create a ServiceAccount
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateCoreV1NamespacedServiceAccountResponse>
   */
  createCoreV1NamespacedServiceAccount(body: Models.V1ServiceAccount, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateCoreV1NamespacedServiceAccountOptionalParams): Promise<Models.CreateCoreV1NamespacedServiceAccountResponse>;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  createCoreV1NamespacedServiceAccount(body: Models.V1ServiceAccount, namespace: string, callback: msRest.ServiceCallback<Models.V1ServiceAccount>): void;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  createCoreV1NamespacedServiceAccount(body: Models.V1ServiceAccount, namespace: string, options: Models.OpenShiftAPIwithKubernetesCreateCoreV1NamespacedServiceAccountOptionalParams, callback: msRest.ServiceCallback<Models.V1ServiceAccount>): void;
  createCoreV1NamespacedServiceAccount(body: Models.V1ServiceAccount, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateCoreV1NamespacedServiceAccountOptionalParams | msRest.ServiceCallback<Models.V1ServiceAccount>, callback?: msRest.ServiceCallback<Models.V1ServiceAccount>): Promise<Models.CreateCoreV1NamespacedServiceAccountResponse> {
    return this.sendOperationRequest(
      {
        body,
        namespace,
        options
      },
      createCoreV1NamespacedServiceAccountOperationSpec,
      callback) as Promise<Models.CreateCoreV1NamespacedServiceAccountResponse>;
  }

  /**
   * delete collection of ServiceAccount
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteCoreV1CollectionNamespacedServiceAccountResponse>
   */
  deleteCoreV1CollectionNamespacedServiceAccount(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteCoreV1CollectionNamespacedServiceAccountOptionalParams): Promise<Models.DeleteCoreV1CollectionNamespacedServiceAccountResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteCoreV1CollectionNamespacedServiceAccount(namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteCoreV1CollectionNamespacedServiceAccount(namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteCoreV1CollectionNamespacedServiceAccountOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteCoreV1CollectionNamespacedServiceAccount(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteCoreV1CollectionNamespacedServiceAccountOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteCoreV1CollectionNamespacedServiceAccountResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      deleteCoreV1CollectionNamespacedServiceAccountOperationSpec,
      callback) as Promise<Models.DeleteCoreV1CollectionNamespacedServiceAccountResponse>;
  }

  /**
   * read the specified ServiceAccount
   * @param name name of the ServiceAccount
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadCoreV1NamespacedServiceAccountResponse>
   */
  readCoreV1NamespacedServiceAccount(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadCoreV1NamespacedServiceAccountOptionalParams): Promise<Models.ReadCoreV1NamespacedServiceAccountResponse>;
  /**
   * @param name name of the ServiceAccount
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readCoreV1NamespacedServiceAccount(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1ServiceAccount>): void;
  /**
   * @param name name of the ServiceAccount
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readCoreV1NamespacedServiceAccount(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadCoreV1NamespacedServiceAccountOptionalParams, callback: msRest.ServiceCallback<Models.V1ServiceAccount>): void;
  readCoreV1NamespacedServiceAccount(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadCoreV1NamespacedServiceAccountOptionalParams | msRest.ServiceCallback<Models.V1ServiceAccount>, callback?: msRest.ServiceCallback<Models.V1ServiceAccount>): Promise<Models.ReadCoreV1NamespacedServiceAccountResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readCoreV1NamespacedServiceAccountOperationSpec,
      callback) as Promise<Models.ReadCoreV1NamespacedServiceAccountResponse>;
  }

  /**
   * replace the specified ServiceAccount
   * @param body
   * @param name name of the ServiceAccount
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceCoreV1NamespacedServiceAccountResponse>
   */
  replaceCoreV1NamespacedServiceAccount(body: Models.V1ServiceAccount, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceCoreV1NamespacedServiceAccountOptionalParams): Promise<Models.ReplaceCoreV1NamespacedServiceAccountResponse>;
  /**
   * @param body
   * @param name name of the ServiceAccount
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replaceCoreV1NamespacedServiceAccount(body: Models.V1ServiceAccount, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1ServiceAccount>): void;
  /**
   * @param body
   * @param name name of the ServiceAccount
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceCoreV1NamespacedServiceAccount(body: Models.V1ServiceAccount, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplaceCoreV1NamespacedServiceAccountOptionalParams, callback: msRest.ServiceCallback<Models.V1ServiceAccount>): void;
  replaceCoreV1NamespacedServiceAccount(body: Models.V1ServiceAccount, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceCoreV1NamespacedServiceAccountOptionalParams | msRest.ServiceCallback<Models.V1ServiceAccount>, callback?: msRest.ServiceCallback<Models.V1ServiceAccount>): Promise<Models.ReplaceCoreV1NamespacedServiceAccountResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replaceCoreV1NamespacedServiceAccountOperationSpec,
      callback) as Promise<Models.ReplaceCoreV1NamespacedServiceAccountResponse>;
  }

  /**
   * delete a ServiceAccount
   * @param body
   * @param name name of the ServiceAccount
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteCoreV1NamespacedServiceAccountResponse>
   */
  deleteCoreV1NamespacedServiceAccount(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteCoreV1NamespacedServiceAccountOptionalParams): Promise<Models.DeleteCoreV1NamespacedServiceAccountResponse>;
  /**
   * @param body
   * @param name name of the ServiceAccount
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteCoreV1NamespacedServiceAccount(body: Models.V1DeleteOptions, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param name name of the ServiceAccount
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteCoreV1NamespacedServiceAccount(body: Models.V1DeleteOptions, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteCoreV1NamespacedServiceAccountOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteCoreV1NamespacedServiceAccount(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteCoreV1NamespacedServiceAccountOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteCoreV1NamespacedServiceAccountResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      deleteCoreV1NamespacedServiceAccountOperationSpec,
      callback) as Promise<Models.DeleteCoreV1NamespacedServiceAccountResponse>;
  }

  /**
   * partially update the specified ServiceAccount
   * @param body
   * @param name name of the ServiceAccount
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchCoreV1NamespacedServiceAccountResponse>
   */
  patchCoreV1NamespacedServiceAccount(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchCoreV1NamespacedServiceAccountOptionalParams): Promise<Models.PatchCoreV1NamespacedServiceAccountResponse>;
  /**
   * @param body
   * @param name name of the ServiceAccount
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  patchCoreV1NamespacedServiceAccount(body: any, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1ServiceAccount>): void;
  /**
   * @param body
   * @param name name of the ServiceAccount
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  patchCoreV1NamespacedServiceAccount(body: any, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesPatchCoreV1NamespacedServiceAccountOptionalParams, callback: msRest.ServiceCallback<Models.V1ServiceAccount>): void;
  patchCoreV1NamespacedServiceAccount(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchCoreV1NamespacedServiceAccountOptionalParams | msRest.ServiceCallback<Models.V1ServiceAccount>, callback?: msRest.ServiceCallback<Models.V1ServiceAccount>): Promise<Models.PatchCoreV1NamespacedServiceAccountResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      patchCoreV1NamespacedServiceAccountOperationSpec,
      callback) as Promise<Models.PatchCoreV1NamespacedServiceAccountResponse>;
  }

  /**
   * list or watch objects of kind Service
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ListCoreV1NamespacedServiceResponse>
   */
  listCoreV1NamespacedService(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListCoreV1NamespacedServiceOptionalParams): Promise<Models.ListCoreV1NamespacedServiceResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  listCoreV1NamespacedService(namespace: string, callback: msRest.ServiceCallback<Models.V1ServiceList>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  listCoreV1NamespacedService(namespace: string, options: Models.OpenShiftAPIwithKubernetesListCoreV1NamespacedServiceOptionalParams, callback: msRest.ServiceCallback<Models.V1ServiceList>): void;
  listCoreV1NamespacedService(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListCoreV1NamespacedServiceOptionalParams | msRest.ServiceCallback<Models.V1ServiceList>, callback?: msRest.ServiceCallback<Models.V1ServiceList>): Promise<Models.ListCoreV1NamespacedServiceResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      listCoreV1NamespacedServiceOperationSpec,
      callback) as Promise<Models.ListCoreV1NamespacedServiceResponse>;
  }

  /**
   * create a Service
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateCoreV1NamespacedServiceResponse>
   */
  createCoreV1NamespacedService(body: Models.V1Service, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateCoreV1NamespacedServiceOptionalParams): Promise<Models.CreateCoreV1NamespacedServiceResponse>;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  createCoreV1NamespacedService(body: Models.V1Service, namespace: string, callback: msRest.ServiceCallback<Models.V1Service>): void;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  createCoreV1NamespacedService(body: Models.V1Service, namespace: string, options: Models.OpenShiftAPIwithKubernetesCreateCoreV1NamespacedServiceOptionalParams, callback: msRest.ServiceCallback<Models.V1Service>): void;
  createCoreV1NamespacedService(body: Models.V1Service, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateCoreV1NamespacedServiceOptionalParams | msRest.ServiceCallback<Models.V1Service>, callback?: msRest.ServiceCallback<Models.V1Service>): Promise<Models.CreateCoreV1NamespacedServiceResponse> {
    return this.sendOperationRequest(
      {
        body,
        namespace,
        options
      },
      createCoreV1NamespacedServiceOperationSpec,
      callback) as Promise<Models.CreateCoreV1NamespacedServiceResponse>;
  }

  /**
   * read the specified Service
   * @param name name of the Service
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadCoreV1NamespacedServiceResponse>
   */
  readCoreV1NamespacedService(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadCoreV1NamespacedServiceOptionalParams): Promise<Models.ReadCoreV1NamespacedServiceResponse>;
  /**
   * @param name name of the Service
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readCoreV1NamespacedService(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Service>): void;
  /**
   * @param name name of the Service
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readCoreV1NamespacedService(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadCoreV1NamespacedServiceOptionalParams, callback: msRest.ServiceCallback<Models.V1Service>): void;
  readCoreV1NamespacedService(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadCoreV1NamespacedServiceOptionalParams | msRest.ServiceCallback<Models.V1Service>, callback?: msRest.ServiceCallback<Models.V1Service>): Promise<Models.ReadCoreV1NamespacedServiceResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readCoreV1NamespacedServiceOperationSpec,
      callback) as Promise<Models.ReadCoreV1NamespacedServiceResponse>;
  }

  /**
   * replace the specified Service
   * @param body
   * @param name name of the Service
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceCoreV1NamespacedServiceResponse>
   */
  replaceCoreV1NamespacedService(body: Models.V1Service, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceCoreV1NamespacedServiceOptionalParams): Promise<Models.ReplaceCoreV1NamespacedServiceResponse>;
  /**
   * @param body
   * @param name name of the Service
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replaceCoreV1NamespacedService(body: Models.V1Service, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Service>): void;
  /**
   * @param body
   * @param name name of the Service
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceCoreV1NamespacedService(body: Models.V1Service, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplaceCoreV1NamespacedServiceOptionalParams, callback: msRest.ServiceCallback<Models.V1Service>): void;
  replaceCoreV1NamespacedService(body: Models.V1Service, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceCoreV1NamespacedServiceOptionalParams | msRest.ServiceCallback<Models.V1Service>, callback?: msRest.ServiceCallback<Models.V1Service>): Promise<Models.ReplaceCoreV1NamespacedServiceResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replaceCoreV1NamespacedServiceOperationSpec,
      callback) as Promise<Models.ReplaceCoreV1NamespacedServiceResponse>;
  }

  /**
   * delete a Service
   * @param body
   * @param name name of the Service
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteCoreV1NamespacedServiceResponse>
   */
  deleteCoreV1NamespacedService(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteCoreV1NamespacedServiceOptionalParams): Promise<Models.DeleteCoreV1NamespacedServiceResponse>;
  /**
   * @param body
   * @param name name of the Service
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteCoreV1NamespacedService(body: Models.V1DeleteOptions, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param name name of the Service
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteCoreV1NamespacedService(body: Models.V1DeleteOptions, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteCoreV1NamespacedServiceOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteCoreV1NamespacedService(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteCoreV1NamespacedServiceOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteCoreV1NamespacedServiceResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      deleteCoreV1NamespacedServiceOperationSpec,
      callback) as Promise<Models.DeleteCoreV1NamespacedServiceResponse>;
  }

  /**
   * partially update the specified Service
   * @param body
   * @param name name of the Service
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchCoreV1NamespacedServiceResponse>
   */
  patchCoreV1NamespacedService(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchCoreV1NamespacedServiceOptionalParams): Promise<Models.PatchCoreV1NamespacedServiceResponse>;
  /**
   * @param body
   * @param name name of the Service
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  patchCoreV1NamespacedService(body: any, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Service>): void;
  /**
   * @param body
   * @param name name of the Service
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  patchCoreV1NamespacedService(body: any, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesPatchCoreV1NamespacedServiceOptionalParams, callback: msRest.ServiceCallback<Models.V1Service>): void;
  patchCoreV1NamespacedService(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchCoreV1NamespacedServiceOptionalParams | msRest.ServiceCallback<Models.V1Service>, callback?: msRest.ServiceCallback<Models.V1Service>): Promise<Models.PatchCoreV1NamespacedServiceResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      patchCoreV1NamespacedServiceOperationSpec,
      callback) as Promise<Models.PatchCoreV1NamespacedServiceResponse>;
  }

  /**
   * connect GET requests to proxy of Service
   * @param name name of the Service
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ConnectCoreV1GetNamespacedServiceProxyResponse>
   */
  connectCoreV1GetNamespacedServiceProxy(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesConnectCoreV1GetNamespacedServiceProxyOptionalParams): Promise<Models.ConnectCoreV1GetNamespacedServiceProxyResponse>;
  /**
   * @param name name of the Service
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  connectCoreV1GetNamespacedServiceProxy(name: string, namespace: string, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param name name of the Service
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  connectCoreV1GetNamespacedServiceProxy(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesConnectCoreV1GetNamespacedServiceProxyOptionalParams, callback: msRest.ServiceCallback<string>): void;
  connectCoreV1GetNamespacedServiceProxy(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesConnectCoreV1GetNamespacedServiceProxyOptionalParams | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.ConnectCoreV1GetNamespacedServiceProxyResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      connectCoreV1GetNamespacedServiceProxyOperationSpec,
      callback) as Promise<Models.ConnectCoreV1GetNamespacedServiceProxyResponse>;
  }

  /**
   * connect PUT requests to proxy of Service
   * @param name name of the Service
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ConnectCoreV1PutNamespacedServiceProxyResponse>
   */
  connectCoreV1PutNamespacedServiceProxy(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesConnectCoreV1PutNamespacedServiceProxyOptionalParams): Promise<Models.ConnectCoreV1PutNamespacedServiceProxyResponse>;
  /**
   * @param name name of the Service
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  connectCoreV1PutNamespacedServiceProxy(name: string, namespace: string, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param name name of the Service
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  connectCoreV1PutNamespacedServiceProxy(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesConnectCoreV1PutNamespacedServiceProxyOptionalParams, callback: msRest.ServiceCallback<string>): void;
  connectCoreV1PutNamespacedServiceProxy(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesConnectCoreV1PutNamespacedServiceProxyOptionalParams | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.ConnectCoreV1PutNamespacedServiceProxyResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      connectCoreV1PutNamespacedServiceProxyOperationSpec,
      callback) as Promise<Models.ConnectCoreV1PutNamespacedServiceProxyResponse>;
  }

  /**
   * connect POST requests to proxy of Service
   * @param name name of the Service
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ConnectCoreV1PostNamespacedServiceProxyResponse>
   */
  connectCoreV1PostNamespacedServiceProxy(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesConnectCoreV1PostNamespacedServiceProxyOptionalParams): Promise<Models.ConnectCoreV1PostNamespacedServiceProxyResponse>;
  /**
   * @param name name of the Service
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  connectCoreV1PostNamespacedServiceProxy(name: string, namespace: string, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param name name of the Service
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  connectCoreV1PostNamespacedServiceProxy(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesConnectCoreV1PostNamespacedServiceProxyOptionalParams, callback: msRest.ServiceCallback<string>): void;
  connectCoreV1PostNamespacedServiceProxy(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesConnectCoreV1PostNamespacedServiceProxyOptionalParams | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.ConnectCoreV1PostNamespacedServiceProxyResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      connectCoreV1PostNamespacedServiceProxyOperationSpec,
      callback) as Promise<Models.ConnectCoreV1PostNamespacedServiceProxyResponse>;
  }

  /**
   * connect DELETE requests to proxy of Service
   * @param name name of the Service
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ConnectCoreV1DeleteNamespacedServiceProxyResponse>
   */
  connectCoreV1DeleteNamespacedServiceProxy(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesConnectCoreV1DeleteNamespacedServiceProxyOptionalParams): Promise<Models.ConnectCoreV1DeleteNamespacedServiceProxyResponse>;
  /**
   * @param name name of the Service
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  connectCoreV1DeleteNamespacedServiceProxy(name: string, namespace: string, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param name name of the Service
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  connectCoreV1DeleteNamespacedServiceProxy(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesConnectCoreV1DeleteNamespacedServiceProxyOptionalParams, callback: msRest.ServiceCallback<string>): void;
  connectCoreV1DeleteNamespacedServiceProxy(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesConnectCoreV1DeleteNamespacedServiceProxyOptionalParams | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.ConnectCoreV1DeleteNamespacedServiceProxyResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      connectCoreV1DeleteNamespacedServiceProxyOperationSpec,
      callback) as Promise<Models.ConnectCoreV1DeleteNamespacedServiceProxyResponse>;
  }

  /**
   * connect HEAD requests to proxy of Service
   * @param name name of the Service
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ConnectCoreV1HeadNamespacedServiceProxyResponse>
   */
  connectCoreV1HeadNamespacedServiceProxy(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesConnectCoreV1HeadNamespacedServiceProxyOptionalParams): Promise<Models.ConnectCoreV1HeadNamespacedServiceProxyResponse>;
  /**
   * @param name name of the Service
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  connectCoreV1HeadNamespacedServiceProxy(name: string, namespace: string, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param name name of the Service
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  connectCoreV1HeadNamespacedServiceProxy(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesConnectCoreV1HeadNamespacedServiceProxyOptionalParams, callback: msRest.ServiceCallback<string>): void;
  connectCoreV1HeadNamespacedServiceProxy(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesConnectCoreV1HeadNamespacedServiceProxyOptionalParams | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.ConnectCoreV1HeadNamespacedServiceProxyResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      connectCoreV1HeadNamespacedServiceProxyOperationSpec,
      callback) as Promise<Models.ConnectCoreV1HeadNamespacedServiceProxyResponse>;
  }

  /**
   * connect PATCH requests to proxy of Service
   * @param name name of the Service
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ConnectCoreV1PatchNamespacedServiceProxyResponse>
   */
  connectCoreV1PatchNamespacedServiceProxy(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesConnectCoreV1PatchNamespacedServiceProxyOptionalParams): Promise<Models.ConnectCoreV1PatchNamespacedServiceProxyResponse>;
  /**
   * @param name name of the Service
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  connectCoreV1PatchNamespacedServiceProxy(name: string, namespace: string, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param name name of the Service
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  connectCoreV1PatchNamespacedServiceProxy(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesConnectCoreV1PatchNamespacedServiceProxyOptionalParams, callback: msRest.ServiceCallback<string>): void;
  connectCoreV1PatchNamespacedServiceProxy(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesConnectCoreV1PatchNamespacedServiceProxyOptionalParams | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.ConnectCoreV1PatchNamespacedServiceProxyResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      connectCoreV1PatchNamespacedServiceProxyOperationSpec,
      callback) as Promise<Models.ConnectCoreV1PatchNamespacedServiceProxyResponse>;
  }

  /**
   * connect GET requests to proxy of Service
   * @param name name of the Service
   * @param namespace object name and auth scope, such as for teams and projects
   * @param path path to the resource
   * @param path1 Path is the part of URLs that include service endpoints, suffixes, and parameters
   * to use for the current proxy request to service. For example, the whole request URL is
   * http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy.
   * Path is _search?q=user:kimchy.
   * @param [options] The optional parameters
   * @returns Promise<Models.ConnectCoreV1GetNamespacedServiceProxyWithPathResponse>
   */
  connectCoreV1GetNamespacedServiceProxyWithPath(name: string, namespace: string, path: string, path1: string, options?: msRest.RequestOptionsBase): Promise<Models.ConnectCoreV1GetNamespacedServiceProxyWithPathResponse>;
  /**
   * @param name name of the Service
   * @param namespace object name and auth scope, such as for teams and projects
   * @param path path to the resource
   * @param path1 Path is the part of URLs that include service endpoints, suffixes, and parameters
   * to use for the current proxy request to service. For example, the whole request URL is
   * http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy.
   * Path is _search?q=user:kimchy.
   * @param callback The callback
   */
  connectCoreV1GetNamespacedServiceProxyWithPath(name: string, namespace: string, path: string, path1: string, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param name name of the Service
   * @param namespace object name and auth scope, such as for teams and projects
   * @param path path to the resource
   * @param path1 Path is the part of URLs that include service endpoints, suffixes, and parameters
   * to use for the current proxy request to service. For example, the whole request URL is
   * http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy.
   * Path is _search?q=user:kimchy.
   * @param options The optional parameters
   * @param callback The callback
   */
  connectCoreV1GetNamespacedServiceProxyWithPath(name: string, namespace: string, path: string, path1: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
  connectCoreV1GetNamespacedServiceProxyWithPath(name: string, namespace: string, path: string, path1: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.ConnectCoreV1GetNamespacedServiceProxyWithPathResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        path,
        path1,
        options
      },
      connectCoreV1GetNamespacedServiceProxyWithPathOperationSpec,
      callback) as Promise<Models.ConnectCoreV1GetNamespacedServiceProxyWithPathResponse>;
  }

  /**
   * connect PUT requests to proxy of Service
   * @param name name of the Service
   * @param namespace object name and auth scope, such as for teams and projects
   * @param path path to the resource
   * @param path1 Path is the part of URLs that include service endpoints, suffixes, and parameters
   * to use for the current proxy request to service. For example, the whole request URL is
   * http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy.
   * Path is _search?q=user:kimchy.
   * @param [options] The optional parameters
   * @returns Promise<Models.ConnectCoreV1PutNamespacedServiceProxyWithPathResponse>
   */
  connectCoreV1PutNamespacedServiceProxyWithPath(name: string, namespace: string, path: string, path1: string, options?: msRest.RequestOptionsBase): Promise<Models.ConnectCoreV1PutNamespacedServiceProxyWithPathResponse>;
  /**
   * @param name name of the Service
   * @param namespace object name and auth scope, such as for teams and projects
   * @param path path to the resource
   * @param path1 Path is the part of URLs that include service endpoints, suffixes, and parameters
   * to use for the current proxy request to service. For example, the whole request URL is
   * http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy.
   * Path is _search?q=user:kimchy.
   * @param callback The callback
   */
  connectCoreV1PutNamespacedServiceProxyWithPath(name: string, namespace: string, path: string, path1: string, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param name name of the Service
   * @param namespace object name and auth scope, such as for teams and projects
   * @param path path to the resource
   * @param path1 Path is the part of URLs that include service endpoints, suffixes, and parameters
   * to use for the current proxy request to service. For example, the whole request URL is
   * http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy.
   * Path is _search?q=user:kimchy.
   * @param options The optional parameters
   * @param callback The callback
   */
  connectCoreV1PutNamespacedServiceProxyWithPath(name: string, namespace: string, path: string, path1: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
  connectCoreV1PutNamespacedServiceProxyWithPath(name: string, namespace: string, path: string, path1: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.ConnectCoreV1PutNamespacedServiceProxyWithPathResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        path,
        path1,
        options
      },
      connectCoreV1PutNamespacedServiceProxyWithPathOperationSpec,
      callback) as Promise<Models.ConnectCoreV1PutNamespacedServiceProxyWithPathResponse>;
  }

  /**
   * connect POST requests to proxy of Service
   * @param name name of the Service
   * @param namespace object name and auth scope, such as for teams and projects
   * @param path path to the resource
   * @param path1 Path is the part of URLs that include service endpoints, suffixes, and parameters
   * to use for the current proxy request to service. For example, the whole request URL is
   * http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy.
   * Path is _search?q=user:kimchy.
   * @param [options] The optional parameters
   * @returns Promise<Models.ConnectCoreV1PostNamespacedServiceProxyWithPathResponse>
   */
  connectCoreV1PostNamespacedServiceProxyWithPath(name: string, namespace: string, path: string, path1: string, options?: msRest.RequestOptionsBase): Promise<Models.ConnectCoreV1PostNamespacedServiceProxyWithPathResponse>;
  /**
   * @param name name of the Service
   * @param namespace object name and auth scope, such as for teams and projects
   * @param path path to the resource
   * @param path1 Path is the part of URLs that include service endpoints, suffixes, and parameters
   * to use for the current proxy request to service. For example, the whole request URL is
   * http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy.
   * Path is _search?q=user:kimchy.
   * @param callback The callback
   */
  connectCoreV1PostNamespacedServiceProxyWithPath(name: string, namespace: string, path: string, path1: string, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param name name of the Service
   * @param namespace object name and auth scope, such as for teams and projects
   * @param path path to the resource
   * @param path1 Path is the part of URLs that include service endpoints, suffixes, and parameters
   * to use for the current proxy request to service. For example, the whole request URL is
   * http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy.
   * Path is _search?q=user:kimchy.
   * @param options The optional parameters
   * @param callback The callback
   */
  connectCoreV1PostNamespacedServiceProxyWithPath(name: string, namespace: string, path: string, path1: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
  connectCoreV1PostNamespacedServiceProxyWithPath(name: string, namespace: string, path: string, path1: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.ConnectCoreV1PostNamespacedServiceProxyWithPathResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        path,
        path1,
        options
      },
      connectCoreV1PostNamespacedServiceProxyWithPathOperationSpec,
      callback) as Promise<Models.ConnectCoreV1PostNamespacedServiceProxyWithPathResponse>;
  }

  /**
   * connect DELETE requests to proxy of Service
   * @param name name of the Service
   * @param namespace object name and auth scope, such as for teams and projects
   * @param path path to the resource
   * @param path1 Path is the part of URLs that include service endpoints, suffixes, and parameters
   * to use for the current proxy request to service. For example, the whole request URL is
   * http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy.
   * Path is _search?q=user:kimchy.
   * @param [options] The optional parameters
   * @returns Promise<Models.ConnectCoreV1DeleteNamespacedServiceProxyWithPathResponse>
   */
  connectCoreV1DeleteNamespacedServiceProxyWithPath(name: string, namespace: string, path: string, path1: string, options?: msRest.RequestOptionsBase): Promise<Models.ConnectCoreV1DeleteNamespacedServiceProxyWithPathResponse>;
  /**
   * @param name name of the Service
   * @param namespace object name and auth scope, such as for teams and projects
   * @param path path to the resource
   * @param path1 Path is the part of URLs that include service endpoints, suffixes, and parameters
   * to use for the current proxy request to service. For example, the whole request URL is
   * http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy.
   * Path is _search?q=user:kimchy.
   * @param callback The callback
   */
  connectCoreV1DeleteNamespacedServiceProxyWithPath(name: string, namespace: string, path: string, path1: string, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param name name of the Service
   * @param namespace object name and auth scope, such as for teams and projects
   * @param path path to the resource
   * @param path1 Path is the part of URLs that include service endpoints, suffixes, and parameters
   * to use for the current proxy request to service. For example, the whole request URL is
   * http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy.
   * Path is _search?q=user:kimchy.
   * @param options The optional parameters
   * @param callback The callback
   */
  connectCoreV1DeleteNamespacedServiceProxyWithPath(name: string, namespace: string, path: string, path1: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
  connectCoreV1DeleteNamespacedServiceProxyWithPath(name: string, namespace: string, path: string, path1: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.ConnectCoreV1DeleteNamespacedServiceProxyWithPathResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        path,
        path1,
        options
      },
      connectCoreV1DeleteNamespacedServiceProxyWithPathOperationSpec,
      callback) as Promise<Models.ConnectCoreV1DeleteNamespacedServiceProxyWithPathResponse>;
  }

  /**
   * connect HEAD requests to proxy of Service
   * @param name name of the Service
   * @param namespace object name and auth scope, such as for teams and projects
   * @param path path to the resource
   * @param path1 Path is the part of URLs that include service endpoints, suffixes, and parameters
   * to use for the current proxy request to service. For example, the whole request URL is
   * http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy.
   * Path is _search?q=user:kimchy.
   * @param [options] The optional parameters
   * @returns Promise<Models.ConnectCoreV1HeadNamespacedServiceProxyWithPathResponse>
   */
  connectCoreV1HeadNamespacedServiceProxyWithPath(name: string, namespace: string, path: string, path1: string, options?: msRest.RequestOptionsBase): Promise<Models.ConnectCoreV1HeadNamespacedServiceProxyWithPathResponse>;
  /**
   * @param name name of the Service
   * @param namespace object name and auth scope, such as for teams and projects
   * @param path path to the resource
   * @param path1 Path is the part of URLs that include service endpoints, suffixes, and parameters
   * to use for the current proxy request to service. For example, the whole request URL is
   * http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy.
   * Path is _search?q=user:kimchy.
   * @param callback The callback
   */
  connectCoreV1HeadNamespacedServiceProxyWithPath(name: string, namespace: string, path: string, path1: string, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param name name of the Service
   * @param namespace object name and auth scope, such as for teams and projects
   * @param path path to the resource
   * @param path1 Path is the part of URLs that include service endpoints, suffixes, and parameters
   * to use for the current proxy request to service. For example, the whole request URL is
   * http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy.
   * Path is _search?q=user:kimchy.
   * @param options The optional parameters
   * @param callback The callback
   */
  connectCoreV1HeadNamespacedServiceProxyWithPath(name: string, namespace: string, path: string, path1: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
  connectCoreV1HeadNamespacedServiceProxyWithPath(name: string, namespace: string, path: string, path1: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.ConnectCoreV1HeadNamespacedServiceProxyWithPathResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        path,
        path1,
        options
      },
      connectCoreV1HeadNamespacedServiceProxyWithPathOperationSpec,
      callback) as Promise<Models.ConnectCoreV1HeadNamespacedServiceProxyWithPathResponse>;
  }

  /**
   * connect PATCH requests to proxy of Service
   * @param name name of the Service
   * @param namespace object name and auth scope, such as for teams and projects
   * @param path path to the resource
   * @param path1 Path is the part of URLs that include service endpoints, suffixes, and parameters
   * to use for the current proxy request to service. For example, the whole request URL is
   * http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy.
   * Path is _search?q=user:kimchy.
   * @param [options] The optional parameters
   * @returns Promise<Models.ConnectCoreV1PatchNamespacedServiceProxyWithPathResponse>
   */
  connectCoreV1PatchNamespacedServiceProxyWithPath(name: string, namespace: string, path: string, path1: string, options?: msRest.RequestOptionsBase): Promise<Models.ConnectCoreV1PatchNamespacedServiceProxyWithPathResponse>;
  /**
   * @param name name of the Service
   * @param namespace object name and auth scope, such as for teams and projects
   * @param path path to the resource
   * @param path1 Path is the part of URLs that include service endpoints, suffixes, and parameters
   * to use for the current proxy request to service. For example, the whole request URL is
   * http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy.
   * Path is _search?q=user:kimchy.
   * @param callback The callback
   */
  connectCoreV1PatchNamespacedServiceProxyWithPath(name: string, namespace: string, path: string, path1: string, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param name name of the Service
   * @param namespace object name and auth scope, such as for teams and projects
   * @param path path to the resource
   * @param path1 Path is the part of URLs that include service endpoints, suffixes, and parameters
   * to use for the current proxy request to service. For example, the whole request URL is
   * http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy.
   * Path is _search?q=user:kimchy.
   * @param options The optional parameters
   * @param callback The callback
   */
  connectCoreV1PatchNamespacedServiceProxyWithPath(name: string, namespace: string, path: string, path1: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
  connectCoreV1PatchNamespacedServiceProxyWithPath(name: string, namespace: string, path: string, path1: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.ConnectCoreV1PatchNamespacedServiceProxyWithPathResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        path,
        path1,
        options
      },
      connectCoreV1PatchNamespacedServiceProxyWithPathOperationSpec,
      callback) as Promise<Models.ConnectCoreV1PatchNamespacedServiceProxyWithPathResponse>;
  }

  /**
   * read status of the specified Service
   * @param name name of the Service
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadCoreV1NamespacedServiceStatusResponse>
   */
  readCoreV1NamespacedServiceStatus(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadCoreV1NamespacedServiceStatusOptionalParams): Promise<Models.ReadCoreV1NamespacedServiceStatusResponse>;
  /**
   * @param name name of the Service
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readCoreV1NamespacedServiceStatus(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Service>): void;
  /**
   * @param name name of the Service
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readCoreV1NamespacedServiceStatus(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadCoreV1NamespacedServiceStatusOptionalParams, callback: msRest.ServiceCallback<Models.V1Service>): void;
  readCoreV1NamespacedServiceStatus(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadCoreV1NamespacedServiceStatusOptionalParams | msRest.ServiceCallback<Models.V1Service>, callback?: msRest.ServiceCallback<Models.V1Service>): Promise<Models.ReadCoreV1NamespacedServiceStatusResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readCoreV1NamespacedServiceStatusOperationSpec,
      callback) as Promise<Models.ReadCoreV1NamespacedServiceStatusResponse>;
  }

  /**
   * replace status of the specified Service
   * @param body
   * @param name name of the Service
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceCoreV1NamespacedServiceStatusResponse>
   */
  replaceCoreV1NamespacedServiceStatus(body: Models.V1Service, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceCoreV1NamespacedServiceStatusOptionalParams): Promise<Models.ReplaceCoreV1NamespacedServiceStatusResponse>;
  /**
   * @param body
   * @param name name of the Service
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replaceCoreV1NamespacedServiceStatus(body: Models.V1Service, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Service>): void;
  /**
   * @param body
   * @param name name of the Service
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceCoreV1NamespacedServiceStatus(body: Models.V1Service, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplaceCoreV1NamespacedServiceStatusOptionalParams, callback: msRest.ServiceCallback<Models.V1Service>): void;
  replaceCoreV1NamespacedServiceStatus(body: Models.V1Service, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceCoreV1NamespacedServiceStatusOptionalParams | msRest.ServiceCallback<Models.V1Service>, callback?: msRest.ServiceCallback<Models.V1Service>): Promise<Models.ReplaceCoreV1NamespacedServiceStatusResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replaceCoreV1NamespacedServiceStatusOperationSpec,
      callback) as Promise<Models.ReplaceCoreV1NamespacedServiceStatusResponse>;
  }

  /**
   * partially update status of the specified Service
   * @param body
   * @param name name of the Service
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchCoreV1NamespacedServiceStatusResponse>
   */
  patchCoreV1NamespacedServiceStatus(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchCoreV1NamespacedServiceStatusOptionalParams): Promise<Models.PatchCoreV1NamespacedServiceStatusResponse>;
  /**
   * @param body
   * @param name name of the Service
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  patchCoreV1NamespacedServiceStatus(body: any, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Service>): void;
  /**
   * @param body
   * @param name name of the Service
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  patchCoreV1NamespacedServiceStatus(body: any, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesPatchCoreV1NamespacedServiceStatusOptionalParams, callback: msRest.ServiceCallback<Models.V1Service>): void;
  patchCoreV1NamespacedServiceStatus(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchCoreV1NamespacedServiceStatusOptionalParams | msRest.ServiceCallback<Models.V1Service>, callback?: msRest.ServiceCallback<Models.V1Service>): Promise<Models.PatchCoreV1NamespacedServiceStatusResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      patchCoreV1NamespacedServiceStatusOperationSpec,
      callback) as Promise<Models.PatchCoreV1NamespacedServiceStatusResponse>;
  }

  /**
   * read the specified Namespace
   * @param name name of the Namespace
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadCoreV1NamespaceResponse>
   */
  readCoreV1Namespace(name: string, options?: Models.OpenShiftAPIwithKubernetesReadCoreV1NamespaceOptionalParams): Promise<Models.ReadCoreV1NamespaceResponse>;
  /**
   * @param name name of the Namespace
   * @param callback The callback
   */
  readCoreV1Namespace(name: string, callback: msRest.ServiceCallback<Models.V1Namespace>): void;
  /**
   * @param name name of the Namespace
   * @param options The optional parameters
   * @param callback The callback
   */
  readCoreV1Namespace(name: string, options: Models.OpenShiftAPIwithKubernetesReadCoreV1NamespaceOptionalParams, callback: msRest.ServiceCallback<Models.V1Namespace>): void;
  readCoreV1Namespace(name: string, options?: Models.OpenShiftAPIwithKubernetesReadCoreV1NamespaceOptionalParams | msRest.ServiceCallback<Models.V1Namespace>, callback?: msRest.ServiceCallback<Models.V1Namespace>): Promise<Models.ReadCoreV1NamespaceResponse> {
    return this.sendOperationRequest(
      {
        name,
        options
      },
      readCoreV1NamespaceOperationSpec,
      callback) as Promise<Models.ReadCoreV1NamespaceResponse>;
  }

  /**
   * replace the specified Namespace
   * @param body
   * @param name name of the Namespace
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceCoreV1NamespaceResponse>
   */
  replaceCoreV1Namespace(body: Models.V1Namespace, name: string, options?: Models.OpenShiftAPIwithKubernetesReplaceCoreV1NamespaceOptionalParams): Promise<Models.ReplaceCoreV1NamespaceResponse>;
  /**
   * @param body
   * @param name name of the Namespace
   * @param callback The callback
   */
  replaceCoreV1Namespace(body: Models.V1Namespace, name: string, callback: msRest.ServiceCallback<Models.V1Namespace>): void;
  /**
   * @param body
   * @param name name of the Namespace
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceCoreV1Namespace(body: Models.V1Namespace, name: string, options: Models.OpenShiftAPIwithKubernetesReplaceCoreV1NamespaceOptionalParams, callback: msRest.ServiceCallback<Models.V1Namespace>): void;
  replaceCoreV1Namespace(body: Models.V1Namespace, name: string, options?: Models.OpenShiftAPIwithKubernetesReplaceCoreV1NamespaceOptionalParams | msRest.ServiceCallback<Models.V1Namespace>, callback?: msRest.ServiceCallback<Models.V1Namespace>): Promise<Models.ReplaceCoreV1NamespaceResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      replaceCoreV1NamespaceOperationSpec,
      callback) as Promise<Models.ReplaceCoreV1NamespaceResponse>;
  }

  /**
   * delete a Namespace
   * @param body
   * @param name name of the Namespace
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteCoreV1NamespaceResponse>
   */
  deleteCoreV1Namespace(body: Models.V1DeleteOptions, name: string, options?: Models.OpenShiftAPIwithKubernetesDeleteCoreV1NamespaceOptionalParams): Promise<Models.DeleteCoreV1NamespaceResponse>;
  /**
   * @param body
   * @param name name of the Namespace
   * @param callback The callback
   */
  deleteCoreV1Namespace(body: Models.V1DeleteOptions, name: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param name name of the Namespace
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteCoreV1Namespace(body: Models.V1DeleteOptions, name: string, options: Models.OpenShiftAPIwithKubernetesDeleteCoreV1NamespaceOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteCoreV1Namespace(body: Models.V1DeleteOptions, name: string, options?: Models.OpenShiftAPIwithKubernetesDeleteCoreV1NamespaceOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteCoreV1NamespaceResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      deleteCoreV1NamespaceOperationSpec,
      callback) as Promise<Models.DeleteCoreV1NamespaceResponse>;
  }

  /**
   * partially update the specified Namespace
   * @param body
   * @param name name of the Namespace
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchCoreV1NamespaceResponse>
   */
  patchCoreV1Namespace(body: any, name: string, options?: Models.OpenShiftAPIwithKubernetesPatchCoreV1NamespaceOptionalParams): Promise<Models.PatchCoreV1NamespaceResponse>;
  /**
   * @param body
   * @param name name of the Namespace
   * @param callback The callback
   */
  patchCoreV1Namespace(body: any, name: string, callback: msRest.ServiceCallback<Models.V1Namespace>): void;
  /**
   * @param body
   * @param name name of the Namespace
   * @param options The optional parameters
   * @param callback The callback
   */
  patchCoreV1Namespace(body: any, name: string, options: Models.OpenShiftAPIwithKubernetesPatchCoreV1NamespaceOptionalParams, callback: msRest.ServiceCallback<Models.V1Namespace>): void;
  patchCoreV1Namespace(body: any, name: string, options?: Models.OpenShiftAPIwithKubernetesPatchCoreV1NamespaceOptionalParams | msRest.ServiceCallback<Models.V1Namespace>, callback?: msRest.ServiceCallback<Models.V1Namespace>): Promise<Models.PatchCoreV1NamespaceResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      patchCoreV1NamespaceOperationSpec,
      callback) as Promise<Models.PatchCoreV1NamespaceResponse>;
  }

  /**
   * replace finalize of the specified Namespace
   * @param body
   * @param name name of the Namespace
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceCoreV1NamespaceFinalizeResponse>
   */
  replaceCoreV1NamespaceFinalize(body: Models.V1Namespace, name: string, options?: Models.OpenShiftAPIwithKubernetesReplaceCoreV1NamespaceFinalizeOptionalParams): Promise<Models.ReplaceCoreV1NamespaceFinalizeResponse>;
  /**
   * @param body
   * @param name name of the Namespace
   * @param callback The callback
   */
  replaceCoreV1NamespaceFinalize(body: Models.V1Namespace, name: string, callback: msRest.ServiceCallback<Models.V1Namespace>): void;
  /**
   * @param body
   * @param name name of the Namespace
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceCoreV1NamespaceFinalize(body: Models.V1Namespace, name: string, options: Models.OpenShiftAPIwithKubernetesReplaceCoreV1NamespaceFinalizeOptionalParams, callback: msRest.ServiceCallback<Models.V1Namespace>): void;
  replaceCoreV1NamespaceFinalize(body: Models.V1Namespace, name: string, options?: Models.OpenShiftAPIwithKubernetesReplaceCoreV1NamespaceFinalizeOptionalParams | msRest.ServiceCallback<Models.V1Namespace>, callback?: msRest.ServiceCallback<Models.V1Namespace>): Promise<Models.ReplaceCoreV1NamespaceFinalizeResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      replaceCoreV1NamespaceFinalizeOperationSpec,
      callback) as Promise<Models.ReplaceCoreV1NamespaceFinalizeResponse>;
  }

  /**
   * read status of the specified Namespace
   * @param name name of the Namespace
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadCoreV1NamespaceStatusResponse>
   */
  readCoreV1NamespaceStatus(name: string, options?: Models.OpenShiftAPIwithKubernetesReadCoreV1NamespaceStatusOptionalParams): Promise<Models.ReadCoreV1NamespaceStatusResponse>;
  /**
   * @param name name of the Namespace
   * @param callback The callback
   */
  readCoreV1NamespaceStatus(name: string, callback: msRest.ServiceCallback<Models.V1Namespace>): void;
  /**
   * @param name name of the Namespace
   * @param options The optional parameters
   * @param callback The callback
   */
  readCoreV1NamespaceStatus(name: string, options: Models.OpenShiftAPIwithKubernetesReadCoreV1NamespaceStatusOptionalParams, callback: msRest.ServiceCallback<Models.V1Namespace>): void;
  readCoreV1NamespaceStatus(name: string, options?: Models.OpenShiftAPIwithKubernetesReadCoreV1NamespaceStatusOptionalParams | msRest.ServiceCallback<Models.V1Namespace>, callback?: msRest.ServiceCallback<Models.V1Namespace>): Promise<Models.ReadCoreV1NamespaceStatusResponse> {
    return this.sendOperationRequest(
      {
        name,
        options
      },
      readCoreV1NamespaceStatusOperationSpec,
      callback) as Promise<Models.ReadCoreV1NamespaceStatusResponse>;
  }

  /**
   * replace status of the specified Namespace
   * @param body
   * @param name name of the Namespace
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceCoreV1NamespaceStatusResponse>
   */
  replaceCoreV1NamespaceStatus(body: Models.V1Namespace, name: string, options?: Models.OpenShiftAPIwithKubernetesReplaceCoreV1NamespaceStatusOptionalParams): Promise<Models.ReplaceCoreV1NamespaceStatusResponse>;
  /**
   * @param body
   * @param name name of the Namespace
   * @param callback The callback
   */
  replaceCoreV1NamespaceStatus(body: Models.V1Namespace, name: string, callback: msRest.ServiceCallback<Models.V1Namespace>): void;
  /**
   * @param body
   * @param name name of the Namespace
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceCoreV1NamespaceStatus(body: Models.V1Namespace, name: string, options: Models.OpenShiftAPIwithKubernetesReplaceCoreV1NamespaceStatusOptionalParams, callback: msRest.ServiceCallback<Models.V1Namespace>): void;
  replaceCoreV1NamespaceStatus(body: Models.V1Namespace, name: string, options?: Models.OpenShiftAPIwithKubernetesReplaceCoreV1NamespaceStatusOptionalParams | msRest.ServiceCallback<Models.V1Namespace>, callback?: msRest.ServiceCallback<Models.V1Namespace>): Promise<Models.ReplaceCoreV1NamespaceStatusResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      replaceCoreV1NamespaceStatusOperationSpec,
      callback) as Promise<Models.ReplaceCoreV1NamespaceStatusResponse>;
  }

  /**
   * partially update status of the specified Namespace
   * @param body
   * @param name name of the Namespace
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchCoreV1NamespaceStatusResponse>
   */
  patchCoreV1NamespaceStatus(body: any, name: string, options?: Models.OpenShiftAPIwithKubernetesPatchCoreV1NamespaceStatusOptionalParams): Promise<Models.PatchCoreV1NamespaceStatusResponse>;
  /**
   * @param body
   * @param name name of the Namespace
   * @param callback The callback
   */
  patchCoreV1NamespaceStatus(body: any, name: string, callback: msRest.ServiceCallback<Models.V1Namespace>): void;
  /**
   * @param body
   * @param name name of the Namespace
   * @param options The optional parameters
   * @param callback The callback
   */
  patchCoreV1NamespaceStatus(body: any, name: string, options: Models.OpenShiftAPIwithKubernetesPatchCoreV1NamespaceStatusOptionalParams, callback: msRest.ServiceCallback<Models.V1Namespace>): void;
  patchCoreV1NamespaceStatus(body: any, name: string, options?: Models.OpenShiftAPIwithKubernetesPatchCoreV1NamespaceStatusOptionalParams | msRest.ServiceCallback<Models.V1Namespace>, callback?: msRest.ServiceCallback<Models.V1Namespace>): Promise<Models.PatchCoreV1NamespaceStatusResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      patchCoreV1NamespaceStatusOperationSpec,
      callback) as Promise<Models.PatchCoreV1NamespaceStatusResponse>;
  }

  /**
   * list or watch objects of kind Node
   * @param [options] The optional parameters
   * @returns Promise<Models.ListCoreV1NodeResponse>
   */
  listCoreV1Node(options?: Models.OpenShiftAPIwithKubernetesListCoreV1NodeOptionalParams): Promise<Models.ListCoreV1NodeResponse>;
  /**
   * @param callback The callback
   */
  listCoreV1Node(callback: msRest.ServiceCallback<Models.V1NodeList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listCoreV1Node(options: Models.OpenShiftAPIwithKubernetesListCoreV1NodeOptionalParams, callback: msRest.ServiceCallback<Models.V1NodeList>): void;
  listCoreV1Node(options?: Models.OpenShiftAPIwithKubernetesListCoreV1NodeOptionalParams | msRest.ServiceCallback<Models.V1NodeList>, callback?: msRest.ServiceCallback<Models.V1NodeList>): Promise<Models.ListCoreV1NodeResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listCoreV1NodeOperationSpec,
      callback) as Promise<Models.ListCoreV1NodeResponse>;
  }

  /**
   * create a Node
   * @param body
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateCoreV1NodeResponse>
   */
  createCoreV1Node(body: Models.V1Node, options?: Models.OpenShiftAPIwithKubernetesCreateCoreV1NodeOptionalParams): Promise<Models.CreateCoreV1NodeResponse>;
  /**
   * @param body
   * @param callback The callback
   */
  createCoreV1Node(body: Models.V1Node, callback: msRest.ServiceCallback<Models.V1Node>): void;
  /**
   * @param body
   * @param options The optional parameters
   * @param callback The callback
   */
  createCoreV1Node(body: Models.V1Node, options: Models.OpenShiftAPIwithKubernetesCreateCoreV1NodeOptionalParams, callback: msRest.ServiceCallback<Models.V1Node>): void;
  createCoreV1Node(body: Models.V1Node, options?: Models.OpenShiftAPIwithKubernetesCreateCoreV1NodeOptionalParams | msRest.ServiceCallback<Models.V1Node>, callback?: msRest.ServiceCallback<Models.V1Node>): Promise<Models.CreateCoreV1NodeResponse> {
    return this.sendOperationRequest(
      {
        body,
        options
      },
      createCoreV1NodeOperationSpec,
      callback) as Promise<Models.CreateCoreV1NodeResponse>;
  }

  /**
   * delete collection of Node
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteCoreV1CollectionNodeResponse>
   */
  deleteCoreV1CollectionNode(options?: Models.OpenShiftAPIwithKubernetesDeleteCoreV1CollectionNodeOptionalParams): Promise<Models.DeleteCoreV1CollectionNodeResponse>;
  /**
   * @param callback The callback
   */
  deleteCoreV1CollectionNode(callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteCoreV1CollectionNode(options: Models.OpenShiftAPIwithKubernetesDeleteCoreV1CollectionNodeOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteCoreV1CollectionNode(options?: Models.OpenShiftAPIwithKubernetesDeleteCoreV1CollectionNodeOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteCoreV1CollectionNodeResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      deleteCoreV1CollectionNodeOperationSpec,
      callback) as Promise<Models.DeleteCoreV1CollectionNodeResponse>;
  }

  /**
   * read the specified Node
   * @param name name of the Node
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadCoreV1NodeResponse>
   */
  readCoreV1Node(name: string, options?: Models.OpenShiftAPIwithKubernetesReadCoreV1NodeOptionalParams): Promise<Models.ReadCoreV1NodeResponse>;
  /**
   * @param name name of the Node
   * @param callback The callback
   */
  readCoreV1Node(name: string, callback: msRest.ServiceCallback<Models.V1Node>): void;
  /**
   * @param name name of the Node
   * @param options The optional parameters
   * @param callback The callback
   */
  readCoreV1Node(name: string, options: Models.OpenShiftAPIwithKubernetesReadCoreV1NodeOptionalParams, callback: msRest.ServiceCallback<Models.V1Node>): void;
  readCoreV1Node(name: string, options?: Models.OpenShiftAPIwithKubernetesReadCoreV1NodeOptionalParams | msRest.ServiceCallback<Models.V1Node>, callback?: msRest.ServiceCallback<Models.V1Node>): Promise<Models.ReadCoreV1NodeResponse> {
    return this.sendOperationRequest(
      {
        name,
        options
      },
      readCoreV1NodeOperationSpec,
      callback) as Promise<Models.ReadCoreV1NodeResponse>;
  }

  /**
   * replace the specified Node
   * @param body
   * @param name name of the Node
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceCoreV1NodeResponse>
   */
  replaceCoreV1Node(body: Models.V1Node, name: string, options?: Models.OpenShiftAPIwithKubernetesReplaceCoreV1NodeOptionalParams): Promise<Models.ReplaceCoreV1NodeResponse>;
  /**
   * @param body
   * @param name name of the Node
   * @param callback The callback
   */
  replaceCoreV1Node(body: Models.V1Node, name: string, callback: msRest.ServiceCallback<Models.V1Node>): void;
  /**
   * @param body
   * @param name name of the Node
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceCoreV1Node(body: Models.V1Node, name: string, options: Models.OpenShiftAPIwithKubernetesReplaceCoreV1NodeOptionalParams, callback: msRest.ServiceCallback<Models.V1Node>): void;
  replaceCoreV1Node(body: Models.V1Node, name: string, options?: Models.OpenShiftAPIwithKubernetesReplaceCoreV1NodeOptionalParams | msRest.ServiceCallback<Models.V1Node>, callback?: msRest.ServiceCallback<Models.V1Node>): Promise<Models.ReplaceCoreV1NodeResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      replaceCoreV1NodeOperationSpec,
      callback) as Promise<Models.ReplaceCoreV1NodeResponse>;
  }

  /**
   * delete a Node
   * @param body
   * @param name name of the Node
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteCoreV1NodeResponse>
   */
  deleteCoreV1Node(body: Models.V1DeleteOptions, name: string, options?: Models.OpenShiftAPIwithKubernetesDeleteCoreV1NodeOptionalParams): Promise<Models.DeleteCoreV1NodeResponse>;
  /**
   * @param body
   * @param name name of the Node
   * @param callback The callback
   */
  deleteCoreV1Node(body: Models.V1DeleteOptions, name: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param name name of the Node
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteCoreV1Node(body: Models.V1DeleteOptions, name: string, options: Models.OpenShiftAPIwithKubernetesDeleteCoreV1NodeOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteCoreV1Node(body: Models.V1DeleteOptions, name: string, options?: Models.OpenShiftAPIwithKubernetesDeleteCoreV1NodeOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteCoreV1NodeResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      deleteCoreV1NodeOperationSpec,
      callback) as Promise<Models.DeleteCoreV1NodeResponse>;
  }

  /**
   * partially update the specified Node
   * @param body
   * @param name name of the Node
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchCoreV1NodeResponse>
   */
  patchCoreV1Node(body: any, name: string, options?: Models.OpenShiftAPIwithKubernetesPatchCoreV1NodeOptionalParams): Promise<Models.PatchCoreV1NodeResponse>;
  /**
   * @param body
   * @param name name of the Node
   * @param callback The callback
   */
  patchCoreV1Node(body: any, name: string, callback: msRest.ServiceCallback<Models.V1Node>): void;
  /**
   * @param body
   * @param name name of the Node
   * @param options The optional parameters
   * @param callback The callback
   */
  patchCoreV1Node(body: any, name: string, options: Models.OpenShiftAPIwithKubernetesPatchCoreV1NodeOptionalParams, callback: msRest.ServiceCallback<Models.V1Node>): void;
  patchCoreV1Node(body: any, name: string, options?: Models.OpenShiftAPIwithKubernetesPatchCoreV1NodeOptionalParams | msRest.ServiceCallback<Models.V1Node>, callback?: msRest.ServiceCallback<Models.V1Node>): Promise<Models.PatchCoreV1NodeResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      patchCoreV1NodeOperationSpec,
      callback) as Promise<Models.PatchCoreV1NodeResponse>;
  }

  /**
   * connect GET requests to proxy of Node
   * @param name name of the Node
   * @param [options] The optional parameters
   * @returns Promise<Models.ConnectCoreV1GetNodeProxyResponse>
   */
  connectCoreV1GetNodeProxy(name: string, options?: Models.OpenShiftAPIwithKubernetesConnectCoreV1GetNodeProxyOptionalParams): Promise<Models.ConnectCoreV1GetNodeProxyResponse>;
  /**
   * @param name name of the Node
   * @param callback The callback
   */
  connectCoreV1GetNodeProxy(name: string, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param name name of the Node
   * @param options The optional parameters
   * @param callback The callback
   */
  connectCoreV1GetNodeProxy(name: string, options: Models.OpenShiftAPIwithKubernetesConnectCoreV1GetNodeProxyOptionalParams, callback: msRest.ServiceCallback<string>): void;
  connectCoreV1GetNodeProxy(name: string, options?: Models.OpenShiftAPIwithKubernetesConnectCoreV1GetNodeProxyOptionalParams | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.ConnectCoreV1GetNodeProxyResponse> {
    return this.sendOperationRequest(
      {
        name,
        options
      },
      connectCoreV1GetNodeProxyOperationSpec,
      callback) as Promise<Models.ConnectCoreV1GetNodeProxyResponse>;
  }

  /**
   * connect PUT requests to proxy of Node
   * @param name name of the Node
   * @param [options] The optional parameters
   * @returns Promise<Models.ConnectCoreV1PutNodeProxyResponse>
   */
  connectCoreV1PutNodeProxy(name: string, options?: Models.OpenShiftAPIwithKubernetesConnectCoreV1PutNodeProxyOptionalParams): Promise<Models.ConnectCoreV1PutNodeProxyResponse>;
  /**
   * @param name name of the Node
   * @param callback The callback
   */
  connectCoreV1PutNodeProxy(name: string, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param name name of the Node
   * @param options The optional parameters
   * @param callback The callback
   */
  connectCoreV1PutNodeProxy(name: string, options: Models.OpenShiftAPIwithKubernetesConnectCoreV1PutNodeProxyOptionalParams, callback: msRest.ServiceCallback<string>): void;
  connectCoreV1PutNodeProxy(name: string, options?: Models.OpenShiftAPIwithKubernetesConnectCoreV1PutNodeProxyOptionalParams | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.ConnectCoreV1PutNodeProxyResponse> {
    return this.sendOperationRequest(
      {
        name,
        options
      },
      connectCoreV1PutNodeProxyOperationSpec,
      callback) as Promise<Models.ConnectCoreV1PutNodeProxyResponse>;
  }

  /**
   * connect POST requests to proxy of Node
   * @param name name of the Node
   * @param [options] The optional parameters
   * @returns Promise<Models.ConnectCoreV1PostNodeProxyResponse>
   */
  connectCoreV1PostNodeProxy(name: string, options?: Models.OpenShiftAPIwithKubernetesConnectCoreV1PostNodeProxyOptionalParams): Promise<Models.ConnectCoreV1PostNodeProxyResponse>;
  /**
   * @param name name of the Node
   * @param callback The callback
   */
  connectCoreV1PostNodeProxy(name: string, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param name name of the Node
   * @param options The optional parameters
   * @param callback The callback
   */
  connectCoreV1PostNodeProxy(name: string, options: Models.OpenShiftAPIwithKubernetesConnectCoreV1PostNodeProxyOptionalParams, callback: msRest.ServiceCallback<string>): void;
  connectCoreV1PostNodeProxy(name: string, options?: Models.OpenShiftAPIwithKubernetesConnectCoreV1PostNodeProxyOptionalParams | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.ConnectCoreV1PostNodeProxyResponse> {
    return this.sendOperationRequest(
      {
        name,
        options
      },
      connectCoreV1PostNodeProxyOperationSpec,
      callback) as Promise<Models.ConnectCoreV1PostNodeProxyResponse>;
  }

  /**
   * connect DELETE requests to proxy of Node
   * @param name name of the Node
   * @param [options] The optional parameters
   * @returns Promise<Models.ConnectCoreV1DeleteNodeProxyResponse>
   */
  connectCoreV1DeleteNodeProxy(name: string, options?: Models.OpenShiftAPIwithKubernetesConnectCoreV1DeleteNodeProxyOptionalParams): Promise<Models.ConnectCoreV1DeleteNodeProxyResponse>;
  /**
   * @param name name of the Node
   * @param callback The callback
   */
  connectCoreV1DeleteNodeProxy(name: string, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param name name of the Node
   * @param options The optional parameters
   * @param callback The callback
   */
  connectCoreV1DeleteNodeProxy(name: string, options: Models.OpenShiftAPIwithKubernetesConnectCoreV1DeleteNodeProxyOptionalParams, callback: msRest.ServiceCallback<string>): void;
  connectCoreV1DeleteNodeProxy(name: string, options?: Models.OpenShiftAPIwithKubernetesConnectCoreV1DeleteNodeProxyOptionalParams | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.ConnectCoreV1DeleteNodeProxyResponse> {
    return this.sendOperationRequest(
      {
        name,
        options
      },
      connectCoreV1DeleteNodeProxyOperationSpec,
      callback) as Promise<Models.ConnectCoreV1DeleteNodeProxyResponse>;
  }

  /**
   * connect HEAD requests to proxy of Node
   * @param name name of the Node
   * @param [options] The optional parameters
   * @returns Promise<Models.ConnectCoreV1HeadNodeProxyResponse>
   */
  connectCoreV1HeadNodeProxy(name: string, options?: Models.OpenShiftAPIwithKubernetesConnectCoreV1HeadNodeProxyOptionalParams): Promise<Models.ConnectCoreV1HeadNodeProxyResponse>;
  /**
   * @param name name of the Node
   * @param callback The callback
   */
  connectCoreV1HeadNodeProxy(name: string, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param name name of the Node
   * @param options The optional parameters
   * @param callback The callback
   */
  connectCoreV1HeadNodeProxy(name: string, options: Models.OpenShiftAPIwithKubernetesConnectCoreV1HeadNodeProxyOptionalParams, callback: msRest.ServiceCallback<string>): void;
  connectCoreV1HeadNodeProxy(name: string, options?: Models.OpenShiftAPIwithKubernetesConnectCoreV1HeadNodeProxyOptionalParams | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.ConnectCoreV1HeadNodeProxyResponse> {
    return this.sendOperationRequest(
      {
        name,
        options
      },
      connectCoreV1HeadNodeProxyOperationSpec,
      callback) as Promise<Models.ConnectCoreV1HeadNodeProxyResponse>;
  }

  /**
   * connect PATCH requests to proxy of Node
   * @param name name of the Node
   * @param [options] The optional parameters
   * @returns Promise<Models.ConnectCoreV1PatchNodeProxyResponse>
   */
  connectCoreV1PatchNodeProxy(name: string, options?: Models.OpenShiftAPIwithKubernetesConnectCoreV1PatchNodeProxyOptionalParams): Promise<Models.ConnectCoreV1PatchNodeProxyResponse>;
  /**
   * @param name name of the Node
   * @param callback The callback
   */
  connectCoreV1PatchNodeProxy(name: string, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param name name of the Node
   * @param options The optional parameters
   * @param callback The callback
   */
  connectCoreV1PatchNodeProxy(name: string, options: Models.OpenShiftAPIwithKubernetesConnectCoreV1PatchNodeProxyOptionalParams, callback: msRest.ServiceCallback<string>): void;
  connectCoreV1PatchNodeProxy(name: string, options?: Models.OpenShiftAPIwithKubernetesConnectCoreV1PatchNodeProxyOptionalParams | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.ConnectCoreV1PatchNodeProxyResponse> {
    return this.sendOperationRequest(
      {
        name,
        options
      },
      connectCoreV1PatchNodeProxyOperationSpec,
      callback) as Promise<Models.ConnectCoreV1PatchNodeProxyResponse>;
  }

  /**
   * connect GET requests to proxy of Node
   * @param name name of the Node
   * @param path path to the resource
   * @param path1 Path is the URL path to use for the current proxy request to node.
   * @param [options] The optional parameters
   * @returns Promise<Models.ConnectCoreV1GetNodeProxyWithPathResponse>
   */
  connectCoreV1GetNodeProxyWithPath(name: string, path: string, path1: string, options?: msRest.RequestOptionsBase): Promise<Models.ConnectCoreV1GetNodeProxyWithPathResponse>;
  /**
   * @param name name of the Node
   * @param path path to the resource
   * @param path1 Path is the URL path to use for the current proxy request to node.
   * @param callback The callback
   */
  connectCoreV1GetNodeProxyWithPath(name: string, path: string, path1: string, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param name name of the Node
   * @param path path to the resource
   * @param path1 Path is the URL path to use for the current proxy request to node.
   * @param options The optional parameters
   * @param callback The callback
   */
  connectCoreV1GetNodeProxyWithPath(name: string, path: string, path1: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
  connectCoreV1GetNodeProxyWithPath(name: string, path: string, path1: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.ConnectCoreV1GetNodeProxyWithPathResponse> {
    return this.sendOperationRequest(
      {
        name,
        path,
        path1,
        options
      },
      connectCoreV1GetNodeProxyWithPathOperationSpec,
      callback) as Promise<Models.ConnectCoreV1GetNodeProxyWithPathResponse>;
  }

  /**
   * connect PUT requests to proxy of Node
   * @param name name of the Node
   * @param path path to the resource
   * @param path1 Path is the URL path to use for the current proxy request to node.
   * @param [options] The optional parameters
   * @returns Promise<Models.ConnectCoreV1PutNodeProxyWithPathResponse>
   */
  connectCoreV1PutNodeProxyWithPath(name: string, path: string, path1: string, options?: msRest.RequestOptionsBase): Promise<Models.ConnectCoreV1PutNodeProxyWithPathResponse>;
  /**
   * @param name name of the Node
   * @param path path to the resource
   * @param path1 Path is the URL path to use for the current proxy request to node.
   * @param callback The callback
   */
  connectCoreV1PutNodeProxyWithPath(name: string, path: string, path1: string, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param name name of the Node
   * @param path path to the resource
   * @param path1 Path is the URL path to use for the current proxy request to node.
   * @param options The optional parameters
   * @param callback The callback
   */
  connectCoreV1PutNodeProxyWithPath(name: string, path: string, path1: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
  connectCoreV1PutNodeProxyWithPath(name: string, path: string, path1: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.ConnectCoreV1PutNodeProxyWithPathResponse> {
    return this.sendOperationRequest(
      {
        name,
        path,
        path1,
        options
      },
      connectCoreV1PutNodeProxyWithPathOperationSpec,
      callback) as Promise<Models.ConnectCoreV1PutNodeProxyWithPathResponse>;
  }

  /**
   * connect POST requests to proxy of Node
   * @param name name of the Node
   * @param path path to the resource
   * @param path1 Path is the URL path to use for the current proxy request to node.
   * @param [options] The optional parameters
   * @returns Promise<Models.ConnectCoreV1PostNodeProxyWithPathResponse>
   */
  connectCoreV1PostNodeProxyWithPath(name: string, path: string, path1: string, options?: msRest.RequestOptionsBase): Promise<Models.ConnectCoreV1PostNodeProxyWithPathResponse>;
  /**
   * @param name name of the Node
   * @param path path to the resource
   * @param path1 Path is the URL path to use for the current proxy request to node.
   * @param callback The callback
   */
  connectCoreV1PostNodeProxyWithPath(name: string, path: string, path1: string, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param name name of the Node
   * @param path path to the resource
   * @param path1 Path is the URL path to use for the current proxy request to node.
   * @param options The optional parameters
   * @param callback The callback
   */
  connectCoreV1PostNodeProxyWithPath(name: string, path: string, path1: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
  connectCoreV1PostNodeProxyWithPath(name: string, path: string, path1: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.ConnectCoreV1PostNodeProxyWithPathResponse> {
    return this.sendOperationRequest(
      {
        name,
        path,
        path1,
        options
      },
      connectCoreV1PostNodeProxyWithPathOperationSpec,
      callback) as Promise<Models.ConnectCoreV1PostNodeProxyWithPathResponse>;
  }

  /**
   * connect DELETE requests to proxy of Node
   * @param name name of the Node
   * @param path path to the resource
   * @param path1 Path is the URL path to use for the current proxy request to node.
   * @param [options] The optional parameters
   * @returns Promise<Models.ConnectCoreV1DeleteNodeProxyWithPathResponse>
   */
  connectCoreV1DeleteNodeProxyWithPath(name: string, path: string, path1: string, options?: msRest.RequestOptionsBase): Promise<Models.ConnectCoreV1DeleteNodeProxyWithPathResponse>;
  /**
   * @param name name of the Node
   * @param path path to the resource
   * @param path1 Path is the URL path to use for the current proxy request to node.
   * @param callback The callback
   */
  connectCoreV1DeleteNodeProxyWithPath(name: string, path: string, path1: string, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param name name of the Node
   * @param path path to the resource
   * @param path1 Path is the URL path to use for the current proxy request to node.
   * @param options The optional parameters
   * @param callback The callback
   */
  connectCoreV1DeleteNodeProxyWithPath(name: string, path: string, path1: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
  connectCoreV1DeleteNodeProxyWithPath(name: string, path: string, path1: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.ConnectCoreV1DeleteNodeProxyWithPathResponse> {
    return this.sendOperationRequest(
      {
        name,
        path,
        path1,
        options
      },
      connectCoreV1DeleteNodeProxyWithPathOperationSpec,
      callback) as Promise<Models.ConnectCoreV1DeleteNodeProxyWithPathResponse>;
  }

  /**
   * connect HEAD requests to proxy of Node
   * @param name name of the Node
   * @param path path to the resource
   * @param path1 Path is the URL path to use for the current proxy request to node.
   * @param [options] The optional parameters
   * @returns Promise<Models.ConnectCoreV1HeadNodeProxyWithPathResponse>
   */
  connectCoreV1HeadNodeProxyWithPath(name: string, path: string, path1: string, options?: msRest.RequestOptionsBase): Promise<Models.ConnectCoreV1HeadNodeProxyWithPathResponse>;
  /**
   * @param name name of the Node
   * @param path path to the resource
   * @param path1 Path is the URL path to use for the current proxy request to node.
   * @param callback The callback
   */
  connectCoreV1HeadNodeProxyWithPath(name: string, path: string, path1: string, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param name name of the Node
   * @param path path to the resource
   * @param path1 Path is the URL path to use for the current proxy request to node.
   * @param options The optional parameters
   * @param callback The callback
   */
  connectCoreV1HeadNodeProxyWithPath(name: string, path: string, path1: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
  connectCoreV1HeadNodeProxyWithPath(name: string, path: string, path1: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.ConnectCoreV1HeadNodeProxyWithPathResponse> {
    return this.sendOperationRequest(
      {
        name,
        path,
        path1,
        options
      },
      connectCoreV1HeadNodeProxyWithPathOperationSpec,
      callback) as Promise<Models.ConnectCoreV1HeadNodeProxyWithPathResponse>;
  }

  /**
   * connect PATCH requests to proxy of Node
   * @param name name of the Node
   * @param path path to the resource
   * @param path1 Path is the URL path to use for the current proxy request to node.
   * @param [options] The optional parameters
   * @returns Promise<Models.ConnectCoreV1PatchNodeProxyWithPathResponse>
   */
  connectCoreV1PatchNodeProxyWithPath(name: string, path: string, path1: string, options?: msRest.RequestOptionsBase): Promise<Models.ConnectCoreV1PatchNodeProxyWithPathResponse>;
  /**
   * @param name name of the Node
   * @param path path to the resource
   * @param path1 Path is the URL path to use for the current proxy request to node.
   * @param callback The callback
   */
  connectCoreV1PatchNodeProxyWithPath(name: string, path: string, path1: string, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param name name of the Node
   * @param path path to the resource
   * @param path1 Path is the URL path to use for the current proxy request to node.
   * @param options The optional parameters
   * @param callback The callback
   */
  connectCoreV1PatchNodeProxyWithPath(name: string, path: string, path1: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
  connectCoreV1PatchNodeProxyWithPath(name: string, path: string, path1: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.ConnectCoreV1PatchNodeProxyWithPathResponse> {
    return this.sendOperationRequest(
      {
        name,
        path,
        path1,
        options
      },
      connectCoreV1PatchNodeProxyWithPathOperationSpec,
      callback) as Promise<Models.ConnectCoreV1PatchNodeProxyWithPathResponse>;
  }

  /**
   * read status of the specified Node
   * @param name name of the Node
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadCoreV1NodeStatusResponse>
   */
  readCoreV1NodeStatus(name: string, options?: Models.OpenShiftAPIwithKubernetesReadCoreV1NodeStatusOptionalParams): Promise<Models.ReadCoreV1NodeStatusResponse>;
  /**
   * @param name name of the Node
   * @param callback The callback
   */
  readCoreV1NodeStatus(name: string, callback: msRest.ServiceCallback<Models.V1Node>): void;
  /**
   * @param name name of the Node
   * @param options The optional parameters
   * @param callback The callback
   */
  readCoreV1NodeStatus(name: string, options: Models.OpenShiftAPIwithKubernetesReadCoreV1NodeStatusOptionalParams, callback: msRest.ServiceCallback<Models.V1Node>): void;
  readCoreV1NodeStatus(name: string, options?: Models.OpenShiftAPIwithKubernetesReadCoreV1NodeStatusOptionalParams | msRest.ServiceCallback<Models.V1Node>, callback?: msRest.ServiceCallback<Models.V1Node>): Promise<Models.ReadCoreV1NodeStatusResponse> {
    return this.sendOperationRequest(
      {
        name,
        options
      },
      readCoreV1NodeStatusOperationSpec,
      callback) as Promise<Models.ReadCoreV1NodeStatusResponse>;
  }

  /**
   * replace status of the specified Node
   * @param body
   * @param name name of the Node
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceCoreV1NodeStatusResponse>
   */
  replaceCoreV1NodeStatus(body: Models.V1Node, name: string, options?: Models.OpenShiftAPIwithKubernetesReplaceCoreV1NodeStatusOptionalParams): Promise<Models.ReplaceCoreV1NodeStatusResponse>;
  /**
   * @param body
   * @param name name of the Node
   * @param callback The callback
   */
  replaceCoreV1NodeStatus(body: Models.V1Node, name: string, callback: msRest.ServiceCallback<Models.V1Node>): void;
  /**
   * @param body
   * @param name name of the Node
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceCoreV1NodeStatus(body: Models.V1Node, name: string, options: Models.OpenShiftAPIwithKubernetesReplaceCoreV1NodeStatusOptionalParams, callback: msRest.ServiceCallback<Models.V1Node>): void;
  replaceCoreV1NodeStatus(body: Models.V1Node, name: string, options?: Models.OpenShiftAPIwithKubernetesReplaceCoreV1NodeStatusOptionalParams | msRest.ServiceCallback<Models.V1Node>, callback?: msRest.ServiceCallback<Models.V1Node>): Promise<Models.ReplaceCoreV1NodeStatusResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      replaceCoreV1NodeStatusOperationSpec,
      callback) as Promise<Models.ReplaceCoreV1NodeStatusResponse>;
  }

  /**
   * partially update status of the specified Node
   * @param body
   * @param name name of the Node
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchCoreV1NodeStatusResponse>
   */
  patchCoreV1NodeStatus(body: any, name: string, options?: Models.OpenShiftAPIwithKubernetesPatchCoreV1NodeStatusOptionalParams): Promise<Models.PatchCoreV1NodeStatusResponse>;
  /**
   * @param body
   * @param name name of the Node
   * @param callback The callback
   */
  patchCoreV1NodeStatus(body: any, name: string, callback: msRest.ServiceCallback<Models.V1Node>): void;
  /**
   * @param body
   * @param name name of the Node
   * @param options The optional parameters
   * @param callback The callback
   */
  patchCoreV1NodeStatus(body: any, name: string, options: Models.OpenShiftAPIwithKubernetesPatchCoreV1NodeStatusOptionalParams, callback: msRest.ServiceCallback<Models.V1Node>): void;
  patchCoreV1NodeStatus(body: any, name: string, options?: Models.OpenShiftAPIwithKubernetesPatchCoreV1NodeStatusOptionalParams | msRest.ServiceCallback<Models.V1Node>, callback?: msRest.ServiceCallback<Models.V1Node>): Promise<Models.PatchCoreV1NodeStatusResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      patchCoreV1NodeStatusOperationSpec,
      callback) as Promise<Models.PatchCoreV1NodeStatusResponse>;
  }

  /**
   * list or watch objects of kind PersistentVolumeClaim
   * @param [options] The optional parameters
   * @returns Promise<Models.ListCoreV1PersistentVolumeClaimForAllNamespacesResponse>
   */
  listCoreV1PersistentVolumeClaimForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListCoreV1PersistentVolumeClaimForAllNamespacesOptionalParams): Promise<Models.ListCoreV1PersistentVolumeClaimForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  listCoreV1PersistentVolumeClaimForAllNamespaces(callback: msRest.ServiceCallback<Models.V1PersistentVolumeClaimList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listCoreV1PersistentVolumeClaimForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesListCoreV1PersistentVolumeClaimForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1PersistentVolumeClaimList>): void;
  listCoreV1PersistentVolumeClaimForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListCoreV1PersistentVolumeClaimForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1PersistentVolumeClaimList>, callback?: msRest.ServiceCallback<Models.V1PersistentVolumeClaimList>): Promise<Models.ListCoreV1PersistentVolumeClaimForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listCoreV1PersistentVolumeClaimForAllNamespacesOperationSpec,
      callback) as Promise<Models.ListCoreV1PersistentVolumeClaimForAllNamespacesResponse>;
  }

  /**
   * list or watch objects of kind PersistentVolume
   * @param [options] The optional parameters
   * @returns Promise<Models.ListCoreV1PersistentVolumeResponse>
   */
  listCoreV1PersistentVolume(options?: Models.OpenShiftAPIwithKubernetesListCoreV1PersistentVolumeOptionalParams): Promise<Models.ListCoreV1PersistentVolumeResponse>;
  /**
   * @param callback The callback
   */
  listCoreV1PersistentVolume(callback: msRest.ServiceCallback<Models.V1PersistentVolumeList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listCoreV1PersistentVolume(options: Models.OpenShiftAPIwithKubernetesListCoreV1PersistentVolumeOptionalParams, callback: msRest.ServiceCallback<Models.V1PersistentVolumeList>): void;
  listCoreV1PersistentVolume(options?: Models.OpenShiftAPIwithKubernetesListCoreV1PersistentVolumeOptionalParams | msRest.ServiceCallback<Models.V1PersistentVolumeList>, callback?: msRest.ServiceCallback<Models.V1PersistentVolumeList>): Promise<Models.ListCoreV1PersistentVolumeResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listCoreV1PersistentVolumeOperationSpec,
      callback) as Promise<Models.ListCoreV1PersistentVolumeResponse>;
  }

  /**
   * create a PersistentVolume
   * @param body
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateCoreV1PersistentVolumeResponse>
   */
  createCoreV1PersistentVolume(body: Models.V1PersistentVolume, options?: Models.OpenShiftAPIwithKubernetesCreateCoreV1PersistentVolumeOptionalParams): Promise<Models.CreateCoreV1PersistentVolumeResponse>;
  /**
   * @param body
   * @param callback The callback
   */
  createCoreV1PersistentVolume(body: Models.V1PersistentVolume, callback: msRest.ServiceCallback<Models.V1PersistentVolume>): void;
  /**
   * @param body
   * @param options The optional parameters
   * @param callback The callback
   */
  createCoreV1PersistentVolume(body: Models.V1PersistentVolume, options: Models.OpenShiftAPIwithKubernetesCreateCoreV1PersistentVolumeOptionalParams, callback: msRest.ServiceCallback<Models.V1PersistentVolume>): void;
  createCoreV1PersistentVolume(body: Models.V1PersistentVolume, options?: Models.OpenShiftAPIwithKubernetesCreateCoreV1PersistentVolumeOptionalParams | msRest.ServiceCallback<Models.V1PersistentVolume>, callback?: msRest.ServiceCallback<Models.V1PersistentVolume>): Promise<Models.CreateCoreV1PersistentVolumeResponse> {
    return this.sendOperationRequest(
      {
        body,
        options
      },
      createCoreV1PersistentVolumeOperationSpec,
      callback) as Promise<Models.CreateCoreV1PersistentVolumeResponse>;
  }

  /**
   * delete collection of PersistentVolume
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteCoreV1CollectionPersistentVolumeResponse>
   */
  deleteCoreV1CollectionPersistentVolume(options?: Models.OpenShiftAPIwithKubernetesDeleteCoreV1CollectionPersistentVolumeOptionalParams): Promise<Models.DeleteCoreV1CollectionPersistentVolumeResponse>;
  /**
   * @param callback The callback
   */
  deleteCoreV1CollectionPersistentVolume(callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteCoreV1CollectionPersistentVolume(options: Models.OpenShiftAPIwithKubernetesDeleteCoreV1CollectionPersistentVolumeOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteCoreV1CollectionPersistentVolume(options?: Models.OpenShiftAPIwithKubernetesDeleteCoreV1CollectionPersistentVolumeOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteCoreV1CollectionPersistentVolumeResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      deleteCoreV1CollectionPersistentVolumeOperationSpec,
      callback) as Promise<Models.DeleteCoreV1CollectionPersistentVolumeResponse>;
  }

  /**
   * read the specified PersistentVolume
   * @param name name of the PersistentVolume
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadCoreV1PersistentVolumeResponse>
   */
  readCoreV1PersistentVolume(name: string, options?: Models.OpenShiftAPIwithKubernetesReadCoreV1PersistentVolumeOptionalParams): Promise<Models.ReadCoreV1PersistentVolumeResponse>;
  /**
   * @param name name of the PersistentVolume
   * @param callback The callback
   */
  readCoreV1PersistentVolume(name: string, callback: msRest.ServiceCallback<Models.V1PersistentVolume>): void;
  /**
   * @param name name of the PersistentVolume
   * @param options The optional parameters
   * @param callback The callback
   */
  readCoreV1PersistentVolume(name: string, options: Models.OpenShiftAPIwithKubernetesReadCoreV1PersistentVolumeOptionalParams, callback: msRest.ServiceCallback<Models.V1PersistentVolume>): void;
  readCoreV1PersistentVolume(name: string, options?: Models.OpenShiftAPIwithKubernetesReadCoreV1PersistentVolumeOptionalParams | msRest.ServiceCallback<Models.V1PersistentVolume>, callback?: msRest.ServiceCallback<Models.V1PersistentVolume>): Promise<Models.ReadCoreV1PersistentVolumeResponse> {
    return this.sendOperationRequest(
      {
        name,
        options
      },
      readCoreV1PersistentVolumeOperationSpec,
      callback) as Promise<Models.ReadCoreV1PersistentVolumeResponse>;
  }

  /**
   * replace the specified PersistentVolume
   * @param body
   * @param name name of the PersistentVolume
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceCoreV1PersistentVolumeResponse>
   */
  replaceCoreV1PersistentVolume(body: Models.V1PersistentVolume, name: string, options?: Models.OpenShiftAPIwithKubernetesReplaceCoreV1PersistentVolumeOptionalParams): Promise<Models.ReplaceCoreV1PersistentVolumeResponse>;
  /**
   * @param body
   * @param name name of the PersistentVolume
   * @param callback The callback
   */
  replaceCoreV1PersistentVolume(body: Models.V1PersistentVolume, name: string, callback: msRest.ServiceCallback<Models.V1PersistentVolume>): void;
  /**
   * @param body
   * @param name name of the PersistentVolume
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceCoreV1PersistentVolume(body: Models.V1PersistentVolume, name: string, options: Models.OpenShiftAPIwithKubernetesReplaceCoreV1PersistentVolumeOptionalParams, callback: msRest.ServiceCallback<Models.V1PersistentVolume>): void;
  replaceCoreV1PersistentVolume(body: Models.V1PersistentVolume, name: string, options?: Models.OpenShiftAPIwithKubernetesReplaceCoreV1PersistentVolumeOptionalParams | msRest.ServiceCallback<Models.V1PersistentVolume>, callback?: msRest.ServiceCallback<Models.V1PersistentVolume>): Promise<Models.ReplaceCoreV1PersistentVolumeResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      replaceCoreV1PersistentVolumeOperationSpec,
      callback) as Promise<Models.ReplaceCoreV1PersistentVolumeResponse>;
  }

  /**
   * delete a PersistentVolume
   * @param body
   * @param name name of the PersistentVolume
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteCoreV1PersistentVolumeResponse>
   */
  deleteCoreV1PersistentVolume(body: Models.V1DeleteOptions, name: string, options?: Models.OpenShiftAPIwithKubernetesDeleteCoreV1PersistentVolumeOptionalParams): Promise<Models.DeleteCoreV1PersistentVolumeResponse>;
  /**
   * @param body
   * @param name name of the PersistentVolume
   * @param callback The callback
   */
  deleteCoreV1PersistentVolume(body: Models.V1DeleteOptions, name: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param name name of the PersistentVolume
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteCoreV1PersistentVolume(body: Models.V1DeleteOptions, name: string, options: Models.OpenShiftAPIwithKubernetesDeleteCoreV1PersistentVolumeOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteCoreV1PersistentVolume(body: Models.V1DeleteOptions, name: string, options?: Models.OpenShiftAPIwithKubernetesDeleteCoreV1PersistentVolumeOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteCoreV1PersistentVolumeResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      deleteCoreV1PersistentVolumeOperationSpec,
      callback) as Promise<Models.DeleteCoreV1PersistentVolumeResponse>;
  }

  /**
   * partially update the specified PersistentVolume
   * @param body
   * @param name name of the PersistentVolume
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchCoreV1PersistentVolumeResponse>
   */
  patchCoreV1PersistentVolume(body: any, name: string, options?: Models.OpenShiftAPIwithKubernetesPatchCoreV1PersistentVolumeOptionalParams): Promise<Models.PatchCoreV1PersistentVolumeResponse>;
  /**
   * @param body
   * @param name name of the PersistentVolume
   * @param callback The callback
   */
  patchCoreV1PersistentVolume(body: any, name: string, callback: msRest.ServiceCallback<Models.V1PersistentVolume>): void;
  /**
   * @param body
   * @param name name of the PersistentVolume
   * @param options The optional parameters
   * @param callback The callback
   */
  patchCoreV1PersistentVolume(body: any, name: string, options: Models.OpenShiftAPIwithKubernetesPatchCoreV1PersistentVolumeOptionalParams, callback: msRest.ServiceCallback<Models.V1PersistentVolume>): void;
  patchCoreV1PersistentVolume(body: any, name: string, options?: Models.OpenShiftAPIwithKubernetesPatchCoreV1PersistentVolumeOptionalParams | msRest.ServiceCallback<Models.V1PersistentVolume>, callback?: msRest.ServiceCallback<Models.V1PersistentVolume>): Promise<Models.PatchCoreV1PersistentVolumeResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      patchCoreV1PersistentVolumeOperationSpec,
      callback) as Promise<Models.PatchCoreV1PersistentVolumeResponse>;
  }

  /**
   * read status of the specified PersistentVolume
   * @param name name of the PersistentVolume
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadCoreV1PersistentVolumeStatusResponse>
   */
  readCoreV1PersistentVolumeStatus(name: string, options?: Models.OpenShiftAPIwithKubernetesReadCoreV1PersistentVolumeStatusOptionalParams): Promise<Models.ReadCoreV1PersistentVolumeStatusResponse>;
  /**
   * @param name name of the PersistentVolume
   * @param callback The callback
   */
  readCoreV1PersistentVolumeStatus(name: string, callback: msRest.ServiceCallback<Models.V1PersistentVolume>): void;
  /**
   * @param name name of the PersistentVolume
   * @param options The optional parameters
   * @param callback The callback
   */
  readCoreV1PersistentVolumeStatus(name: string, options: Models.OpenShiftAPIwithKubernetesReadCoreV1PersistentVolumeStatusOptionalParams, callback: msRest.ServiceCallback<Models.V1PersistentVolume>): void;
  readCoreV1PersistentVolumeStatus(name: string, options?: Models.OpenShiftAPIwithKubernetesReadCoreV1PersistentVolumeStatusOptionalParams | msRest.ServiceCallback<Models.V1PersistentVolume>, callback?: msRest.ServiceCallback<Models.V1PersistentVolume>): Promise<Models.ReadCoreV1PersistentVolumeStatusResponse> {
    return this.sendOperationRequest(
      {
        name,
        options
      },
      readCoreV1PersistentVolumeStatusOperationSpec,
      callback) as Promise<Models.ReadCoreV1PersistentVolumeStatusResponse>;
  }

  /**
   * replace status of the specified PersistentVolume
   * @param body
   * @param name name of the PersistentVolume
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceCoreV1PersistentVolumeStatusResponse>
   */
  replaceCoreV1PersistentVolumeStatus(body: Models.V1PersistentVolume, name: string, options?: Models.OpenShiftAPIwithKubernetesReplaceCoreV1PersistentVolumeStatusOptionalParams): Promise<Models.ReplaceCoreV1PersistentVolumeStatusResponse>;
  /**
   * @param body
   * @param name name of the PersistentVolume
   * @param callback The callback
   */
  replaceCoreV1PersistentVolumeStatus(body: Models.V1PersistentVolume, name: string, callback: msRest.ServiceCallback<Models.V1PersistentVolume>): void;
  /**
   * @param body
   * @param name name of the PersistentVolume
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceCoreV1PersistentVolumeStatus(body: Models.V1PersistentVolume, name: string, options: Models.OpenShiftAPIwithKubernetesReplaceCoreV1PersistentVolumeStatusOptionalParams, callback: msRest.ServiceCallback<Models.V1PersistentVolume>): void;
  replaceCoreV1PersistentVolumeStatus(body: Models.V1PersistentVolume, name: string, options?: Models.OpenShiftAPIwithKubernetesReplaceCoreV1PersistentVolumeStatusOptionalParams | msRest.ServiceCallback<Models.V1PersistentVolume>, callback?: msRest.ServiceCallback<Models.V1PersistentVolume>): Promise<Models.ReplaceCoreV1PersistentVolumeStatusResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      replaceCoreV1PersistentVolumeStatusOperationSpec,
      callback) as Promise<Models.ReplaceCoreV1PersistentVolumeStatusResponse>;
  }

  /**
   * partially update status of the specified PersistentVolume
   * @param body
   * @param name name of the PersistentVolume
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchCoreV1PersistentVolumeStatusResponse>
   */
  patchCoreV1PersistentVolumeStatus(body: any, name: string, options?: Models.OpenShiftAPIwithKubernetesPatchCoreV1PersistentVolumeStatusOptionalParams): Promise<Models.PatchCoreV1PersistentVolumeStatusResponse>;
  /**
   * @param body
   * @param name name of the PersistentVolume
   * @param callback The callback
   */
  patchCoreV1PersistentVolumeStatus(body: any, name: string, callback: msRest.ServiceCallback<Models.V1PersistentVolume>): void;
  /**
   * @param body
   * @param name name of the PersistentVolume
   * @param options The optional parameters
   * @param callback The callback
   */
  patchCoreV1PersistentVolumeStatus(body: any, name: string, options: Models.OpenShiftAPIwithKubernetesPatchCoreV1PersistentVolumeStatusOptionalParams, callback: msRest.ServiceCallback<Models.V1PersistentVolume>): void;
  patchCoreV1PersistentVolumeStatus(body: any, name: string, options?: Models.OpenShiftAPIwithKubernetesPatchCoreV1PersistentVolumeStatusOptionalParams | msRest.ServiceCallback<Models.V1PersistentVolume>, callback?: msRest.ServiceCallback<Models.V1PersistentVolume>): Promise<Models.PatchCoreV1PersistentVolumeStatusResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      patchCoreV1PersistentVolumeStatusOperationSpec,
      callback) as Promise<Models.PatchCoreV1PersistentVolumeStatusResponse>;
  }

  /**
   * list or watch objects of kind Pod
   * @param [options] The optional parameters
   * @returns Promise<Models.ListCoreV1PodForAllNamespacesResponse>
   */
  listCoreV1PodForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListCoreV1PodForAllNamespacesOptionalParams): Promise<Models.ListCoreV1PodForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  listCoreV1PodForAllNamespaces(callback: msRest.ServiceCallback<Models.V1PodList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listCoreV1PodForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesListCoreV1PodForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1PodList>): void;
  listCoreV1PodForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListCoreV1PodForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1PodList>, callback?: msRest.ServiceCallback<Models.V1PodList>): Promise<Models.ListCoreV1PodForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listCoreV1PodForAllNamespacesOperationSpec,
      callback) as Promise<Models.ListCoreV1PodForAllNamespacesResponse>;
  }

  /**
   * list or watch objects of kind PodTemplate
   * @param [options] The optional parameters
   * @returns Promise<Models.ListCoreV1PodTemplateForAllNamespacesResponse>
   */
  listCoreV1PodTemplateForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListCoreV1PodTemplateForAllNamespacesOptionalParams): Promise<Models.ListCoreV1PodTemplateForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  listCoreV1PodTemplateForAllNamespaces(callback: msRest.ServiceCallback<Models.V1PodTemplateList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listCoreV1PodTemplateForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesListCoreV1PodTemplateForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1PodTemplateList>): void;
  listCoreV1PodTemplateForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListCoreV1PodTemplateForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1PodTemplateList>, callback?: msRest.ServiceCallback<Models.V1PodTemplateList>): Promise<Models.ListCoreV1PodTemplateForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listCoreV1PodTemplateForAllNamespacesOperationSpec,
      callback) as Promise<Models.ListCoreV1PodTemplateForAllNamespacesResponse>;
  }

  /**
   * list or watch objects of kind ReplicationController
   * @param [options] The optional parameters
   * @returns Promise<Models.ListCoreV1ReplicationControllerForAllNamespacesResponse>
   */
  listCoreV1ReplicationControllerForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListCoreV1ReplicationControllerForAllNamespacesOptionalParams): Promise<Models.ListCoreV1ReplicationControllerForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  listCoreV1ReplicationControllerForAllNamespaces(callback: msRest.ServiceCallback<Models.V1ReplicationControllerList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listCoreV1ReplicationControllerForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesListCoreV1ReplicationControllerForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1ReplicationControllerList>): void;
  listCoreV1ReplicationControllerForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListCoreV1ReplicationControllerForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1ReplicationControllerList>, callback?: msRest.ServiceCallback<Models.V1ReplicationControllerList>): Promise<Models.ListCoreV1ReplicationControllerForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listCoreV1ReplicationControllerForAllNamespacesOperationSpec,
      callback) as Promise<Models.ListCoreV1ReplicationControllerForAllNamespacesResponse>;
  }

  /**
   * list or watch objects of kind ResourceQuota
   * @param [options] The optional parameters
   * @returns Promise<Models.ListCoreV1ResourceQuotaForAllNamespacesResponse>
   */
  listCoreV1ResourceQuotaForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListCoreV1ResourceQuotaForAllNamespacesOptionalParams): Promise<Models.ListCoreV1ResourceQuotaForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  listCoreV1ResourceQuotaForAllNamespaces(callback: msRest.ServiceCallback<Models.V1ResourceQuotaList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listCoreV1ResourceQuotaForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesListCoreV1ResourceQuotaForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1ResourceQuotaList>): void;
  listCoreV1ResourceQuotaForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListCoreV1ResourceQuotaForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1ResourceQuotaList>, callback?: msRest.ServiceCallback<Models.V1ResourceQuotaList>): Promise<Models.ListCoreV1ResourceQuotaForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listCoreV1ResourceQuotaForAllNamespacesOperationSpec,
      callback) as Promise<Models.ListCoreV1ResourceQuotaForAllNamespacesResponse>;
  }

  /**
   * list or watch objects of kind Secret
   * @param [options] The optional parameters
   * @returns Promise<Models.ListCoreV1SecretForAllNamespacesResponse>
   */
  listCoreV1SecretForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListCoreV1SecretForAllNamespacesOptionalParams): Promise<Models.ListCoreV1SecretForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  listCoreV1SecretForAllNamespaces(callback: msRest.ServiceCallback<Models.V1SecretList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listCoreV1SecretForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesListCoreV1SecretForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1SecretList>): void;
  listCoreV1SecretForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListCoreV1SecretForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1SecretList>, callback?: msRest.ServiceCallback<Models.V1SecretList>): Promise<Models.ListCoreV1SecretForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listCoreV1SecretForAllNamespacesOperationSpec,
      callback) as Promise<Models.ListCoreV1SecretForAllNamespacesResponse>;
  }

  /**
   * list or watch objects of kind ServiceAccount
   * @param [options] The optional parameters
   * @returns Promise<Models.ListCoreV1ServiceAccountForAllNamespacesResponse>
   */
  listCoreV1ServiceAccountForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListCoreV1ServiceAccountForAllNamespacesOptionalParams): Promise<Models.ListCoreV1ServiceAccountForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  listCoreV1ServiceAccountForAllNamespaces(callback: msRest.ServiceCallback<Models.V1ServiceAccountList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listCoreV1ServiceAccountForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesListCoreV1ServiceAccountForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1ServiceAccountList>): void;
  listCoreV1ServiceAccountForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListCoreV1ServiceAccountForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1ServiceAccountList>, callback?: msRest.ServiceCallback<Models.V1ServiceAccountList>): Promise<Models.ListCoreV1ServiceAccountForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listCoreV1ServiceAccountForAllNamespacesOperationSpec,
      callback) as Promise<Models.ListCoreV1ServiceAccountForAllNamespacesResponse>;
  }

  /**
   * list or watch objects of kind Service
   * @param [options] The optional parameters
   * @returns Promise<Models.ListCoreV1ServiceForAllNamespacesResponse>
   */
  listCoreV1ServiceForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListCoreV1ServiceForAllNamespacesOptionalParams): Promise<Models.ListCoreV1ServiceForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  listCoreV1ServiceForAllNamespaces(callback: msRest.ServiceCallback<Models.V1ServiceList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listCoreV1ServiceForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesListCoreV1ServiceForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1ServiceList>): void;
  listCoreV1ServiceForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListCoreV1ServiceForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1ServiceList>, callback?: msRest.ServiceCallback<Models.V1ServiceList>): Promise<Models.ListCoreV1ServiceForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listCoreV1ServiceForAllNamespacesOperationSpec,
      callback) as Promise<Models.ListCoreV1ServiceForAllNamespacesResponse>;
  }

  /**
   * watch individual changes to a list of ConfigMap
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchCoreV1ConfigMapListForAllNamespacesResponse>
   */
  watchCoreV1ConfigMapListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchCoreV1ConfigMapListForAllNamespacesOptionalParams): Promise<Models.WatchCoreV1ConfigMapListForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  watchCoreV1ConfigMapListForAllNamespaces(callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  watchCoreV1ConfigMapListForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesWatchCoreV1ConfigMapListForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchCoreV1ConfigMapListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchCoreV1ConfigMapListForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchCoreV1ConfigMapListForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      watchCoreV1ConfigMapListForAllNamespacesOperationSpec,
      callback) as Promise<Models.WatchCoreV1ConfigMapListForAllNamespacesResponse>;
  }

  /**
   * watch individual changes to a list of Endpoints
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchCoreV1EndpointsListForAllNamespacesResponse>
   */
  watchCoreV1EndpointsListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchCoreV1EndpointsListForAllNamespacesOptionalParams): Promise<Models.WatchCoreV1EndpointsListForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  watchCoreV1EndpointsListForAllNamespaces(callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  watchCoreV1EndpointsListForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesWatchCoreV1EndpointsListForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchCoreV1EndpointsListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchCoreV1EndpointsListForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchCoreV1EndpointsListForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      watchCoreV1EndpointsListForAllNamespacesOperationSpec,
      callback) as Promise<Models.WatchCoreV1EndpointsListForAllNamespacesResponse>;
  }

  /**
   * watch individual changes to a list of Event
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchCoreV1EventListForAllNamespacesResponse>
   */
  watchCoreV1EventListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchCoreV1EventListForAllNamespacesOptionalParams): Promise<Models.WatchCoreV1EventListForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  watchCoreV1EventListForAllNamespaces(callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  watchCoreV1EventListForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesWatchCoreV1EventListForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchCoreV1EventListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchCoreV1EventListForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchCoreV1EventListForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      watchCoreV1EventListForAllNamespacesOperationSpec,
      callback) as Promise<Models.WatchCoreV1EventListForAllNamespacesResponse>;
  }

  /**
   * watch individual changes to a list of LimitRange
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchCoreV1LimitRangeListForAllNamespacesResponse>
   */
  watchCoreV1LimitRangeListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchCoreV1LimitRangeListForAllNamespacesOptionalParams): Promise<Models.WatchCoreV1LimitRangeListForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  watchCoreV1LimitRangeListForAllNamespaces(callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  watchCoreV1LimitRangeListForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesWatchCoreV1LimitRangeListForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchCoreV1LimitRangeListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchCoreV1LimitRangeListForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchCoreV1LimitRangeListForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      watchCoreV1LimitRangeListForAllNamespacesOperationSpec,
      callback) as Promise<Models.WatchCoreV1LimitRangeListForAllNamespacesResponse>;
  }

  /**
   * watch individual changes to a list of Namespace
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchCoreV1NamespaceListResponse>
   */
  watchCoreV1NamespaceList(options?: Models.OpenShiftAPIwithKubernetesWatchCoreV1NamespaceListOptionalParams): Promise<Models.WatchCoreV1NamespaceListResponse>;
  /**
   * @param callback The callback
   */
  watchCoreV1NamespaceList(callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  watchCoreV1NamespaceList(options: Models.OpenShiftAPIwithKubernetesWatchCoreV1NamespaceListOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchCoreV1NamespaceList(options?: Models.OpenShiftAPIwithKubernetesWatchCoreV1NamespaceListOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchCoreV1NamespaceListResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      watchCoreV1NamespaceListOperationSpec,
      callback) as Promise<Models.WatchCoreV1NamespaceListResponse>;
  }

  /**
   * watch individual changes to a list of ConfigMap
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchCoreV1NamespacedConfigMapListResponse>
   */
  watchCoreV1NamespacedConfigMapList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchCoreV1NamespacedConfigMapListOptionalParams): Promise<Models.WatchCoreV1NamespacedConfigMapListResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchCoreV1NamespacedConfigMapList(namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchCoreV1NamespacedConfigMapList(namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchCoreV1NamespacedConfigMapListOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchCoreV1NamespacedConfigMapList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchCoreV1NamespacedConfigMapListOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchCoreV1NamespacedConfigMapListResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      watchCoreV1NamespacedConfigMapListOperationSpec,
      callback) as Promise<Models.WatchCoreV1NamespacedConfigMapListResponse>;
  }

  /**
   * watch changes to an object of kind ConfigMap
   * @param name name of the ConfigMap
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchCoreV1NamespacedConfigMapResponse>
   */
  watchCoreV1NamespacedConfigMap(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchCoreV1NamespacedConfigMapOptionalParams): Promise<Models.WatchCoreV1NamespacedConfigMapResponse>;
  /**
   * @param name name of the ConfigMap
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchCoreV1NamespacedConfigMap(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param name name of the ConfigMap
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchCoreV1NamespacedConfigMap(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchCoreV1NamespacedConfigMapOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchCoreV1NamespacedConfigMap(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchCoreV1NamespacedConfigMapOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchCoreV1NamespacedConfigMapResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      watchCoreV1NamespacedConfigMapOperationSpec,
      callback) as Promise<Models.WatchCoreV1NamespacedConfigMapResponse>;
  }

  /**
   * watch individual changes to a list of Endpoints
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchCoreV1NamespacedEndpointsListResponse>
   */
  watchCoreV1NamespacedEndpointsList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchCoreV1NamespacedEndpointsListOptionalParams): Promise<Models.WatchCoreV1NamespacedEndpointsListResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchCoreV1NamespacedEndpointsList(namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchCoreV1NamespacedEndpointsList(namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchCoreV1NamespacedEndpointsListOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchCoreV1NamespacedEndpointsList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchCoreV1NamespacedEndpointsListOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchCoreV1NamespacedEndpointsListResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      watchCoreV1NamespacedEndpointsListOperationSpec,
      callback) as Promise<Models.WatchCoreV1NamespacedEndpointsListResponse>;
  }

  /**
   * watch changes to an object of kind Endpoints
   * @param name name of the Endpoints
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchCoreV1NamespacedEndpointsResponse>
   */
  watchCoreV1NamespacedEndpoints(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchCoreV1NamespacedEndpointsOptionalParams): Promise<Models.WatchCoreV1NamespacedEndpointsResponse>;
  /**
   * @param name name of the Endpoints
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchCoreV1NamespacedEndpoints(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param name name of the Endpoints
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchCoreV1NamespacedEndpoints(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchCoreV1NamespacedEndpointsOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchCoreV1NamespacedEndpoints(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchCoreV1NamespacedEndpointsOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchCoreV1NamespacedEndpointsResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      watchCoreV1NamespacedEndpointsOperationSpec,
      callback) as Promise<Models.WatchCoreV1NamespacedEndpointsResponse>;
  }

  /**
   * watch individual changes to a list of Event
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchCoreV1NamespacedEventListResponse>
   */
  watchCoreV1NamespacedEventList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchCoreV1NamespacedEventListOptionalParams): Promise<Models.WatchCoreV1NamespacedEventListResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchCoreV1NamespacedEventList(namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchCoreV1NamespacedEventList(namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchCoreV1NamespacedEventListOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchCoreV1NamespacedEventList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchCoreV1NamespacedEventListOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchCoreV1NamespacedEventListResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      watchCoreV1NamespacedEventListOperationSpec,
      callback) as Promise<Models.WatchCoreV1NamespacedEventListResponse>;
  }

  /**
   * watch changes to an object of kind Event
   * @param name name of the Event
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchCoreV1NamespacedEventResponse>
   */
  watchCoreV1NamespacedEvent(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchCoreV1NamespacedEventOptionalParams): Promise<Models.WatchCoreV1NamespacedEventResponse>;
  /**
   * @param name name of the Event
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchCoreV1NamespacedEvent(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param name name of the Event
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchCoreV1NamespacedEvent(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchCoreV1NamespacedEventOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchCoreV1NamespacedEvent(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchCoreV1NamespacedEventOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchCoreV1NamespacedEventResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      watchCoreV1NamespacedEventOperationSpec,
      callback) as Promise<Models.WatchCoreV1NamespacedEventResponse>;
  }

  /**
   * watch individual changes to a list of LimitRange
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchCoreV1NamespacedLimitRangeListResponse>
   */
  watchCoreV1NamespacedLimitRangeList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchCoreV1NamespacedLimitRangeListOptionalParams): Promise<Models.WatchCoreV1NamespacedLimitRangeListResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchCoreV1NamespacedLimitRangeList(namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchCoreV1NamespacedLimitRangeList(namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchCoreV1NamespacedLimitRangeListOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchCoreV1NamespacedLimitRangeList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchCoreV1NamespacedLimitRangeListOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchCoreV1NamespacedLimitRangeListResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      watchCoreV1NamespacedLimitRangeListOperationSpec,
      callback) as Promise<Models.WatchCoreV1NamespacedLimitRangeListResponse>;
  }

  /**
   * watch changes to an object of kind LimitRange
   * @param name name of the LimitRange
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchCoreV1NamespacedLimitRangeResponse>
   */
  watchCoreV1NamespacedLimitRange(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchCoreV1NamespacedLimitRangeOptionalParams): Promise<Models.WatchCoreV1NamespacedLimitRangeResponse>;
  /**
   * @param name name of the LimitRange
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchCoreV1NamespacedLimitRange(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param name name of the LimitRange
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchCoreV1NamespacedLimitRange(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchCoreV1NamespacedLimitRangeOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchCoreV1NamespacedLimitRange(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchCoreV1NamespacedLimitRangeOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchCoreV1NamespacedLimitRangeResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      watchCoreV1NamespacedLimitRangeOperationSpec,
      callback) as Promise<Models.WatchCoreV1NamespacedLimitRangeResponse>;
  }

  /**
   * watch individual changes to a list of PersistentVolumeClaim
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchCoreV1NamespacedPersistentVolumeClaimListResponse>
   */
  watchCoreV1NamespacedPersistentVolumeClaimList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchCoreV1NamespacedPersistentVolumeClaimListOptionalParams): Promise<Models.WatchCoreV1NamespacedPersistentVolumeClaimListResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchCoreV1NamespacedPersistentVolumeClaimList(namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchCoreV1NamespacedPersistentVolumeClaimList(namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchCoreV1NamespacedPersistentVolumeClaimListOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchCoreV1NamespacedPersistentVolumeClaimList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchCoreV1NamespacedPersistentVolumeClaimListOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchCoreV1NamespacedPersistentVolumeClaimListResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      watchCoreV1NamespacedPersistentVolumeClaimListOperationSpec,
      callback) as Promise<Models.WatchCoreV1NamespacedPersistentVolumeClaimListResponse>;
  }

  /**
   * watch changes to an object of kind PersistentVolumeClaim
   * @param name name of the PersistentVolumeClaim
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchCoreV1NamespacedPersistentVolumeClaimResponse>
   */
  watchCoreV1NamespacedPersistentVolumeClaim(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchCoreV1NamespacedPersistentVolumeClaimOptionalParams): Promise<Models.WatchCoreV1NamespacedPersistentVolumeClaimResponse>;
  /**
   * @param name name of the PersistentVolumeClaim
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchCoreV1NamespacedPersistentVolumeClaim(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param name name of the PersistentVolumeClaim
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchCoreV1NamespacedPersistentVolumeClaim(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchCoreV1NamespacedPersistentVolumeClaimOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchCoreV1NamespacedPersistentVolumeClaim(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchCoreV1NamespacedPersistentVolumeClaimOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchCoreV1NamespacedPersistentVolumeClaimResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      watchCoreV1NamespacedPersistentVolumeClaimOperationSpec,
      callback) as Promise<Models.WatchCoreV1NamespacedPersistentVolumeClaimResponse>;
  }

  /**
   * watch individual changes to a list of Pod
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchCoreV1NamespacedPodListResponse>
   */
  watchCoreV1NamespacedPodList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchCoreV1NamespacedPodListOptionalParams): Promise<Models.WatchCoreV1NamespacedPodListResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchCoreV1NamespacedPodList(namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchCoreV1NamespacedPodList(namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchCoreV1NamespacedPodListOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchCoreV1NamespacedPodList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchCoreV1NamespacedPodListOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchCoreV1NamespacedPodListResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      watchCoreV1NamespacedPodListOperationSpec,
      callback) as Promise<Models.WatchCoreV1NamespacedPodListResponse>;
  }

  /**
   * watch changes to an object of kind Pod
   * @param name name of the Pod
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchCoreV1NamespacedPodResponse>
   */
  watchCoreV1NamespacedPod(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchCoreV1NamespacedPodOptionalParams): Promise<Models.WatchCoreV1NamespacedPodResponse>;
  /**
   * @param name name of the Pod
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchCoreV1NamespacedPod(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param name name of the Pod
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchCoreV1NamespacedPod(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchCoreV1NamespacedPodOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchCoreV1NamespacedPod(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchCoreV1NamespacedPodOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchCoreV1NamespacedPodResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      watchCoreV1NamespacedPodOperationSpec,
      callback) as Promise<Models.WatchCoreV1NamespacedPodResponse>;
  }

  /**
   * watch individual changes to a list of PodTemplate
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchCoreV1NamespacedPodTemplateListResponse>
   */
  watchCoreV1NamespacedPodTemplateList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchCoreV1NamespacedPodTemplateListOptionalParams): Promise<Models.WatchCoreV1NamespacedPodTemplateListResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchCoreV1NamespacedPodTemplateList(namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchCoreV1NamespacedPodTemplateList(namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchCoreV1NamespacedPodTemplateListOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchCoreV1NamespacedPodTemplateList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchCoreV1NamespacedPodTemplateListOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchCoreV1NamespacedPodTemplateListResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      watchCoreV1NamespacedPodTemplateListOperationSpec,
      callback) as Promise<Models.WatchCoreV1NamespacedPodTemplateListResponse>;
  }

  /**
   * watch changes to an object of kind PodTemplate
   * @param name name of the PodTemplate
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchCoreV1NamespacedPodTemplateResponse>
   */
  watchCoreV1NamespacedPodTemplate(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchCoreV1NamespacedPodTemplateOptionalParams): Promise<Models.WatchCoreV1NamespacedPodTemplateResponse>;
  /**
   * @param name name of the PodTemplate
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchCoreV1NamespacedPodTemplate(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param name name of the PodTemplate
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchCoreV1NamespacedPodTemplate(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchCoreV1NamespacedPodTemplateOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchCoreV1NamespacedPodTemplate(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchCoreV1NamespacedPodTemplateOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchCoreV1NamespacedPodTemplateResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      watchCoreV1NamespacedPodTemplateOperationSpec,
      callback) as Promise<Models.WatchCoreV1NamespacedPodTemplateResponse>;
  }

  /**
   * watch individual changes to a list of ReplicationController
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchCoreV1NamespacedReplicationControllerListResponse>
   */
  watchCoreV1NamespacedReplicationControllerList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchCoreV1NamespacedReplicationControllerListOptionalParams): Promise<Models.WatchCoreV1NamespacedReplicationControllerListResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchCoreV1NamespacedReplicationControllerList(namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchCoreV1NamespacedReplicationControllerList(namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchCoreV1NamespacedReplicationControllerListOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchCoreV1NamespacedReplicationControllerList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchCoreV1NamespacedReplicationControllerListOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchCoreV1NamespacedReplicationControllerListResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      watchCoreV1NamespacedReplicationControllerListOperationSpec,
      callback) as Promise<Models.WatchCoreV1NamespacedReplicationControllerListResponse>;
  }

  /**
   * watch changes to an object of kind ReplicationController
   * @param name name of the ReplicationController
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchCoreV1NamespacedReplicationControllerResponse>
   */
  watchCoreV1NamespacedReplicationController(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchCoreV1NamespacedReplicationControllerOptionalParams): Promise<Models.WatchCoreV1NamespacedReplicationControllerResponse>;
  /**
   * @param name name of the ReplicationController
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchCoreV1NamespacedReplicationController(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param name name of the ReplicationController
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchCoreV1NamespacedReplicationController(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchCoreV1NamespacedReplicationControllerOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchCoreV1NamespacedReplicationController(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchCoreV1NamespacedReplicationControllerOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchCoreV1NamespacedReplicationControllerResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      watchCoreV1NamespacedReplicationControllerOperationSpec,
      callback) as Promise<Models.WatchCoreV1NamespacedReplicationControllerResponse>;
  }

  /**
   * watch individual changes to a list of ResourceQuota
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchCoreV1NamespacedResourceQuotaListResponse>
   */
  watchCoreV1NamespacedResourceQuotaList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchCoreV1NamespacedResourceQuotaListOptionalParams): Promise<Models.WatchCoreV1NamespacedResourceQuotaListResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchCoreV1NamespacedResourceQuotaList(namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchCoreV1NamespacedResourceQuotaList(namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchCoreV1NamespacedResourceQuotaListOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchCoreV1NamespacedResourceQuotaList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchCoreV1NamespacedResourceQuotaListOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchCoreV1NamespacedResourceQuotaListResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      watchCoreV1NamespacedResourceQuotaListOperationSpec,
      callback) as Promise<Models.WatchCoreV1NamespacedResourceQuotaListResponse>;
  }

  /**
   * watch changes to an object of kind ResourceQuota
   * @param name name of the ResourceQuota
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchCoreV1NamespacedResourceQuotaResponse>
   */
  watchCoreV1NamespacedResourceQuota(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchCoreV1NamespacedResourceQuotaOptionalParams): Promise<Models.WatchCoreV1NamespacedResourceQuotaResponse>;
  /**
   * @param name name of the ResourceQuota
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchCoreV1NamespacedResourceQuota(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param name name of the ResourceQuota
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchCoreV1NamespacedResourceQuota(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchCoreV1NamespacedResourceQuotaOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchCoreV1NamespacedResourceQuota(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchCoreV1NamespacedResourceQuotaOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchCoreV1NamespacedResourceQuotaResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      watchCoreV1NamespacedResourceQuotaOperationSpec,
      callback) as Promise<Models.WatchCoreV1NamespacedResourceQuotaResponse>;
  }

  /**
   * watch individual changes to a list of Secret
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchCoreV1NamespacedSecretListResponse>
   */
  watchCoreV1NamespacedSecretList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchCoreV1NamespacedSecretListOptionalParams): Promise<Models.WatchCoreV1NamespacedSecretListResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchCoreV1NamespacedSecretList(namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchCoreV1NamespacedSecretList(namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchCoreV1NamespacedSecretListOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchCoreV1NamespacedSecretList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchCoreV1NamespacedSecretListOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchCoreV1NamespacedSecretListResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      watchCoreV1NamespacedSecretListOperationSpec,
      callback) as Promise<Models.WatchCoreV1NamespacedSecretListResponse>;
  }

  /**
   * watch changes to an object of kind Secret
   * @param name name of the Secret
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchCoreV1NamespacedSecretResponse>
   */
  watchCoreV1NamespacedSecret(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchCoreV1NamespacedSecretOptionalParams): Promise<Models.WatchCoreV1NamespacedSecretResponse>;
  /**
   * @param name name of the Secret
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchCoreV1NamespacedSecret(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param name name of the Secret
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchCoreV1NamespacedSecret(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchCoreV1NamespacedSecretOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchCoreV1NamespacedSecret(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchCoreV1NamespacedSecretOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchCoreV1NamespacedSecretResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      watchCoreV1NamespacedSecretOperationSpec,
      callback) as Promise<Models.WatchCoreV1NamespacedSecretResponse>;
  }

  /**
   * watch individual changes to a list of ServiceAccount
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchCoreV1NamespacedServiceAccountListResponse>
   */
  watchCoreV1NamespacedServiceAccountList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchCoreV1NamespacedServiceAccountListOptionalParams): Promise<Models.WatchCoreV1NamespacedServiceAccountListResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchCoreV1NamespacedServiceAccountList(namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchCoreV1NamespacedServiceAccountList(namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchCoreV1NamespacedServiceAccountListOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchCoreV1NamespacedServiceAccountList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchCoreV1NamespacedServiceAccountListOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchCoreV1NamespacedServiceAccountListResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      watchCoreV1NamespacedServiceAccountListOperationSpec,
      callback) as Promise<Models.WatchCoreV1NamespacedServiceAccountListResponse>;
  }

  /**
   * watch changes to an object of kind ServiceAccount
   * @param name name of the ServiceAccount
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchCoreV1NamespacedServiceAccountResponse>
   */
  watchCoreV1NamespacedServiceAccount(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchCoreV1NamespacedServiceAccountOptionalParams): Promise<Models.WatchCoreV1NamespacedServiceAccountResponse>;
  /**
   * @param name name of the ServiceAccount
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchCoreV1NamespacedServiceAccount(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param name name of the ServiceAccount
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchCoreV1NamespacedServiceAccount(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchCoreV1NamespacedServiceAccountOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchCoreV1NamespacedServiceAccount(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchCoreV1NamespacedServiceAccountOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchCoreV1NamespacedServiceAccountResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      watchCoreV1NamespacedServiceAccountOperationSpec,
      callback) as Promise<Models.WatchCoreV1NamespacedServiceAccountResponse>;
  }

  /**
   * watch individual changes to a list of Service
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchCoreV1NamespacedServiceListResponse>
   */
  watchCoreV1NamespacedServiceList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchCoreV1NamespacedServiceListOptionalParams): Promise<Models.WatchCoreV1NamespacedServiceListResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchCoreV1NamespacedServiceList(namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchCoreV1NamespacedServiceList(namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchCoreV1NamespacedServiceListOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchCoreV1NamespacedServiceList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchCoreV1NamespacedServiceListOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchCoreV1NamespacedServiceListResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      watchCoreV1NamespacedServiceListOperationSpec,
      callback) as Promise<Models.WatchCoreV1NamespacedServiceListResponse>;
  }

  /**
   * watch changes to an object of kind Service
   * @param name name of the Service
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchCoreV1NamespacedServiceResponse>
   */
  watchCoreV1NamespacedService(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchCoreV1NamespacedServiceOptionalParams): Promise<Models.WatchCoreV1NamespacedServiceResponse>;
  /**
   * @param name name of the Service
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchCoreV1NamespacedService(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param name name of the Service
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchCoreV1NamespacedService(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchCoreV1NamespacedServiceOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchCoreV1NamespacedService(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchCoreV1NamespacedServiceOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchCoreV1NamespacedServiceResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      watchCoreV1NamespacedServiceOperationSpec,
      callback) as Promise<Models.WatchCoreV1NamespacedServiceResponse>;
  }

  /**
   * watch changes to an object of kind Namespace
   * @param name name of the Namespace
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchCoreV1NamespaceResponse>
   */
  watchCoreV1Namespace(name: string, options?: Models.OpenShiftAPIwithKubernetesWatchCoreV1NamespaceOptionalParams): Promise<Models.WatchCoreV1NamespaceResponse>;
  /**
   * @param name name of the Namespace
   * @param callback The callback
   */
  watchCoreV1Namespace(name: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param name name of the Namespace
   * @param options The optional parameters
   * @param callback The callback
   */
  watchCoreV1Namespace(name: string, options: Models.OpenShiftAPIwithKubernetesWatchCoreV1NamespaceOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchCoreV1Namespace(name: string, options?: Models.OpenShiftAPIwithKubernetesWatchCoreV1NamespaceOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchCoreV1NamespaceResponse> {
    return this.sendOperationRequest(
      {
        name,
        options
      },
      watchCoreV1NamespaceOperationSpec,
      callback) as Promise<Models.WatchCoreV1NamespaceResponse>;
  }

  /**
   * watch individual changes to a list of Node
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchCoreV1NodeListResponse>
   */
  watchCoreV1NodeList(options?: Models.OpenShiftAPIwithKubernetesWatchCoreV1NodeListOptionalParams): Promise<Models.WatchCoreV1NodeListResponse>;
  /**
   * @param callback The callback
   */
  watchCoreV1NodeList(callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  watchCoreV1NodeList(options: Models.OpenShiftAPIwithKubernetesWatchCoreV1NodeListOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchCoreV1NodeList(options?: Models.OpenShiftAPIwithKubernetesWatchCoreV1NodeListOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchCoreV1NodeListResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      watchCoreV1NodeListOperationSpec,
      callback) as Promise<Models.WatchCoreV1NodeListResponse>;
  }

  /**
   * watch changes to an object of kind Node
   * @param name name of the Node
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchCoreV1NodeResponse>
   */
  watchCoreV1Node(name: string, options?: Models.OpenShiftAPIwithKubernetesWatchCoreV1NodeOptionalParams): Promise<Models.WatchCoreV1NodeResponse>;
  /**
   * @param name name of the Node
   * @param callback The callback
   */
  watchCoreV1Node(name: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param name name of the Node
   * @param options The optional parameters
   * @param callback The callback
   */
  watchCoreV1Node(name: string, options: Models.OpenShiftAPIwithKubernetesWatchCoreV1NodeOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchCoreV1Node(name: string, options?: Models.OpenShiftAPIwithKubernetesWatchCoreV1NodeOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchCoreV1NodeResponse> {
    return this.sendOperationRequest(
      {
        name,
        options
      },
      watchCoreV1NodeOperationSpec,
      callback) as Promise<Models.WatchCoreV1NodeResponse>;
  }

  /**
   * watch individual changes to a list of PersistentVolumeClaim
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchCoreV1PersistentVolumeClaimListForAllNamespacesResponse>
   */
  watchCoreV1PersistentVolumeClaimListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchCoreV1PersistentVolumeClaimListForAllNamespacesOptionalParams): Promise<Models.WatchCoreV1PersistentVolumeClaimListForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  watchCoreV1PersistentVolumeClaimListForAllNamespaces(callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  watchCoreV1PersistentVolumeClaimListForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesWatchCoreV1PersistentVolumeClaimListForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchCoreV1PersistentVolumeClaimListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchCoreV1PersistentVolumeClaimListForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchCoreV1PersistentVolumeClaimListForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      watchCoreV1PersistentVolumeClaimListForAllNamespacesOperationSpec,
      callback) as Promise<Models.WatchCoreV1PersistentVolumeClaimListForAllNamespacesResponse>;
  }

  /**
   * watch individual changes to a list of PersistentVolume
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchCoreV1PersistentVolumeListResponse>
   */
  watchCoreV1PersistentVolumeList(options?: Models.OpenShiftAPIwithKubernetesWatchCoreV1PersistentVolumeListOptionalParams): Promise<Models.WatchCoreV1PersistentVolumeListResponse>;
  /**
   * @param callback The callback
   */
  watchCoreV1PersistentVolumeList(callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  watchCoreV1PersistentVolumeList(options: Models.OpenShiftAPIwithKubernetesWatchCoreV1PersistentVolumeListOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchCoreV1PersistentVolumeList(options?: Models.OpenShiftAPIwithKubernetesWatchCoreV1PersistentVolumeListOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchCoreV1PersistentVolumeListResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      watchCoreV1PersistentVolumeListOperationSpec,
      callback) as Promise<Models.WatchCoreV1PersistentVolumeListResponse>;
  }

  /**
   * watch changes to an object of kind PersistentVolume
   * @param name name of the PersistentVolume
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchCoreV1PersistentVolumeResponse>
   */
  watchCoreV1PersistentVolume(name: string, options?: Models.OpenShiftAPIwithKubernetesWatchCoreV1PersistentVolumeOptionalParams): Promise<Models.WatchCoreV1PersistentVolumeResponse>;
  /**
   * @param name name of the PersistentVolume
   * @param callback The callback
   */
  watchCoreV1PersistentVolume(name: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param name name of the PersistentVolume
   * @param options The optional parameters
   * @param callback The callback
   */
  watchCoreV1PersistentVolume(name: string, options: Models.OpenShiftAPIwithKubernetesWatchCoreV1PersistentVolumeOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchCoreV1PersistentVolume(name: string, options?: Models.OpenShiftAPIwithKubernetesWatchCoreV1PersistentVolumeOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchCoreV1PersistentVolumeResponse> {
    return this.sendOperationRequest(
      {
        name,
        options
      },
      watchCoreV1PersistentVolumeOperationSpec,
      callback) as Promise<Models.WatchCoreV1PersistentVolumeResponse>;
  }

  /**
   * watch individual changes to a list of Pod
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchCoreV1PodListForAllNamespacesResponse>
   */
  watchCoreV1PodListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchCoreV1PodListForAllNamespacesOptionalParams): Promise<Models.WatchCoreV1PodListForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  watchCoreV1PodListForAllNamespaces(callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  watchCoreV1PodListForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesWatchCoreV1PodListForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchCoreV1PodListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchCoreV1PodListForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchCoreV1PodListForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      watchCoreV1PodListForAllNamespacesOperationSpec,
      callback) as Promise<Models.WatchCoreV1PodListForAllNamespacesResponse>;
  }

  /**
   * watch individual changes to a list of PodTemplate
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchCoreV1PodTemplateListForAllNamespacesResponse>
   */
  watchCoreV1PodTemplateListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchCoreV1PodTemplateListForAllNamespacesOptionalParams): Promise<Models.WatchCoreV1PodTemplateListForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  watchCoreV1PodTemplateListForAllNamespaces(callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  watchCoreV1PodTemplateListForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesWatchCoreV1PodTemplateListForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchCoreV1PodTemplateListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchCoreV1PodTemplateListForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchCoreV1PodTemplateListForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      watchCoreV1PodTemplateListForAllNamespacesOperationSpec,
      callback) as Promise<Models.WatchCoreV1PodTemplateListForAllNamespacesResponse>;
  }

  /**
   * watch individual changes to a list of ReplicationController
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchCoreV1ReplicationControllerListForAllNamespacesResponse>
   */
  watchCoreV1ReplicationControllerListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchCoreV1ReplicationControllerListForAllNamespacesOptionalParams): Promise<Models.WatchCoreV1ReplicationControllerListForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  watchCoreV1ReplicationControllerListForAllNamespaces(callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  watchCoreV1ReplicationControllerListForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesWatchCoreV1ReplicationControllerListForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchCoreV1ReplicationControllerListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchCoreV1ReplicationControllerListForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchCoreV1ReplicationControllerListForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      watchCoreV1ReplicationControllerListForAllNamespacesOperationSpec,
      callback) as Promise<Models.WatchCoreV1ReplicationControllerListForAllNamespacesResponse>;
  }

  /**
   * watch individual changes to a list of ResourceQuota
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchCoreV1ResourceQuotaListForAllNamespacesResponse>
   */
  watchCoreV1ResourceQuotaListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchCoreV1ResourceQuotaListForAllNamespacesOptionalParams): Promise<Models.WatchCoreV1ResourceQuotaListForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  watchCoreV1ResourceQuotaListForAllNamespaces(callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  watchCoreV1ResourceQuotaListForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesWatchCoreV1ResourceQuotaListForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchCoreV1ResourceQuotaListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchCoreV1ResourceQuotaListForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchCoreV1ResourceQuotaListForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      watchCoreV1ResourceQuotaListForAllNamespacesOperationSpec,
      callback) as Promise<Models.WatchCoreV1ResourceQuotaListForAllNamespacesResponse>;
  }

  /**
   * watch individual changes to a list of Secret
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchCoreV1SecretListForAllNamespacesResponse>
   */
  watchCoreV1SecretListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchCoreV1SecretListForAllNamespacesOptionalParams): Promise<Models.WatchCoreV1SecretListForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  watchCoreV1SecretListForAllNamespaces(callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  watchCoreV1SecretListForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesWatchCoreV1SecretListForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchCoreV1SecretListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchCoreV1SecretListForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchCoreV1SecretListForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      watchCoreV1SecretListForAllNamespacesOperationSpec,
      callback) as Promise<Models.WatchCoreV1SecretListForAllNamespacesResponse>;
  }

  /**
   * watch individual changes to a list of ServiceAccount
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchCoreV1ServiceAccountListForAllNamespacesResponse>
   */
  watchCoreV1ServiceAccountListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchCoreV1ServiceAccountListForAllNamespacesOptionalParams): Promise<Models.WatchCoreV1ServiceAccountListForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  watchCoreV1ServiceAccountListForAllNamespaces(callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  watchCoreV1ServiceAccountListForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesWatchCoreV1ServiceAccountListForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchCoreV1ServiceAccountListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchCoreV1ServiceAccountListForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchCoreV1ServiceAccountListForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      watchCoreV1ServiceAccountListForAllNamespacesOperationSpec,
      callback) as Promise<Models.WatchCoreV1ServiceAccountListForAllNamespacesResponse>;
  }

  /**
   * watch individual changes to a list of Service
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchCoreV1ServiceListForAllNamespacesResponse>
   */
  watchCoreV1ServiceListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchCoreV1ServiceListForAllNamespacesOptionalParams): Promise<Models.WatchCoreV1ServiceListForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  watchCoreV1ServiceListForAllNamespaces(callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  watchCoreV1ServiceListForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesWatchCoreV1ServiceListForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchCoreV1ServiceListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchCoreV1ServiceListForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchCoreV1ServiceListForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      watchCoreV1ServiceListForAllNamespacesOperationSpec,
      callback) as Promise<Models.WatchCoreV1ServiceListForAllNamespacesResponse>;
  }

  /**
   * get available API versions
   * @param [options] The optional parameters
   * @returns Promise<Models.GetAPIVersionsResponse>
   */
  getAPIVersions(options?: msRest.RequestOptionsBase): Promise<Models.GetAPIVersionsResponse>;
  /**
   * @param callback The callback
   */
  getAPIVersions(callback: msRest.ServiceCallback<Models.V1APIGroupList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getAPIVersions(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.V1APIGroupList>): void;
  getAPIVersions(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.V1APIGroupList>, callback?: msRest.ServiceCallback<Models.V1APIGroupList>): Promise<Models.GetAPIVersionsResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getAPIVersionsOperationSpec,
      callback) as Promise<Models.GetAPIVersionsResponse>;
  }

  /**
   * get information of a group
   * @param [options] The optional parameters
   * @returns Promise<Models.GetAdmissionregistrationAPIGroupResponse>
   */
  getAdmissionregistrationAPIGroup(options?: msRest.RequestOptionsBase): Promise<Models.GetAdmissionregistrationAPIGroupResponse>;
  /**
   * @param callback The callback
   */
  getAdmissionregistrationAPIGroup(callback: msRest.ServiceCallback<Models.V1APIGroup>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getAdmissionregistrationAPIGroup(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.V1APIGroup>): void;
  getAdmissionregistrationAPIGroup(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.V1APIGroup>, callback?: msRest.ServiceCallback<Models.V1APIGroup>): Promise<Models.GetAdmissionregistrationAPIGroupResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getAdmissionregistrationAPIGroupOperationSpec,
      callback) as Promise<Models.GetAdmissionregistrationAPIGroupResponse>;
  }

  /**
   * get available resources
   * @param [options] The optional parameters
   * @returns Promise<Models.GetAdmissionregistrationV1beta1APIResourcesResponse>
   */
  getAdmissionregistrationV1beta1APIResources(options?: msRest.RequestOptionsBase): Promise<Models.GetAdmissionregistrationV1beta1APIResourcesResponse>;
  /**
   * @param callback The callback
   */
  getAdmissionregistrationV1beta1APIResources(callback: msRest.ServiceCallback<Models.V1APIResourceList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getAdmissionregistrationV1beta1APIResources(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.V1APIResourceList>): void;
  getAdmissionregistrationV1beta1APIResources(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.V1APIResourceList>, callback?: msRest.ServiceCallback<Models.V1APIResourceList>): Promise<Models.GetAdmissionregistrationV1beta1APIResourcesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getAdmissionregistrationV1beta1APIResourcesOperationSpec,
      callback) as Promise<Models.GetAdmissionregistrationV1beta1APIResourcesResponse>;
  }

  /**
   * list or watch objects of kind MutatingWebhookConfiguration
   * @param [options] The optional parameters
   * @returns Promise<Models.ListAdmissionregistrationV1beta1MutatingWebhookConfigurationResponse>
   */
  listAdmissionregistrationV1beta1MutatingWebhookConfiguration(options?: Models.OpenShiftAPIwithKubernetesListAdmissionregistrationV1beta1MutatingWebhookConfigurationOptionalParams): Promise<Models.ListAdmissionregistrationV1beta1MutatingWebhookConfigurationResponse>;
  /**
   * @param callback The callback
   */
  listAdmissionregistrationV1beta1MutatingWebhookConfiguration(callback: msRest.ServiceCallback<Models.V1beta1MutatingWebhookConfigurationList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listAdmissionregistrationV1beta1MutatingWebhookConfiguration(options: Models.OpenShiftAPIwithKubernetesListAdmissionregistrationV1beta1MutatingWebhookConfigurationOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1MutatingWebhookConfigurationList>): void;
  listAdmissionregistrationV1beta1MutatingWebhookConfiguration(options?: Models.OpenShiftAPIwithKubernetesListAdmissionregistrationV1beta1MutatingWebhookConfigurationOptionalParams | msRest.ServiceCallback<Models.V1beta1MutatingWebhookConfigurationList>, callback?: msRest.ServiceCallback<Models.V1beta1MutatingWebhookConfigurationList>): Promise<Models.ListAdmissionregistrationV1beta1MutatingWebhookConfigurationResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listAdmissionregistrationV1beta1MutatingWebhookConfigurationOperationSpec,
      callback) as Promise<Models.ListAdmissionregistrationV1beta1MutatingWebhookConfigurationResponse>;
  }

  /**
   * create a MutatingWebhookConfiguration
   * @param body
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateAdmissionregistrationV1beta1MutatingWebhookConfigurationResponse>
   */
  createAdmissionregistrationV1beta1MutatingWebhookConfiguration(body: Models.V1beta1MutatingWebhookConfiguration, options?: Models.OpenShiftAPIwithKubernetesCreateAdmissionregistrationV1beta1MutatingWebhookConfigurationOptionalParams): Promise<Models.CreateAdmissionregistrationV1beta1MutatingWebhookConfigurationResponse>;
  /**
   * @param body
   * @param callback The callback
   */
  createAdmissionregistrationV1beta1MutatingWebhookConfiguration(body: Models.V1beta1MutatingWebhookConfiguration, callback: msRest.ServiceCallback<Models.V1beta1MutatingWebhookConfiguration>): void;
  /**
   * @param body
   * @param options The optional parameters
   * @param callback The callback
   */
  createAdmissionregistrationV1beta1MutatingWebhookConfiguration(body: Models.V1beta1MutatingWebhookConfiguration, options: Models.OpenShiftAPIwithKubernetesCreateAdmissionregistrationV1beta1MutatingWebhookConfigurationOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1MutatingWebhookConfiguration>): void;
  createAdmissionregistrationV1beta1MutatingWebhookConfiguration(body: Models.V1beta1MutatingWebhookConfiguration, options?: Models.OpenShiftAPIwithKubernetesCreateAdmissionregistrationV1beta1MutatingWebhookConfigurationOptionalParams | msRest.ServiceCallback<Models.V1beta1MutatingWebhookConfiguration>, callback?: msRest.ServiceCallback<Models.V1beta1MutatingWebhookConfiguration>): Promise<Models.CreateAdmissionregistrationV1beta1MutatingWebhookConfigurationResponse> {
    return this.sendOperationRequest(
      {
        body,
        options
      },
      createAdmissionregistrationV1beta1MutatingWebhookConfigurationOperationSpec,
      callback) as Promise<Models.CreateAdmissionregistrationV1beta1MutatingWebhookConfigurationResponse>;
  }

  /**
   * delete collection of MutatingWebhookConfiguration
   * @param [options] The optional parameters
   * @returns
   * Promise<Models.DeleteAdmissionregistrationV1beta1CollectionMutatingWebhookConfigurationResponse>
   */
  deleteAdmissionregistrationV1beta1CollectionMutatingWebhookConfiguration(options?: Models.OpenShiftAPIwithKubernetesDeleteAdmissionregistrationV1beta1CollectionMutatingWebhookConfigurationOptionalParams): Promise<Models.DeleteAdmissionregistrationV1beta1CollectionMutatingWebhookConfigurationResponse>;
  /**
   * @param callback The callback
   */
  deleteAdmissionregistrationV1beta1CollectionMutatingWebhookConfiguration(callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteAdmissionregistrationV1beta1CollectionMutatingWebhookConfiguration(options: Models.OpenShiftAPIwithKubernetesDeleteAdmissionregistrationV1beta1CollectionMutatingWebhookConfigurationOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteAdmissionregistrationV1beta1CollectionMutatingWebhookConfiguration(options?: Models.OpenShiftAPIwithKubernetesDeleteAdmissionregistrationV1beta1CollectionMutatingWebhookConfigurationOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteAdmissionregistrationV1beta1CollectionMutatingWebhookConfigurationResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      deleteAdmissionregistrationV1beta1CollectionMutatingWebhookConfigurationOperationSpec,
      callback) as Promise<Models.DeleteAdmissionregistrationV1beta1CollectionMutatingWebhookConfigurationResponse>;
  }

  /**
   * read the specified MutatingWebhookConfiguration
   * @param name name of the MutatingWebhookConfiguration
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadAdmissionregistrationV1beta1MutatingWebhookConfigurationResponse>
   */
  readAdmissionregistrationV1beta1MutatingWebhookConfiguration(name: string, options?: Models.OpenShiftAPIwithKubernetesReadAdmissionregistrationV1beta1MutatingWebhookConfigurationOptionalParams): Promise<Models.ReadAdmissionregistrationV1beta1MutatingWebhookConfigurationResponse>;
  /**
   * @param name name of the MutatingWebhookConfiguration
   * @param callback The callback
   */
  readAdmissionregistrationV1beta1MutatingWebhookConfiguration(name: string, callback: msRest.ServiceCallback<Models.V1beta1MutatingWebhookConfiguration>): void;
  /**
   * @param name name of the MutatingWebhookConfiguration
   * @param options The optional parameters
   * @param callback The callback
   */
  readAdmissionregistrationV1beta1MutatingWebhookConfiguration(name: string, options: Models.OpenShiftAPIwithKubernetesReadAdmissionregistrationV1beta1MutatingWebhookConfigurationOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1MutatingWebhookConfiguration>): void;
  readAdmissionregistrationV1beta1MutatingWebhookConfiguration(name: string, options?: Models.OpenShiftAPIwithKubernetesReadAdmissionregistrationV1beta1MutatingWebhookConfigurationOptionalParams | msRest.ServiceCallback<Models.V1beta1MutatingWebhookConfiguration>, callback?: msRest.ServiceCallback<Models.V1beta1MutatingWebhookConfiguration>): Promise<Models.ReadAdmissionregistrationV1beta1MutatingWebhookConfigurationResponse> {
    return this.sendOperationRequest(
      {
        name,
        options
      },
      readAdmissionregistrationV1beta1MutatingWebhookConfigurationOperationSpec,
      callback) as Promise<Models.ReadAdmissionregistrationV1beta1MutatingWebhookConfigurationResponse>;
  }

  /**
   * replace the specified MutatingWebhookConfiguration
   * @param body
   * @param name name of the MutatingWebhookConfiguration
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceAdmissionregistrationV1beta1MutatingWebhookConfigurationResponse>
   */
  replaceAdmissionregistrationV1beta1MutatingWebhookConfiguration(body: Models.V1beta1MutatingWebhookConfiguration, name: string, options?: Models.OpenShiftAPIwithKubernetesReplaceAdmissionregistrationV1beta1MutatingWebhookConfigurationOptionalParams): Promise<Models.ReplaceAdmissionregistrationV1beta1MutatingWebhookConfigurationResponse>;
  /**
   * @param body
   * @param name name of the MutatingWebhookConfiguration
   * @param callback The callback
   */
  replaceAdmissionregistrationV1beta1MutatingWebhookConfiguration(body: Models.V1beta1MutatingWebhookConfiguration, name: string, callback: msRest.ServiceCallback<Models.V1beta1MutatingWebhookConfiguration>): void;
  /**
   * @param body
   * @param name name of the MutatingWebhookConfiguration
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceAdmissionregistrationV1beta1MutatingWebhookConfiguration(body: Models.V1beta1MutatingWebhookConfiguration, name: string, options: Models.OpenShiftAPIwithKubernetesReplaceAdmissionregistrationV1beta1MutatingWebhookConfigurationOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1MutatingWebhookConfiguration>): void;
  replaceAdmissionregistrationV1beta1MutatingWebhookConfiguration(body: Models.V1beta1MutatingWebhookConfiguration, name: string, options?: Models.OpenShiftAPIwithKubernetesReplaceAdmissionregistrationV1beta1MutatingWebhookConfigurationOptionalParams | msRest.ServiceCallback<Models.V1beta1MutatingWebhookConfiguration>, callback?: msRest.ServiceCallback<Models.V1beta1MutatingWebhookConfiguration>): Promise<Models.ReplaceAdmissionregistrationV1beta1MutatingWebhookConfigurationResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      replaceAdmissionregistrationV1beta1MutatingWebhookConfigurationOperationSpec,
      callback) as Promise<Models.ReplaceAdmissionregistrationV1beta1MutatingWebhookConfigurationResponse>;
  }

  /**
   * delete a MutatingWebhookConfiguration
   * @param body
   * @param name name of the MutatingWebhookConfiguration
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteAdmissionregistrationV1beta1MutatingWebhookConfigurationResponse>
   */
  deleteAdmissionregistrationV1beta1MutatingWebhookConfiguration(body: Models.V1DeleteOptions, name: string, options?: Models.OpenShiftAPIwithKubernetesDeleteAdmissionregistrationV1beta1MutatingWebhookConfigurationOptionalParams): Promise<Models.DeleteAdmissionregistrationV1beta1MutatingWebhookConfigurationResponse>;
  /**
   * @param body
   * @param name name of the MutatingWebhookConfiguration
   * @param callback The callback
   */
  deleteAdmissionregistrationV1beta1MutatingWebhookConfiguration(body: Models.V1DeleteOptions, name: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param name name of the MutatingWebhookConfiguration
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteAdmissionregistrationV1beta1MutatingWebhookConfiguration(body: Models.V1DeleteOptions, name: string, options: Models.OpenShiftAPIwithKubernetesDeleteAdmissionregistrationV1beta1MutatingWebhookConfigurationOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteAdmissionregistrationV1beta1MutatingWebhookConfiguration(body: Models.V1DeleteOptions, name: string, options?: Models.OpenShiftAPIwithKubernetesDeleteAdmissionregistrationV1beta1MutatingWebhookConfigurationOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteAdmissionregistrationV1beta1MutatingWebhookConfigurationResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      deleteAdmissionregistrationV1beta1MutatingWebhookConfigurationOperationSpec,
      callback) as Promise<Models.DeleteAdmissionregistrationV1beta1MutatingWebhookConfigurationResponse>;
  }

  /**
   * partially update the specified MutatingWebhookConfiguration
   * @param body
   * @param name name of the MutatingWebhookConfiguration
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchAdmissionregistrationV1beta1MutatingWebhookConfigurationResponse>
   */
  patchAdmissionregistrationV1beta1MutatingWebhookConfiguration(body: any, name: string, options?: Models.OpenShiftAPIwithKubernetesPatchAdmissionregistrationV1beta1MutatingWebhookConfigurationOptionalParams): Promise<Models.PatchAdmissionregistrationV1beta1MutatingWebhookConfigurationResponse>;
  /**
   * @param body
   * @param name name of the MutatingWebhookConfiguration
   * @param callback The callback
   */
  patchAdmissionregistrationV1beta1MutatingWebhookConfiguration(body: any, name: string, callback: msRest.ServiceCallback<Models.V1beta1MutatingWebhookConfiguration>): void;
  /**
   * @param body
   * @param name name of the MutatingWebhookConfiguration
   * @param options The optional parameters
   * @param callback The callback
   */
  patchAdmissionregistrationV1beta1MutatingWebhookConfiguration(body: any, name: string, options: Models.OpenShiftAPIwithKubernetesPatchAdmissionregistrationV1beta1MutatingWebhookConfigurationOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1MutatingWebhookConfiguration>): void;
  patchAdmissionregistrationV1beta1MutatingWebhookConfiguration(body: any, name: string, options?: Models.OpenShiftAPIwithKubernetesPatchAdmissionregistrationV1beta1MutatingWebhookConfigurationOptionalParams | msRest.ServiceCallback<Models.V1beta1MutatingWebhookConfiguration>, callback?: msRest.ServiceCallback<Models.V1beta1MutatingWebhookConfiguration>): Promise<Models.PatchAdmissionregistrationV1beta1MutatingWebhookConfigurationResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      patchAdmissionregistrationV1beta1MutatingWebhookConfigurationOperationSpec,
      callback) as Promise<Models.PatchAdmissionregistrationV1beta1MutatingWebhookConfigurationResponse>;
  }

  /**
   * list or watch objects of kind ValidatingWebhookConfiguration
   * @param [options] The optional parameters
   * @returns Promise<Models.ListAdmissionregistrationV1beta1ValidatingWebhookConfigurationResponse>
   */
  listAdmissionregistrationV1beta1ValidatingWebhookConfiguration(options?: Models.OpenShiftAPIwithKubernetesListAdmissionregistrationV1beta1ValidatingWebhookConfigurationOptionalParams): Promise<Models.ListAdmissionregistrationV1beta1ValidatingWebhookConfigurationResponse>;
  /**
   * @param callback The callback
   */
  listAdmissionregistrationV1beta1ValidatingWebhookConfiguration(callback: msRest.ServiceCallback<Models.V1beta1ValidatingWebhookConfigurationList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listAdmissionregistrationV1beta1ValidatingWebhookConfiguration(options: Models.OpenShiftAPIwithKubernetesListAdmissionregistrationV1beta1ValidatingWebhookConfigurationOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1ValidatingWebhookConfigurationList>): void;
  listAdmissionregistrationV1beta1ValidatingWebhookConfiguration(options?: Models.OpenShiftAPIwithKubernetesListAdmissionregistrationV1beta1ValidatingWebhookConfigurationOptionalParams | msRest.ServiceCallback<Models.V1beta1ValidatingWebhookConfigurationList>, callback?: msRest.ServiceCallback<Models.V1beta1ValidatingWebhookConfigurationList>): Promise<Models.ListAdmissionregistrationV1beta1ValidatingWebhookConfigurationResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listAdmissionregistrationV1beta1ValidatingWebhookConfigurationOperationSpec,
      callback) as Promise<Models.ListAdmissionregistrationV1beta1ValidatingWebhookConfigurationResponse>;
  }

  /**
   * create a ValidatingWebhookConfiguration
   * @param body
   * @param [options] The optional parameters
   * @returns
   * Promise<Models.CreateAdmissionregistrationV1beta1ValidatingWebhookConfigurationResponse>
   */
  createAdmissionregistrationV1beta1ValidatingWebhookConfiguration(body: Models.V1beta1ValidatingWebhookConfiguration, options?: Models.OpenShiftAPIwithKubernetesCreateAdmissionregistrationV1beta1ValidatingWebhookConfigurationOptionalParams): Promise<Models.CreateAdmissionregistrationV1beta1ValidatingWebhookConfigurationResponse>;
  /**
   * @param body
   * @param callback The callback
   */
  createAdmissionregistrationV1beta1ValidatingWebhookConfiguration(body: Models.V1beta1ValidatingWebhookConfiguration, callback: msRest.ServiceCallback<Models.V1beta1ValidatingWebhookConfiguration>): void;
  /**
   * @param body
   * @param options The optional parameters
   * @param callback The callback
   */
  createAdmissionregistrationV1beta1ValidatingWebhookConfiguration(body: Models.V1beta1ValidatingWebhookConfiguration, options: Models.OpenShiftAPIwithKubernetesCreateAdmissionregistrationV1beta1ValidatingWebhookConfigurationOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1ValidatingWebhookConfiguration>): void;
  createAdmissionregistrationV1beta1ValidatingWebhookConfiguration(body: Models.V1beta1ValidatingWebhookConfiguration, options?: Models.OpenShiftAPIwithKubernetesCreateAdmissionregistrationV1beta1ValidatingWebhookConfigurationOptionalParams | msRest.ServiceCallback<Models.V1beta1ValidatingWebhookConfiguration>, callback?: msRest.ServiceCallback<Models.V1beta1ValidatingWebhookConfiguration>): Promise<Models.CreateAdmissionregistrationV1beta1ValidatingWebhookConfigurationResponse> {
    return this.sendOperationRequest(
      {
        body,
        options
      },
      createAdmissionregistrationV1beta1ValidatingWebhookConfigurationOperationSpec,
      callback) as Promise<Models.CreateAdmissionregistrationV1beta1ValidatingWebhookConfigurationResponse>;
  }

  /**
   * delete collection of ValidatingWebhookConfiguration
   * @param [options] The optional parameters
   * @returns
   * Promise<Models.DeleteAdmissionregistrationV1beta1CollectionValidatingWebhookConfigurationResponse>
   */
  deleteAdmissionregistrationV1beta1CollectionValidatingWebhookConfiguration(options?: Models.OpenShiftAPIwithKubernetesDeleteAdmissionregistrationV1beta1CollectionValidatingWebhookConfigurationOptionalParams): Promise<Models.DeleteAdmissionregistrationV1beta1CollectionValidatingWebhookConfigurationResponse>;
  /**
   * @param callback The callback
   */
  deleteAdmissionregistrationV1beta1CollectionValidatingWebhookConfiguration(callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteAdmissionregistrationV1beta1CollectionValidatingWebhookConfiguration(options: Models.OpenShiftAPIwithKubernetesDeleteAdmissionregistrationV1beta1CollectionValidatingWebhookConfigurationOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteAdmissionregistrationV1beta1CollectionValidatingWebhookConfiguration(options?: Models.OpenShiftAPIwithKubernetesDeleteAdmissionregistrationV1beta1CollectionValidatingWebhookConfigurationOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteAdmissionregistrationV1beta1CollectionValidatingWebhookConfigurationResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      deleteAdmissionregistrationV1beta1CollectionValidatingWebhookConfigurationOperationSpec,
      callback) as Promise<Models.DeleteAdmissionregistrationV1beta1CollectionValidatingWebhookConfigurationResponse>;
  }

  /**
   * read the specified ValidatingWebhookConfiguration
   * @param name name of the ValidatingWebhookConfiguration
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadAdmissionregistrationV1beta1ValidatingWebhookConfigurationResponse>
   */
  readAdmissionregistrationV1beta1ValidatingWebhookConfiguration(name: string, options?: Models.OpenShiftAPIwithKubernetesReadAdmissionregistrationV1beta1ValidatingWebhookConfigurationOptionalParams): Promise<Models.ReadAdmissionregistrationV1beta1ValidatingWebhookConfigurationResponse>;
  /**
   * @param name name of the ValidatingWebhookConfiguration
   * @param callback The callback
   */
  readAdmissionregistrationV1beta1ValidatingWebhookConfiguration(name: string, callback: msRest.ServiceCallback<Models.V1beta1ValidatingWebhookConfiguration>): void;
  /**
   * @param name name of the ValidatingWebhookConfiguration
   * @param options The optional parameters
   * @param callback The callback
   */
  readAdmissionregistrationV1beta1ValidatingWebhookConfiguration(name: string, options: Models.OpenShiftAPIwithKubernetesReadAdmissionregistrationV1beta1ValidatingWebhookConfigurationOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1ValidatingWebhookConfiguration>): void;
  readAdmissionregistrationV1beta1ValidatingWebhookConfiguration(name: string, options?: Models.OpenShiftAPIwithKubernetesReadAdmissionregistrationV1beta1ValidatingWebhookConfigurationOptionalParams | msRest.ServiceCallback<Models.V1beta1ValidatingWebhookConfiguration>, callback?: msRest.ServiceCallback<Models.V1beta1ValidatingWebhookConfiguration>): Promise<Models.ReadAdmissionregistrationV1beta1ValidatingWebhookConfigurationResponse> {
    return this.sendOperationRequest(
      {
        name,
        options
      },
      readAdmissionregistrationV1beta1ValidatingWebhookConfigurationOperationSpec,
      callback) as Promise<Models.ReadAdmissionregistrationV1beta1ValidatingWebhookConfigurationResponse>;
  }

  /**
   * replace the specified ValidatingWebhookConfiguration
   * @param body
   * @param name name of the ValidatingWebhookConfiguration
   * @param [options] The optional parameters
   * @returns
   * Promise<Models.ReplaceAdmissionregistrationV1beta1ValidatingWebhookConfigurationResponse>
   */
  replaceAdmissionregistrationV1beta1ValidatingWebhookConfiguration(body: Models.V1beta1ValidatingWebhookConfiguration, name: string, options?: Models.OpenShiftAPIwithKubernetesReplaceAdmissionregistrationV1beta1ValidatingWebhookConfigurationOptionalParams): Promise<Models.ReplaceAdmissionregistrationV1beta1ValidatingWebhookConfigurationResponse>;
  /**
   * @param body
   * @param name name of the ValidatingWebhookConfiguration
   * @param callback The callback
   */
  replaceAdmissionregistrationV1beta1ValidatingWebhookConfiguration(body: Models.V1beta1ValidatingWebhookConfiguration, name: string, callback: msRest.ServiceCallback<Models.V1beta1ValidatingWebhookConfiguration>): void;
  /**
   * @param body
   * @param name name of the ValidatingWebhookConfiguration
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceAdmissionregistrationV1beta1ValidatingWebhookConfiguration(body: Models.V1beta1ValidatingWebhookConfiguration, name: string, options: Models.OpenShiftAPIwithKubernetesReplaceAdmissionregistrationV1beta1ValidatingWebhookConfigurationOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1ValidatingWebhookConfiguration>): void;
  replaceAdmissionregistrationV1beta1ValidatingWebhookConfiguration(body: Models.V1beta1ValidatingWebhookConfiguration, name: string, options?: Models.OpenShiftAPIwithKubernetesReplaceAdmissionregistrationV1beta1ValidatingWebhookConfigurationOptionalParams | msRest.ServiceCallback<Models.V1beta1ValidatingWebhookConfiguration>, callback?: msRest.ServiceCallback<Models.V1beta1ValidatingWebhookConfiguration>): Promise<Models.ReplaceAdmissionregistrationV1beta1ValidatingWebhookConfigurationResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      replaceAdmissionregistrationV1beta1ValidatingWebhookConfigurationOperationSpec,
      callback) as Promise<Models.ReplaceAdmissionregistrationV1beta1ValidatingWebhookConfigurationResponse>;
  }

  /**
   * delete a ValidatingWebhookConfiguration
   * @param body
   * @param name name of the ValidatingWebhookConfiguration
   * @param [options] The optional parameters
   * @returns
   * Promise<Models.DeleteAdmissionregistrationV1beta1ValidatingWebhookConfigurationResponse>
   */
  deleteAdmissionregistrationV1beta1ValidatingWebhookConfiguration(body: Models.V1DeleteOptions, name: string, options?: Models.OpenShiftAPIwithKubernetesDeleteAdmissionregistrationV1beta1ValidatingWebhookConfigurationOptionalParams): Promise<Models.DeleteAdmissionregistrationV1beta1ValidatingWebhookConfigurationResponse>;
  /**
   * @param body
   * @param name name of the ValidatingWebhookConfiguration
   * @param callback The callback
   */
  deleteAdmissionregistrationV1beta1ValidatingWebhookConfiguration(body: Models.V1DeleteOptions, name: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param name name of the ValidatingWebhookConfiguration
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteAdmissionregistrationV1beta1ValidatingWebhookConfiguration(body: Models.V1DeleteOptions, name: string, options: Models.OpenShiftAPIwithKubernetesDeleteAdmissionregistrationV1beta1ValidatingWebhookConfigurationOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteAdmissionregistrationV1beta1ValidatingWebhookConfiguration(body: Models.V1DeleteOptions, name: string, options?: Models.OpenShiftAPIwithKubernetesDeleteAdmissionregistrationV1beta1ValidatingWebhookConfigurationOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteAdmissionregistrationV1beta1ValidatingWebhookConfigurationResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      deleteAdmissionregistrationV1beta1ValidatingWebhookConfigurationOperationSpec,
      callback) as Promise<Models.DeleteAdmissionregistrationV1beta1ValidatingWebhookConfigurationResponse>;
  }

  /**
   * partially update the specified ValidatingWebhookConfiguration
   * @param body
   * @param name name of the ValidatingWebhookConfiguration
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchAdmissionregistrationV1beta1ValidatingWebhookConfigurationResponse>
   */
  patchAdmissionregistrationV1beta1ValidatingWebhookConfiguration(body: any, name: string, options?: Models.OpenShiftAPIwithKubernetesPatchAdmissionregistrationV1beta1ValidatingWebhookConfigurationOptionalParams): Promise<Models.PatchAdmissionregistrationV1beta1ValidatingWebhookConfigurationResponse>;
  /**
   * @param body
   * @param name name of the ValidatingWebhookConfiguration
   * @param callback The callback
   */
  patchAdmissionregistrationV1beta1ValidatingWebhookConfiguration(body: any, name: string, callback: msRest.ServiceCallback<Models.V1beta1ValidatingWebhookConfiguration>): void;
  /**
   * @param body
   * @param name name of the ValidatingWebhookConfiguration
   * @param options The optional parameters
   * @param callback The callback
   */
  patchAdmissionregistrationV1beta1ValidatingWebhookConfiguration(body: any, name: string, options: Models.OpenShiftAPIwithKubernetesPatchAdmissionregistrationV1beta1ValidatingWebhookConfigurationOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1ValidatingWebhookConfiguration>): void;
  patchAdmissionregistrationV1beta1ValidatingWebhookConfiguration(body: any, name: string, options?: Models.OpenShiftAPIwithKubernetesPatchAdmissionregistrationV1beta1ValidatingWebhookConfigurationOptionalParams | msRest.ServiceCallback<Models.V1beta1ValidatingWebhookConfiguration>, callback?: msRest.ServiceCallback<Models.V1beta1ValidatingWebhookConfiguration>): Promise<Models.PatchAdmissionregistrationV1beta1ValidatingWebhookConfigurationResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      patchAdmissionregistrationV1beta1ValidatingWebhookConfigurationOperationSpec,
      callback) as Promise<Models.PatchAdmissionregistrationV1beta1ValidatingWebhookConfigurationResponse>;
  }

  /**
   * watch individual changes to a list of MutatingWebhookConfiguration
   * @param [options] The optional parameters
   * @returns
   * Promise<Models.WatchAdmissionregistrationV1beta1MutatingWebhookConfigurationListResponse>
   */
  watchAdmissionregistrationV1beta1MutatingWebhookConfigurationList(options?: Models.OpenShiftAPIwithKubernetesWatchAdmissionregistrationV1beta1MutatingWebhookConfigurationListOptionalParams): Promise<Models.WatchAdmissionregistrationV1beta1MutatingWebhookConfigurationListResponse>;
  /**
   * @param callback The callback
   */
  watchAdmissionregistrationV1beta1MutatingWebhookConfigurationList(callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  watchAdmissionregistrationV1beta1MutatingWebhookConfigurationList(options: Models.OpenShiftAPIwithKubernetesWatchAdmissionregistrationV1beta1MutatingWebhookConfigurationListOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchAdmissionregistrationV1beta1MutatingWebhookConfigurationList(options?: Models.OpenShiftAPIwithKubernetesWatchAdmissionregistrationV1beta1MutatingWebhookConfigurationListOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchAdmissionregistrationV1beta1MutatingWebhookConfigurationListResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      watchAdmissionregistrationV1beta1MutatingWebhookConfigurationListOperationSpec,
      callback) as Promise<Models.WatchAdmissionregistrationV1beta1MutatingWebhookConfigurationListResponse>;
  }

  /**
   * watch changes to an object of kind MutatingWebhookConfiguration
   * @param name name of the MutatingWebhookConfiguration
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchAdmissionregistrationV1beta1MutatingWebhookConfigurationResponse>
   */
  watchAdmissionregistrationV1beta1MutatingWebhookConfiguration(name: string, options?: Models.OpenShiftAPIwithKubernetesWatchAdmissionregistrationV1beta1MutatingWebhookConfigurationOptionalParams): Promise<Models.WatchAdmissionregistrationV1beta1MutatingWebhookConfigurationResponse>;
  /**
   * @param name name of the MutatingWebhookConfiguration
   * @param callback The callback
   */
  watchAdmissionregistrationV1beta1MutatingWebhookConfiguration(name: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param name name of the MutatingWebhookConfiguration
   * @param options The optional parameters
   * @param callback The callback
   */
  watchAdmissionregistrationV1beta1MutatingWebhookConfiguration(name: string, options: Models.OpenShiftAPIwithKubernetesWatchAdmissionregistrationV1beta1MutatingWebhookConfigurationOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchAdmissionregistrationV1beta1MutatingWebhookConfiguration(name: string, options?: Models.OpenShiftAPIwithKubernetesWatchAdmissionregistrationV1beta1MutatingWebhookConfigurationOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchAdmissionregistrationV1beta1MutatingWebhookConfigurationResponse> {
    return this.sendOperationRequest(
      {
        name,
        options
      },
      watchAdmissionregistrationV1beta1MutatingWebhookConfigurationOperationSpec,
      callback) as Promise<Models.WatchAdmissionregistrationV1beta1MutatingWebhookConfigurationResponse>;
  }

  /**
   * watch individual changes to a list of ValidatingWebhookConfiguration
   * @param [options] The optional parameters
   * @returns
   * Promise<Models.WatchAdmissionregistrationV1beta1ValidatingWebhookConfigurationListResponse>
   */
  watchAdmissionregistrationV1beta1ValidatingWebhookConfigurationList(options?: Models.OpenShiftAPIwithKubernetesWatchAdmissionregistrationV1beta1ValidatingWebhookConfigurationListOptionalParams): Promise<Models.WatchAdmissionregistrationV1beta1ValidatingWebhookConfigurationListResponse>;
  /**
   * @param callback The callback
   */
  watchAdmissionregistrationV1beta1ValidatingWebhookConfigurationList(callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  watchAdmissionregistrationV1beta1ValidatingWebhookConfigurationList(options: Models.OpenShiftAPIwithKubernetesWatchAdmissionregistrationV1beta1ValidatingWebhookConfigurationListOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchAdmissionregistrationV1beta1ValidatingWebhookConfigurationList(options?: Models.OpenShiftAPIwithKubernetesWatchAdmissionregistrationV1beta1ValidatingWebhookConfigurationListOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchAdmissionregistrationV1beta1ValidatingWebhookConfigurationListResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      watchAdmissionregistrationV1beta1ValidatingWebhookConfigurationListOperationSpec,
      callback) as Promise<Models.WatchAdmissionregistrationV1beta1ValidatingWebhookConfigurationListResponse>;
  }

  /**
   * watch changes to an object of kind ValidatingWebhookConfiguration
   * @param name name of the ValidatingWebhookConfiguration
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchAdmissionregistrationV1beta1ValidatingWebhookConfigurationResponse>
   */
  watchAdmissionregistrationV1beta1ValidatingWebhookConfiguration(name: string, options?: Models.OpenShiftAPIwithKubernetesWatchAdmissionregistrationV1beta1ValidatingWebhookConfigurationOptionalParams): Promise<Models.WatchAdmissionregistrationV1beta1ValidatingWebhookConfigurationResponse>;
  /**
   * @param name name of the ValidatingWebhookConfiguration
   * @param callback The callback
   */
  watchAdmissionregistrationV1beta1ValidatingWebhookConfiguration(name: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param name name of the ValidatingWebhookConfiguration
   * @param options The optional parameters
   * @param callback The callback
   */
  watchAdmissionregistrationV1beta1ValidatingWebhookConfiguration(name: string, options: Models.OpenShiftAPIwithKubernetesWatchAdmissionregistrationV1beta1ValidatingWebhookConfigurationOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchAdmissionregistrationV1beta1ValidatingWebhookConfiguration(name: string, options?: Models.OpenShiftAPIwithKubernetesWatchAdmissionregistrationV1beta1ValidatingWebhookConfigurationOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchAdmissionregistrationV1beta1ValidatingWebhookConfigurationResponse> {
    return this.sendOperationRequest(
      {
        name,
        options
      },
      watchAdmissionregistrationV1beta1ValidatingWebhookConfigurationOperationSpec,
      callback) as Promise<Models.WatchAdmissionregistrationV1beta1ValidatingWebhookConfigurationResponse>;
  }

  /**
   * get information of a group
   * @param [options] The optional parameters
   * @returns Promise<Models.GetApiregistrationAPIGroupResponse>
   */
  getApiregistrationAPIGroup(options?: msRest.RequestOptionsBase): Promise<Models.GetApiregistrationAPIGroupResponse>;
  /**
   * @param callback The callback
   */
  getApiregistrationAPIGroup(callback: msRest.ServiceCallback<Models.V1APIGroup>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getApiregistrationAPIGroup(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.V1APIGroup>): void;
  getApiregistrationAPIGroup(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.V1APIGroup>, callback?: msRest.ServiceCallback<Models.V1APIGroup>): Promise<Models.GetApiregistrationAPIGroupResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getApiregistrationAPIGroupOperationSpec,
      callback) as Promise<Models.GetApiregistrationAPIGroupResponse>;
  }

  /**
   * get available resources
   * @param [options] The optional parameters
   * @returns Promise<Models.GetApiregistrationV1APIResourcesResponse>
   */
  getApiregistrationV1APIResources(options?: msRest.RequestOptionsBase): Promise<Models.GetApiregistrationV1APIResourcesResponse>;
  /**
   * @param callback The callback
   */
  getApiregistrationV1APIResources(callback: msRest.ServiceCallback<Models.V1APIResourceList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getApiregistrationV1APIResources(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.V1APIResourceList>): void;
  getApiregistrationV1APIResources(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.V1APIResourceList>, callback?: msRest.ServiceCallback<Models.V1APIResourceList>): Promise<Models.GetApiregistrationV1APIResourcesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getApiregistrationV1APIResourcesOperationSpec,
      callback) as Promise<Models.GetApiregistrationV1APIResourcesResponse>;
  }

  /**
   * list or watch objects of kind APIService
   * @param [options] The optional parameters
   * @returns Promise<Models.ListApiregistrationV1APIServiceResponse>
   */
  listApiregistrationV1APIService(options?: Models.OpenShiftAPIwithKubernetesListApiregistrationV1APIServiceOptionalParams): Promise<Models.ListApiregistrationV1APIServiceResponse>;
  /**
   * @param callback The callback
   */
  listApiregistrationV1APIService(callback: msRest.ServiceCallback<Models.Iok8skubeAggregatorpkgapisapiregistrationv1APIServiceList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listApiregistrationV1APIService(options: Models.OpenShiftAPIwithKubernetesListApiregistrationV1APIServiceOptionalParams, callback: msRest.ServiceCallback<Models.Iok8skubeAggregatorpkgapisapiregistrationv1APIServiceList>): void;
  listApiregistrationV1APIService(options?: Models.OpenShiftAPIwithKubernetesListApiregistrationV1APIServiceOptionalParams | msRest.ServiceCallback<Models.Iok8skubeAggregatorpkgapisapiregistrationv1APIServiceList>, callback?: msRest.ServiceCallback<Models.Iok8skubeAggregatorpkgapisapiregistrationv1APIServiceList>): Promise<Models.ListApiregistrationV1APIServiceResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listApiregistrationV1APIServiceOperationSpec,
      callback) as Promise<Models.ListApiregistrationV1APIServiceResponse>;
  }

  /**
   * create an APIService
   * @param body
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateApiregistrationV1APIServiceResponse>
   */
  createApiregistrationV1APIService(body: Models.Iok8skubeAggregatorpkgapisapiregistrationv1APIService, options?: Models.OpenShiftAPIwithKubernetesCreateApiregistrationV1APIServiceOptionalParams): Promise<Models.CreateApiregistrationV1APIServiceResponse>;
  /**
   * @param body
   * @param callback The callback
   */
  createApiregistrationV1APIService(body: Models.Iok8skubeAggregatorpkgapisapiregistrationv1APIService, callback: msRest.ServiceCallback<Models.Iok8skubeAggregatorpkgapisapiregistrationv1APIService>): void;
  /**
   * @param body
   * @param options The optional parameters
   * @param callback The callback
   */
  createApiregistrationV1APIService(body: Models.Iok8skubeAggregatorpkgapisapiregistrationv1APIService, options: Models.OpenShiftAPIwithKubernetesCreateApiregistrationV1APIServiceOptionalParams, callback: msRest.ServiceCallback<Models.Iok8skubeAggregatorpkgapisapiregistrationv1APIService>): void;
  createApiregistrationV1APIService(body: Models.Iok8skubeAggregatorpkgapisapiregistrationv1APIService, options?: Models.OpenShiftAPIwithKubernetesCreateApiregistrationV1APIServiceOptionalParams | msRest.ServiceCallback<Models.Iok8skubeAggregatorpkgapisapiregistrationv1APIService>, callback?: msRest.ServiceCallback<Models.Iok8skubeAggregatorpkgapisapiregistrationv1APIService>): Promise<Models.CreateApiregistrationV1APIServiceResponse> {
    return this.sendOperationRequest(
      {
        body,
        options
      },
      createApiregistrationV1APIServiceOperationSpec,
      callback) as Promise<Models.CreateApiregistrationV1APIServiceResponse>;
  }

  /**
   * delete collection of APIService
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteApiregistrationV1CollectionAPIServiceResponse>
   */
  deleteApiregistrationV1CollectionAPIService(options?: Models.OpenShiftAPIwithKubernetesDeleteApiregistrationV1CollectionAPIServiceOptionalParams): Promise<Models.DeleteApiregistrationV1CollectionAPIServiceResponse>;
  /**
   * @param callback The callback
   */
  deleteApiregistrationV1CollectionAPIService(callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteApiregistrationV1CollectionAPIService(options: Models.OpenShiftAPIwithKubernetesDeleteApiregistrationV1CollectionAPIServiceOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteApiregistrationV1CollectionAPIService(options?: Models.OpenShiftAPIwithKubernetesDeleteApiregistrationV1CollectionAPIServiceOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteApiregistrationV1CollectionAPIServiceResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      deleteApiregistrationV1CollectionAPIServiceOperationSpec,
      callback) as Promise<Models.DeleteApiregistrationV1CollectionAPIServiceResponse>;
  }

  /**
   * read the specified APIService
   * @param name name of the APIService
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadApiregistrationV1APIServiceResponse>
   */
  readApiregistrationV1APIService(name: string, options?: Models.OpenShiftAPIwithKubernetesReadApiregistrationV1APIServiceOptionalParams): Promise<Models.ReadApiregistrationV1APIServiceResponse>;
  /**
   * @param name name of the APIService
   * @param callback The callback
   */
  readApiregistrationV1APIService(name: string, callback: msRest.ServiceCallback<Models.Iok8skubeAggregatorpkgapisapiregistrationv1APIService>): void;
  /**
   * @param name name of the APIService
   * @param options The optional parameters
   * @param callback The callback
   */
  readApiregistrationV1APIService(name: string, options: Models.OpenShiftAPIwithKubernetesReadApiregistrationV1APIServiceOptionalParams, callback: msRest.ServiceCallback<Models.Iok8skubeAggregatorpkgapisapiregistrationv1APIService>): void;
  readApiregistrationV1APIService(name: string, options?: Models.OpenShiftAPIwithKubernetesReadApiregistrationV1APIServiceOptionalParams | msRest.ServiceCallback<Models.Iok8skubeAggregatorpkgapisapiregistrationv1APIService>, callback?: msRest.ServiceCallback<Models.Iok8skubeAggregatorpkgapisapiregistrationv1APIService>): Promise<Models.ReadApiregistrationV1APIServiceResponse> {
    return this.sendOperationRequest(
      {
        name,
        options
      },
      readApiregistrationV1APIServiceOperationSpec,
      callback) as Promise<Models.ReadApiregistrationV1APIServiceResponse>;
  }

  /**
   * replace the specified APIService
   * @param body
   * @param name name of the APIService
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceApiregistrationV1APIServiceResponse>
   */
  replaceApiregistrationV1APIService(body: Models.Iok8skubeAggregatorpkgapisapiregistrationv1APIService, name: string, options?: Models.OpenShiftAPIwithKubernetesReplaceApiregistrationV1APIServiceOptionalParams): Promise<Models.ReplaceApiregistrationV1APIServiceResponse>;
  /**
   * @param body
   * @param name name of the APIService
   * @param callback The callback
   */
  replaceApiregistrationV1APIService(body: Models.Iok8skubeAggregatorpkgapisapiregistrationv1APIService, name: string, callback: msRest.ServiceCallback<Models.Iok8skubeAggregatorpkgapisapiregistrationv1APIService>): void;
  /**
   * @param body
   * @param name name of the APIService
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceApiregistrationV1APIService(body: Models.Iok8skubeAggregatorpkgapisapiregistrationv1APIService, name: string, options: Models.OpenShiftAPIwithKubernetesReplaceApiregistrationV1APIServiceOptionalParams, callback: msRest.ServiceCallback<Models.Iok8skubeAggregatorpkgapisapiregistrationv1APIService>): void;
  replaceApiregistrationV1APIService(body: Models.Iok8skubeAggregatorpkgapisapiregistrationv1APIService, name: string, options?: Models.OpenShiftAPIwithKubernetesReplaceApiregistrationV1APIServiceOptionalParams | msRest.ServiceCallback<Models.Iok8skubeAggregatorpkgapisapiregistrationv1APIService>, callback?: msRest.ServiceCallback<Models.Iok8skubeAggregatorpkgapisapiregistrationv1APIService>): Promise<Models.ReplaceApiregistrationV1APIServiceResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      replaceApiregistrationV1APIServiceOperationSpec,
      callback) as Promise<Models.ReplaceApiregistrationV1APIServiceResponse>;
  }

  /**
   * delete an APIService
   * @param body
   * @param name name of the APIService
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteApiregistrationV1APIServiceResponse>
   */
  deleteApiregistrationV1APIService(body: Models.V1DeleteOptions, name: string, options?: Models.OpenShiftAPIwithKubernetesDeleteApiregistrationV1APIServiceOptionalParams): Promise<Models.DeleteApiregistrationV1APIServiceResponse>;
  /**
   * @param body
   * @param name name of the APIService
   * @param callback The callback
   */
  deleteApiregistrationV1APIService(body: Models.V1DeleteOptions, name: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param name name of the APIService
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteApiregistrationV1APIService(body: Models.V1DeleteOptions, name: string, options: Models.OpenShiftAPIwithKubernetesDeleteApiregistrationV1APIServiceOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteApiregistrationV1APIService(body: Models.V1DeleteOptions, name: string, options?: Models.OpenShiftAPIwithKubernetesDeleteApiregistrationV1APIServiceOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteApiregistrationV1APIServiceResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      deleteApiregistrationV1APIServiceOperationSpec,
      callback) as Promise<Models.DeleteApiregistrationV1APIServiceResponse>;
  }

  /**
   * partially update the specified APIService
   * @param body
   * @param name name of the APIService
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchApiregistrationV1APIServiceResponse>
   */
  patchApiregistrationV1APIService(body: any, name: string, options?: Models.OpenShiftAPIwithKubernetesPatchApiregistrationV1APIServiceOptionalParams): Promise<Models.PatchApiregistrationV1APIServiceResponse>;
  /**
   * @param body
   * @param name name of the APIService
   * @param callback The callback
   */
  patchApiregistrationV1APIService(body: any, name: string, callback: msRest.ServiceCallback<Models.Iok8skubeAggregatorpkgapisapiregistrationv1APIService>): void;
  /**
   * @param body
   * @param name name of the APIService
   * @param options The optional parameters
   * @param callback The callback
   */
  patchApiregistrationV1APIService(body: any, name: string, options: Models.OpenShiftAPIwithKubernetesPatchApiregistrationV1APIServiceOptionalParams, callback: msRest.ServiceCallback<Models.Iok8skubeAggregatorpkgapisapiregistrationv1APIService>): void;
  patchApiregistrationV1APIService(body: any, name: string, options?: Models.OpenShiftAPIwithKubernetesPatchApiregistrationV1APIServiceOptionalParams | msRest.ServiceCallback<Models.Iok8skubeAggregatorpkgapisapiregistrationv1APIService>, callback?: msRest.ServiceCallback<Models.Iok8skubeAggregatorpkgapisapiregistrationv1APIService>): Promise<Models.PatchApiregistrationV1APIServiceResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      patchApiregistrationV1APIServiceOperationSpec,
      callback) as Promise<Models.PatchApiregistrationV1APIServiceResponse>;
  }

  /**
   * read status of the specified APIService
   * @param name name of the APIService
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadApiregistrationV1APIServiceStatusResponse>
   */
  readApiregistrationV1APIServiceStatus(name: string, options?: Models.OpenShiftAPIwithKubernetesReadApiregistrationV1APIServiceStatusOptionalParams): Promise<Models.ReadApiregistrationV1APIServiceStatusResponse>;
  /**
   * @param name name of the APIService
   * @param callback The callback
   */
  readApiregistrationV1APIServiceStatus(name: string, callback: msRest.ServiceCallback<Models.Iok8skubeAggregatorpkgapisapiregistrationv1APIService>): void;
  /**
   * @param name name of the APIService
   * @param options The optional parameters
   * @param callback The callback
   */
  readApiregistrationV1APIServiceStatus(name: string, options: Models.OpenShiftAPIwithKubernetesReadApiregistrationV1APIServiceStatusOptionalParams, callback: msRest.ServiceCallback<Models.Iok8skubeAggregatorpkgapisapiregistrationv1APIService>): void;
  readApiregistrationV1APIServiceStatus(name: string, options?: Models.OpenShiftAPIwithKubernetesReadApiregistrationV1APIServiceStatusOptionalParams | msRest.ServiceCallback<Models.Iok8skubeAggregatorpkgapisapiregistrationv1APIService>, callback?: msRest.ServiceCallback<Models.Iok8skubeAggregatorpkgapisapiregistrationv1APIService>): Promise<Models.ReadApiregistrationV1APIServiceStatusResponse> {
    return this.sendOperationRequest(
      {
        name,
        options
      },
      readApiregistrationV1APIServiceStatusOperationSpec,
      callback) as Promise<Models.ReadApiregistrationV1APIServiceStatusResponse>;
  }

  /**
   * replace status of the specified APIService
   * @param body
   * @param name name of the APIService
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceApiregistrationV1APIServiceStatusResponse>
   */
  replaceApiregistrationV1APIServiceStatus(body: Models.Iok8skubeAggregatorpkgapisapiregistrationv1APIService, name: string, options?: Models.OpenShiftAPIwithKubernetesReplaceApiregistrationV1APIServiceStatusOptionalParams): Promise<Models.ReplaceApiregistrationV1APIServiceStatusResponse>;
  /**
   * @param body
   * @param name name of the APIService
   * @param callback The callback
   */
  replaceApiregistrationV1APIServiceStatus(body: Models.Iok8skubeAggregatorpkgapisapiregistrationv1APIService, name: string, callback: msRest.ServiceCallback<Models.Iok8skubeAggregatorpkgapisapiregistrationv1APIService>): void;
  /**
   * @param body
   * @param name name of the APIService
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceApiregistrationV1APIServiceStatus(body: Models.Iok8skubeAggregatorpkgapisapiregistrationv1APIService, name: string, options: Models.OpenShiftAPIwithKubernetesReplaceApiregistrationV1APIServiceStatusOptionalParams, callback: msRest.ServiceCallback<Models.Iok8skubeAggregatorpkgapisapiregistrationv1APIService>): void;
  replaceApiregistrationV1APIServiceStatus(body: Models.Iok8skubeAggregatorpkgapisapiregistrationv1APIService, name: string, options?: Models.OpenShiftAPIwithKubernetesReplaceApiregistrationV1APIServiceStatusOptionalParams | msRest.ServiceCallback<Models.Iok8skubeAggregatorpkgapisapiregistrationv1APIService>, callback?: msRest.ServiceCallback<Models.Iok8skubeAggregatorpkgapisapiregistrationv1APIService>): Promise<Models.ReplaceApiregistrationV1APIServiceStatusResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      replaceApiregistrationV1APIServiceStatusOperationSpec,
      callback) as Promise<Models.ReplaceApiregistrationV1APIServiceStatusResponse>;
  }

  /**
   * partially update status of the specified APIService
   * @param body
   * @param name name of the APIService
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchApiregistrationV1APIServiceStatusResponse>
   */
  patchApiregistrationV1APIServiceStatus(body: any, name: string, options?: Models.OpenShiftAPIwithKubernetesPatchApiregistrationV1APIServiceStatusOptionalParams): Promise<Models.PatchApiregistrationV1APIServiceStatusResponse>;
  /**
   * @param body
   * @param name name of the APIService
   * @param callback The callback
   */
  patchApiregistrationV1APIServiceStatus(body: any, name: string, callback: msRest.ServiceCallback<Models.Iok8skubeAggregatorpkgapisapiregistrationv1APIService>): void;
  /**
   * @param body
   * @param name name of the APIService
   * @param options The optional parameters
   * @param callback The callback
   */
  patchApiregistrationV1APIServiceStatus(body: any, name: string, options: Models.OpenShiftAPIwithKubernetesPatchApiregistrationV1APIServiceStatusOptionalParams, callback: msRest.ServiceCallback<Models.Iok8skubeAggregatorpkgapisapiregistrationv1APIService>): void;
  patchApiregistrationV1APIServiceStatus(body: any, name: string, options?: Models.OpenShiftAPIwithKubernetesPatchApiregistrationV1APIServiceStatusOptionalParams | msRest.ServiceCallback<Models.Iok8skubeAggregatorpkgapisapiregistrationv1APIService>, callback?: msRest.ServiceCallback<Models.Iok8skubeAggregatorpkgapisapiregistrationv1APIService>): Promise<Models.PatchApiregistrationV1APIServiceStatusResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      patchApiregistrationV1APIServiceStatusOperationSpec,
      callback) as Promise<Models.PatchApiregistrationV1APIServiceStatusResponse>;
  }

  /**
   * watch individual changes to a list of APIService
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchApiregistrationV1APIServiceListResponse>
   */
  watchApiregistrationV1APIServiceList(options?: Models.OpenShiftAPIwithKubernetesWatchApiregistrationV1APIServiceListOptionalParams): Promise<Models.WatchApiregistrationV1APIServiceListResponse>;
  /**
   * @param callback The callback
   */
  watchApiregistrationV1APIServiceList(callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  watchApiregistrationV1APIServiceList(options: Models.OpenShiftAPIwithKubernetesWatchApiregistrationV1APIServiceListOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchApiregistrationV1APIServiceList(options?: Models.OpenShiftAPIwithKubernetesWatchApiregistrationV1APIServiceListOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchApiregistrationV1APIServiceListResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      watchApiregistrationV1APIServiceListOperationSpec,
      callback) as Promise<Models.WatchApiregistrationV1APIServiceListResponse>;
  }

  /**
   * watch changes to an object of kind APIService
   * @param name name of the APIService
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchApiregistrationV1APIServiceResponse>
   */
  watchApiregistrationV1APIService(name: string, options?: Models.OpenShiftAPIwithKubernetesWatchApiregistrationV1APIServiceOptionalParams): Promise<Models.WatchApiregistrationV1APIServiceResponse>;
  /**
   * @param name name of the APIService
   * @param callback The callback
   */
  watchApiregistrationV1APIService(name: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param name name of the APIService
   * @param options The optional parameters
   * @param callback The callback
   */
  watchApiregistrationV1APIService(name: string, options: Models.OpenShiftAPIwithKubernetesWatchApiregistrationV1APIServiceOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchApiregistrationV1APIService(name: string, options?: Models.OpenShiftAPIwithKubernetesWatchApiregistrationV1APIServiceOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchApiregistrationV1APIServiceResponse> {
    return this.sendOperationRequest(
      {
        name,
        options
      },
      watchApiregistrationV1APIServiceOperationSpec,
      callback) as Promise<Models.WatchApiregistrationV1APIServiceResponse>;
  }

  /**
   * get available resources
   * @param [options] The optional parameters
   * @returns Promise<Models.GetApiregistrationV1beta1APIResourcesResponse>
   */
  getApiregistrationV1beta1APIResources(options?: msRest.RequestOptionsBase): Promise<Models.GetApiregistrationV1beta1APIResourcesResponse>;
  /**
   * @param callback The callback
   */
  getApiregistrationV1beta1APIResources(callback: msRest.ServiceCallback<Models.V1APIResourceList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getApiregistrationV1beta1APIResources(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.V1APIResourceList>): void;
  getApiregistrationV1beta1APIResources(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.V1APIResourceList>, callback?: msRest.ServiceCallback<Models.V1APIResourceList>): Promise<Models.GetApiregistrationV1beta1APIResourcesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getApiregistrationV1beta1APIResourcesOperationSpec,
      callback) as Promise<Models.GetApiregistrationV1beta1APIResourcesResponse>;
  }

  /**
   * list or watch objects of kind APIService
   * @param [options] The optional parameters
   * @returns Promise<Models.ListApiregistrationV1beta1APIServiceResponse>
   */
  listApiregistrationV1beta1APIService(options?: Models.OpenShiftAPIwithKubernetesListApiregistrationV1beta1APIServiceOptionalParams): Promise<Models.ListApiregistrationV1beta1APIServiceResponse>;
  /**
   * @param callback The callback
   */
  listApiregistrationV1beta1APIService(callback: msRest.ServiceCallback<Models.Iok8skubeAggregatorpkgapisapiregistrationv1beta1APIServiceList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listApiregistrationV1beta1APIService(options: Models.OpenShiftAPIwithKubernetesListApiregistrationV1beta1APIServiceOptionalParams, callback: msRest.ServiceCallback<Models.Iok8skubeAggregatorpkgapisapiregistrationv1beta1APIServiceList>): void;
  listApiregistrationV1beta1APIService(options?: Models.OpenShiftAPIwithKubernetesListApiregistrationV1beta1APIServiceOptionalParams | msRest.ServiceCallback<Models.Iok8skubeAggregatorpkgapisapiregistrationv1beta1APIServiceList>, callback?: msRest.ServiceCallback<Models.Iok8skubeAggregatorpkgapisapiregistrationv1beta1APIServiceList>): Promise<Models.ListApiregistrationV1beta1APIServiceResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listApiregistrationV1beta1APIServiceOperationSpec,
      callback) as Promise<Models.ListApiregistrationV1beta1APIServiceResponse>;
  }

  /**
   * create an APIService
   * @param body
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateApiregistrationV1beta1APIServiceResponse>
   */
  createApiregistrationV1beta1APIService(body: Models.Iok8skubeAggregatorpkgapisapiregistrationv1beta1APIService, options?: Models.OpenShiftAPIwithKubernetesCreateApiregistrationV1beta1APIServiceOptionalParams): Promise<Models.CreateApiregistrationV1beta1APIServiceResponse>;
  /**
   * @param body
   * @param callback The callback
   */
  createApiregistrationV1beta1APIService(body: Models.Iok8skubeAggregatorpkgapisapiregistrationv1beta1APIService, callback: msRest.ServiceCallback<Models.Iok8skubeAggregatorpkgapisapiregistrationv1beta1APIService>): void;
  /**
   * @param body
   * @param options The optional parameters
   * @param callback The callback
   */
  createApiregistrationV1beta1APIService(body: Models.Iok8skubeAggregatorpkgapisapiregistrationv1beta1APIService, options: Models.OpenShiftAPIwithKubernetesCreateApiregistrationV1beta1APIServiceOptionalParams, callback: msRest.ServiceCallback<Models.Iok8skubeAggregatorpkgapisapiregistrationv1beta1APIService>): void;
  createApiregistrationV1beta1APIService(body: Models.Iok8skubeAggregatorpkgapisapiregistrationv1beta1APIService, options?: Models.OpenShiftAPIwithKubernetesCreateApiregistrationV1beta1APIServiceOptionalParams | msRest.ServiceCallback<Models.Iok8skubeAggregatorpkgapisapiregistrationv1beta1APIService>, callback?: msRest.ServiceCallback<Models.Iok8skubeAggregatorpkgapisapiregistrationv1beta1APIService>): Promise<Models.CreateApiregistrationV1beta1APIServiceResponse> {
    return this.sendOperationRequest(
      {
        body,
        options
      },
      createApiregistrationV1beta1APIServiceOperationSpec,
      callback) as Promise<Models.CreateApiregistrationV1beta1APIServiceResponse>;
  }

  /**
   * delete collection of APIService
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteApiregistrationV1beta1CollectionAPIServiceResponse>
   */
  deleteApiregistrationV1beta1CollectionAPIService(options?: Models.OpenShiftAPIwithKubernetesDeleteApiregistrationV1beta1CollectionAPIServiceOptionalParams): Promise<Models.DeleteApiregistrationV1beta1CollectionAPIServiceResponse>;
  /**
   * @param callback The callback
   */
  deleteApiregistrationV1beta1CollectionAPIService(callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteApiregistrationV1beta1CollectionAPIService(options: Models.OpenShiftAPIwithKubernetesDeleteApiregistrationV1beta1CollectionAPIServiceOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteApiregistrationV1beta1CollectionAPIService(options?: Models.OpenShiftAPIwithKubernetesDeleteApiregistrationV1beta1CollectionAPIServiceOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteApiregistrationV1beta1CollectionAPIServiceResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      deleteApiregistrationV1beta1CollectionAPIServiceOperationSpec,
      callback) as Promise<Models.DeleteApiregistrationV1beta1CollectionAPIServiceResponse>;
  }

  /**
   * read the specified APIService
   * @param name name of the APIService
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadApiregistrationV1beta1APIServiceResponse>
   */
  readApiregistrationV1beta1APIService(name: string, options?: Models.OpenShiftAPIwithKubernetesReadApiregistrationV1beta1APIServiceOptionalParams): Promise<Models.ReadApiregistrationV1beta1APIServiceResponse>;
  /**
   * @param name name of the APIService
   * @param callback The callback
   */
  readApiregistrationV1beta1APIService(name: string, callback: msRest.ServiceCallback<Models.Iok8skubeAggregatorpkgapisapiregistrationv1beta1APIService>): void;
  /**
   * @param name name of the APIService
   * @param options The optional parameters
   * @param callback The callback
   */
  readApiregistrationV1beta1APIService(name: string, options: Models.OpenShiftAPIwithKubernetesReadApiregistrationV1beta1APIServiceOptionalParams, callback: msRest.ServiceCallback<Models.Iok8skubeAggregatorpkgapisapiregistrationv1beta1APIService>): void;
  readApiregistrationV1beta1APIService(name: string, options?: Models.OpenShiftAPIwithKubernetesReadApiregistrationV1beta1APIServiceOptionalParams | msRest.ServiceCallback<Models.Iok8skubeAggregatorpkgapisapiregistrationv1beta1APIService>, callback?: msRest.ServiceCallback<Models.Iok8skubeAggregatorpkgapisapiregistrationv1beta1APIService>): Promise<Models.ReadApiregistrationV1beta1APIServiceResponse> {
    return this.sendOperationRequest(
      {
        name,
        options
      },
      readApiregistrationV1beta1APIServiceOperationSpec,
      callback) as Promise<Models.ReadApiregistrationV1beta1APIServiceResponse>;
  }

  /**
   * replace the specified APIService
   * @param body
   * @param name name of the APIService
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceApiregistrationV1beta1APIServiceResponse>
   */
  replaceApiregistrationV1beta1APIService(body: Models.Iok8skubeAggregatorpkgapisapiregistrationv1beta1APIService, name: string, options?: Models.OpenShiftAPIwithKubernetesReplaceApiregistrationV1beta1APIServiceOptionalParams): Promise<Models.ReplaceApiregistrationV1beta1APIServiceResponse>;
  /**
   * @param body
   * @param name name of the APIService
   * @param callback The callback
   */
  replaceApiregistrationV1beta1APIService(body: Models.Iok8skubeAggregatorpkgapisapiregistrationv1beta1APIService, name: string, callback: msRest.ServiceCallback<Models.Iok8skubeAggregatorpkgapisapiregistrationv1beta1APIService>): void;
  /**
   * @param body
   * @param name name of the APIService
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceApiregistrationV1beta1APIService(body: Models.Iok8skubeAggregatorpkgapisapiregistrationv1beta1APIService, name: string, options: Models.OpenShiftAPIwithKubernetesReplaceApiregistrationV1beta1APIServiceOptionalParams, callback: msRest.ServiceCallback<Models.Iok8skubeAggregatorpkgapisapiregistrationv1beta1APIService>): void;
  replaceApiregistrationV1beta1APIService(body: Models.Iok8skubeAggregatorpkgapisapiregistrationv1beta1APIService, name: string, options?: Models.OpenShiftAPIwithKubernetesReplaceApiregistrationV1beta1APIServiceOptionalParams | msRest.ServiceCallback<Models.Iok8skubeAggregatorpkgapisapiregistrationv1beta1APIService>, callback?: msRest.ServiceCallback<Models.Iok8skubeAggregatorpkgapisapiregistrationv1beta1APIService>): Promise<Models.ReplaceApiregistrationV1beta1APIServiceResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      replaceApiregistrationV1beta1APIServiceOperationSpec,
      callback) as Promise<Models.ReplaceApiregistrationV1beta1APIServiceResponse>;
  }

  /**
   * delete an APIService
   * @param body
   * @param name name of the APIService
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteApiregistrationV1beta1APIServiceResponse>
   */
  deleteApiregistrationV1beta1APIService(body: Models.V1DeleteOptions, name: string, options?: Models.OpenShiftAPIwithKubernetesDeleteApiregistrationV1beta1APIServiceOptionalParams): Promise<Models.DeleteApiregistrationV1beta1APIServiceResponse>;
  /**
   * @param body
   * @param name name of the APIService
   * @param callback The callback
   */
  deleteApiregistrationV1beta1APIService(body: Models.V1DeleteOptions, name: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param name name of the APIService
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteApiregistrationV1beta1APIService(body: Models.V1DeleteOptions, name: string, options: Models.OpenShiftAPIwithKubernetesDeleteApiregistrationV1beta1APIServiceOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteApiregistrationV1beta1APIService(body: Models.V1DeleteOptions, name: string, options?: Models.OpenShiftAPIwithKubernetesDeleteApiregistrationV1beta1APIServiceOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteApiregistrationV1beta1APIServiceResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      deleteApiregistrationV1beta1APIServiceOperationSpec,
      callback) as Promise<Models.DeleteApiregistrationV1beta1APIServiceResponse>;
  }

  /**
   * partially update the specified APIService
   * @param body
   * @param name name of the APIService
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchApiregistrationV1beta1APIServiceResponse>
   */
  patchApiregistrationV1beta1APIService(body: any, name: string, options?: Models.OpenShiftAPIwithKubernetesPatchApiregistrationV1beta1APIServiceOptionalParams): Promise<Models.PatchApiregistrationV1beta1APIServiceResponse>;
  /**
   * @param body
   * @param name name of the APIService
   * @param callback The callback
   */
  patchApiregistrationV1beta1APIService(body: any, name: string, callback: msRest.ServiceCallback<Models.Iok8skubeAggregatorpkgapisapiregistrationv1beta1APIService>): void;
  /**
   * @param body
   * @param name name of the APIService
   * @param options The optional parameters
   * @param callback The callback
   */
  patchApiregistrationV1beta1APIService(body: any, name: string, options: Models.OpenShiftAPIwithKubernetesPatchApiregistrationV1beta1APIServiceOptionalParams, callback: msRest.ServiceCallback<Models.Iok8skubeAggregatorpkgapisapiregistrationv1beta1APIService>): void;
  patchApiregistrationV1beta1APIService(body: any, name: string, options?: Models.OpenShiftAPIwithKubernetesPatchApiregistrationV1beta1APIServiceOptionalParams | msRest.ServiceCallback<Models.Iok8skubeAggregatorpkgapisapiregistrationv1beta1APIService>, callback?: msRest.ServiceCallback<Models.Iok8skubeAggregatorpkgapisapiregistrationv1beta1APIService>): Promise<Models.PatchApiregistrationV1beta1APIServiceResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      patchApiregistrationV1beta1APIServiceOperationSpec,
      callback) as Promise<Models.PatchApiregistrationV1beta1APIServiceResponse>;
  }

  /**
   * read status of the specified APIService
   * @param name name of the APIService
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadApiregistrationV1beta1APIServiceStatusResponse>
   */
  readApiregistrationV1beta1APIServiceStatus(name: string, options?: Models.OpenShiftAPIwithKubernetesReadApiregistrationV1beta1APIServiceStatusOptionalParams): Promise<Models.ReadApiregistrationV1beta1APIServiceStatusResponse>;
  /**
   * @param name name of the APIService
   * @param callback The callback
   */
  readApiregistrationV1beta1APIServiceStatus(name: string, callback: msRest.ServiceCallback<Models.Iok8skubeAggregatorpkgapisapiregistrationv1beta1APIService>): void;
  /**
   * @param name name of the APIService
   * @param options The optional parameters
   * @param callback The callback
   */
  readApiregistrationV1beta1APIServiceStatus(name: string, options: Models.OpenShiftAPIwithKubernetesReadApiregistrationV1beta1APIServiceStatusOptionalParams, callback: msRest.ServiceCallback<Models.Iok8skubeAggregatorpkgapisapiregistrationv1beta1APIService>): void;
  readApiregistrationV1beta1APIServiceStatus(name: string, options?: Models.OpenShiftAPIwithKubernetesReadApiregistrationV1beta1APIServiceStatusOptionalParams | msRest.ServiceCallback<Models.Iok8skubeAggregatorpkgapisapiregistrationv1beta1APIService>, callback?: msRest.ServiceCallback<Models.Iok8skubeAggregatorpkgapisapiregistrationv1beta1APIService>): Promise<Models.ReadApiregistrationV1beta1APIServiceStatusResponse> {
    return this.sendOperationRequest(
      {
        name,
        options
      },
      readApiregistrationV1beta1APIServiceStatusOperationSpec,
      callback) as Promise<Models.ReadApiregistrationV1beta1APIServiceStatusResponse>;
  }

  /**
   * replace status of the specified APIService
   * @param body
   * @param name name of the APIService
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceApiregistrationV1beta1APIServiceStatusResponse>
   */
  replaceApiregistrationV1beta1APIServiceStatus(body: Models.Iok8skubeAggregatorpkgapisapiregistrationv1beta1APIService, name: string, options?: Models.OpenShiftAPIwithKubernetesReplaceApiregistrationV1beta1APIServiceStatusOptionalParams): Promise<Models.ReplaceApiregistrationV1beta1APIServiceStatusResponse>;
  /**
   * @param body
   * @param name name of the APIService
   * @param callback The callback
   */
  replaceApiregistrationV1beta1APIServiceStatus(body: Models.Iok8skubeAggregatorpkgapisapiregistrationv1beta1APIService, name: string, callback: msRest.ServiceCallback<Models.Iok8skubeAggregatorpkgapisapiregistrationv1beta1APIService>): void;
  /**
   * @param body
   * @param name name of the APIService
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceApiregistrationV1beta1APIServiceStatus(body: Models.Iok8skubeAggregatorpkgapisapiregistrationv1beta1APIService, name: string, options: Models.OpenShiftAPIwithKubernetesReplaceApiregistrationV1beta1APIServiceStatusOptionalParams, callback: msRest.ServiceCallback<Models.Iok8skubeAggregatorpkgapisapiregistrationv1beta1APIService>): void;
  replaceApiregistrationV1beta1APIServiceStatus(body: Models.Iok8skubeAggregatorpkgapisapiregistrationv1beta1APIService, name: string, options?: Models.OpenShiftAPIwithKubernetesReplaceApiregistrationV1beta1APIServiceStatusOptionalParams | msRest.ServiceCallback<Models.Iok8skubeAggregatorpkgapisapiregistrationv1beta1APIService>, callback?: msRest.ServiceCallback<Models.Iok8skubeAggregatorpkgapisapiregistrationv1beta1APIService>): Promise<Models.ReplaceApiregistrationV1beta1APIServiceStatusResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      replaceApiregistrationV1beta1APIServiceStatusOperationSpec,
      callback) as Promise<Models.ReplaceApiregistrationV1beta1APIServiceStatusResponse>;
  }

  /**
   * partially update status of the specified APIService
   * @param body
   * @param name name of the APIService
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchApiregistrationV1beta1APIServiceStatusResponse>
   */
  patchApiregistrationV1beta1APIServiceStatus(body: any, name: string, options?: Models.OpenShiftAPIwithKubernetesPatchApiregistrationV1beta1APIServiceStatusOptionalParams): Promise<Models.PatchApiregistrationV1beta1APIServiceStatusResponse>;
  /**
   * @param body
   * @param name name of the APIService
   * @param callback The callback
   */
  patchApiregistrationV1beta1APIServiceStatus(body: any, name: string, callback: msRest.ServiceCallback<Models.Iok8skubeAggregatorpkgapisapiregistrationv1beta1APIService>): void;
  /**
   * @param body
   * @param name name of the APIService
   * @param options The optional parameters
   * @param callback The callback
   */
  patchApiregistrationV1beta1APIServiceStatus(body: any, name: string, options: Models.OpenShiftAPIwithKubernetesPatchApiregistrationV1beta1APIServiceStatusOptionalParams, callback: msRest.ServiceCallback<Models.Iok8skubeAggregatorpkgapisapiregistrationv1beta1APIService>): void;
  patchApiregistrationV1beta1APIServiceStatus(body: any, name: string, options?: Models.OpenShiftAPIwithKubernetesPatchApiregistrationV1beta1APIServiceStatusOptionalParams | msRest.ServiceCallback<Models.Iok8skubeAggregatorpkgapisapiregistrationv1beta1APIService>, callback?: msRest.ServiceCallback<Models.Iok8skubeAggregatorpkgapisapiregistrationv1beta1APIService>): Promise<Models.PatchApiregistrationV1beta1APIServiceStatusResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      patchApiregistrationV1beta1APIServiceStatusOperationSpec,
      callback) as Promise<Models.PatchApiregistrationV1beta1APIServiceStatusResponse>;
  }

  /**
   * watch individual changes to a list of APIService
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchApiregistrationV1beta1APIServiceListResponse>
   */
  watchApiregistrationV1beta1APIServiceList(options?: Models.OpenShiftAPIwithKubernetesWatchApiregistrationV1beta1APIServiceListOptionalParams): Promise<Models.WatchApiregistrationV1beta1APIServiceListResponse>;
  /**
   * @param callback The callback
   */
  watchApiregistrationV1beta1APIServiceList(callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  watchApiregistrationV1beta1APIServiceList(options: Models.OpenShiftAPIwithKubernetesWatchApiregistrationV1beta1APIServiceListOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchApiregistrationV1beta1APIServiceList(options?: Models.OpenShiftAPIwithKubernetesWatchApiregistrationV1beta1APIServiceListOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchApiregistrationV1beta1APIServiceListResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      watchApiregistrationV1beta1APIServiceListOperationSpec,
      callback) as Promise<Models.WatchApiregistrationV1beta1APIServiceListResponse>;
  }

  /**
   * watch changes to an object of kind APIService
   * @param name name of the APIService
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchApiregistrationV1beta1APIServiceResponse>
   */
  watchApiregistrationV1beta1APIService(name: string, options?: Models.OpenShiftAPIwithKubernetesWatchApiregistrationV1beta1APIServiceOptionalParams): Promise<Models.WatchApiregistrationV1beta1APIServiceResponse>;
  /**
   * @param name name of the APIService
   * @param callback The callback
   */
  watchApiregistrationV1beta1APIService(name: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param name name of the APIService
   * @param options The optional parameters
   * @param callback The callback
   */
  watchApiregistrationV1beta1APIService(name: string, options: Models.OpenShiftAPIwithKubernetesWatchApiregistrationV1beta1APIServiceOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchApiregistrationV1beta1APIService(name: string, options?: Models.OpenShiftAPIwithKubernetesWatchApiregistrationV1beta1APIServiceOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchApiregistrationV1beta1APIServiceResponse> {
    return this.sendOperationRequest(
      {
        name,
        options
      },
      watchApiregistrationV1beta1APIServiceOperationSpec,
      callback) as Promise<Models.WatchApiregistrationV1beta1APIServiceResponse>;
  }

  /**
   * get information of a group
   * @param [options] The optional parameters
   * @returns Promise<Models.GetAppsOpenshiftIoAPIGroupResponse>
   */
  getAppsOpenshiftIoAPIGroup(options?: msRest.RequestOptionsBase): Promise<Models.GetAppsOpenshiftIoAPIGroupResponse>;
  /**
   * @param callback The callback
   */
  getAppsOpenshiftIoAPIGroup(callback: msRest.ServiceCallback<Models.V1APIGroup>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getAppsOpenshiftIoAPIGroup(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.V1APIGroup>): void;
  getAppsOpenshiftIoAPIGroup(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.V1APIGroup>, callback?: msRest.ServiceCallback<Models.V1APIGroup>): Promise<Models.GetAppsOpenshiftIoAPIGroupResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getAppsOpenshiftIoAPIGroupOperationSpec,
      callback) as Promise<Models.GetAppsOpenshiftIoAPIGroupResponse>;
  }

  /**
   * get available resources
   * @param [options] The optional parameters
   * @returns Promise<Models.GetAppsOpenshiftIoV1APIResourcesResponse>
   */
  getAppsOpenshiftIoV1APIResources(options?: msRest.RequestOptionsBase): Promise<Models.GetAppsOpenshiftIoV1APIResourcesResponse>;
  /**
   * @param callback The callback
   */
  getAppsOpenshiftIoV1APIResources(callback: msRest.ServiceCallback<Models.V1APIResourceList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getAppsOpenshiftIoV1APIResources(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.V1APIResourceList>): void;
  getAppsOpenshiftIoV1APIResources(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.V1APIResourceList>, callback?: msRest.ServiceCallback<Models.V1APIResourceList>): Promise<Models.GetAppsOpenshiftIoV1APIResourcesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getAppsOpenshiftIoV1APIResourcesOperationSpec,
      callback) as Promise<Models.GetAppsOpenshiftIoV1APIResourcesResponse>;
  }

  /**
   * list or watch objects of kind DeploymentConfig
   * @param [options] The optional parameters
   * @returns Promise<Models.ListAppsOpenshiftIoV1DeploymentConfigForAllNamespacesResponse>
   */
  listAppsOpenshiftIoV1DeploymentConfigForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListAppsOpenshiftIoV1DeploymentConfigForAllNamespacesOptionalParams): Promise<Models.ListAppsOpenshiftIoV1DeploymentConfigForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  listAppsOpenshiftIoV1DeploymentConfigForAllNamespaces(callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiappsv1DeploymentConfigList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listAppsOpenshiftIoV1DeploymentConfigForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesListAppsOpenshiftIoV1DeploymentConfigForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiappsv1DeploymentConfigList>): void;
  listAppsOpenshiftIoV1DeploymentConfigForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListAppsOpenshiftIoV1DeploymentConfigForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiappsv1DeploymentConfigList>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiappsv1DeploymentConfigList>): Promise<Models.ListAppsOpenshiftIoV1DeploymentConfigForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listAppsOpenshiftIoV1DeploymentConfigForAllNamespacesOperationSpec,
      callback) as Promise<Models.ListAppsOpenshiftIoV1DeploymentConfigForAllNamespacesResponse>;
  }

  /**
   * list or watch objects of kind DeploymentConfig
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ListAppsOpenshiftIoV1NamespacedDeploymentConfigResponse>
   */
  listAppsOpenshiftIoV1NamespacedDeploymentConfig(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListAppsOpenshiftIoV1NamespacedDeploymentConfigOptionalParams): Promise<Models.ListAppsOpenshiftIoV1NamespacedDeploymentConfigResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  listAppsOpenshiftIoV1NamespacedDeploymentConfig(namespace: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiappsv1DeploymentConfigList>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  listAppsOpenshiftIoV1NamespacedDeploymentConfig(namespace: string, options: Models.OpenShiftAPIwithKubernetesListAppsOpenshiftIoV1NamespacedDeploymentConfigOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiappsv1DeploymentConfigList>): void;
  listAppsOpenshiftIoV1NamespacedDeploymentConfig(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListAppsOpenshiftIoV1NamespacedDeploymentConfigOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiappsv1DeploymentConfigList>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiappsv1DeploymentConfigList>): Promise<Models.ListAppsOpenshiftIoV1NamespacedDeploymentConfigResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      listAppsOpenshiftIoV1NamespacedDeploymentConfigOperationSpec,
      callback) as Promise<Models.ListAppsOpenshiftIoV1NamespacedDeploymentConfigResponse>;
  }

  /**
   * create a DeploymentConfig
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateAppsOpenshiftIoV1NamespacedDeploymentConfigResponse>
   */
  createAppsOpenshiftIoV1NamespacedDeploymentConfig(body: Models.Comgithubopenshiftapiappsv1DeploymentConfig, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateAppsOpenshiftIoV1NamespacedDeploymentConfigOptionalParams): Promise<Models.CreateAppsOpenshiftIoV1NamespacedDeploymentConfigResponse>;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  createAppsOpenshiftIoV1NamespacedDeploymentConfig(body: Models.Comgithubopenshiftapiappsv1DeploymentConfig, namespace: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiappsv1DeploymentConfig>): void;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  createAppsOpenshiftIoV1NamespacedDeploymentConfig(body: Models.Comgithubopenshiftapiappsv1DeploymentConfig, namespace: string, options: Models.OpenShiftAPIwithKubernetesCreateAppsOpenshiftIoV1NamespacedDeploymentConfigOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiappsv1DeploymentConfig>): void;
  createAppsOpenshiftIoV1NamespacedDeploymentConfig(body: Models.Comgithubopenshiftapiappsv1DeploymentConfig, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateAppsOpenshiftIoV1NamespacedDeploymentConfigOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiappsv1DeploymentConfig>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiappsv1DeploymentConfig>): Promise<Models.CreateAppsOpenshiftIoV1NamespacedDeploymentConfigResponse> {
    return this.sendOperationRequest(
      {
        body,
        namespace,
        options
      },
      createAppsOpenshiftIoV1NamespacedDeploymentConfigOperationSpec,
      callback) as Promise<Models.CreateAppsOpenshiftIoV1NamespacedDeploymentConfigResponse>;
  }

  /**
   * delete collection of DeploymentConfig
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteAppsOpenshiftIoV1CollectionNamespacedDeploymentConfigResponse>
   */
  deleteAppsOpenshiftIoV1CollectionNamespacedDeploymentConfig(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteAppsOpenshiftIoV1CollectionNamespacedDeploymentConfigOptionalParams): Promise<Models.DeleteAppsOpenshiftIoV1CollectionNamespacedDeploymentConfigResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteAppsOpenshiftIoV1CollectionNamespacedDeploymentConfig(namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteAppsOpenshiftIoV1CollectionNamespacedDeploymentConfig(namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteAppsOpenshiftIoV1CollectionNamespacedDeploymentConfigOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteAppsOpenshiftIoV1CollectionNamespacedDeploymentConfig(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteAppsOpenshiftIoV1CollectionNamespacedDeploymentConfigOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteAppsOpenshiftIoV1CollectionNamespacedDeploymentConfigResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      deleteAppsOpenshiftIoV1CollectionNamespacedDeploymentConfigOperationSpec,
      callback) as Promise<Models.DeleteAppsOpenshiftIoV1CollectionNamespacedDeploymentConfigResponse>;
  }

  /**
   * read the specified DeploymentConfig
   * @param name name of the DeploymentConfig
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadAppsOpenshiftIoV1NamespacedDeploymentConfigResponse>
   */
  readAppsOpenshiftIoV1NamespacedDeploymentConfig(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadAppsOpenshiftIoV1NamespacedDeploymentConfigOptionalParams): Promise<Models.ReadAppsOpenshiftIoV1NamespacedDeploymentConfigResponse>;
  /**
   * @param name name of the DeploymentConfig
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readAppsOpenshiftIoV1NamespacedDeploymentConfig(name: string, namespace: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiappsv1DeploymentConfig>): void;
  /**
   * @param name name of the DeploymentConfig
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readAppsOpenshiftIoV1NamespacedDeploymentConfig(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadAppsOpenshiftIoV1NamespacedDeploymentConfigOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiappsv1DeploymentConfig>): void;
  readAppsOpenshiftIoV1NamespacedDeploymentConfig(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadAppsOpenshiftIoV1NamespacedDeploymentConfigOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiappsv1DeploymentConfig>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiappsv1DeploymentConfig>): Promise<Models.ReadAppsOpenshiftIoV1NamespacedDeploymentConfigResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readAppsOpenshiftIoV1NamespacedDeploymentConfigOperationSpec,
      callback) as Promise<Models.ReadAppsOpenshiftIoV1NamespacedDeploymentConfigResponse>;
  }

  /**
   * replace the specified DeploymentConfig
   * @param body
   * @param name name of the DeploymentConfig
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceAppsOpenshiftIoV1NamespacedDeploymentConfigResponse>
   */
  replaceAppsOpenshiftIoV1NamespacedDeploymentConfig(body: Models.Comgithubopenshiftapiappsv1DeploymentConfig, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceAppsOpenshiftIoV1NamespacedDeploymentConfigOptionalParams): Promise<Models.ReplaceAppsOpenshiftIoV1NamespacedDeploymentConfigResponse>;
  /**
   * @param body
   * @param name name of the DeploymentConfig
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replaceAppsOpenshiftIoV1NamespacedDeploymentConfig(body: Models.Comgithubopenshiftapiappsv1DeploymentConfig, name: string, namespace: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiappsv1DeploymentConfig>): void;
  /**
   * @param body
   * @param name name of the DeploymentConfig
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceAppsOpenshiftIoV1NamespacedDeploymentConfig(body: Models.Comgithubopenshiftapiappsv1DeploymentConfig, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplaceAppsOpenshiftIoV1NamespacedDeploymentConfigOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiappsv1DeploymentConfig>): void;
  replaceAppsOpenshiftIoV1NamespacedDeploymentConfig(body: Models.Comgithubopenshiftapiappsv1DeploymentConfig, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceAppsOpenshiftIoV1NamespacedDeploymentConfigOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiappsv1DeploymentConfig>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiappsv1DeploymentConfig>): Promise<Models.ReplaceAppsOpenshiftIoV1NamespacedDeploymentConfigResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replaceAppsOpenshiftIoV1NamespacedDeploymentConfigOperationSpec,
      callback) as Promise<Models.ReplaceAppsOpenshiftIoV1NamespacedDeploymentConfigResponse>;
  }

  /**
   * delete a DeploymentConfig
   * @param body
   * @param name name of the DeploymentConfig
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteAppsOpenshiftIoV1NamespacedDeploymentConfigResponse>
   */
  deleteAppsOpenshiftIoV1NamespacedDeploymentConfig(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteAppsOpenshiftIoV1NamespacedDeploymentConfigOptionalParams): Promise<Models.DeleteAppsOpenshiftIoV1NamespacedDeploymentConfigResponse>;
  /**
   * @param body
   * @param name name of the DeploymentConfig
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteAppsOpenshiftIoV1NamespacedDeploymentConfig(body: Models.V1DeleteOptions, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param name name of the DeploymentConfig
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteAppsOpenshiftIoV1NamespacedDeploymentConfig(body: Models.V1DeleteOptions, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteAppsOpenshiftIoV1NamespacedDeploymentConfigOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteAppsOpenshiftIoV1NamespacedDeploymentConfig(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteAppsOpenshiftIoV1NamespacedDeploymentConfigOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteAppsOpenshiftIoV1NamespacedDeploymentConfigResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      deleteAppsOpenshiftIoV1NamespacedDeploymentConfigOperationSpec,
      callback) as Promise<Models.DeleteAppsOpenshiftIoV1NamespacedDeploymentConfigResponse>;
  }

  /**
   * partially update the specified DeploymentConfig
   * @param body
   * @param name name of the DeploymentConfig
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchAppsOpenshiftIoV1NamespacedDeploymentConfigResponse>
   */
  patchAppsOpenshiftIoV1NamespacedDeploymentConfig(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchAppsOpenshiftIoV1NamespacedDeploymentConfigOptionalParams): Promise<Models.PatchAppsOpenshiftIoV1NamespacedDeploymentConfigResponse>;
  /**
   * @param body
   * @param name name of the DeploymentConfig
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  patchAppsOpenshiftIoV1NamespacedDeploymentConfig(body: any, name: string, namespace: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiappsv1DeploymentConfig>): void;
  /**
   * @param body
   * @param name name of the DeploymentConfig
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  patchAppsOpenshiftIoV1NamespacedDeploymentConfig(body: any, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesPatchAppsOpenshiftIoV1NamespacedDeploymentConfigOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiappsv1DeploymentConfig>): void;
  patchAppsOpenshiftIoV1NamespacedDeploymentConfig(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchAppsOpenshiftIoV1NamespacedDeploymentConfigOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiappsv1DeploymentConfig>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiappsv1DeploymentConfig>): Promise<Models.PatchAppsOpenshiftIoV1NamespacedDeploymentConfigResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      patchAppsOpenshiftIoV1NamespacedDeploymentConfigOperationSpec,
      callback) as Promise<Models.PatchAppsOpenshiftIoV1NamespacedDeploymentConfigResponse>;
  }

  /**
   * create instantiate of a DeploymentConfig
   * @param body
   * @param name name of the DeploymentRequest
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateAppsOpenshiftIoV1NamespacedDeploymentConfigInstantiateResponse>
   */
  createAppsOpenshiftIoV1NamespacedDeploymentConfigInstantiate(body: Models.Comgithubopenshiftapiappsv1DeploymentRequest, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateAppsOpenshiftIoV1NamespacedDeploymentConfigInstantiateOptionalParams): Promise<Models.CreateAppsOpenshiftIoV1NamespacedDeploymentConfigInstantiateResponse>;
  /**
   * @param body
   * @param name name of the DeploymentRequest
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  createAppsOpenshiftIoV1NamespacedDeploymentConfigInstantiate(body: Models.Comgithubopenshiftapiappsv1DeploymentRequest, name: string, namespace: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiappsv1DeploymentRequest>): void;
  /**
   * @param body
   * @param name name of the DeploymentRequest
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  createAppsOpenshiftIoV1NamespacedDeploymentConfigInstantiate(body: Models.Comgithubopenshiftapiappsv1DeploymentRequest, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesCreateAppsOpenshiftIoV1NamespacedDeploymentConfigInstantiateOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiappsv1DeploymentRequest>): void;
  createAppsOpenshiftIoV1NamespacedDeploymentConfigInstantiate(body: Models.Comgithubopenshiftapiappsv1DeploymentRequest, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateAppsOpenshiftIoV1NamespacedDeploymentConfigInstantiateOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiappsv1DeploymentRequest>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiappsv1DeploymentRequest>): Promise<Models.CreateAppsOpenshiftIoV1NamespacedDeploymentConfigInstantiateResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      createAppsOpenshiftIoV1NamespacedDeploymentConfigInstantiateOperationSpec,
      callback) as Promise<Models.CreateAppsOpenshiftIoV1NamespacedDeploymentConfigInstantiateResponse>;
  }

  /**
   * read log of the specified DeploymentConfig
   * @param name name of the DeploymentLog
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadAppsOpenshiftIoV1NamespacedDeploymentConfigLogResponse>
   */
  readAppsOpenshiftIoV1NamespacedDeploymentConfigLog(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadAppsOpenshiftIoV1NamespacedDeploymentConfigLogOptionalParams): Promise<Models.ReadAppsOpenshiftIoV1NamespacedDeploymentConfigLogResponse>;
  /**
   * @param name name of the DeploymentLog
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readAppsOpenshiftIoV1NamespacedDeploymentConfigLog(name: string, namespace: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiappsv1DeploymentLog>): void;
  /**
   * @param name name of the DeploymentLog
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readAppsOpenshiftIoV1NamespacedDeploymentConfigLog(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadAppsOpenshiftIoV1NamespacedDeploymentConfigLogOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiappsv1DeploymentLog>): void;
  readAppsOpenshiftIoV1NamespacedDeploymentConfigLog(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadAppsOpenshiftIoV1NamespacedDeploymentConfigLogOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiappsv1DeploymentLog>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiappsv1DeploymentLog>): Promise<Models.ReadAppsOpenshiftIoV1NamespacedDeploymentConfigLogResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readAppsOpenshiftIoV1NamespacedDeploymentConfigLogOperationSpec,
      callback) as Promise<Models.ReadAppsOpenshiftIoV1NamespacedDeploymentConfigLogResponse>;
  }

  /**
   * create rollback of a DeploymentConfig
   * @param body
   * @param name name of the DeploymentConfigRollback
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateAppsOpenshiftIoV1NamespacedDeploymentConfigRollbackResponse>
   */
  createAppsOpenshiftIoV1NamespacedDeploymentConfigRollback(body: Models.Comgithubopenshiftapiappsv1DeploymentConfigRollback, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateAppsOpenshiftIoV1NamespacedDeploymentConfigRollbackOptionalParams): Promise<Models.CreateAppsOpenshiftIoV1NamespacedDeploymentConfigRollbackResponse>;
  /**
   * @param body
   * @param name name of the DeploymentConfigRollback
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  createAppsOpenshiftIoV1NamespacedDeploymentConfigRollback(body: Models.Comgithubopenshiftapiappsv1DeploymentConfigRollback, name: string, namespace: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiappsv1DeploymentConfigRollback>): void;
  /**
   * @param body
   * @param name name of the DeploymentConfigRollback
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  createAppsOpenshiftIoV1NamespacedDeploymentConfigRollback(body: Models.Comgithubopenshiftapiappsv1DeploymentConfigRollback, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesCreateAppsOpenshiftIoV1NamespacedDeploymentConfigRollbackOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiappsv1DeploymentConfigRollback>): void;
  createAppsOpenshiftIoV1NamespacedDeploymentConfigRollback(body: Models.Comgithubopenshiftapiappsv1DeploymentConfigRollback, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateAppsOpenshiftIoV1NamespacedDeploymentConfigRollbackOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiappsv1DeploymentConfigRollback>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiappsv1DeploymentConfigRollback>): Promise<Models.CreateAppsOpenshiftIoV1NamespacedDeploymentConfigRollbackResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      createAppsOpenshiftIoV1NamespacedDeploymentConfigRollbackOperationSpec,
      callback) as Promise<Models.CreateAppsOpenshiftIoV1NamespacedDeploymentConfigRollbackResponse>;
  }

  /**
   * read scale of the specified DeploymentConfig
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadAppsOpenshiftIoV1NamespacedDeploymentConfigScaleResponse>
   */
  readAppsOpenshiftIoV1NamespacedDeploymentConfigScale(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadAppsOpenshiftIoV1NamespacedDeploymentConfigScaleOptionalParams): Promise<Models.ReadAppsOpenshiftIoV1NamespacedDeploymentConfigScaleResponse>;
  /**
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readAppsOpenshiftIoV1NamespacedDeploymentConfigScale(name: string, namespace: string, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Scale>): void;
  /**
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readAppsOpenshiftIoV1NamespacedDeploymentConfigScale(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadAppsOpenshiftIoV1NamespacedDeploymentConfigScaleOptionalParams, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Scale>): void;
  readAppsOpenshiftIoV1NamespacedDeploymentConfigScale(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadAppsOpenshiftIoV1NamespacedDeploymentConfigScaleOptionalParams | msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Scale>, callback?: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Scale>): Promise<Models.ReadAppsOpenshiftIoV1NamespacedDeploymentConfigScaleResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readAppsOpenshiftIoV1NamespacedDeploymentConfigScaleOperationSpec,
      callback) as Promise<Models.ReadAppsOpenshiftIoV1NamespacedDeploymentConfigScaleResponse>;
  }

  /**
   * replace scale of the specified DeploymentConfig
   * @param body
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceAppsOpenshiftIoV1NamespacedDeploymentConfigScaleResponse>
   */
  replaceAppsOpenshiftIoV1NamespacedDeploymentConfigScale(body: Models.Iok8sapiextensionsv1beta1Scale, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceAppsOpenshiftIoV1NamespacedDeploymentConfigScaleOptionalParams): Promise<Models.ReplaceAppsOpenshiftIoV1NamespacedDeploymentConfigScaleResponse>;
  /**
   * @param body
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replaceAppsOpenshiftIoV1NamespacedDeploymentConfigScale(body: Models.Iok8sapiextensionsv1beta1Scale, name: string, namespace: string, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Scale>): void;
  /**
   * @param body
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceAppsOpenshiftIoV1NamespacedDeploymentConfigScale(body: Models.Iok8sapiextensionsv1beta1Scale, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplaceAppsOpenshiftIoV1NamespacedDeploymentConfigScaleOptionalParams, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Scale>): void;
  replaceAppsOpenshiftIoV1NamespacedDeploymentConfigScale(body: Models.Iok8sapiextensionsv1beta1Scale, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceAppsOpenshiftIoV1NamespacedDeploymentConfigScaleOptionalParams | msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Scale>, callback?: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Scale>): Promise<Models.ReplaceAppsOpenshiftIoV1NamespacedDeploymentConfigScaleResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replaceAppsOpenshiftIoV1NamespacedDeploymentConfigScaleOperationSpec,
      callback) as Promise<Models.ReplaceAppsOpenshiftIoV1NamespacedDeploymentConfigScaleResponse>;
  }

  /**
   * partially update scale of the specified DeploymentConfig
   * @param body
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchAppsOpenshiftIoV1NamespacedDeploymentConfigScaleResponse>
   */
  patchAppsOpenshiftIoV1NamespacedDeploymentConfigScale(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchAppsOpenshiftIoV1NamespacedDeploymentConfigScaleOptionalParams): Promise<Models.PatchAppsOpenshiftIoV1NamespacedDeploymentConfigScaleResponse>;
  /**
   * @param body
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  patchAppsOpenshiftIoV1NamespacedDeploymentConfigScale(body: any, name: string, namespace: string, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Scale>): void;
  /**
   * @param body
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  patchAppsOpenshiftIoV1NamespacedDeploymentConfigScale(body: any, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesPatchAppsOpenshiftIoV1NamespacedDeploymentConfigScaleOptionalParams, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Scale>): void;
  patchAppsOpenshiftIoV1NamespacedDeploymentConfigScale(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchAppsOpenshiftIoV1NamespacedDeploymentConfigScaleOptionalParams | msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Scale>, callback?: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Scale>): Promise<Models.PatchAppsOpenshiftIoV1NamespacedDeploymentConfigScaleResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      patchAppsOpenshiftIoV1NamespacedDeploymentConfigScaleOperationSpec,
      callback) as Promise<Models.PatchAppsOpenshiftIoV1NamespacedDeploymentConfigScaleResponse>;
  }

  /**
   * read status of the specified DeploymentConfig
   * @param name name of the DeploymentConfig
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadAppsOpenshiftIoV1NamespacedDeploymentConfigStatusResponse>
   */
  readAppsOpenshiftIoV1NamespacedDeploymentConfigStatus(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadAppsOpenshiftIoV1NamespacedDeploymentConfigStatusOptionalParams): Promise<Models.ReadAppsOpenshiftIoV1NamespacedDeploymentConfigStatusResponse>;
  /**
   * @param name name of the DeploymentConfig
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readAppsOpenshiftIoV1NamespacedDeploymentConfigStatus(name: string, namespace: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiappsv1DeploymentConfig>): void;
  /**
   * @param name name of the DeploymentConfig
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readAppsOpenshiftIoV1NamespacedDeploymentConfigStatus(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadAppsOpenshiftIoV1NamespacedDeploymentConfigStatusOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiappsv1DeploymentConfig>): void;
  readAppsOpenshiftIoV1NamespacedDeploymentConfigStatus(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadAppsOpenshiftIoV1NamespacedDeploymentConfigStatusOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiappsv1DeploymentConfig>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiappsv1DeploymentConfig>): Promise<Models.ReadAppsOpenshiftIoV1NamespacedDeploymentConfigStatusResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readAppsOpenshiftIoV1NamespacedDeploymentConfigStatusOperationSpec,
      callback) as Promise<Models.ReadAppsOpenshiftIoV1NamespacedDeploymentConfigStatusResponse>;
  }

  /**
   * replace status of the specified DeploymentConfig
   * @param body
   * @param name name of the DeploymentConfig
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceAppsOpenshiftIoV1NamespacedDeploymentConfigStatusResponse>
   */
  replaceAppsOpenshiftIoV1NamespacedDeploymentConfigStatus(body: Models.Comgithubopenshiftapiappsv1DeploymentConfig, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceAppsOpenshiftIoV1NamespacedDeploymentConfigStatusOptionalParams): Promise<Models.ReplaceAppsOpenshiftIoV1NamespacedDeploymentConfigStatusResponse>;
  /**
   * @param body
   * @param name name of the DeploymentConfig
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replaceAppsOpenshiftIoV1NamespacedDeploymentConfigStatus(body: Models.Comgithubopenshiftapiappsv1DeploymentConfig, name: string, namespace: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiappsv1DeploymentConfig>): void;
  /**
   * @param body
   * @param name name of the DeploymentConfig
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceAppsOpenshiftIoV1NamespacedDeploymentConfigStatus(body: Models.Comgithubopenshiftapiappsv1DeploymentConfig, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplaceAppsOpenshiftIoV1NamespacedDeploymentConfigStatusOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiappsv1DeploymentConfig>): void;
  replaceAppsOpenshiftIoV1NamespacedDeploymentConfigStatus(body: Models.Comgithubopenshiftapiappsv1DeploymentConfig, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceAppsOpenshiftIoV1NamespacedDeploymentConfigStatusOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiappsv1DeploymentConfig>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiappsv1DeploymentConfig>): Promise<Models.ReplaceAppsOpenshiftIoV1NamespacedDeploymentConfigStatusResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replaceAppsOpenshiftIoV1NamespacedDeploymentConfigStatusOperationSpec,
      callback) as Promise<Models.ReplaceAppsOpenshiftIoV1NamespacedDeploymentConfigStatusResponse>;
  }

  /**
   * partially update status of the specified DeploymentConfig
   * @param body
   * @param name name of the DeploymentConfig
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchAppsOpenshiftIoV1NamespacedDeploymentConfigStatusResponse>
   */
  patchAppsOpenshiftIoV1NamespacedDeploymentConfigStatus(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchAppsOpenshiftIoV1NamespacedDeploymentConfigStatusOptionalParams): Promise<Models.PatchAppsOpenshiftIoV1NamespacedDeploymentConfigStatusResponse>;
  /**
   * @param body
   * @param name name of the DeploymentConfig
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  patchAppsOpenshiftIoV1NamespacedDeploymentConfigStatus(body: any, name: string, namespace: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiappsv1DeploymentConfig>): void;
  /**
   * @param body
   * @param name name of the DeploymentConfig
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  patchAppsOpenshiftIoV1NamespacedDeploymentConfigStatus(body: any, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesPatchAppsOpenshiftIoV1NamespacedDeploymentConfigStatusOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiappsv1DeploymentConfig>): void;
  patchAppsOpenshiftIoV1NamespacedDeploymentConfigStatus(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchAppsOpenshiftIoV1NamespacedDeploymentConfigStatusOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiappsv1DeploymentConfig>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiappsv1DeploymentConfig>): Promise<Models.PatchAppsOpenshiftIoV1NamespacedDeploymentConfigStatusResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      patchAppsOpenshiftIoV1NamespacedDeploymentConfigStatusOperationSpec,
      callback) as Promise<Models.PatchAppsOpenshiftIoV1NamespacedDeploymentConfigStatusResponse>;
  }

  /**
   * watch individual changes to a list of DeploymentConfig
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchAppsOpenshiftIoV1DeploymentConfigListForAllNamespacesResponse>
   */
  watchAppsOpenshiftIoV1DeploymentConfigListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchAppsOpenshiftIoV1DeploymentConfigListForAllNamespacesOptionalParams): Promise<Models.WatchAppsOpenshiftIoV1DeploymentConfigListForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  watchAppsOpenshiftIoV1DeploymentConfigListForAllNamespaces(callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  watchAppsOpenshiftIoV1DeploymentConfigListForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesWatchAppsOpenshiftIoV1DeploymentConfigListForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchAppsOpenshiftIoV1DeploymentConfigListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchAppsOpenshiftIoV1DeploymentConfigListForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchAppsOpenshiftIoV1DeploymentConfigListForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      watchAppsOpenshiftIoV1DeploymentConfigListForAllNamespacesOperationSpec,
      callback) as Promise<Models.WatchAppsOpenshiftIoV1DeploymentConfigListForAllNamespacesResponse>;
  }

  /**
   * watch individual changes to a list of DeploymentConfig
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchAppsOpenshiftIoV1NamespacedDeploymentConfigListResponse>
   */
  watchAppsOpenshiftIoV1NamespacedDeploymentConfigList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchAppsOpenshiftIoV1NamespacedDeploymentConfigListOptionalParams): Promise<Models.WatchAppsOpenshiftIoV1NamespacedDeploymentConfigListResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchAppsOpenshiftIoV1NamespacedDeploymentConfigList(namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchAppsOpenshiftIoV1NamespacedDeploymentConfigList(namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchAppsOpenshiftIoV1NamespacedDeploymentConfigListOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchAppsOpenshiftIoV1NamespacedDeploymentConfigList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchAppsOpenshiftIoV1NamespacedDeploymentConfigListOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchAppsOpenshiftIoV1NamespacedDeploymentConfigListResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      watchAppsOpenshiftIoV1NamespacedDeploymentConfigListOperationSpec,
      callback) as Promise<Models.WatchAppsOpenshiftIoV1NamespacedDeploymentConfigListResponse>;
  }

  /**
   * watch changes to an object of kind DeploymentConfig
   * @param name name of the DeploymentConfig
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchAppsOpenshiftIoV1NamespacedDeploymentConfigResponse>
   */
  watchAppsOpenshiftIoV1NamespacedDeploymentConfig(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchAppsOpenshiftIoV1NamespacedDeploymentConfigOptionalParams): Promise<Models.WatchAppsOpenshiftIoV1NamespacedDeploymentConfigResponse>;
  /**
   * @param name name of the DeploymentConfig
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchAppsOpenshiftIoV1NamespacedDeploymentConfig(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param name name of the DeploymentConfig
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchAppsOpenshiftIoV1NamespacedDeploymentConfig(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchAppsOpenshiftIoV1NamespacedDeploymentConfigOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchAppsOpenshiftIoV1NamespacedDeploymentConfig(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchAppsOpenshiftIoV1NamespacedDeploymentConfigOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchAppsOpenshiftIoV1NamespacedDeploymentConfigResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      watchAppsOpenshiftIoV1NamespacedDeploymentConfigOperationSpec,
      callback) as Promise<Models.WatchAppsOpenshiftIoV1NamespacedDeploymentConfigResponse>;
  }

  /**
   * get information of a group
   * @param [options] The optional parameters
   * @returns Promise<Models.GetAppsAPIGroupResponse>
   */
  getAppsAPIGroup(options?: msRest.RequestOptionsBase): Promise<Models.GetAppsAPIGroupResponse>;
  /**
   * @param callback The callback
   */
  getAppsAPIGroup(callback: msRest.ServiceCallback<Models.V1APIGroup>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getAppsAPIGroup(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.V1APIGroup>): void;
  getAppsAPIGroup(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.V1APIGroup>, callback?: msRest.ServiceCallback<Models.V1APIGroup>): Promise<Models.GetAppsAPIGroupResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getAppsAPIGroupOperationSpec,
      callback) as Promise<Models.GetAppsAPIGroupResponse>;
  }

  /**
   * get available resources
   * @param [options] The optional parameters
   * @returns Promise<Models.GetAppsV1APIResourcesResponse>
   */
  getAppsV1APIResources(options?: msRest.RequestOptionsBase): Promise<Models.GetAppsV1APIResourcesResponse>;
  /**
   * @param callback The callback
   */
  getAppsV1APIResources(callback: msRest.ServiceCallback<Models.V1APIResourceList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getAppsV1APIResources(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.V1APIResourceList>): void;
  getAppsV1APIResources(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.V1APIResourceList>, callback?: msRest.ServiceCallback<Models.V1APIResourceList>): Promise<Models.GetAppsV1APIResourcesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getAppsV1APIResourcesOperationSpec,
      callback) as Promise<Models.GetAppsV1APIResourcesResponse>;
  }

  /**
   * list or watch objects of kind ControllerRevision
   * @param [options] The optional parameters
   * @returns Promise<Models.ListAppsV1ControllerRevisionForAllNamespacesResponse>
   */
  listAppsV1ControllerRevisionForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListAppsV1ControllerRevisionForAllNamespacesOptionalParams): Promise<Models.ListAppsV1ControllerRevisionForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  listAppsV1ControllerRevisionForAllNamespaces(callback: msRest.ServiceCallback<Models.V1ControllerRevisionList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listAppsV1ControllerRevisionForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesListAppsV1ControllerRevisionForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1ControllerRevisionList>): void;
  listAppsV1ControllerRevisionForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListAppsV1ControllerRevisionForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1ControllerRevisionList>, callback?: msRest.ServiceCallback<Models.V1ControllerRevisionList>): Promise<Models.ListAppsV1ControllerRevisionForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listAppsV1ControllerRevisionForAllNamespacesOperationSpec,
      callback) as Promise<Models.ListAppsV1ControllerRevisionForAllNamespacesResponse>;
  }

  /**
   * list or watch objects of kind DaemonSet
   * @param [options] The optional parameters
   * @returns Promise<Models.ListAppsV1DaemonSetForAllNamespacesResponse>
   */
  listAppsV1DaemonSetForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListAppsV1DaemonSetForAllNamespacesOptionalParams): Promise<Models.ListAppsV1DaemonSetForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  listAppsV1DaemonSetForAllNamespaces(callback: msRest.ServiceCallback<Models.V1DaemonSetList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listAppsV1DaemonSetForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesListAppsV1DaemonSetForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1DaemonSetList>): void;
  listAppsV1DaemonSetForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListAppsV1DaemonSetForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1DaemonSetList>, callback?: msRest.ServiceCallback<Models.V1DaemonSetList>): Promise<Models.ListAppsV1DaemonSetForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listAppsV1DaemonSetForAllNamespacesOperationSpec,
      callback) as Promise<Models.ListAppsV1DaemonSetForAllNamespacesResponse>;
  }

  /**
   * list or watch objects of kind Deployment
   * @param [options] The optional parameters
   * @returns Promise<Models.ListAppsV1DeploymentForAllNamespacesResponse>
   */
  listAppsV1DeploymentForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListAppsV1DeploymentForAllNamespacesOptionalParams): Promise<Models.ListAppsV1DeploymentForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  listAppsV1DeploymentForAllNamespaces(callback: msRest.ServiceCallback<Models.V1DeploymentList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listAppsV1DeploymentForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesListAppsV1DeploymentForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1DeploymentList>): void;
  listAppsV1DeploymentForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListAppsV1DeploymentForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1DeploymentList>, callback?: msRest.ServiceCallback<Models.V1DeploymentList>): Promise<Models.ListAppsV1DeploymentForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listAppsV1DeploymentForAllNamespacesOperationSpec,
      callback) as Promise<Models.ListAppsV1DeploymentForAllNamespacesResponse>;
  }

  /**
   * list or watch objects of kind ControllerRevision
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ListAppsV1NamespacedControllerRevisionResponse>
   */
  listAppsV1NamespacedControllerRevision(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListAppsV1NamespacedControllerRevisionOptionalParams): Promise<Models.ListAppsV1NamespacedControllerRevisionResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  listAppsV1NamespacedControllerRevision(namespace: string, callback: msRest.ServiceCallback<Models.V1ControllerRevisionList>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  listAppsV1NamespacedControllerRevision(namespace: string, options: Models.OpenShiftAPIwithKubernetesListAppsV1NamespacedControllerRevisionOptionalParams, callback: msRest.ServiceCallback<Models.V1ControllerRevisionList>): void;
  listAppsV1NamespacedControllerRevision(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListAppsV1NamespacedControllerRevisionOptionalParams | msRest.ServiceCallback<Models.V1ControllerRevisionList>, callback?: msRest.ServiceCallback<Models.V1ControllerRevisionList>): Promise<Models.ListAppsV1NamespacedControllerRevisionResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      listAppsV1NamespacedControllerRevisionOperationSpec,
      callback) as Promise<Models.ListAppsV1NamespacedControllerRevisionResponse>;
  }

  /**
   * create a ControllerRevision
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateAppsV1NamespacedControllerRevisionResponse>
   */
  createAppsV1NamespacedControllerRevision(body: Models.V1ControllerRevision, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateAppsV1NamespacedControllerRevisionOptionalParams): Promise<Models.CreateAppsV1NamespacedControllerRevisionResponse>;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  createAppsV1NamespacedControllerRevision(body: Models.V1ControllerRevision, namespace: string, callback: msRest.ServiceCallback<Models.V1ControllerRevision>): void;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  createAppsV1NamespacedControllerRevision(body: Models.V1ControllerRevision, namespace: string, options: Models.OpenShiftAPIwithKubernetesCreateAppsV1NamespacedControllerRevisionOptionalParams, callback: msRest.ServiceCallback<Models.V1ControllerRevision>): void;
  createAppsV1NamespacedControllerRevision(body: Models.V1ControllerRevision, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateAppsV1NamespacedControllerRevisionOptionalParams | msRest.ServiceCallback<Models.V1ControllerRevision>, callback?: msRest.ServiceCallback<Models.V1ControllerRevision>): Promise<Models.CreateAppsV1NamespacedControllerRevisionResponse> {
    return this.sendOperationRequest(
      {
        body,
        namespace,
        options
      },
      createAppsV1NamespacedControllerRevisionOperationSpec,
      callback) as Promise<Models.CreateAppsV1NamespacedControllerRevisionResponse>;
  }

  /**
   * delete collection of ControllerRevision
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteAppsV1CollectionNamespacedControllerRevisionResponse>
   */
  deleteAppsV1CollectionNamespacedControllerRevision(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteAppsV1CollectionNamespacedControllerRevisionOptionalParams): Promise<Models.DeleteAppsV1CollectionNamespacedControllerRevisionResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteAppsV1CollectionNamespacedControllerRevision(namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteAppsV1CollectionNamespacedControllerRevision(namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteAppsV1CollectionNamespacedControllerRevisionOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteAppsV1CollectionNamespacedControllerRevision(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteAppsV1CollectionNamespacedControllerRevisionOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteAppsV1CollectionNamespacedControllerRevisionResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      deleteAppsV1CollectionNamespacedControllerRevisionOperationSpec,
      callback) as Promise<Models.DeleteAppsV1CollectionNamespacedControllerRevisionResponse>;
  }

  /**
   * read the specified ControllerRevision
   * @param name name of the ControllerRevision
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadAppsV1NamespacedControllerRevisionResponse>
   */
  readAppsV1NamespacedControllerRevision(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadAppsV1NamespacedControllerRevisionOptionalParams): Promise<Models.ReadAppsV1NamespacedControllerRevisionResponse>;
  /**
   * @param name name of the ControllerRevision
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readAppsV1NamespacedControllerRevision(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1ControllerRevision>): void;
  /**
   * @param name name of the ControllerRevision
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readAppsV1NamespacedControllerRevision(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadAppsV1NamespacedControllerRevisionOptionalParams, callback: msRest.ServiceCallback<Models.V1ControllerRevision>): void;
  readAppsV1NamespacedControllerRevision(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadAppsV1NamespacedControllerRevisionOptionalParams | msRest.ServiceCallback<Models.V1ControllerRevision>, callback?: msRest.ServiceCallback<Models.V1ControllerRevision>): Promise<Models.ReadAppsV1NamespacedControllerRevisionResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readAppsV1NamespacedControllerRevisionOperationSpec,
      callback) as Promise<Models.ReadAppsV1NamespacedControllerRevisionResponse>;
  }

  /**
   * replace the specified ControllerRevision
   * @param body
   * @param name name of the ControllerRevision
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceAppsV1NamespacedControllerRevisionResponse>
   */
  replaceAppsV1NamespacedControllerRevision(body: Models.V1ControllerRevision, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceAppsV1NamespacedControllerRevisionOptionalParams): Promise<Models.ReplaceAppsV1NamespacedControllerRevisionResponse>;
  /**
   * @param body
   * @param name name of the ControllerRevision
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replaceAppsV1NamespacedControllerRevision(body: Models.V1ControllerRevision, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1ControllerRevision>): void;
  /**
   * @param body
   * @param name name of the ControllerRevision
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceAppsV1NamespacedControllerRevision(body: Models.V1ControllerRevision, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplaceAppsV1NamespacedControllerRevisionOptionalParams, callback: msRest.ServiceCallback<Models.V1ControllerRevision>): void;
  replaceAppsV1NamespacedControllerRevision(body: Models.V1ControllerRevision, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceAppsV1NamespacedControllerRevisionOptionalParams | msRest.ServiceCallback<Models.V1ControllerRevision>, callback?: msRest.ServiceCallback<Models.V1ControllerRevision>): Promise<Models.ReplaceAppsV1NamespacedControllerRevisionResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replaceAppsV1NamespacedControllerRevisionOperationSpec,
      callback) as Promise<Models.ReplaceAppsV1NamespacedControllerRevisionResponse>;
  }

  /**
   * delete a ControllerRevision
   * @param body
   * @param name name of the ControllerRevision
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteAppsV1NamespacedControllerRevisionResponse>
   */
  deleteAppsV1NamespacedControllerRevision(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteAppsV1NamespacedControllerRevisionOptionalParams): Promise<Models.DeleteAppsV1NamespacedControllerRevisionResponse>;
  /**
   * @param body
   * @param name name of the ControllerRevision
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteAppsV1NamespacedControllerRevision(body: Models.V1DeleteOptions, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param name name of the ControllerRevision
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteAppsV1NamespacedControllerRevision(body: Models.V1DeleteOptions, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteAppsV1NamespacedControllerRevisionOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteAppsV1NamespacedControllerRevision(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteAppsV1NamespacedControllerRevisionOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteAppsV1NamespacedControllerRevisionResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      deleteAppsV1NamespacedControllerRevisionOperationSpec,
      callback) as Promise<Models.DeleteAppsV1NamespacedControllerRevisionResponse>;
  }

  /**
   * partially update the specified ControllerRevision
   * @param body
   * @param name name of the ControllerRevision
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchAppsV1NamespacedControllerRevisionResponse>
   */
  patchAppsV1NamespacedControllerRevision(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchAppsV1NamespacedControllerRevisionOptionalParams): Promise<Models.PatchAppsV1NamespacedControllerRevisionResponse>;
  /**
   * @param body
   * @param name name of the ControllerRevision
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  patchAppsV1NamespacedControllerRevision(body: any, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1ControllerRevision>): void;
  /**
   * @param body
   * @param name name of the ControllerRevision
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  patchAppsV1NamespacedControllerRevision(body: any, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesPatchAppsV1NamespacedControllerRevisionOptionalParams, callback: msRest.ServiceCallback<Models.V1ControllerRevision>): void;
  patchAppsV1NamespacedControllerRevision(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchAppsV1NamespacedControllerRevisionOptionalParams | msRest.ServiceCallback<Models.V1ControllerRevision>, callback?: msRest.ServiceCallback<Models.V1ControllerRevision>): Promise<Models.PatchAppsV1NamespacedControllerRevisionResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      patchAppsV1NamespacedControllerRevisionOperationSpec,
      callback) as Promise<Models.PatchAppsV1NamespacedControllerRevisionResponse>;
  }

  /**
   * list or watch objects of kind DaemonSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ListAppsV1NamespacedDaemonSetResponse>
   */
  listAppsV1NamespacedDaemonSet(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListAppsV1NamespacedDaemonSetOptionalParams): Promise<Models.ListAppsV1NamespacedDaemonSetResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  listAppsV1NamespacedDaemonSet(namespace: string, callback: msRest.ServiceCallback<Models.V1DaemonSetList>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  listAppsV1NamespacedDaemonSet(namespace: string, options: Models.OpenShiftAPIwithKubernetesListAppsV1NamespacedDaemonSetOptionalParams, callback: msRest.ServiceCallback<Models.V1DaemonSetList>): void;
  listAppsV1NamespacedDaemonSet(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListAppsV1NamespacedDaemonSetOptionalParams | msRest.ServiceCallback<Models.V1DaemonSetList>, callback?: msRest.ServiceCallback<Models.V1DaemonSetList>): Promise<Models.ListAppsV1NamespacedDaemonSetResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      listAppsV1NamespacedDaemonSetOperationSpec,
      callback) as Promise<Models.ListAppsV1NamespacedDaemonSetResponse>;
  }

  /**
   * create a DaemonSet
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateAppsV1NamespacedDaemonSetResponse>
   */
  createAppsV1NamespacedDaemonSet(body: Models.V1DaemonSet, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateAppsV1NamespacedDaemonSetOptionalParams): Promise<Models.CreateAppsV1NamespacedDaemonSetResponse>;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  createAppsV1NamespacedDaemonSet(body: Models.V1DaemonSet, namespace: string, callback: msRest.ServiceCallback<Models.V1DaemonSet>): void;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  createAppsV1NamespacedDaemonSet(body: Models.V1DaemonSet, namespace: string, options: Models.OpenShiftAPIwithKubernetesCreateAppsV1NamespacedDaemonSetOptionalParams, callback: msRest.ServiceCallback<Models.V1DaemonSet>): void;
  createAppsV1NamespacedDaemonSet(body: Models.V1DaemonSet, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateAppsV1NamespacedDaemonSetOptionalParams | msRest.ServiceCallback<Models.V1DaemonSet>, callback?: msRest.ServiceCallback<Models.V1DaemonSet>): Promise<Models.CreateAppsV1NamespacedDaemonSetResponse> {
    return this.sendOperationRequest(
      {
        body,
        namespace,
        options
      },
      createAppsV1NamespacedDaemonSetOperationSpec,
      callback) as Promise<Models.CreateAppsV1NamespacedDaemonSetResponse>;
  }

  /**
   * delete collection of DaemonSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteAppsV1CollectionNamespacedDaemonSetResponse>
   */
  deleteAppsV1CollectionNamespacedDaemonSet(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteAppsV1CollectionNamespacedDaemonSetOptionalParams): Promise<Models.DeleteAppsV1CollectionNamespacedDaemonSetResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteAppsV1CollectionNamespacedDaemonSet(namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteAppsV1CollectionNamespacedDaemonSet(namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteAppsV1CollectionNamespacedDaemonSetOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteAppsV1CollectionNamespacedDaemonSet(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteAppsV1CollectionNamespacedDaemonSetOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteAppsV1CollectionNamespacedDaemonSetResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      deleteAppsV1CollectionNamespacedDaemonSetOperationSpec,
      callback) as Promise<Models.DeleteAppsV1CollectionNamespacedDaemonSetResponse>;
  }

  /**
   * read the specified DaemonSet
   * @param name name of the DaemonSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadAppsV1NamespacedDaemonSetResponse>
   */
  readAppsV1NamespacedDaemonSet(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadAppsV1NamespacedDaemonSetOptionalParams): Promise<Models.ReadAppsV1NamespacedDaemonSetResponse>;
  /**
   * @param name name of the DaemonSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readAppsV1NamespacedDaemonSet(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1DaemonSet>): void;
  /**
   * @param name name of the DaemonSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readAppsV1NamespacedDaemonSet(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadAppsV1NamespacedDaemonSetOptionalParams, callback: msRest.ServiceCallback<Models.V1DaemonSet>): void;
  readAppsV1NamespacedDaemonSet(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadAppsV1NamespacedDaemonSetOptionalParams | msRest.ServiceCallback<Models.V1DaemonSet>, callback?: msRest.ServiceCallback<Models.V1DaemonSet>): Promise<Models.ReadAppsV1NamespacedDaemonSetResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readAppsV1NamespacedDaemonSetOperationSpec,
      callback) as Promise<Models.ReadAppsV1NamespacedDaemonSetResponse>;
  }

  /**
   * replace the specified DaemonSet
   * @param body
   * @param name name of the DaemonSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceAppsV1NamespacedDaemonSetResponse>
   */
  replaceAppsV1NamespacedDaemonSet(body: Models.V1DaemonSet, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceAppsV1NamespacedDaemonSetOptionalParams): Promise<Models.ReplaceAppsV1NamespacedDaemonSetResponse>;
  /**
   * @param body
   * @param name name of the DaemonSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replaceAppsV1NamespacedDaemonSet(body: Models.V1DaemonSet, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1DaemonSet>): void;
  /**
   * @param body
   * @param name name of the DaemonSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceAppsV1NamespacedDaemonSet(body: Models.V1DaemonSet, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplaceAppsV1NamespacedDaemonSetOptionalParams, callback: msRest.ServiceCallback<Models.V1DaemonSet>): void;
  replaceAppsV1NamespacedDaemonSet(body: Models.V1DaemonSet, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceAppsV1NamespacedDaemonSetOptionalParams | msRest.ServiceCallback<Models.V1DaemonSet>, callback?: msRest.ServiceCallback<Models.V1DaemonSet>): Promise<Models.ReplaceAppsV1NamespacedDaemonSetResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replaceAppsV1NamespacedDaemonSetOperationSpec,
      callback) as Promise<Models.ReplaceAppsV1NamespacedDaemonSetResponse>;
  }

  /**
   * delete a DaemonSet
   * @param body
   * @param name name of the DaemonSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteAppsV1NamespacedDaemonSetResponse>
   */
  deleteAppsV1NamespacedDaemonSet(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteAppsV1NamespacedDaemonSetOptionalParams): Promise<Models.DeleteAppsV1NamespacedDaemonSetResponse>;
  /**
   * @param body
   * @param name name of the DaemonSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteAppsV1NamespacedDaemonSet(body: Models.V1DeleteOptions, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param name name of the DaemonSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteAppsV1NamespacedDaemonSet(body: Models.V1DeleteOptions, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteAppsV1NamespacedDaemonSetOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteAppsV1NamespacedDaemonSet(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteAppsV1NamespacedDaemonSetOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteAppsV1NamespacedDaemonSetResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      deleteAppsV1NamespacedDaemonSetOperationSpec,
      callback) as Promise<Models.DeleteAppsV1NamespacedDaemonSetResponse>;
  }

  /**
   * partially update the specified DaemonSet
   * @param body
   * @param name name of the DaemonSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchAppsV1NamespacedDaemonSetResponse>
   */
  patchAppsV1NamespacedDaemonSet(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchAppsV1NamespacedDaemonSetOptionalParams): Promise<Models.PatchAppsV1NamespacedDaemonSetResponse>;
  /**
   * @param body
   * @param name name of the DaemonSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  patchAppsV1NamespacedDaemonSet(body: any, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1DaemonSet>): void;
  /**
   * @param body
   * @param name name of the DaemonSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  patchAppsV1NamespacedDaemonSet(body: any, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesPatchAppsV1NamespacedDaemonSetOptionalParams, callback: msRest.ServiceCallback<Models.V1DaemonSet>): void;
  patchAppsV1NamespacedDaemonSet(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchAppsV1NamespacedDaemonSetOptionalParams | msRest.ServiceCallback<Models.V1DaemonSet>, callback?: msRest.ServiceCallback<Models.V1DaemonSet>): Promise<Models.PatchAppsV1NamespacedDaemonSetResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      patchAppsV1NamespacedDaemonSetOperationSpec,
      callback) as Promise<Models.PatchAppsV1NamespacedDaemonSetResponse>;
  }

  /**
   * read status of the specified DaemonSet
   * @param name name of the DaemonSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadAppsV1NamespacedDaemonSetStatusResponse>
   */
  readAppsV1NamespacedDaemonSetStatus(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadAppsV1NamespacedDaemonSetStatusOptionalParams): Promise<Models.ReadAppsV1NamespacedDaemonSetStatusResponse>;
  /**
   * @param name name of the DaemonSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readAppsV1NamespacedDaemonSetStatus(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1DaemonSet>): void;
  /**
   * @param name name of the DaemonSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readAppsV1NamespacedDaemonSetStatus(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadAppsV1NamespacedDaemonSetStatusOptionalParams, callback: msRest.ServiceCallback<Models.V1DaemonSet>): void;
  readAppsV1NamespacedDaemonSetStatus(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadAppsV1NamespacedDaemonSetStatusOptionalParams | msRest.ServiceCallback<Models.V1DaemonSet>, callback?: msRest.ServiceCallback<Models.V1DaemonSet>): Promise<Models.ReadAppsV1NamespacedDaemonSetStatusResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readAppsV1NamespacedDaemonSetStatusOperationSpec,
      callback) as Promise<Models.ReadAppsV1NamespacedDaemonSetStatusResponse>;
  }

  /**
   * replace status of the specified DaemonSet
   * @param body
   * @param name name of the DaemonSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceAppsV1NamespacedDaemonSetStatusResponse>
   */
  replaceAppsV1NamespacedDaemonSetStatus(body: Models.V1DaemonSet, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceAppsV1NamespacedDaemonSetStatusOptionalParams): Promise<Models.ReplaceAppsV1NamespacedDaemonSetStatusResponse>;
  /**
   * @param body
   * @param name name of the DaemonSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replaceAppsV1NamespacedDaemonSetStatus(body: Models.V1DaemonSet, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1DaemonSet>): void;
  /**
   * @param body
   * @param name name of the DaemonSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceAppsV1NamespacedDaemonSetStatus(body: Models.V1DaemonSet, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplaceAppsV1NamespacedDaemonSetStatusOptionalParams, callback: msRest.ServiceCallback<Models.V1DaemonSet>): void;
  replaceAppsV1NamespacedDaemonSetStatus(body: Models.V1DaemonSet, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceAppsV1NamespacedDaemonSetStatusOptionalParams | msRest.ServiceCallback<Models.V1DaemonSet>, callback?: msRest.ServiceCallback<Models.V1DaemonSet>): Promise<Models.ReplaceAppsV1NamespacedDaemonSetStatusResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replaceAppsV1NamespacedDaemonSetStatusOperationSpec,
      callback) as Promise<Models.ReplaceAppsV1NamespacedDaemonSetStatusResponse>;
  }

  /**
   * partially update status of the specified DaemonSet
   * @param body
   * @param name name of the DaemonSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchAppsV1NamespacedDaemonSetStatusResponse>
   */
  patchAppsV1NamespacedDaemonSetStatus(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchAppsV1NamespacedDaemonSetStatusOptionalParams): Promise<Models.PatchAppsV1NamespacedDaemonSetStatusResponse>;
  /**
   * @param body
   * @param name name of the DaemonSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  patchAppsV1NamespacedDaemonSetStatus(body: any, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1DaemonSet>): void;
  /**
   * @param body
   * @param name name of the DaemonSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  patchAppsV1NamespacedDaemonSetStatus(body: any, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesPatchAppsV1NamespacedDaemonSetStatusOptionalParams, callback: msRest.ServiceCallback<Models.V1DaemonSet>): void;
  patchAppsV1NamespacedDaemonSetStatus(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchAppsV1NamespacedDaemonSetStatusOptionalParams | msRest.ServiceCallback<Models.V1DaemonSet>, callback?: msRest.ServiceCallback<Models.V1DaemonSet>): Promise<Models.PatchAppsV1NamespacedDaemonSetStatusResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      patchAppsV1NamespacedDaemonSetStatusOperationSpec,
      callback) as Promise<Models.PatchAppsV1NamespacedDaemonSetStatusResponse>;
  }

  /**
   * list or watch objects of kind Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ListAppsV1NamespacedDeploymentResponse>
   */
  listAppsV1NamespacedDeployment(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListAppsV1NamespacedDeploymentOptionalParams): Promise<Models.ListAppsV1NamespacedDeploymentResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  listAppsV1NamespacedDeployment(namespace: string, callback: msRest.ServiceCallback<Models.V1DeploymentList>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  listAppsV1NamespacedDeployment(namespace: string, options: Models.OpenShiftAPIwithKubernetesListAppsV1NamespacedDeploymentOptionalParams, callback: msRest.ServiceCallback<Models.V1DeploymentList>): void;
  listAppsV1NamespacedDeployment(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListAppsV1NamespacedDeploymentOptionalParams | msRest.ServiceCallback<Models.V1DeploymentList>, callback?: msRest.ServiceCallback<Models.V1DeploymentList>): Promise<Models.ListAppsV1NamespacedDeploymentResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      listAppsV1NamespacedDeploymentOperationSpec,
      callback) as Promise<Models.ListAppsV1NamespacedDeploymentResponse>;
  }

  /**
   * create a Deployment
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateAppsV1NamespacedDeploymentResponse>
   */
  createAppsV1NamespacedDeployment(body: Models.V1Deployment, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateAppsV1NamespacedDeploymentOptionalParams): Promise<Models.CreateAppsV1NamespacedDeploymentResponse>;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  createAppsV1NamespacedDeployment(body: Models.V1Deployment, namespace: string, callback: msRest.ServiceCallback<Models.V1Deployment>): void;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  createAppsV1NamespacedDeployment(body: Models.V1Deployment, namespace: string, options: Models.OpenShiftAPIwithKubernetesCreateAppsV1NamespacedDeploymentOptionalParams, callback: msRest.ServiceCallback<Models.V1Deployment>): void;
  createAppsV1NamespacedDeployment(body: Models.V1Deployment, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateAppsV1NamespacedDeploymentOptionalParams | msRest.ServiceCallback<Models.V1Deployment>, callback?: msRest.ServiceCallback<Models.V1Deployment>): Promise<Models.CreateAppsV1NamespacedDeploymentResponse> {
    return this.sendOperationRequest(
      {
        body,
        namespace,
        options
      },
      createAppsV1NamespacedDeploymentOperationSpec,
      callback) as Promise<Models.CreateAppsV1NamespacedDeploymentResponse>;
  }

  /**
   * delete collection of Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteAppsV1CollectionNamespacedDeploymentResponse>
   */
  deleteAppsV1CollectionNamespacedDeployment(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteAppsV1CollectionNamespacedDeploymentOptionalParams): Promise<Models.DeleteAppsV1CollectionNamespacedDeploymentResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteAppsV1CollectionNamespacedDeployment(namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteAppsV1CollectionNamespacedDeployment(namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteAppsV1CollectionNamespacedDeploymentOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteAppsV1CollectionNamespacedDeployment(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteAppsV1CollectionNamespacedDeploymentOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteAppsV1CollectionNamespacedDeploymentResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      deleteAppsV1CollectionNamespacedDeploymentOperationSpec,
      callback) as Promise<Models.DeleteAppsV1CollectionNamespacedDeploymentResponse>;
  }

  /**
   * read the specified Deployment
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadAppsV1NamespacedDeploymentResponse>
   */
  readAppsV1NamespacedDeployment(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadAppsV1NamespacedDeploymentOptionalParams): Promise<Models.ReadAppsV1NamespacedDeploymentResponse>;
  /**
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readAppsV1NamespacedDeployment(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Deployment>): void;
  /**
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readAppsV1NamespacedDeployment(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadAppsV1NamespacedDeploymentOptionalParams, callback: msRest.ServiceCallback<Models.V1Deployment>): void;
  readAppsV1NamespacedDeployment(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadAppsV1NamespacedDeploymentOptionalParams | msRest.ServiceCallback<Models.V1Deployment>, callback?: msRest.ServiceCallback<Models.V1Deployment>): Promise<Models.ReadAppsV1NamespacedDeploymentResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readAppsV1NamespacedDeploymentOperationSpec,
      callback) as Promise<Models.ReadAppsV1NamespacedDeploymentResponse>;
  }

  /**
   * replace the specified Deployment
   * @param body
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceAppsV1NamespacedDeploymentResponse>
   */
  replaceAppsV1NamespacedDeployment(body: Models.V1Deployment, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceAppsV1NamespacedDeploymentOptionalParams): Promise<Models.ReplaceAppsV1NamespacedDeploymentResponse>;
  /**
   * @param body
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replaceAppsV1NamespacedDeployment(body: Models.V1Deployment, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Deployment>): void;
  /**
   * @param body
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceAppsV1NamespacedDeployment(body: Models.V1Deployment, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplaceAppsV1NamespacedDeploymentOptionalParams, callback: msRest.ServiceCallback<Models.V1Deployment>): void;
  replaceAppsV1NamespacedDeployment(body: Models.V1Deployment, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceAppsV1NamespacedDeploymentOptionalParams | msRest.ServiceCallback<Models.V1Deployment>, callback?: msRest.ServiceCallback<Models.V1Deployment>): Promise<Models.ReplaceAppsV1NamespacedDeploymentResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replaceAppsV1NamespacedDeploymentOperationSpec,
      callback) as Promise<Models.ReplaceAppsV1NamespacedDeploymentResponse>;
  }

  /**
   * delete a Deployment
   * @param body
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteAppsV1NamespacedDeploymentResponse>
   */
  deleteAppsV1NamespacedDeployment(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteAppsV1NamespacedDeploymentOptionalParams): Promise<Models.DeleteAppsV1NamespacedDeploymentResponse>;
  /**
   * @param body
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteAppsV1NamespacedDeployment(body: Models.V1DeleteOptions, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteAppsV1NamespacedDeployment(body: Models.V1DeleteOptions, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteAppsV1NamespacedDeploymentOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteAppsV1NamespacedDeployment(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteAppsV1NamespacedDeploymentOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteAppsV1NamespacedDeploymentResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      deleteAppsV1NamespacedDeploymentOperationSpec,
      callback) as Promise<Models.DeleteAppsV1NamespacedDeploymentResponse>;
  }

  /**
   * partially update the specified Deployment
   * @param body
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchAppsV1NamespacedDeploymentResponse>
   */
  patchAppsV1NamespacedDeployment(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchAppsV1NamespacedDeploymentOptionalParams): Promise<Models.PatchAppsV1NamespacedDeploymentResponse>;
  /**
   * @param body
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  patchAppsV1NamespacedDeployment(body: any, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Deployment>): void;
  /**
   * @param body
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  patchAppsV1NamespacedDeployment(body: any, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesPatchAppsV1NamespacedDeploymentOptionalParams, callback: msRest.ServiceCallback<Models.V1Deployment>): void;
  patchAppsV1NamespacedDeployment(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchAppsV1NamespacedDeploymentOptionalParams | msRest.ServiceCallback<Models.V1Deployment>, callback?: msRest.ServiceCallback<Models.V1Deployment>): Promise<Models.PatchAppsV1NamespacedDeploymentResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      patchAppsV1NamespacedDeploymentOperationSpec,
      callback) as Promise<Models.PatchAppsV1NamespacedDeploymentResponse>;
  }

  /**
   * read scale of the specified Deployment
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadAppsV1NamespacedDeploymentScaleResponse>
   */
  readAppsV1NamespacedDeploymentScale(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadAppsV1NamespacedDeploymentScaleOptionalParams): Promise<Models.ReadAppsV1NamespacedDeploymentScaleResponse>;
  /**
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readAppsV1NamespacedDeploymentScale(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Scale>): void;
  /**
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readAppsV1NamespacedDeploymentScale(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadAppsV1NamespacedDeploymentScaleOptionalParams, callback: msRest.ServiceCallback<Models.V1Scale>): void;
  readAppsV1NamespacedDeploymentScale(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadAppsV1NamespacedDeploymentScaleOptionalParams | msRest.ServiceCallback<Models.V1Scale>, callback?: msRest.ServiceCallback<Models.V1Scale>): Promise<Models.ReadAppsV1NamespacedDeploymentScaleResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readAppsV1NamespacedDeploymentScaleOperationSpec,
      callback) as Promise<Models.ReadAppsV1NamespacedDeploymentScaleResponse>;
  }

  /**
   * replace scale of the specified Deployment
   * @param body
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceAppsV1NamespacedDeploymentScaleResponse>
   */
  replaceAppsV1NamespacedDeploymentScale(body: Models.V1Scale, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceAppsV1NamespacedDeploymentScaleOptionalParams): Promise<Models.ReplaceAppsV1NamespacedDeploymentScaleResponse>;
  /**
   * @param body
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replaceAppsV1NamespacedDeploymentScale(body: Models.V1Scale, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Scale>): void;
  /**
   * @param body
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceAppsV1NamespacedDeploymentScale(body: Models.V1Scale, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplaceAppsV1NamespacedDeploymentScaleOptionalParams, callback: msRest.ServiceCallback<Models.V1Scale>): void;
  replaceAppsV1NamespacedDeploymentScale(body: Models.V1Scale, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceAppsV1NamespacedDeploymentScaleOptionalParams | msRest.ServiceCallback<Models.V1Scale>, callback?: msRest.ServiceCallback<Models.V1Scale>): Promise<Models.ReplaceAppsV1NamespacedDeploymentScaleResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replaceAppsV1NamespacedDeploymentScaleOperationSpec,
      callback) as Promise<Models.ReplaceAppsV1NamespacedDeploymentScaleResponse>;
  }

  /**
   * partially update scale of the specified Deployment
   * @param body
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchAppsV1NamespacedDeploymentScaleResponse>
   */
  patchAppsV1NamespacedDeploymentScale(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchAppsV1NamespacedDeploymentScaleOptionalParams): Promise<Models.PatchAppsV1NamespacedDeploymentScaleResponse>;
  /**
   * @param body
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  patchAppsV1NamespacedDeploymentScale(body: any, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Scale>): void;
  /**
   * @param body
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  patchAppsV1NamespacedDeploymentScale(body: any, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesPatchAppsV1NamespacedDeploymentScaleOptionalParams, callback: msRest.ServiceCallback<Models.V1Scale>): void;
  patchAppsV1NamespacedDeploymentScale(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchAppsV1NamespacedDeploymentScaleOptionalParams | msRest.ServiceCallback<Models.V1Scale>, callback?: msRest.ServiceCallback<Models.V1Scale>): Promise<Models.PatchAppsV1NamespacedDeploymentScaleResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      patchAppsV1NamespacedDeploymentScaleOperationSpec,
      callback) as Promise<Models.PatchAppsV1NamespacedDeploymentScaleResponse>;
  }

  /**
   * read status of the specified Deployment
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadAppsV1NamespacedDeploymentStatusResponse>
   */
  readAppsV1NamespacedDeploymentStatus(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadAppsV1NamespacedDeploymentStatusOptionalParams): Promise<Models.ReadAppsV1NamespacedDeploymentStatusResponse>;
  /**
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readAppsV1NamespacedDeploymentStatus(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Deployment>): void;
  /**
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readAppsV1NamespacedDeploymentStatus(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadAppsV1NamespacedDeploymentStatusOptionalParams, callback: msRest.ServiceCallback<Models.V1Deployment>): void;
  readAppsV1NamespacedDeploymentStatus(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadAppsV1NamespacedDeploymentStatusOptionalParams | msRest.ServiceCallback<Models.V1Deployment>, callback?: msRest.ServiceCallback<Models.V1Deployment>): Promise<Models.ReadAppsV1NamespacedDeploymentStatusResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readAppsV1NamespacedDeploymentStatusOperationSpec,
      callback) as Promise<Models.ReadAppsV1NamespacedDeploymentStatusResponse>;
  }

  /**
   * replace status of the specified Deployment
   * @param body
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceAppsV1NamespacedDeploymentStatusResponse>
   */
  replaceAppsV1NamespacedDeploymentStatus(body: Models.V1Deployment, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceAppsV1NamespacedDeploymentStatusOptionalParams): Promise<Models.ReplaceAppsV1NamespacedDeploymentStatusResponse>;
  /**
   * @param body
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replaceAppsV1NamespacedDeploymentStatus(body: Models.V1Deployment, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Deployment>): void;
  /**
   * @param body
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceAppsV1NamespacedDeploymentStatus(body: Models.V1Deployment, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplaceAppsV1NamespacedDeploymentStatusOptionalParams, callback: msRest.ServiceCallback<Models.V1Deployment>): void;
  replaceAppsV1NamespacedDeploymentStatus(body: Models.V1Deployment, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceAppsV1NamespacedDeploymentStatusOptionalParams | msRest.ServiceCallback<Models.V1Deployment>, callback?: msRest.ServiceCallback<Models.V1Deployment>): Promise<Models.ReplaceAppsV1NamespacedDeploymentStatusResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replaceAppsV1NamespacedDeploymentStatusOperationSpec,
      callback) as Promise<Models.ReplaceAppsV1NamespacedDeploymentStatusResponse>;
  }

  /**
   * partially update status of the specified Deployment
   * @param body
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchAppsV1NamespacedDeploymentStatusResponse>
   */
  patchAppsV1NamespacedDeploymentStatus(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchAppsV1NamespacedDeploymentStatusOptionalParams): Promise<Models.PatchAppsV1NamespacedDeploymentStatusResponse>;
  /**
   * @param body
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  patchAppsV1NamespacedDeploymentStatus(body: any, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Deployment>): void;
  /**
   * @param body
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  patchAppsV1NamespacedDeploymentStatus(body: any, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesPatchAppsV1NamespacedDeploymentStatusOptionalParams, callback: msRest.ServiceCallback<Models.V1Deployment>): void;
  patchAppsV1NamespacedDeploymentStatus(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchAppsV1NamespacedDeploymentStatusOptionalParams | msRest.ServiceCallback<Models.V1Deployment>, callback?: msRest.ServiceCallback<Models.V1Deployment>): Promise<Models.PatchAppsV1NamespacedDeploymentStatusResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      patchAppsV1NamespacedDeploymentStatusOperationSpec,
      callback) as Promise<Models.PatchAppsV1NamespacedDeploymentStatusResponse>;
  }

  /**
   * list or watch objects of kind ReplicaSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ListAppsV1NamespacedReplicaSetResponse>
   */
  listAppsV1NamespacedReplicaSet(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListAppsV1NamespacedReplicaSetOptionalParams): Promise<Models.ListAppsV1NamespacedReplicaSetResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  listAppsV1NamespacedReplicaSet(namespace: string, callback: msRest.ServiceCallback<Models.V1ReplicaSetList>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  listAppsV1NamespacedReplicaSet(namespace: string, options: Models.OpenShiftAPIwithKubernetesListAppsV1NamespacedReplicaSetOptionalParams, callback: msRest.ServiceCallback<Models.V1ReplicaSetList>): void;
  listAppsV1NamespacedReplicaSet(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListAppsV1NamespacedReplicaSetOptionalParams | msRest.ServiceCallback<Models.V1ReplicaSetList>, callback?: msRest.ServiceCallback<Models.V1ReplicaSetList>): Promise<Models.ListAppsV1NamespacedReplicaSetResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      listAppsV1NamespacedReplicaSetOperationSpec,
      callback) as Promise<Models.ListAppsV1NamespacedReplicaSetResponse>;
  }

  /**
   * create a ReplicaSet
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateAppsV1NamespacedReplicaSetResponse>
   */
  createAppsV1NamespacedReplicaSet(body: Models.V1ReplicaSet, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateAppsV1NamespacedReplicaSetOptionalParams): Promise<Models.CreateAppsV1NamespacedReplicaSetResponse>;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  createAppsV1NamespacedReplicaSet(body: Models.V1ReplicaSet, namespace: string, callback: msRest.ServiceCallback<Models.V1ReplicaSet>): void;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  createAppsV1NamespacedReplicaSet(body: Models.V1ReplicaSet, namespace: string, options: Models.OpenShiftAPIwithKubernetesCreateAppsV1NamespacedReplicaSetOptionalParams, callback: msRest.ServiceCallback<Models.V1ReplicaSet>): void;
  createAppsV1NamespacedReplicaSet(body: Models.V1ReplicaSet, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateAppsV1NamespacedReplicaSetOptionalParams | msRest.ServiceCallback<Models.V1ReplicaSet>, callback?: msRest.ServiceCallback<Models.V1ReplicaSet>): Promise<Models.CreateAppsV1NamespacedReplicaSetResponse> {
    return this.sendOperationRequest(
      {
        body,
        namespace,
        options
      },
      createAppsV1NamespacedReplicaSetOperationSpec,
      callback) as Promise<Models.CreateAppsV1NamespacedReplicaSetResponse>;
  }

  /**
   * delete collection of ReplicaSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteAppsV1CollectionNamespacedReplicaSetResponse>
   */
  deleteAppsV1CollectionNamespacedReplicaSet(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteAppsV1CollectionNamespacedReplicaSetOptionalParams): Promise<Models.DeleteAppsV1CollectionNamespacedReplicaSetResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteAppsV1CollectionNamespacedReplicaSet(namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteAppsV1CollectionNamespacedReplicaSet(namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteAppsV1CollectionNamespacedReplicaSetOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteAppsV1CollectionNamespacedReplicaSet(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteAppsV1CollectionNamespacedReplicaSetOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteAppsV1CollectionNamespacedReplicaSetResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      deleteAppsV1CollectionNamespacedReplicaSetOperationSpec,
      callback) as Promise<Models.DeleteAppsV1CollectionNamespacedReplicaSetResponse>;
  }

  /**
   * read the specified ReplicaSet
   * @param name name of the ReplicaSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadAppsV1NamespacedReplicaSetResponse>
   */
  readAppsV1NamespacedReplicaSet(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadAppsV1NamespacedReplicaSetOptionalParams): Promise<Models.ReadAppsV1NamespacedReplicaSetResponse>;
  /**
   * @param name name of the ReplicaSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readAppsV1NamespacedReplicaSet(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1ReplicaSet>): void;
  /**
   * @param name name of the ReplicaSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readAppsV1NamespacedReplicaSet(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadAppsV1NamespacedReplicaSetOptionalParams, callback: msRest.ServiceCallback<Models.V1ReplicaSet>): void;
  readAppsV1NamespacedReplicaSet(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadAppsV1NamespacedReplicaSetOptionalParams | msRest.ServiceCallback<Models.V1ReplicaSet>, callback?: msRest.ServiceCallback<Models.V1ReplicaSet>): Promise<Models.ReadAppsV1NamespacedReplicaSetResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readAppsV1NamespacedReplicaSetOperationSpec,
      callback) as Promise<Models.ReadAppsV1NamespacedReplicaSetResponse>;
  }

  /**
   * replace the specified ReplicaSet
   * @param body
   * @param name name of the ReplicaSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceAppsV1NamespacedReplicaSetResponse>
   */
  replaceAppsV1NamespacedReplicaSet(body: Models.V1ReplicaSet, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceAppsV1NamespacedReplicaSetOptionalParams): Promise<Models.ReplaceAppsV1NamespacedReplicaSetResponse>;
  /**
   * @param body
   * @param name name of the ReplicaSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replaceAppsV1NamespacedReplicaSet(body: Models.V1ReplicaSet, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1ReplicaSet>): void;
  /**
   * @param body
   * @param name name of the ReplicaSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceAppsV1NamespacedReplicaSet(body: Models.V1ReplicaSet, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplaceAppsV1NamespacedReplicaSetOptionalParams, callback: msRest.ServiceCallback<Models.V1ReplicaSet>): void;
  replaceAppsV1NamespacedReplicaSet(body: Models.V1ReplicaSet, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceAppsV1NamespacedReplicaSetOptionalParams | msRest.ServiceCallback<Models.V1ReplicaSet>, callback?: msRest.ServiceCallback<Models.V1ReplicaSet>): Promise<Models.ReplaceAppsV1NamespacedReplicaSetResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replaceAppsV1NamespacedReplicaSetOperationSpec,
      callback) as Promise<Models.ReplaceAppsV1NamespacedReplicaSetResponse>;
  }

  /**
   * delete a ReplicaSet
   * @param body
   * @param name name of the ReplicaSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteAppsV1NamespacedReplicaSetResponse>
   */
  deleteAppsV1NamespacedReplicaSet(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteAppsV1NamespacedReplicaSetOptionalParams): Promise<Models.DeleteAppsV1NamespacedReplicaSetResponse>;
  /**
   * @param body
   * @param name name of the ReplicaSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteAppsV1NamespacedReplicaSet(body: Models.V1DeleteOptions, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param name name of the ReplicaSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteAppsV1NamespacedReplicaSet(body: Models.V1DeleteOptions, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteAppsV1NamespacedReplicaSetOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteAppsV1NamespacedReplicaSet(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteAppsV1NamespacedReplicaSetOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteAppsV1NamespacedReplicaSetResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      deleteAppsV1NamespacedReplicaSetOperationSpec,
      callback) as Promise<Models.DeleteAppsV1NamespacedReplicaSetResponse>;
  }

  /**
   * partially update the specified ReplicaSet
   * @param body
   * @param name name of the ReplicaSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchAppsV1NamespacedReplicaSetResponse>
   */
  patchAppsV1NamespacedReplicaSet(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchAppsV1NamespacedReplicaSetOptionalParams): Promise<Models.PatchAppsV1NamespacedReplicaSetResponse>;
  /**
   * @param body
   * @param name name of the ReplicaSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  patchAppsV1NamespacedReplicaSet(body: any, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1ReplicaSet>): void;
  /**
   * @param body
   * @param name name of the ReplicaSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  patchAppsV1NamespacedReplicaSet(body: any, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesPatchAppsV1NamespacedReplicaSetOptionalParams, callback: msRest.ServiceCallback<Models.V1ReplicaSet>): void;
  patchAppsV1NamespacedReplicaSet(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchAppsV1NamespacedReplicaSetOptionalParams | msRest.ServiceCallback<Models.V1ReplicaSet>, callback?: msRest.ServiceCallback<Models.V1ReplicaSet>): Promise<Models.PatchAppsV1NamespacedReplicaSetResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      patchAppsV1NamespacedReplicaSetOperationSpec,
      callback) as Promise<Models.PatchAppsV1NamespacedReplicaSetResponse>;
  }

  /**
   * read scale of the specified ReplicaSet
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadAppsV1NamespacedReplicaSetScaleResponse>
   */
  readAppsV1NamespacedReplicaSetScale(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadAppsV1NamespacedReplicaSetScaleOptionalParams): Promise<Models.ReadAppsV1NamespacedReplicaSetScaleResponse>;
  /**
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readAppsV1NamespacedReplicaSetScale(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Scale>): void;
  /**
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readAppsV1NamespacedReplicaSetScale(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadAppsV1NamespacedReplicaSetScaleOptionalParams, callback: msRest.ServiceCallback<Models.V1Scale>): void;
  readAppsV1NamespacedReplicaSetScale(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadAppsV1NamespacedReplicaSetScaleOptionalParams | msRest.ServiceCallback<Models.V1Scale>, callback?: msRest.ServiceCallback<Models.V1Scale>): Promise<Models.ReadAppsV1NamespacedReplicaSetScaleResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readAppsV1NamespacedReplicaSetScaleOperationSpec,
      callback) as Promise<Models.ReadAppsV1NamespacedReplicaSetScaleResponse>;
  }

  /**
   * replace scale of the specified ReplicaSet
   * @param body
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceAppsV1NamespacedReplicaSetScaleResponse>
   */
  replaceAppsV1NamespacedReplicaSetScale(body: Models.V1Scale, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceAppsV1NamespacedReplicaSetScaleOptionalParams): Promise<Models.ReplaceAppsV1NamespacedReplicaSetScaleResponse>;
  /**
   * @param body
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replaceAppsV1NamespacedReplicaSetScale(body: Models.V1Scale, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Scale>): void;
  /**
   * @param body
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceAppsV1NamespacedReplicaSetScale(body: Models.V1Scale, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplaceAppsV1NamespacedReplicaSetScaleOptionalParams, callback: msRest.ServiceCallback<Models.V1Scale>): void;
  replaceAppsV1NamespacedReplicaSetScale(body: Models.V1Scale, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceAppsV1NamespacedReplicaSetScaleOptionalParams | msRest.ServiceCallback<Models.V1Scale>, callback?: msRest.ServiceCallback<Models.V1Scale>): Promise<Models.ReplaceAppsV1NamespacedReplicaSetScaleResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replaceAppsV1NamespacedReplicaSetScaleOperationSpec,
      callback) as Promise<Models.ReplaceAppsV1NamespacedReplicaSetScaleResponse>;
  }

  /**
   * partially update scale of the specified ReplicaSet
   * @param body
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchAppsV1NamespacedReplicaSetScaleResponse>
   */
  patchAppsV1NamespacedReplicaSetScale(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchAppsV1NamespacedReplicaSetScaleOptionalParams): Promise<Models.PatchAppsV1NamespacedReplicaSetScaleResponse>;
  /**
   * @param body
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  patchAppsV1NamespacedReplicaSetScale(body: any, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Scale>): void;
  /**
   * @param body
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  patchAppsV1NamespacedReplicaSetScale(body: any, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesPatchAppsV1NamespacedReplicaSetScaleOptionalParams, callback: msRest.ServiceCallback<Models.V1Scale>): void;
  patchAppsV1NamespacedReplicaSetScale(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchAppsV1NamespacedReplicaSetScaleOptionalParams | msRest.ServiceCallback<Models.V1Scale>, callback?: msRest.ServiceCallback<Models.V1Scale>): Promise<Models.PatchAppsV1NamespacedReplicaSetScaleResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      patchAppsV1NamespacedReplicaSetScaleOperationSpec,
      callback) as Promise<Models.PatchAppsV1NamespacedReplicaSetScaleResponse>;
  }

  /**
   * read status of the specified ReplicaSet
   * @param name name of the ReplicaSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadAppsV1NamespacedReplicaSetStatusResponse>
   */
  readAppsV1NamespacedReplicaSetStatus(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadAppsV1NamespacedReplicaSetStatusOptionalParams): Promise<Models.ReadAppsV1NamespacedReplicaSetStatusResponse>;
  /**
   * @param name name of the ReplicaSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readAppsV1NamespacedReplicaSetStatus(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1ReplicaSet>): void;
  /**
   * @param name name of the ReplicaSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readAppsV1NamespacedReplicaSetStatus(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadAppsV1NamespacedReplicaSetStatusOptionalParams, callback: msRest.ServiceCallback<Models.V1ReplicaSet>): void;
  readAppsV1NamespacedReplicaSetStatus(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadAppsV1NamespacedReplicaSetStatusOptionalParams | msRest.ServiceCallback<Models.V1ReplicaSet>, callback?: msRest.ServiceCallback<Models.V1ReplicaSet>): Promise<Models.ReadAppsV1NamespacedReplicaSetStatusResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readAppsV1NamespacedReplicaSetStatusOperationSpec,
      callback) as Promise<Models.ReadAppsV1NamespacedReplicaSetStatusResponse>;
  }

  /**
   * replace status of the specified ReplicaSet
   * @param body
   * @param name name of the ReplicaSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceAppsV1NamespacedReplicaSetStatusResponse>
   */
  replaceAppsV1NamespacedReplicaSetStatus(body: Models.V1ReplicaSet, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceAppsV1NamespacedReplicaSetStatusOptionalParams): Promise<Models.ReplaceAppsV1NamespacedReplicaSetStatusResponse>;
  /**
   * @param body
   * @param name name of the ReplicaSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replaceAppsV1NamespacedReplicaSetStatus(body: Models.V1ReplicaSet, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1ReplicaSet>): void;
  /**
   * @param body
   * @param name name of the ReplicaSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceAppsV1NamespacedReplicaSetStatus(body: Models.V1ReplicaSet, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplaceAppsV1NamespacedReplicaSetStatusOptionalParams, callback: msRest.ServiceCallback<Models.V1ReplicaSet>): void;
  replaceAppsV1NamespacedReplicaSetStatus(body: Models.V1ReplicaSet, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceAppsV1NamespacedReplicaSetStatusOptionalParams | msRest.ServiceCallback<Models.V1ReplicaSet>, callback?: msRest.ServiceCallback<Models.V1ReplicaSet>): Promise<Models.ReplaceAppsV1NamespacedReplicaSetStatusResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replaceAppsV1NamespacedReplicaSetStatusOperationSpec,
      callback) as Promise<Models.ReplaceAppsV1NamespacedReplicaSetStatusResponse>;
  }

  /**
   * partially update status of the specified ReplicaSet
   * @param body
   * @param name name of the ReplicaSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchAppsV1NamespacedReplicaSetStatusResponse>
   */
  patchAppsV1NamespacedReplicaSetStatus(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchAppsV1NamespacedReplicaSetStatusOptionalParams): Promise<Models.PatchAppsV1NamespacedReplicaSetStatusResponse>;
  /**
   * @param body
   * @param name name of the ReplicaSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  patchAppsV1NamespacedReplicaSetStatus(body: any, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1ReplicaSet>): void;
  /**
   * @param body
   * @param name name of the ReplicaSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  patchAppsV1NamespacedReplicaSetStatus(body: any, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesPatchAppsV1NamespacedReplicaSetStatusOptionalParams, callback: msRest.ServiceCallback<Models.V1ReplicaSet>): void;
  patchAppsV1NamespacedReplicaSetStatus(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchAppsV1NamespacedReplicaSetStatusOptionalParams | msRest.ServiceCallback<Models.V1ReplicaSet>, callback?: msRest.ServiceCallback<Models.V1ReplicaSet>): Promise<Models.PatchAppsV1NamespacedReplicaSetStatusResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      patchAppsV1NamespacedReplicaSetStatusOperationSpec,
      callback) as Promise<Models.PatchAppsV1NamespacedReplicaSetStatusResponse>;
  }

  /**
   * list or watch objects of kind StatefulSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ListAppsV1NamespacedStatefulSetResponse>
   */
  listAppsV1NamespacedStatefulSet(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListAppsV1NamespacedStatefulSetOptionalParams): Promise<Models.ListAppsV1NamespacedStatefulSetResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  listAppsV1NamespacedStatefulSet(namespace: string, callback: msRest.ServiceCallback<Models.V1StatefulSetList>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  listAppsV1NamespacedStatefulSet(namespace: string, options: Models.OpenShiftAPIwithKubernetesListAppsV1NamespacedStatefulSetOptionalParams, callback: msRest.ServiceCallback<Models.V1StatefulSetList>): void;
  listAppsV1NamespacedStatefulSet(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListAppsV1NamespacedStatefulSetOptionalParams | msRest.ServiceCallback<Models.V1StatefulSetList>, callback?: msRest.ServiceCallback<Models.V1StatefulSetList>): Promise<Models.ListAppsV1NamespacedStatefulSetResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      listAppsV1NamespacedStatefulSetOperationSpec,
      callback) as Promise<Models.ListAppsV1NamespacedStatefulSetResponse>;
  }

  /**
   * create a StatefulSet
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateAppsV1NamespacedStatefulSetResponse>
   */
  createAppsV1NamespacedStatefulSet(body: Models.V1StatefulSet, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateAppsV1NamespacedStatefulSetOptionalParams): Promise<Models.CreateAppsV1NamespacedStatefulSetResponse>;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  createAppsV1NamespacedStatefulSet(body: Models.V1StatefulSet, namespace: string, callback: msRest.ServiceCallback<Models.V1StatefulSet>): void;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  createAppsV1NamespacedStatefulSet(body: Models.V1StatefulSet, namespace: string, options: Models.OpenShiftAPIwithKubernetesCreateAppsV1NamespacedStatefulSetOptionalParams, callback: msRest.ServiceCallback<Models.V1StatefulSet>): void;
  createAppsV1NamespacedStatefulSet(body: Models.V1StatefulSet, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateAppsV1NamespacedStatefulSetOptionalParams | msRest.ServiceCallback<Models.V1StatefulSet>, callback?: msRest.ServiceCallback<Models.V1StatefulSet>): Promise<Models.CreateAppsV1NamespacedStatefulSetResponse> {
    return this.sendOperationRequest(
      {
        body,
        namespace,
        options
      },
      createAppsV1NamespacedStatefulSetOperationSpec,
      callback) as Promise<Models.CreateAppsV1NamespacedStatefulSetResponse>;
  }

  /**
   * delete collection of StatefulSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteAppsV1CollectionNamespacedStatefulSetResponse>
   */
  deleteAppsV1CollectionNamespacedStatefulSet(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteAppsV1CollectionNamespacedStatefulSetOptionalParams): Promise<Models.DeleteAppsV1CollectionNamespacedStatefulSetResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteAppsV1CollectionNamespacedStatefulSet(namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteAppsV1CollectionNamespacedStatefulSet(namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteAppsV1CollectionNamespacedStatefulSetOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteAppsV1CollectionNamespacedStatefulSet(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteAppsV1CollectionNamespacedStatefulSetOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteAppsV1CollectionNamespacedStatefulSetResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      deleteAppsV1CollectionNamespacedStatefulSetOperationSpec,
      callback) as Promise<Models.DeleteAppsV1CollectionNamespacedStatefulSetResponse>;
  }

  /**
   * read the specified StatefulSet
   * @param name name of the StatefulSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadAppsV1NamespacedStatefulSetResponse>
   */
  readAppsV1NamespacedStatefulSet(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadAppsV1NamespacedStatefulSetOptionalParams): Promise<Models.ReadAppsV1NamespacedStatefulSetResponse>;
  /**
   * @param name name of the StatefulSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readAppsV1NamespacedStatefulSet(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1StatefulSet>): void;
  /**
   * @param name name of the StatefulSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readAppsV1NamespacedStatefulSet(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadAppsV1NamespacedStatefulSetOptionalParams, callback: msRest.ServiceCallback<Models.V1StatefulSet>): void;
  readAppsV1NamespacedStatefulSet(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadAppsV1NamespacedStatefulSetOptionalParams | msRest.ServiceCallback<Models.V1StatefulSet>, callback?: msRest.ServiceCallback<Models.V1StatefulSet>): Promise<Models.ReadAppsV1NamespacedStatefulSetResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readAppsV1NamespacedStatefulSetOperationSpec,
      callback) as Promise<Models.ReadAppsV1NamespacedStatefulSetResponse>;
  }

  /**
   * replace the specified StatefulSet
   * @param body
   * @param name name of the StatefulSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceAppsV1NamespacedStatefulSetResponse>
   */
  replaceAppsV1NamespacedStatefulSet(body: Models.V1StatefulSet, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceAppsV1NamespacedStatefulSetOptionalParams): Promise<Models.ReplaceAppsV1NamespacedStatefulSetResponse>;
  /**
   * @param body
   * @param name name of the StatefulSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replaceAppsV1NamespacedStatefulSet(body: Models.V1StatefulSet, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1StatefulSet>): void;
  /**
   * @param body
   * @param name name of the StatefulSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceAppsV1NamespacedStatefulSet(body: Models.V1StatefulSet, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplaceAppsV1NamespacedStatefulSetOptionalParams, callback: msRest.ServiceCallback<Models.V1StatefulSet>): void;
  replaceAppsV1NamespacedStatefulSet(body: Models.V1StatefulSet, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceAppsV1NamespacedStatefulSetOptionalParams | msRest.ServiceCallback<Models.V1StatefulSet>, callback?: msRest.ServiceCallback<Models.V1StatefulSet>): Promise<Models.ReplaceAppsV1NamespacedStatefulSetResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replaceAppsV1NamespacedStatefulSetOperationSpec,
      callback) as Promise<Models.ReplaceAppsV1NamespacedStatefulSetResponse>;
  }

  /**
   * delete a StatefulSet
   * @param body
   * @param name name of the StatefulSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteAppsV1NamespacedStatefulSetResponse>
   */
  deleteAppsV1NamespacedStatefulSet(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteAppsV1NamespacedStatefulSetOptionalParams): Promise<Models.DeleteAppsV1NamespacedStatefulSetResponse>;
  /**
   * @param body
   * @param name name of the StatefulSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteAppsV1NamespacedStatefulSet(body: Models.V1DeleteOptions, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param name name of the StatefulSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteAppsV1NamespacedStatefulSet(body: Models.V1DeleteOptions, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteAppsV1NamespacedStatefulSetOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteAppsV1NamespacedStatefulSet(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteAppsV1NamespacedStatefulSetOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteAppsV1NamespacedStatefulSetResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      deleteAppsV1NamespacedStatefulSetOperationSpec,
      callback) as Promise<Models.DeleteAppsV1NamespacedStatefulSetResponse>;
  }

  /**
   * partially update the specified StatefulSet
   * @param body
   * @param name name of the StatefulSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchAppsV1NamespacedStatefulSetResponse>
   */
  patchAppsV1NamespacedStatefulSet(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchAppsV1NamespacedStatefulSetOptionalParams): Promise<Models.PatchAppsV1NamespacedStatefulSetResponse>;
  /**
   * @param body
   * @param name name of the StatefulSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  patchAppsV1NamespacedStatefulSet(body: any, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1StatefulSet>): void;
  /**
   * @param body
   * @param name name of the StatefulSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  patchAppsV1NamespacedStatefulSet(body: any, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesPatchAppsV1NamespacedStatefulSetOptionalParams, callback: msRest.ServiceCallback<Models.V1StatefulSet>): void;
  patchAppsV1NamespacedStatefulSet(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchAppsV1NamespacedStatefulSetOptionalParams | msRest.ServiceCallback<Models.V1StatefulSet>, callback?: msRest.ServiceCallback<Models.V1StatefulSet>): Promise<Models.PatchAppsV1NamespacedStatefulSetResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      patchAppsV1NamespacedStatefulSetOperationSpec,
      callback) as Promise<Models.PatchAppsV1NamespacedStatefulSetResponse>;
  }

  /**
   * read scale of the specified StatefulSet
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadAppsV1NamespacedStatefulSetScaleResponse>
   */
  readAppsV1NamespacedStatefulSetScale(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadAppsV1NamespacedStatefulSetScaleOptionalParams): Promise<Models.ReadAppsV1NamespacedStatefulSetScaleResponse>;
  /**
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readAppsV1NamespacedStatefulSetScale(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Scale>): void;
  /**
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readAppsV1NamespacedStatefulSetScale(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadAppsV1NamespacedStatefulSetScaleOptionalParams, callback: msRest.ServiceCallback<Models.V1Scale>): void;
  readAppsV1NamespacedStatefulSetScale(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadAppsV1NamespacedStatefulSetScaleOptionalParams | msRest.ServiceCallback<Models.V1Scale>, callback?: msRest.ServiceCallback<Models.V1Scale>): Promise<Models.ReadAppsV1NamespacedStatefulSetScaleResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readAppsV1NamespacedStatefulSetScaleOperationSpec,
      callback) as Promise<Models.ReadAppsV1NamespacedStatefulSetScaleResponse>;
  }

  /**
   * replace scale of the specified StatefulSet
   * @param body
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceAppsV1NamespacedStatefulSetScaleResponse>
   */
  replaceAppsV1NamespacedStatefulSetScale(body: Models.V1Scale, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceAppsV1NamespacedStatefulSetScaleOptionalParams): Promise<Models.ReplaceAppsV1NamespacedStatefulSetScaleResponse>;
  /**
   * @param body
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replaceAppsV1NamespacedStatefulSetScale(body: Models.V1Scale, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Scale>): void;
  /**
   * @param body
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceAppsV1NamespacedStatefulSetScale(body: Models.V1Scale, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplaceAppsV1NamespacedStatefulSetScaleOptionalParams, callback: msRest.ServiceCallback<Models.V1Scale>): void;
  replaceAppsV1NamespacedStatefulSetScale(body: Models.V1Scale, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceAppsV1NamespacedStatefulSetScaleOptionalParams | msRest.ServiceCallback<Models.V1Scale>, callback?: msRest.ServiceCallback<Models.V1Scale>): Promise<Models.ReplaceAppsV1NamespacedStatefulSetScaleResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replaceAppsV1NamespacedStatefulSetScaleOperationSpec,
      callback) as Promise<Models.ReplaceAppsV1NamespacedStatefulSetScaleResponse>;
  }

  /**
   * partially update scale of the specified StatefulSet
   * @param body
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchAppsV1NamespacedStatefulSetScaleResponse>
   */
  patchAppsV1NamespacedStatefulSetScale(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchAppsV1NamespacedStatefulSetScaleOptionalParams): Promise<Models.PatchAppsV1NamespacedStatefulSetScaleResponse>;
  /**
   * @param body
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  patchAppsV1NamespacedStatefulSetScale(body: any, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Scale>): void;
  /**
   * @param body
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  patchAppsV1NamespacedStatefulSetScale(body: any, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesPatchAppsV1NamespacedStatefulSetScaleOptionalParams, callback: msRest.ServiceCallback<Models.V1Scale>): void;
  patchAppsV1NamespacedStatefulSetScale(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchAppsV1NamespacedStatefulSetScaleOptionalParams | msRest.ServiceCallback<Models.V1Scale>, callback?: msRest.ServiceCallback<Models.V1Scale>): Promise<Models.PatchAppsV1NamespacedStatefulSetScaleResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      patchAppsV1NamespacedStatefulSetScaleOperationSpec,
      callback) as Promise<Models.PatchAppsV1NamespacedStatefulSetScaleResponse>;
  }

  /**
   * read status of the specified StatefulSet
   * @param name name of the StatefulSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadAppsV1NamespacedStatefulSetStatusResponse>
   */
  readAppsV1NamespacedStatefulSetStatus(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadAppsV1NamespacedStatefulSetStatusOptionalParams): Promise<Models.ReadAppsV1NamespacedStatefulSetStatusResponse>;
  /**
   * @param name name of the StatefulSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readAppsV1NamespacedStatefulSetStatus(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1StatefulSet>): void;
  /**
   * @param name name of the StatefulSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readAppsV1NamespacedStatefulSetStatus(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadAppsV1NamespacedStatefulSetStatusOptionalParams, callback: msRest.ServiceCallback<Models.V1StatefulSet>): void;
  readAppsV1NamespacedStatefulSetStatus(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadAppsV1NamespacedStatefulSetStatusOptionalParams | msRest.ServiceCallback<Models.V1StatefulSet>, callback?: msRest.ServiceCallback<Models.V1StatefulSet>): Promise<Models.ReadAppsV1NamespacedStatefulSetStatusResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readAppsV1NamespacedStatefulSetStatusOperationSpec,
      callback) as Promise<Models.ReadAppsV1NamespacedStatefulSetStatusResponse>;
  }

  /**
   * replace status of the specified StatefulSet
   * @param body
   * @param name name of the StatefulSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceAppsV1NamespacedStatefulSetStatusResponse>
   */
  replaceAppsV1NamespacedStatefulSetStatus(body: Models.V1StatefulSet, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceAppsV1NamespacedStatefulSetStatusOptionalParams): Promise<Models.ReplaceAppsV1NamespacedStatefulSetStatusResponse>;
  /**
   * @param body
   * @param name name of the StatefulSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replaceAppsV1NamespacedStatefulSetStatus(body: Models.V1StatefulSet, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1StatefulSet>): void;
  /**
   * @param body
   * @param name name of the StatefulSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceAppsV1NamespacedStatefulSetStatus(body: Models.V1StatefulSet, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplaceAppsV1NamespacedStatefulSetStatusOptionalParams, callback: msRest.ServiceCallback<Models.V1StatefulSet>): void;
  replaceAppsV1NamespacedStatefulSetStatus(body: Models.V1StatefulSet, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceAppsV1NamespacedStatefulSetStatusOptionalParams | msRest.ServiceCallback<Models.V1StatefulSet>, callback?: msRest.ServiceCallback<Models.V1StatefulSet>): Promise<Models.ReplaceAppsV1NamespacedStatefulSetStatusResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replaceAppsV1NamespacedStatefulSetStatusOperationSpec,
      callback) as Promise<Models.ReplaceAppsV1NamespacedStatefulSetStatusResponse>;
  }

  /**
   * partially update status of the specified StatefulSet
   * @param body
   * @param name name of the StatefulSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchAppsV1NamespacedStatefulSetStatusResponse>
   */
  patchAppsV1NamespacedStatefulSetStatus(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchAppsV1NamespacedStatefulSetStatusOptionalParams): Promise<Models.PatchAppsV1NamespacedStatefulSetStatusResponse>;
  /**
   * @param body
   * @param name name of the StatefulSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  patchAppsV1NamespacedStatefulSetStatus(body: any, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1StatefulSet>): void;
  /**
   * @param body
   * @param name name of the StatefulSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  patchAppsV1NamespacedStatefulSetStatus(body: any, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesPatchAppsV1NamespacedStatefulSetStatusOptionalParams, callback: msRest.ServiceCallback<Models.V1StatefulSet>): void;
  patchAppsV1NamespacedStatefulSetStatus(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchAppsV1NamespacedStatefulSetStatusOptionalParams | msRest.ServiceCallback<Models.V1StatefulSet>, callback?: msRest.ServiceCallback<Models.V1StatefulSet>): Promise<Models.PatchAppsV1NamespacedStatefulSetStatusResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      patchAppsV1NamespacedStatefulSetStatusOperationSpec,
      callback) as Promise<Models.PatchAppsV1NamespacedStatefulSetStatusResponse>;
  }

  /**
   * list or watch objects of kind ReplicaSet
   * @param [options] The optional parameters
   * @returns Promise<Models.ListAppsV1ReplicaSetForAllNamespacesResponse>
   */
  listAppsV1ReplicaSetForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListAppsV1ReplicaSetForAllNamespacesOptionalParams): Promise<Models.ListAppsV1ReplicaSetForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  listAppsV1ReplicaSetForAllNamespaces(callback: msRest.ServiceCallback<Models.V1ReplicaSetList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listAppsV1ReplicaSetForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesListAppsV1ReplicaSetForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1ReplicaSetList>): void;
  listAppsV1ReplicaSetForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListAppsV1ReplicaSetForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1ReplicaSetList>, callback?: msRest.ServiceCallback<Models.V1ReplicaSetList>): Promise<Models.ListAppsV1ReplicaSetForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listAppsV1ReplicaSetForAllNamespacesOperationSpec,
      callback) as Promise<Models.ListAppsV1ReplicaSetForAllNamespacesResponse>;
  }

  /**
   * list or watch objects of kind StatefulSet
   * @param [options] The optional parameters
   * @returns Promise<Models.ListAppsV1StatefulSetForAllNamespacesResponse>
   */
  listAppsV1StatefulSetForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListAppsV1StatefulSetForAllNamespacesOptionalParams): Promise<Models.ListAppsV1StatefulSetForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  listAppsV1StatefulSetForAllNamespaces(callback: msRest.ServiceCallback<Models.V1StatefulSetList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listAppsV1StatefulSetForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesListAppsV1StatefulSetForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1StatefulSetList>): void;
  listAppsV1StatefulSetForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListAppsV1StatefulSetForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1StatefulSetList>, callback?: msRest.ServiceCallback<Models.V1StatefulSetList>): Promise<Models.ListAppsV1StatefulSetForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listAppsV1StatefulSetForAllNamespacesOperationSpec,
      callback) as Promise<Models.ListAppsV1StatefulSetForAllNamespacesResponse>;
  }

  /**
   * watch individual changes to a list of ControllerRevision
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchAppsV1ControllerRevisionListForAllNamespacesResponse>
   */
  watchAppsV1ControllerRevisionListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchAppsV1ControllerRevisionListForAllNamespacesOptionalParams): Promise<Models.WatchAppsV1ControllerRevisionListForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  watchAppsV1ControllerRevisionListForAllNamespaces(callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  watchAppsV1ControllerRevisionListForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesWatchAppsV1ControllerRevisionListForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchAppsV1ControllerRevisionListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchAppsV1ControllerRevisionListForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchAppsV1ControllerRevisionListForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      watchAppsV1ControllerRevisionListForAllNamespacesOperationSpec,
      callback) as Promise<Models.WatchAppsV1ControllerRevisionListForAllNamespacesResponse>;
  }

  /**
   * watch individual changes to a list of DaemonSet
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchAppsV1DaemonSetListForAllNamespacesResponse>
   */
  watchAppsV1DaemonSetListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchAppsV1DaemonSetListForAllNamespacesOptionalParams): Promise<Models.WatchAppsV1DaemonSetListForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  watchAppsV1DaemonSetListForAllNamespaces(callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  watchAppsV1DaemonSetListForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesWatchAppsV1DaemonSetListForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchAppsV1DaemonSetListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchAppsV1DaemonSetListForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchAppsV1DaemonSetListForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      watchAppsV1DaemonSetListForAllNamespacesOperationSpec,
      callback) as Promise<Models.WatchAppsV1DaemonSetListForAllNamespacesResponse>;
  }

  /**
   * watch individual changes to a list of Deployment
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchAppsV1DeploymentListForAllNamespacesResponse>
   */
  watchAppsV1DeploymentListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchAppsV1DeploymentListForAllNamespacesOptionalParams): Promise<Models.WatchAppsV1DeploymentListForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  watchAppsV1DeploymentListForAllNamespaces(callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  watchAppsV1DeploymentListForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesWatchAppsV1DeploymentListForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchAppsV1DeploymentListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchAppsV1DeploymentListForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchAppsV1DeploymentListForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      watchAppsV1DeploymentListForAllNamespacesOperationSpec,
      callback) as Promise<Models.WatchAppsV1DeploymentListForAllNamespacesResponse>;
  }

  /**
   * watch individual changes to a list of ControllerRevision
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchAppsV1NamespacedControllerRevisionListResponse>
   */
  watchAppsV1NamespacedControllerRevisionList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchAppsV1NamespacedControllerRevisionListOptionalParams): Promise<Models.WatchAppsV1NamespacedControllerRevisionListResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchAppsV1NamespacedControllerRevisionList(namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchAppsV1NamespacedControllerRevisionList(namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchAppsV1NamespacedControllerRevisionListOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchAppsV1NamespacedControllerRevisionList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchAppsV1NamespacedControllerRevisionListOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchAppsV1NamespacedControllerRevisionListResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      watchAppsV1NamespacedControllerRevisionListOperationSpec,
      callback) as Promise<Models.WatchAppsV1NamespacedControllerRevisionListResponse>;
  }

  /**
   * watch changes to an object of kind ControllerRevision
   * @param name name of the ControllerRevision
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchAppsV1NamespacedControllerRevisionResponse>
   */
  watchAppsV1NamespacedControllerRevision(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchAppsV1NamespacedControllerRevisionOptionalParams): Promise<Models.WatchAppsV1NamespacedControllerRevisionResponse>;
  /**
   * @param name name of the ControllerRevision
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchAppsV1NamespacedControllerRevision(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param name name of the ControllerRevision
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchAppsV1NamespacedControllerRevision(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchAppsV1NamespacedControllerRevisionOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchAppsV1NamespacedControllerRevision(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchAppsV1NamespacedControllerRevisionOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchAppsV1NamespacedControllerRevisionResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      watchAppsV1NamespacedControllerRevisionOperationSpec,
      callback) as Promise<Models.WatchAppsV1NamespacedControllerRevisionResponse>;
  }

  /**
   * watch individual changes to a list of DaemonSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchAppsV1NamespacedDaemonSetListResponse>
   */
  watchAppsV1NamespacedDaemonSetList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchAppsV1NamespacedDaemonSetListOptionalParams): Promise<Models.WatchAppsV1NamespacedDaemonSetListResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchAppsV1NamespacedDaemonSetList(namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchAppsV1NamespacedDaemonSetList(namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchAppsV1NamespacedDaemonSetListOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchAppsV1NamespacedDaemonSetList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchAppsV1NamespacedDaemonSetListOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchAppsV1NamespacedDaemonSetListResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      watchAppsV1NamespacedDaemonSetListOperationSpec,
      callback) as Promise<Models.WatchAppsV1NamespacedDaemonSetListResponse>;
  }

  /**
   * watch changes to an object of kind DaemonSet
   * @param name name of the DaemonSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchAppsV1NamespacedDaemonSetResponse>
   */
  watchAppsV1NamespacedDaemonSet(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchAppsV1NamespacedDaemonSetOptionalParams): Promise<Models.WatchAppsV1NamespacedDaemonSetResponse>;
  /**
   * @param name name of the DaemonSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchAppsV1NamespacedDaemonSet(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param name name of the DaemonSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchAppsV1NamespacedDaemonSet(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchAppsV1NamespacedDaemonSetOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchAppsV1NamespacedDaemonSet(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchAppsV1NamespacedDaemonSetOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchAppsV1NamespacedDaemonSetResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      watchAppsV1NamespacedDaemonSetOperationSpec,
      callback) as Promise<Models.WatchAppsV1NamespacedDaemonSetResponse>;
  }

  /**
   * watch individual changes to a list of Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchAppsV1NamespacedDeploymentListResponse>
   */
  watchAppsV1NamespacedDeploymentList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchAppsV1NamespacedDeploymentListOptionalParams): Promise<Models.WatchAppsV1NamespacedDeploymentListResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchAppsV1NamespacedDeploymentList(namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchAppsV1NamespacedDeploymentList(namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchAppsV1NamespacedDeploymentListOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchAppsV1NamespacedDeploymentList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchAppsV1NamespacedDeploymentListOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchAppsV1NamespacedDeploymentListResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      watchAppsV1NamespacedDeploymentListOperationSpec,
      callback) as Promise<Models.WatchAppsV1NamespacedDeploymentListResponse>;
  }

  /**
   * watch changes to an object of kind Deployment
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchAppsV1NamespacedDeploymentResponse>
   */
  watchAppsV1NamespacedDeployment(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchAppsV1NamespacedDeploymentOptionalParams): Promise<Models.WatchAppsV1NamespacedDeploymentResponse>;
  /**
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchAppsV1NamespacedDeployment(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchAppsV1NamespacedDeployment(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchAppsV1NamespacedDeploymentOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchAppsV1NamespacedDeployment(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchAppsV1NamespacedDeploymentOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchAppsV1NamespacedDeploymentResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      watchAppsV1NamespacedDeploymentOperationSpec,
      callback) as Promise<Models.WatchAppsV1NamespacedDeploymentResponse>;
  }

  /**
   * watch individual changes to a list of ReplicaSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchAppsV1NamespacedReplicaSetListResponse>
   */
  watchAppsV1NamespacedReplicaSetList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchAppsV1NamespacedReplicaSetListOptionalParams): Promise<Models.WatchAppsV1NamespacedReplicaSetListResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchAppsV1NamespacedReplicaSetList(namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchAppsV1NamespacedReplicaSetList(namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchAppsV1NamespacedReplicaSetListOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchAppsV1NamespacedReplicaSetList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchAppsV1NamespacedReplicaSetListOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchAppsV1NamespacedReplicaSetListResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      watchAppsV1NamespacedReplicaSetListOperationSpec,
      callback) as Promise<Models.WatchAppsV1NamespacedReplicaSetListResponse>;
  }

  /**
   * watch changes to an object of kind ReplicaSet
   * @param name name of the ReplicaSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchAppsV1NamespacedReplicaSetResponse>
   */
  watchAppsV1NamespacedReplicaSet(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchAppsV1NamespacedReplicaSetOptionalParams): Promise<Models.WatchAppsV1NamespacedReplicaSetResponse>;
  /**
   * @param name name of the ReplicaSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchAppsV1NamespacedReplicaSet(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param name name of the ReplicaSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchAppsV1NamespacedReplicaSet(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchAppsV1NamespacedReplicaSetOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchAppsV1NamespacedReplicaSet(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchAppsV1NamespacedReplicaSetOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchAppsV1NamespacedReplicaSetResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      watchAppsV1NamespacedReplicaSetOperationSpec,
      callback) as Promise<Models.WatchAppsV1NamespacedReplicaSetResponse>;
  }

  /**
   * watch individual changes to a list of StatefulSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchAppsV1NamespacedStatefulSetListResponse>
   */
  watchAppsV1NamespacedStatefulSetList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchAppsV1NamespacedStatefulSetListOptionalParams): Promise<Models.WatchAppsV1NamespacedStatefulSetListResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchAppsV1NamespacedStatefulSetList(namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchAppsV1NamespacedStatefulSetList(namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchAppsV1NamespacedStatefulSetListOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchAppsV1NamespacedStatefulSetList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchAppsV1NamespacedStatefulSetListOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchAppsV1NamespacedStatefulSetListResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      watchAppsV1NamespacedStatefulSetListOperationSpec,
      callback) as Promise<Models.WatchAppsV1NamespacedStatefulSetListResponse>;
  }

  /**
   * watch changes to an object of kind StatefulSet
   * @param name name of the StatefulSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchAppsV1NamespacedStatefulSetResponse>
   */
  watchAppsV1NamespacedStatefulSet(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchAppsV1NamespacedStatefulSetOptionalParams): Promise<Models.WatchAppsV1NamespacedStatefulSetResponse>;
  /**
   * @param name name of the StatefulSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchAppsV1NamespacedStatefulSet(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param name name of the StatefulSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchAppsV1NamespacedStatefulSet(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchAppsV1NamespacedStatefulSetOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchAppsV1NamespacedStatefulSet(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchAppsV1NamespacedStatefulSetOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchAppsV1NamespacedStatefulSetResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      watchAppsV1NamespacedStatefulSetOperationSpec,
      callback) as Promise<Models.WatchAppsV1NamespacedStatefulSetResponse>;
  }

  /**
   * watch individual changes to a list of ReplicaSet
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchAppsV1ReplicaSetListForAllNamespacesResponse>
   */
  watchAppsV1ReplicaSetListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchAppsV1ReplicaSetListForAllNamespacesOptionalParams): Promise<Models.WatchAppsV1ReplicaSetListForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  watchAppsV1ReplicaSetListForAllNamespaces(callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  watchAppsV1ReplicaSetListForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesWatchAppsV1ReplicaSetListForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchAppsV1ReplicaSetListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchAppsV1ReplicaSetListForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchAppsV1ReplicaSetListForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      watchAppsV1ReplicaSetListForAllNamespacesOperationSpec,
      callback) as Promise<Models.WatchAppsV1ReplicaSetListForAllNamespacesResponse>;
  }

  /**
   * watch individual changes to a list of StatefulSet
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchAppsV1StatefulSetListForAllNamespacesResponse>
   */
  watchAppsV1StatefulSetListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchAppsV1StatefulSetListForAllNamespacesOptionalParams): Promise<Models.WatchAppsV1StatefulSetListForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  watchAppsV1StatefulSetListForAllNamespaces(callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  watchAppsV1StatefulSetListForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesWatchAppsV1StatefulSetListForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchAppsV1StatefulSetListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchAppsV1StatefulSetListForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchAppsV1StatefulSetListForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      watchAppsV1StatefulSetListForAllNamespacesOperationSpec,
      callback) as Promise<Models.WatchAppsV1StatefulSetListForAllNamespacesResponse>;
  }

  /**
   * get available resources
   * @param [options] The optional parameters
   * @returns Promise<Models.GetAppsV1beta1APIResourcesResponse>
   */
  getAppsV1beta1APIResources(options?: msRest.RequestOptionsBase): Promise<Models.GetAppsV1beta1APIResourcesResponse>;
  /**
   * @param callback The callback
   */
  getAppsV1beta1APIResources(callback: msRest.ServiceCallback<Models.V1APIResourceList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getAppsV1beta1APIResources(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.V1APIResourceList>): void;
  getAppsV1beta1APIResources(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.V1APIResourceList>, callback?: msRest.ServiceCallback<Models.V1APIResourceList>): Promise<Models.GetAppsV1beta1APIResourcesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getAppsV1beta1APIResourcesOperationSpec,
      callback) as Promise<Models.GetAppsV1beta1APIResourcesResponse>;
  }

  /**
   * list or watch objects of kind ControllerRevision
   * @param [options] The optional parameters
   * @returns Promise<Models.ListAppsV1beta1ControllerRevisionForAllNamespacesResponse>
   */
  listAppsV1beta1ControllerRevisionForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListAppsV1beta1ControllerRevisionForAllNamespacesOptionalParams): Promise<Models.ListAppsV1beta1ControllerRevisionForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  listAppsV1beta1ControllerRevisionForAllNamespaces(callback: msRest.ServiceCallback<Models.V1beta1ControllerRevisionList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listAppsV1beta1ControllerRevisionForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesListAppsV1beta1ControllerRevisionForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1ControllerRevisionList>): void;
  listAppsV1beta1ControllerRevisionForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListAppsV1beta1ControllerRevisionForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1beta1ControllerRevisionList>, callback?: msRest.ServiceCallback<Models.V1beta1ControllerRevisionList>): Promise<Models.ListAppsV1beta1ControllerRevisionForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listAppsV1beta1ControllerRevisionForAllNamespacesOperationSpec,
      callback) as Promise<Models.ListAppsV1beta1ControllerRevisionForAllNamespacesResponse>;
  }

  /**
   * list or watch objects of kind Deployment
   * @param [options] The optional parameters
   * @returns Promise<Models.ListAppsV1beta1DeploymentForAllNamespacesResponse>
   */
  listAppsV1beta1DeploymentForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListAppsV1beta1DeploymentForAllNamespacesOptionalParams): Promise<Models.ListAppsV1beta1DeploymentForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  listAppsV1beta1DeploymentForAllNamespaces(callback: msRest.ServiceCallback<Models.V1beta1DeploymentList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listAppsV1beta1DeploymentForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesListAppsV1beta1DeploymentForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1DeploymentList>): void;
  listAppsV1beta1DeploymentForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListAppsV1beta1DeploymentForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1beta1DeploymentList>, callback?: msRest.ServiceCallback<Models.V1beta1DeploymentList>): Promise<Models.ListAppsV1beta1DeploymentForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listAppsV1beta1DeploymentForAllNamespacesOperationSpec,
      callback) as Promise<Models.ListAppsV1beta1DeploymentForAllNamespacesResponse>;
  }

  /**
   * list or watch objects of kind ControllerRevision
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ListAppsV1beta1NamespacedControllerRevisionResponse>
   */
  listAppsV1beta1NamespacedControllerRevision(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListAppsV1beta1NamespacedControllerRevisionOptionalParams): Promise<Models.ListAppsV1beta1NamespacedControllerRevisionResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  listAppsV1beta1NamespacedControllerRevision(namespace: string, callback: msRest.ServiceCallback<Models.V1beta1ControllerRevisionList>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  listAppsV1beta1NamespacedControllerRevision(namespace: string, options: Models.OpenShiftAPIwithKubernetesListAppsV1beta1NamespacedControllerRevisionOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1ControllerRevisionList>): void;
  listAppsV1beta1NamespacedControllerRevision(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListAppsV1beta1NamespacedControllerRevisionOptionalParams | msRest.ServiceCallback<Models.V1beta1ControllerRevisionList>, callback?: msRest.ServiceCallback<Models.V1beta1ControllerRevisionList>): Promise<Models.ListAppsV1beta1NamespacedControllerRevisionResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      listAppsV1beta1NamespacedControllerRevisionOperationSpec,
      callback) as Promise<Models.ListAppsV1beta1NamespacedControllerRevisionResponse>;
  }

  /**
   * create a ControllerRevision
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateAppsV1beta1NamespacedControllerRevisionResponse>
   */
  createAppsV1beta1NamespacedControllerRevision(body: Models.V1beta1ControllerRevision, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateAppsV1beta1NamespacedControllerRevisionOptionalParams): Promise<Models.CreateAppsV1beta1NamespacedControllerRevisionResponse>;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  createAppsV1beta1NamespacedControllerRevision(body: Models.V1beta1ControllerRevision, namespace: string, callback: msRest.ServiceCallback<Models.V1beta1ControllerRevision>): void;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  createAppsV1beta1NamespacedControllerRevision(body: Models.V1beta1ControllerRevision, namespace: string, options: Models.OpenShiftAPIwithKubernetesCreateAppsV1beta1NamespacedControllerRevisionOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1ControllerRevision>): void;
  createAppsV1beta1NamespacedControllerRevision(body: Models.V1beta1ControllerRevision, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateAppsV1beta1NamespacedControllerRevisionOptionalParams | msRest.ServiceCallback<Models.V1beta1ControllerRevision>, callback?: msRest.ServiceCallback<Models.V1beta1ControllerRevision>): Promise<Models.CreateAppsV1beta1NamespacedControllerRevisionResponse> {
    return this.sendOperationRequest(
      {
        body,
        namespace,
        options
      },
      createAppsV1beta1NamespacedControllerRevisionOperationSpec,
      callback) as Promise<Models.CreateAppsV1beta1NamespacedControllerRevisionResponse>;
  }

  /**
   * delete collection of ControllerRevision
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteAppsV1beta1CollectionNamespacedControllerRevisionResponse>
   */
  deleteAppsV1beta1CollectionNamespacedControllerRevision(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteAppsV1beta1CollectionNamespacedControllerRevisionOptionalParams): Promise<Models.DeleteAppsV1beta1CollectionNamespacedControllerRevisionResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteAppsV1beta1CollectionNamespacedControllerRevision(namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteAppsV1beta1CollectionNamespacedControllerRevision(namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteAppsV1beta1CollectionNamespacedControllerRevisionOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteAppsV1beta1CollectionNamespacedControllerRevision(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteAppsV1beta1CollectionNamespacedControllerRevisionOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteAppsV1beta1CollectionNamespacedControllerRevisionResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      deleteAppsV1beta1CollectionNamespacedControllerRevisionOperationSpec,
      callback) as Promise<Models.DeleteAppsV1beta1CollectionNamespacedControllerRevisionResponse>;
  }

  /**
   * read the specified ControllerRevision
   * @param name name of the ControllerRevision
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadAppsV1beta1NamespacedControllerRevisionResponse>
   */
  readAppsV1beta1NamespacedControllerRevision(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadAppsV1beta1NamespacedControllerRevisionOptionalParams): Promise<Models.ReadAppsV1beta1NamespacedControllerRevisionResponse>;
  /**
   * @param name name of the ControllerRevision
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readAppsV1beta1NamespacedControllerRevision(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1beta1ControllerRevision>): void;
  /**
   * @param name name of the ControllerRevision
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readAppsV1beta1NamespacedControllerRevision(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadAppsV1beta1NamespacedControllerRevisionOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1ControllerRevision>): void;
  readAppsV1beta1NamespacedControllerRevision(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadAppsV1beta1NamespacedControllerRevisionOptionalParams | msRest.ServiceCallback<Models.V1beta1ControllerRevision>, callback?: msRest.ServiceCallback<Models.V1beta1ControllerRevision>): Promise<Models.ReadAppsV1beta1NamespacedControllerRevisionResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readAppsV1beta1NamespacedControllerRevisionOperationSpec,
      callback) as Promise<Models.ReadAppsV1beta1NamespacedControllerRevisionResponse>;
  }

  /**
   * replace the specified ControllerRevision
   * @param body
   * @param name name of the ControllerRevision
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceAppsV1beta1NamespacedControllerRevisionResponse>
   */
  replaceAppsV1beta1NamespacedControllerRevision(body: Models.V1beta1ControllerRevision, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceAppsV1beta1NamespacedControllerRevisionOptionalParams): Promise<Models.ReplaceAppsV1beta1NamespacedControllerRevisionResponse>;
  /**
   * @param body
   * @param name name of the ControllerRevision
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replaceAppsV1beta1NamespacedControllerRevision(body: Models.V1beta1ControllerRevision, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1beta1ControllerRevision>): void;
  /**
   * @param body
   * @param name name of the ControllerRevision
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceAppsV1beta1NamespacedControllerRevision(body: Models.V1beta1ControllerRevision, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplaceAppsV1beta1NamespacedControllerRevisionOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1ControllerRevision>): void;
  replaceAppsV1beta1NamespacedControllerRevision(body: Models.V1beta1ControllerRevision, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceAppsV1beta1NamespacedControllerRevisionOptionalParams | msRest.ServiceCallback<Models.V1beta1ControllerRevision>, callback?: msRest.ServiceCallback<Models.V1beta1ControllerRevision>): Promise<Models.ReplaceAppsV1beta1NamespacedControllerRevisionResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replaceAppsV1beta1NamespacedControllerRevisionOperationSpec,
      callback) as Promise<Models.ReplaceAppsV1beta1NamespacedControllerRevisionResponse>;
  }

  /**
   * delete a ControllerRevision
   * @param body
   * @param name name of the ControllerRevision
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteAppsV1beta1NamespacedControllerRevisionResponse>
   */
  deleteAppsV1beta1NamespacedControllerRevision(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteAppsV1beta1NamespacedControllerRevisionOptionalParams): Promise<Models.DeleteAppsV1beta1NamespacedControllerRevisionResponse>;
  /**
   * @param body
   * @param name name of the ControllerRevision
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteAppsV1beta1NamespacedControllerRevision(body: Models.V1DeleteOptions, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param name name of the ControllerRevision
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteAppsV1beta1NamespacedControllerRevision(body: Models.V1DeleteOptions, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteAppsV1beta1NamespacedControllerRevisionOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteAppsV1beta1NamespacedControllerRevision(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteAppsV1beta1NamespacedControllerRevisionOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteAppsV1beta1NamespacedControllerRevisionResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      deleteAppsV1beta1NamespacedControllerRevisionOperationSpec,
      callback) as Promise<Models.DeleteAppsV1beta1NamespacedControllerRevisionResponse>;
  }

  /**
   * partially update the specified ControllerRevision
   * @param body
   * @param name name of the ControllerRevision
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchAppsV1beta1NamespacedControllerRevisionResponse>
   */
  patchAppsV1beta1NamespacedControllerRevision(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchAppsV1beta1NamespacedControllerRevisionOptionalParams): Promise<Models.PatchAppsV1beta1NamespacedControllerRevisionResponse>;
  /**
   * @param body
   * @param name name of the ControllerRevision
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  patchAppsV1beta1NamespacedControllerRevision(body: any, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1beta1ControllerRevision>): void;
  /**
   * @param body
   * @param name name of the ControllerRevision
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  patchAppsV1beta1NamespacedControllerRevision(body: any, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesPatchAppsV1beta1NamespacedControllerRevisionOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1ControllerRevision>): void;
  patchAppsV1beta1NamespacedControllerRevision(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchAppsV1beta1NamespacedControllerRevisionOptionalParams | msRest.ServiceCallback<Models.V1beta1ControllerRevision>, callback?: msRest.ServiceCallback<Models.V1beta1ControllerRevision>): Promise<Models.PatchAppsV1beta1NamespacedControllerRevisionResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      patchAppsV1beta1NamespacedControllerRevisionOperationSpec,
      callback) as Promise<Models.PatchAppsV1beta1NamespacedControllerRevisionResponse>;
  }

  /**
   * list or watch objects of kind Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ListAppsV1beta1NamespacedDeploymentResponse>
   */
  listAppsV1beta1NamespacedDeployment(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListAppsV1beta1NamespacedDeploymentOptionalParams): Promise<Models.ListAppsV1beta1NamespacedDeploymentResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  listAppsV1beta1NamespacedDeployment(namespace: string, callback: msRest.ServiceCallback<Models.V1beta1DeploymentList>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  listAppsV1beta1NamespacedDeployment(namespace: string, options: Models.OpenShiftAPIwithKubernetesListAppsV1beta1NamespacedDeploymentOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1DeploymentList>): void;
  listAppsV1beta1NamespacedDeployment(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListAppsV1beta1NamespacedDeploymentOptionalParams | msRest.ServiceCallback<Models.V1beta1DeploymentList>, callback?: msRest.ServiceCallback<Models.V1beta1DeploymentList>): Promise<Models.ListAppsV1beta1NamespacedDeploymentResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      listAppsV1beta1NamespacedDeploymentOperationSpec,
      callback) as Promise<Models.ListAppsV1beta1NamespacedDeploymentResponse>;
  }

  /**
   * create a Deployment
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateAppsV1beta1NamespacedDeploymentResponse>
   */
  createAppsV1beta1NamespacedDeployment(body: Models.V1beta1Deployment, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateAppsV1beta1NamespacedDeploymentOptionalParams): Promise<Models.CreateAppsV1beta1NamespacedDeploymentResponse>;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  createAppsV1beta1NamespacedDeployment(body: Models.V1beta1Deployment, namespace: string, callback: msRest.ServiceCallback<Models.V1beta1Deployment>): void;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  createAppsV1beta1NamespacedDeployment(body: Models.V1beta1Deployment, namespace: string, options: Models.OpenShiftAPIwithKubernetesCreateAppsV1beta1NamespacedDeploymentOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1Deployment>): void;
  createAppsV1beta1NamespacedDeployment(body: Models.V1beta1Deployment, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateAppsV1beta1NamespacedDeploymentOptionalParams | msRest.ServiceCallback<Models.V1beta1Deployment>, callback?: msRest.ServiceCallback<Models.V1beta1Deployment>): Promise<Models.CreateAppsV1beta1NamespacedDeploymentResponse> {
    return this.sendOperationRequest(
      {
        body,
        namespace,
        options
      },
      createAppsV1beta1NamespacedDeploymentOperationSpec,
      callback) as Promise<Models.CreateAppsV1beta1NamespacedDeploymentResponse>;
  }

  /**
   * delete collection of Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteAppsV1beta1CollectionNamespacedDeploymentResponse>
   */
  deleteAppsV1beta1CollectionNamespacedDeployment(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteAppsV1beta1CollectionNamespacedDeploymentOptionalParams): Promise<Models.DeleteAppsV1beta1CollectionNamespacedDeploymentResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteAppsV1beta1CollectionNamespacedDeployment(namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteAppsV1beta1CollectionNamespacedDeployment(namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteAppsV1beta1CollectionNamespacedDeploymentOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteAppsV1beta1CollectionNamespacedDeployment(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteAppsV1beta1CollectionNamespacedDeploymentOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteAppsV1beta1CollectionNamespacedDeploymentResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      deleteAppsV1beta1CollectionNamespacedDeploymentOperationSpec,
      callback) as Promise<Models.DeleteAppsV1beta1CollectionNamespacedDeploymentResponse>;
  }

  /**
   * read the specified Deployment
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadAppsV1beta1NamespacedDeploymentResponse>
   */
  readAppsV1beta1NamespacedDeployment(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadAppsV1beta1NamespacedDeploymentOptionalParams): Promise<Models.ReadAppsV1beta1NamespacedDeploymentResponse>;
  /**
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readAppsV1beta1NamespacedDeployment(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1beta1Deployment>): void;
  /**
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readAppsV1beta1NamespacedDeployment(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadAppsV1beta1NamespacedDeploymentOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1Deployment>): void;
  readAppsV1beta1NamespacedDeployment(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadAppsV1beta1NamespacedDeploymentOptionalParams | msRest.ServiceCallback<Models.V1beta1Deployment>, callback?: msRest.ServiceCallback<Models.V1beta1Deployment>): Promise<Models.ReadAppsV1beta1NamespacedDeploymentResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readAppsV1beta1NamespacedDeploymentOperationSpec,
      callback) as Promise<Models.ReadAppsV1beta1NamespacedDeploymentResponse>;
  }

  /**
   * replace the specified Deployment
   * @param body
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceAppsV1beta1NamespacedDeploymentResponse>
   */
  replaceAppsV1beta1NamespacedDeployment(body: Models.V1beta1Deployment, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceAppsV1beta1NamespacedDeploymentOptionalParams): Promise<Models.ReplaceAppsV1beta1NamespacedDeploymentResponse>;
  /**
   * @param body
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replaceAppsV1beta1NamespacedDeployment(body: Models.V1beta1Deployment, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1beta1Deployment>): void;
  /**
   * @param body
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceAppsV1beta1NamespacedDeployment(body: Models.V1beta1Deployment, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplaceAppsV1beta1NamespacedDeploymentOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1Deployment>): void;
  replaceAppsV1beta1NamespacedDeployment(body: Models.V1beta1Deployment, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceAppsV1beta1NamespacedDeploymentOptionalParams | msRest.ServiceCallback<Models.V1beta1Deployment>, callback?: msRest.ServiceCallback<Models.V1beta1Deployment>): Promise<Models.ReplaceAppsV1beta1NamespacedDeploymentResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replaceAppsV1beta1NamespacedDeploymentOperationSpec,
      callback) as Promise<Models.ReplaceAppsV1beta1NamespacedDeploymentResponse>;
  }

  /**
   * delete a Deployment
   * @param body
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteAppsV1beta1NamespacedDeploymentResponse>
   */
  deleteAppsV1beta1NamespacedDeployment(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteAppsV1beta1NamespacedDeploymentOptionalParams): Promise<Models.DeleteAppsV1beta1NamespacedDeploymentResponse>;
  /**
   * @param body
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteAppsV1beta1NamespacedDeployment(body: Models.V1DeleteOptions, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteAppsV1beta1NamespacedDeployment(body: Models.V1DeleteOptions, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteAppsV1beta1NamespacedDeploymentOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteAppsV1beta1NamespacedDeployment(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteAppsV1beta1NamespacedDeploymentOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteAppsV1beta1NamespacedDeploymentResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      deleteAppsV1beta1NamespacedDeploymentOperationSpec,
      callback) as Promise<Models.DeleteAppsV1beta1NamespacedDeploymentResponse>;
  }

  /**
   * partially update the specified Deployment
   * @param body
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchAppsV1beta1NamespacedDeploymentResponse>
   */
  patchAppsV1beta1NamespacedDeployment(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchAppsV1beta1NamespacedDeploymentOptionalParams): Promise<Models.PatchAppsV1beta1NamespacedDeploymentResponse>;
  /**
   * @param body
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  patchAppsV1beta1NamespacedDeployment(body: any, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1beta1Deployment>): void;
  /**
   * @param body
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  patchAppsV1beta1NamespacedDeployment(body: any, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesPatchAppsV1beta1NamespacedDeploymentOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1Deployment>): void;
  patchAppsV1beta1NamespacedDeployment(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchAppsV1beta1NamespacedDeploymentOptionalParams | msRest.ServiceCallback<Models.V1beta1Deployment>, callback?: msRest.ServiceCallback<Models.V1beta1Deployment>): Promise<Models.PatchAppsV1beta1NamespacedDeploymentResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      patchAppsV1beta1NamespacedDeploymentOperationSpec,
      callback) as Promise<Models.PatchAppsV1beta1NamespacedDeploymentResponse>;
  }

  /**
   * create rollback of a Deployment
   * @param body
   * @param name name of the DeploymentRollback
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateAppsV1beta1NamespacedDeploymentRollbackResponse>
   */
  createAppsV1beta1NamespacedDeploymentRollback(body: Models.V1beta1DeploymentRollback, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateAppsV1beta1NamespacedDeploymentRollbackOptionalParams): Promise<Models.CreateAppsV1beta1NamespacedDeploymentRollbackResponse>;
  /**
   * @param body
   * @param name name of the DeploymentRollback
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  createAppsV1beta1NamespacedDeploymentRollback(body: Models.V1beta1DeploymentRollback, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1beta1DeploymentRollback>): void;
  /**
   * @param body
   * @param name name of the DeploymentRollback
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  createAppsV1beta1NamespacedDeploymentRollback(body: Models.V1beta1DeploymentRollback, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesCreateAppsV1beta1NamespacedDeploymentRollbackOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1DeploymentRollback>): void;
  createAppsV1beta1NamespacedDeploymentRollback(body: Models.V1beta1DeploymentRollback, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateAppsV1beta1NamespacedDeploymentRollbackOptionalParams | msRest.ServiceCallback<Models.V1beta1DeploymentRollback>, callback?: msRest.ServiceCallback<Models.V1beta1DeploymentRollback>): Promise<Models.CreateAppsV1beta1NamespacedDeploymentRollbackResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      createAppsV1beta1NamespacedDeploymentRollbackOperationSpec,
      callback) as Promise<Models.CreateAppsV1beta1NamespacedDeploymentRollbackResponse>;
  }

  /**
   * read scale of the specified Deployment
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadAppsV1beta1NamespacedDeploymentScaleResponse>
   */
  readAppsV1beta1NamespacedDeploymentScale(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadAppsV1beta1NamespacedDeploymentScaleOptionalParams): Promise<Models.ReadAppsV1beta1NamespacedDeploymentScaleResponse>;
  /**
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readAppsV1beta1NamespacedDeploymentScale(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1beta1Scale>): void;
  /**
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readAppsV1beta1NamespacedDeploymentScale(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadAppsV1beta1NamespacedDeploymentScaleOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1Scale>): void;
  readAppsV1beta1NamespacedDeploymentScale(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadAppsV1beta1NamespacedDeploymentScaleOptionalParams | msRest.ServiceCallback<Models.V1beta1Scale>, callback?: msRest.ServiceCallback<Models.V1beta1Scale>): Promise<Models.ReadAppsV1beta1NamespacedDeploymentScaleResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readAppsV1beta1NamespacedDeploymentScaleOperationSpec,
      callback) as Promise<Models.ReadAppsV1beta1NamespacedDeploymentScaleResponse>;
  }

  /**
   * replace scale of the specified Deployment
   * @param body
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceAppsV1beta1NamespacedDeploymentScaleResponse>
   */
  replaceAppsV1beta1NamespacedDeploymentScale(body: Models.V1beta1Scale, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceAppsV1beta1NamespacedDeploymentScaleOptionalParams): Promise<Models.ReplaceAppsV1beta1NamespacedDeploymentScaleResponse>;
  /**
   * @param body
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replaceAppsV1beta1NamespacedDeploymentScale(body: Models.V1beta1Scale, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1beta1Scale>): void;
  /**
   * @param body
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceAppsV1beta1NamespacedDeploymentScale(body: Models.V1beta1Scale, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplaceAppsV1beta1NamespacedDeploymentScaleOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1Scale>): void;
  replaceAppsV1beta1NamespacedDeploymentScale(body: Models.V1beta1Scale, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceAppsV1beta1NamespacedDeploymentScaleOptionalParams | msRest.ServiceCallback<Models.V1beta1Scale>, callback?: msRest.ServiceCallback<Models.V1beta1Scale>): Promise<Models.ReplaceAppsV1beta1NamespacedDeploymentScaleResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replaceAppsV1beta1NamespacedDeploymentScaleOperationSpec,
      callback) as Promise<Models.ReplaceAppsV1beta1NamespacedDeploymentScaleResponse>;
  }

  /**
   * partially update scale of the specified Deployment
   * @param body
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchAppsV1beta1NamespacedDeploymentScaleResponse>
   */
  patchAppsV1beta1NamespacedDeploymentScale(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchAppsV1beta1NamespacedDeploymentScaleOptionalParams): Promise<Models.PatchAppsV1beta1NamespacedDeploymentScaleResponse>;
  /**
   * @param body
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  patchAppsV1beta1NamespacedDeploymentScale(body: any, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1beta1Scale>): void;
  /**
   * @param body
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  patchAppsV1beta1NamespacedDeploymentScale(body: any, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesPatchAppsV1beta1NamespacedDeploymentScaleOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1Scale>): void;
  patchAppsV1beta1NamespacedDeploymentScale(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchAppsV1beta1NamespacedDeploymentScaleOptionalParams | msRest.ServiceCallback<Models.V1beta1Scale>, callback?: msRest.ServiceCallback<Models.V1beta1Scale>): Promise<Models.PatchAppsV1beta1NamespacedDeploymentScaleResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      patchAppsV1beta1NamespacedDeploymentScaleOperationSpec,
      callback) as Promise<Models.PatchAppsV1beta1NamespacedDeploymentScaleResponse>;
  }

  /**
   * read status of the specified Deployment
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadAppsV1beta1NamespacedDeploymentStatusResponse>
   */
  readAppsV1beta1NamespacedDeploymentStatus(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadAppsV1beta1NamespacedDeploymentStatusOptionalParams): Promise<Models.ReadAppsV1beta1NamespacedDeploymentStatusResponse>;
  /**
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readAppsV1beta1NamespacedDeploymentStatus(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1beta1Deployment>): void;
  /**
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readAppsV1beta1NamespacedDeploymentStatus(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadAppsV1beta1NamespacedDeploymentStatusOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1Deployment>): void;
  readAppsV1beta1NamespacedDeploymentStatus(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadAppsV1beta1NamespacedDeploymentStatusOptionalParams | msRest.ServiceCallback<Models.V1beta1Deployment>, callback?: msRest.ServiceCallback<Models.V1beta1Deployment>): Promise<Models.ReadAppsV1beta1NamespacedDeploymentStatusResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readAppsV1beta1NamespacedDeploymentStatusOperationSpec,
      callback) as Promise<Models.ReadAppsV1beta1NamespacedDeploymentStatusResponse>;
  }

  /**
   * replace status of the specified Deployment
   * @param body
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceAppsV1beta1NamespacedDeploymentStatusResponse>
   */
  replaceAppsV1beta1NamespacedDeploymentStatus(body: Models.V1beta1Deployment, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceAppsV1beta1NamespacedDeploymentStatusOptionalParams): Promise<Models.ReplaceAppsV1beta1NamespacedDeploymentStatusResponse>;
  /**
   * @param body
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replaceAppsV1beta1NamespacedDeploymentStatus(body: Models.V1beta1Deployment, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1beta1Deployment>): void;
  /**
   * @param body
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceAppsV1beta1NamespacedDeploymentStatus(body: Models.V1beta1Deployment, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplaceAppsV1beta1NamespacedDeploymentStatusOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1Deployment>): void;
  replaceAppsV1beta1NamespacedDeploymentStatus(body: Models.V1beta1Deployment, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceAppsV1beta1NamespacedDeploymentStatusOptionalParams | msRest.ServiceCallback<Models.V1beta1Deployment>, callback?: msRest.ServiceCallback<Models.V1beta1Deployment>): Promise<Models.ReplaceAppsV1beta1NamespacedDeploymentStatusResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replaceAppsV1beta1NamespacedDeploymentStatusOperationSpec,
      callback) as Promise<Models.ReplaceAppsV1beta1NamespacedDeploymentStatusResponse>;
  }

  /**
   * partially update status of the specified Deployment
   * @param body
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchAppsV1beta1NamespacedDeploymentStatusResponse>
   */
  patchAppsV1beta1NamespacedDeploymentStatus(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchAppsV1beta1NamespacedDeploymentStatusOptionalParams): Promise<Models.PatchAppsV1beta1NamespacedDeploymentStatusResponse>;
  /**
   * @param body
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  patchAppsV1beta1NamespacedDeploymentStatus(body: any, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1beta1Deployment>): void;
  /**
   * @param body
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  patchAppsV1beta1NamespacedDeploymentStatus(body: any, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesPatchAppsV1beta1NamespacedDeploymentStatusOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1Deployment>): void;
  patchAppsV1beta1NamespacedDeploymentStatus(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchAppsV1beta1NamespacedDeploymentStatusOptionalParams | msRest.ServiceCallback<Models.V1beta1Deployment>, callback?: msRest.ServiceCallback<Models.V1beta1Deployment>): Promise<Models.PatchAppsV1beta1NamespacedDeploymentStatusResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      patchAppsV1beta1NamespacedDeploymentStatusOperationSpec,
      callback) as Promise<Models.PatchAppsV1beta1NamespacedDeploymentStatusResponse>;
  }

  /**
   * list or watch objects of kind StatefulSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ListAppsV1beta1NamespacedStatefulSetResponse>
   */
  listAppsV1beta1NamespacedStatefulSet(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListAppsV1beta1NamespacedStatefulSetOptionalParams): Promise<Models.ListAppsV1beta1NamespacedStatefulSetResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  listAppsV1beta1NamespacedStatefulSet(namespace: string, callback: msRest.ServiceCallback<Models.V1beta1StatefulSetList>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  listAppsV1beta1NamespacedStatefulSet(namespace: string, options: Models.OpenShiftAPIwithKubernetesListAppsV1beta1NamespacedStatefulSetOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1StatefulSetList>): void;
  listAppsV1beta1NamespacedStatefulSet(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListAppsV1beta1NamespacedStatefulSetOptionalParams | msRest.ServiceCallback<Models.V1beta1StatefulSetList>, callback?: msRest.ServiceCallback<Models.V1beta1StatefulSetList>): Promise<Models.ListAppsV1beta1NamespacedStatefulSetResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      listAppsV1beta1NamespacedStatefulSetOperationSpec,
      callback) as Promise<Models.ListAppsV1beta1NamespacedStatefulSetResponse>;
  }

  /**
   * create a StatefulSet
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateAppsV1beta1NamespacedStatefulSetResponse>
   */
  createAppsV1beta1NamespacedStatefulSet(body: Models.V1beta1StatefulSet, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateAppsV1beta1NamespacedStatefulSetOptionalParams): Promise<Models.CreateAppsV1beta1NamespacedStatefulSetResponse>;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  createAppsV1beta1NamespacedStatefulSet(body: Models.V1beta1StatefulSet, namespace: string, callback: msRest.ServiceCallback<Models.V1beta1StatefulSet>): void;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  createAppsV1beta1NamespacedStatefulSet(body: Models.V1beta1StatefulSet, namespace: string, options: Models.OpenShiftAPIwithKubernetesCreateAppsV1beta1NamespacedStatefulSetOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1StatefulSet>): void;
  createAppsV1beta1NamespacedStatefulSet(body: Models.V1beta1StatefulSet, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateAppsV1beta1NamespacedStatefulSetOptionalParams | msRest.ServiceCallback<Models.V1beta1StatefulSet>, callback?: msRest.ServiceCallback<Models.V1beta1StatefulSet>): Promise<Models.CreateAppsV1beta1NamespacedStatefulSetResponse> {
    return this.sendOperationRequest(
      {
        body,
        namespace,
        options
      },
      createAppsV1beta1NamespacedStatefulSetOperationSpec,
      callback) as Promise<Models.CreateAppsV1beta1NamespacedStatefulSetResponse>;
  }

  /**
   * delete collection of StatefulSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteAppsV1beta1CollectionNamespacedStatefulSetResponse>
   */
  deleteAppsV1beta1CollectionNamespacedStatefulSet(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteAppsV1beta1CollectionNamespacedStatefulSetOptionalParams): Promise<Models.DeleteAppsV1beta1CollectionNamespacedStatefulSetResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteAppsV1beta1CollectionNamespacedStatefulSet(namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteAppsV1beta1CollectionNamespacedStatefulSet(namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteAppsV1beta1CollectionNamespacedStatefulSetOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteAppsV1beta1CollectionNamespacedStatefulSet(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteAppsV1beta1CollectionNamespacedStatefulSetOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteAppsV1beta1CollectionNamespacedStatefulSetResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      deleteAppsV1beta1CollectionNamespacedStatefulSetOperationSpec,
      callback) as Promise<Models.DeleteAppsV1beta1CollectionNamespacedStatefulSetResponse>;
  }

  /**
   * read the specified StatefulSet
   * @param name name of the StatefulSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadAppsV1beta1NamespacedStatefulSetResponse>
   */
  readAppsV1beta1NamespacedStatefulSet(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadAppsV1beta1NamespacedStatefulSetOptionalParams): Promise<Models.ReadAppsV1beta1NamespacedStatefulSetResponse>;
  /**
   * @param name name of the StatefulSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readAppsV1beta1NamespacedStatefulSet(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1beta1StatefulSet>): void;
  /**
   * @param name name of the StatefulSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readAppsV1beta1NamespacedStatefulSet(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadAppsV1beta1NamespacedStatefulSetOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1StatefulSet>): void;
  readAppsV1beta1NamespacedStatefulSet(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadAppsV1beta1NamespacedStatefulSetOptionalParams | msRest.ServiceCallback<Models.V1beta1StatefulSet>, callback?: msRest.ServiceCallback<Models.V1beta1StatefulSet>): Promise<Models.ReadAppsV1beta1NamespacedStatefulSetResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readAppsV1beta1NamespacedStatefulSetOperationSpec,
      callback) as Promise<Models.ReadAppsV1beta1NamespacedStatefulSetResponse>;
  }

  /**
   * replace the specified StatefulSet
   * @param body
   * @param name name of the StatefulSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceAppsV1beta1NamespacedStatefulSetResponse>
   */
  replaceAppsV1beta1NamespacedStatefulSet(body: Models.V1beta1StatefulSet, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceAppsV1beta1NamespacedStatefulSetOptionalParams): Promise<Models.ReplaceAppsV1beta1NamespacedStatefulSetResponse>;
  /**
   * @param body
   * @param name name of the StatefulSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replaceAppsV1beta1NamespacedStatefulSet(body: Models.V1beta1StatefulSet, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1beta1StatefulSet>): void;
  /**
   * @param body
   * @param name name of the StatefulSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceAppsV1beta1NamespacedStatefulSet(body: Models.V1beta1StatefulSet, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplaceAppsV1beta1NamespacedStatefulSetOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1StatefulSet>): void;
  replaceAppsV1beta1NamespacedStatefulSet(body: Models.V1beta1StatefulSet, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceAppsV1beta1NamespacedStatefulSetOptionalParams | msRest.ServiceCallback<Models.V1beta1StatefulSet>, callback?: msRest.ServiceCallback<Models.V1beta1StatefulSet>): Promise<Models.ReplaceAppsV1beta1NamespacedStatefulSetResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replaceAppsV1beta1NamespacedStatefulSetOperationSpec,
      callback) as Promise<Models.ReplaceAppsV1beta1NamespacedStatefulSetResponse>;
  }

  /**
   * delete a StatefulSet
   * @param body
   * @param name name of the StatefulSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteAppsV1beta1NamespacedStatefulSetResponse>
   */
  deleteAppsV1beta1NamespacedStatefulSet(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteAppsV1beta1NamespacedStatefulSetOptionalParams): Promise<Models.DeleteAppsV1beta1NamespacedStatefulSetResponse>;
  /**
   * @param body
   * @param name name of the StatefulSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteAppsV1beta1NamespacedStatefulSet(body: Models.V1DeleteOptions, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param name name of the StatefulSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteAppsV1beta1NamespacedStatefulSet(body: Models.V1DeleteOptions, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteAppsV1beta1NamespacedStatefulSetOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteAppsV1beta1NamespacedStatefulSet(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteAppsV1beta1NamespacedStatefulSetOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteAppsV1beta1NamespacedStatefulSetResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      deleteAppsV1beta1NamespacedStatefulSetOperationSpec,
      callback) as Promise<Models.DeleteAppsV1beta1NamespacedStatefulSetResponse>;
  }

  /**
   * partially update the specified StatefulSet
   * @param body
   * @param name name of the StatefulSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchAppsV1beta1NamespacedStatefulSetResponse>
   */
  patchAppsV1beta1NamespacedStatefulSet(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchAppsV1beta1NamespacedStatefulSetOptionalParams): Promise<Models.PatchAppsV1beta1NamespacedStatefulSetResponse>;
  /**
   * @param body
   * @param name name of the StatefulSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  patchAppsV1beta1NamespacedStatefulSet(body: any, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1beta1StatefulSet>): void;
  /**
   * @param body
   * @param name name of the StatefulSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  patchAppsV1beta1NamespacedStatefulSet(body: any, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesPatchAppsV1beta1NamespacedStatefulSetOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1StatefulSet>): void;
  patchAppsV1beta1NamespacedStatefulSet(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchAppsV1beta1NamespacedStatefulSetOptionalParams | msRest.ServiceCallback<Models.V1beta1StatefulSet>, callback?: msRest.ServiceCallback<Models.V1beta1StatefulSet>): Promise<Models.PatchAppsV1beta1NamespacedStatefulSetResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      patchAppsV1beta1NamespacedStatefulSetOperationSpec,
      callback) as Promise<Models.PatchAppsV1beta1NamespacedStatefulSetResponse>;
  }

  /**
   * read scale of the specified StatefulSet
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadAppsV1beta1NamespacedStatefulSetScaleResponse>
   */
  readAppsV1beta1NamespacedStatefulSetScale(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadAppsV1beta1NamespacedStatefulSetScaleOptionalParams): Promise<Models.ReadAppsV1beta1NamespacedStatefulSetScaleResponse>;
  /**
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readAppsV1beta1NamespacedStatefulSetScale(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1beta1Scale>): void;
  /**
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readAppsV1beta1NamespacedStatefulSetScale(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadAppsV1beta1NamespacedStatefulSetScaleOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1Scale>): void;
  readAppsV1beta1NamespacedStatefulSetScale(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadAppsV1beta1NamespacedStatefulSetScaleOptionalParams | msRest.ServiceCallback<Models.V1beta1Scale>, callback?: msRest.ServiceCallback<Models.V1beta1Scale>): Promise<Models.ReadAppsV1beta1NamespacedStatefulSetScaleResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readAppsV1beta1NamespacedStatefulSetScaleOperationSpec,
      callback) as Promise<Models.ReadAppsV1beta1NamespacedStatefulSetScaleResponse>;
  }

  /**
   * replace scale of the specified StatefulSet
   * @param body
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceAppsV1beta1NamespacedStatefulSetScaleResponse>
   */
  replaceAppsV1beta1NamespacedStatefulSetScale(body: Models.V1beta1Scale, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceAppsV1beta1NamespacedStatefulSetScaleOptionalParams): Promise<Models.ReplaceAppsV1beta1NamespacedStatefulSetScaleResponse>;
  /**
   * @param body
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replaceAppsV1beta1NamespacedStatefulSetScale(body: Models.V1beta1Scale, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1beta1Scale>): void;
  /**
   * @param body
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceAppsV1beta1NamespacedStatefulSetScale(body: Models.V1beta1Scale, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplaceAppsV1beta1NamespacedStatefulSetScaleOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1Scale>): void;
  replaceAppsV1beta1NamespacedStatefulSetScale(body: Models.V1beta1Scale, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceAppsV1beta1NamespacedStatefulSetScaleOptionalParams | msRest.ServiceCallback<Models.V1beta1Scale>, callback?: msRest.ServiceCallback<Models.V1beta1Scale>): Promise<Models.ReplaceAppsV1beta1NamespacedStatefulSetScaleResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replaceAppsV1beta1NamespacedStatefulSetScaleOperationSpec,
      callback) as Promise<Models.ReplaceAppsV1beta1NamespacedStatefulSetScaleResponse>;
  }

  /**
   * partially update scale of the specified StatefulSet
   * @param body
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchAppsV1beta1NamespacedStatefulSetScaleResponse>
   */
  patchAppsV1beta1NamespacedStatefulSetScale(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchAppsV1beta1NamespacedStatefulSetScaleOptionalParams): Promise<Models.PatchAppsV1beta1NamespacedStatefulSetScaleResponse>;
  /**
   * @param body
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  patchAppsV1beta1NamespacedStatefulSetScale(body: any, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1beta1Scale>): void;
  /**
   * @param body
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  patchAppsV1beta1NamespacedStatefulSetScale(body: any, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesPatchAppsV1beta1NamespacedStatefulSetScaleOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1Scale>): void;
  patchAppsV1beta1NamespacedStatefulSetScale(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchAppsV1beta1NamespacedStatefulSetScaleOptionalParams | msRest.ServiceCallback<Models.V1beta1Scale>, callback?: msRest.ServiceCallback<Models.V1beta1Scale>): Promise<Models.PatchAppsV1beta1NamespacedStatefulSetScaleResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      patchAppsV1beta1NamespacedStatefulSetScaleOperationSpec,
      callback) as Promise<Models.PatchAppsV1beta1NamespacedStatefulSetScaleResponse>;
  }

  /**
   * read status of the specified StatefulSet
   * @param name name of the StatefulSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadAppsV1beta1NamespacedStatefulSetStatusResponse>
   */
  readAppsV1beta1NamespacedStatefulSetStatus(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadAppsV1beta1NamespacedStatefulSetStatusOptionalParams): Promise<Models.ReadAppsV1beta1NamespacedStatefulSetStatusResponse>;
  /**
   * @param name name of the StatefulSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readAppsV1beta1NamespacedStatefulSetStatus(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1beta1StatefulSet>): void;
  /**
   * @param name name of the StatefulSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readAppsV1beta1NamespacedStatefulSetStatus(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadAppsV1beta1NamespacedStatefulSetStatusOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1StatefulSet>): void;
  readAppsV1beta1NamespacedStatefulSetStatus(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadAppsV1beta1NamespacedStatefulSetStatusOptionalParams | msRest.ServiceCallback<Models.V1beta1StatefulSet>, callback?: msRest.ServiceCallback<Models.V1beta1StatefulSet>): Promise<Models.ReadAppsV1beta1NamespacedStatefulSetStatusResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readAppsV1beta1NamespacedStatefulSetStatusOperationSpec,
      callback) as Promise<Models.ReadAppsV1beta1NamespacedStatefulSetStatusResponse>;
  }

  /**
   * replace status of the specified StatefulSet
   * @param body
   * @param name name of the StatefulSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceAppsV1beta1NamespacedStatefulSetStatusResponse>
   */
  replaceAppsV1beta1NamespacedStatefulSetStatus(body: Models.V1beta1StatefulSet, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceAppsV1beta1NamespacedStatefulSetStatusOptionalParams): Promise<Models.ReplaceAppsV1beta1NamespacedStatefulSetStatusResponse>;
  /**
   * @param body
   * @param name name of the StatefulSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replaceAppsV1beta1NamespacedStatefulSetStatus(body: Models.V1beta1StatefulSet, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1beta1StatefulSet>): void;
  /**
   * @param body
   * @param name name of the StatefulSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceAppsV1beta1NamespacedStatefulSetStatus(body: Models.V1beta1StatefulSet, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplaceAppsV1beta1NamespacedStatefulSetStatusOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1StatefulSet>): void;
  replaceAppsV1beta1NamespacedStatefulSetStatus(body: Models.V1beta1StatefulSet, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceAppsV1beta1NamespacedStatefulSetStatusOptionalParams | msRest.ServiceCallback<Models.V1beta1StatefulSet>, callback?: msRest.ServiceCallback<Models.V1beta1StatefulSet>): Promise<Models.ReplaceAppsV1beta1NamespacedStatefulSetStatusResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replaceAppsV1beta1NamespacedStatefulSetStatusOperationSpec,
      callback) as Promise<Models.ReplaceAppsV1beta1NamespacedStatefulSetStatusResponse>;
  }

  /**
   * partially update status of the specified StatefulSet
   * @param body
   * @param name name of the StatefulSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchAppsV1beta1NamespacedStatefulSetStatusResponse>
   */
  patchAppsV1beta1NamespacedStatefulSetStatus(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchAppsV1beta1NamespacedStatefulSetStatusOptionalParams): Promise<Models.PatchAppsV1beta1NamespacedStatefulSetStatusResponse>;
  /**
   * @param body
   * @param name name of the StatefulSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  patchAppsV1beta1NamespacedStatefulSetStatus(body: any, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1beta1StatefulSet>): void;
  /**
   * @param body
   * @param name name of the StatefulSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  patchAppsV1beta1NamespacedStatefulSetStatus(body: any, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesPatchAppsV1beta1NamespacedStatefulSetStatusOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1StatefulSet>): void;
  patchAppsV1beta1NamespacedStatefulSetStatus(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchAppsV1beta1NamespacedStatefulSetStatusOptionalParams | msRest.ServiceCallback<Models.V1beta1StatefulSet>, callback?: msRest.ServiceCallback<Models.V1beta1StatefulSet>): Promise<Models.PatchAppsV1beta1NamespacedStatefulSetStatusResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      patchAppsV1beta1NamespacedStatefulSetStatusOperationSpec,
      callback) as Promise<Models.PatchAppsV1beta1NamespacedStatefulSetStatusResponse>;
  }

  /**
   * list or watch objects of kind StatefulSet
   * @param [options] The optional parameters
   * @returns Promise<Models.ListAppsV1beta1StatefulSetForAllNamespacesResponse>
   */
  listAppsV1beta1StatefulSetForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListAppsV1beta1StatefulSetForAllNamespacesOptionalParams): Promise<Models.ListAppsV1beta1StatefulSetForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  listAppsV1beta1StatefulSetForAllNamespaces(callback: msRest.ServiceCallback<Models.V1beta1StatefulSetList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listAppsV1beta1StatefulSetForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesListAppsV1beta1StatefulSetForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1StatefulSetList>): void;
  listAppsV1beta1StatefulSetForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListAppsV1beta1StatefulSetForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1beta1StatefulSetList>, callback?: msRest.ServiceCallback<Models.V1beta1StatefulSetList>): Promise<Models.ListAppsV1beta1StatefulSetForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listAppsV1beta1StatefulSetForAllNamespacesOperationSpec,
      callback) as Promise<Models.ListAppsV1beta1StatefulSetForAllNamespacesResponse>;
  }

  /**
   * watch individual changes to a list of ControllerRevision
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchAppsV1beta1ControllerRevisionListForAllNamespacesResponse>
   */
  watchAppsV1beta1ControllerRevisionListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchAppsV1beta1ControllerRevisionListForAllNamespacesOptionalParams): Promise<Models.WatchAppsV1beta1ControllerRevisionListForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  watchAppsV1beta1ControllerRevisionListForAllNamespaces(callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  watchAppsV1beta1ControllerRevisionListForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesWatchAppsV1beta1ControllerRevisionListForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchAppsV1beta1ControllerRevisionListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchAppsV1beta1ControllerRevisionListForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchAppsV1beta1ControllerRevisionListForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      watchAppsV1beta1ControllerRevisionListForAllNamespacesOperationSpec,
      callback) as Promise<Models.WatchAppsV1beta1ControllerRevisionListForAllNamespacesResponse>;
  }

  /**
   * watch individual changes to a list of Deployment
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchAppsV1beta1DeploymentListForAllNamespacesResponse>
   */
  watchAppsV1beta1DeploymentListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchAppsV1beta1DeploymentListForAllNamespacesOptionalParams): Promise<Models.WatchAppsV1beta1DeploymentListForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  watchAppsV1beta1DeploymentListForAllNamespaces(callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  watchAppsV1beta1DeploymentListForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesWatchAppsV1beta1DeploymentListForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchAppsV1beta1DeploymentListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchAppsV1beta1DeploymentListForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchAppsV1beta1DeploymentListForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      watchAppsV1beta1DeploymentListForAllNamespacesOperationSpec,
      callback) as Promise<Models.WatchAppsV1beta1DeploymentListForAllNamespacesResponse>;
  }

  /**
   * watch individual changes to a list of ControllerRevision
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchAppsV1beta1NamespacedControllerRevisionListResponse>
   */
  watchAppsV1beta1NamespacedControllerRevisionList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchAppsV1beta1NamespacedControllerRevisionListOptionalParams): Promise<Models.WatchAppsV1beta1NamespacedControllerRevisionListResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchAppsV1beta1NamespacedControllerRevisionList(namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchAppsV1beta1NamespacedControllerRevisionList(namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchAppsV1beta1NamespacedControllerRevisionListOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchAppsV1beta1NamespacedControllerRevisionList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchAppsV1beta1NamespacedControllerRevisionListOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchAppsV1beta1NamespacedControllerRevisionListResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      watchAppsV1beta1NamespacedControllerRevisionListOperationSpec,
      callback) as Promise<Models.WatchAppsV1beta1NamespacedControllerRevisionListResponse>;
  }

  /**
   * watch changes to an object of kind ControllerRevision
   * @param name name of the ControllerRevision
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchAppsV1beta1NamespacedControllerRevisionResponse>
   */
  watchAppsV1beta1NamespacedControllerRevision(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchAppsV1beta1NamespacedControllerRevisionOptionalParams): Promise<Models.WatchAppsV1beta1NamespacedControllerRevisionResponse>;
  /**
   * @param name name of the ControllerRevision
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchAppsV1beta1NamespacedControllerRevision(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param name name of the ControllerRevision
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchAppsV1beta1NamespacedControllerRevision(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchAppsV1beta1NamespacedControllerRevisionOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchAppsV1beta1NamespacedControllerRevision(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchAppsV1beta1NamespacedControllerRevisionOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchAppsV1beta1NamespacedControllerRevisionResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      watchAppsV1beta1NamespacedControllerRevisionOperationSpec,
      callback) as Promise<Models.WatchAppsV1beta1NamespacedControllerRevisionResponse>;
  }

  /**
   * watch individual changes to a list of Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchAppsV1beta1NamespacedDeploymentListResponse>
   */
  watchAppsV1beta1NamespacedDeploymentList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchAppsV1beta1NamespacedDeploymentListOptionalParams): Promise<Models.WatchAppsV1beta1NamespacedDeploymentListResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchAppsV1beta1NamespacedDeploymentList(namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchAppsV1beta1NamespacedDeploymentList(namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchAppsV1beta1NamespacedDeploymentListOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchAppsV1beta1NamespacedDeploymentList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchAppsV1beta1NamespacedDeploymentListOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchAppsV1beta1NamespacedDeploymentListResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      watchAppsV1beta1NamespacedDeploymentListOperationSpec,
      callback) as Promise<Models.WatchAppsV1beta1NamespacedDeploymentListResponse>;
  }

  /**
   * watch changes to an object of kind Deployment
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchAppsV1beta1NamespacedDeploymentResponse>
   */
  watchAppsV1beta1NamespacedDeployment(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchAppsV1beta1NamespacedDeploymentOptionalParams): Promise<Models.WatchAppsV1beta1NamespacedDeploymentResponse>;
  /**
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchAppsV1beta1NamespacedDeployment(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchAppsV1beta1NamespacedDeployment(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchAppsV1beta1NamespacedDeploymentOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchAppsV1beta1NamespacedDeployment(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchAppsV1beta1NamespacedDeploymentOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchAppsV1beta1NamespacedDeploymentResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      watchAppsV1beta1NamespacedDeploymentOperationSpec,
      callback) as Promise<Models.WatchAppsV1beta1NamespacedDeploymentResponse>;
  }

  /**
   * watch individual changes to a list of StatefulSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchAppsV1beta1NamespacedStatefulSetListResponse>
   */
  watchAppsV1beta1NamespacedStatefulSetList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchAppsV1beta1NamespacedStatefulSetListOptionalParams): Promise<Models.WatchAppsV1beta1NamespacedStatefulSetListResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchAppsV1beta1NamespacedStatefulSetList(namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchAppsV1beta1NamespacedStatefulSetList(namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchAppsV1beta1NamespacedStatefulSetListOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchAppsV1beta1NamespacedStatefulSetList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchAppsV1beta1NamespacedStatefulSetListOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchAppsV1beta1NamespacedStatefulSetListResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      watchAppsV1beta1NamespacedStatefulSetListOperationSpec,
      callback) as Promise<Models.WatchAppsV1beta1NamespacedStatefulSetListResponse>;
  }

  /**
   * watch changes to an object of kind StatefulSet
   * @param name name of the StatefulSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchAppsV1beta1NamespacedStatefulSetResponse>
   */
  watchAppsV1beta1NamespacedStatefulSet(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchAppsV1beta1NamespacedStatefulSetOptionalParams): Promise<Models.WatchAppsV1beta1NamespacedStatefulSetResponse>;
  /**
   * @param name name of the StatefulSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchAppsV1beta1NamespacedStatefulSet(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param name name of the StatefulSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchAppsV1beta1NamespacedStatefulSet(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchAppsV1beta1NamespacedStatefulSetOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchAppsV1beta1NamespacedStatefulSet(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchAppsV1beta1NamespacedStatefulSetOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchAppsV1beta1NamespacedStatefulSetResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      watchAppsV1beta1NamespacedStatefulSetOperationSpec,
      callback) as Promise<Models.WatchAppsV1beta1NamespacedStatefulSetResponse>;
  }

  /**
   * watch individual changes to a list of StatefulSet
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchAppsV1beta1StatefulSetListForAllNamespacesResponse>
   */
  watchAppsV1beta1StatefulSetListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchAppsV1beta1StatefulSetListForAllNamespacesOptionalParams): Promise<Models.WatchAppsV1beta1StatefulSetListForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  watchAppsV1beta1StatefulSetListForAllNamespaces(callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  watchAppsV1beta1StatefulSetListForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesWatchAppsV1beta1StatefulSetListForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchAppsV1beta1StatefulSetListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchAppsV1beta1StatefulSetListForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchAppsV1beta1StatefulSetListForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      watchAppsV1beta1StatefulSetListForAllNamespacesOperationSpec,
      callback) as Promise<Models.WatchAppsV1beta1StatefulSetListForAllNamespacesResponse>;
  }

  /**
   * get available resources
   * @param [options] The optional parameters
   * @returns Promise<Models.GetAppsV1beta2APIResourcesResponse>
   */
  getAppsV1beta2APIResources(options?: msRest.RequestOptionsBase): Promise<Models.GetAppsV1beta2APIResourcesResponse>;
  /**
   * @param callback The callback
   */
  getAppsV1beta2APIResources(callback: msRest.ServiceCallback<Models.V1APIResourceList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getAppsV1beta2APIResources(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.V1APIResourceList>): void;
  getAppsV1beta2APIResources(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.V1APIResourceList>, callback?: msRest.ServiceCallback<Models.V1APIResourceList>): Promise<Models.GetAppsV1beta2APIResourcesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getAppsV1beta2APIResourcesOperationSpec,
      callback) as Promise<Models.GetAppsV1beta2APIResourcesResponse>;
  }

  /**
   * list or watch objects of kind ControllerRevision
   * @param [options] The optional parameters
   * @returns Promise<Models.ListAppsV1beta2ControllerRevisionForAllNamespacesResponse>
   */
  listAppsV1beta2ControllerRevisionForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListAppsV1beta2ControllerRevisionForAllNamespacesOptionalParams): Promise<Models.ListAppsV1beta2ControllerRevisionForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  listAppsV1beta2ControllerRevisionForAllNamespaces(callback: msRest.ServiceCallback<Models.V1beta2ControllerRevisionList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listAppsV1beta2ControllerRevisionForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesListAppsV1beta2ControllerRevisionForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1beta2ControllerRevisionList>): void;
  listAppsV1beta2ControllerRevisionForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListAppsV1beta2ControllerRevisionForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1beta2ControllerRevisionList>, callback?: msRest.ServiceCallback<Models.V1beta2ControllerRevisionList>): Promise<Models.ListAppsV1beta2ControllerRevisionForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listAppsV1beta2ControllerRevisionForAllNamespacesOperationSpec,
      callback) as Promise<Models.ListAppsV1beta2ControllerRevisionForAllNamespacesResponse>;
  }

  /**
   * list or watch objects of kind DaemonSet
   * @param [options] The optional parameters
   * @returns Promise<Models.ListAppsV1beta2DaemonSetForAllNamespacesResponse>
   */
  listAppsV1beta2DaemonSetForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListAppsV1beta2DaemonSetForAllNamespacesOptionalParams): Promise<Models.ListAppsV1beta2DaemonSetForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  listAppsV1beta2DaemonSetForAllNamespaces(callback: msRest.ServiceCallback<Models.V1beta2DaemonSetList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listAppsV1beta2DaemonSetForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesListAppsV1beta2DaemonSetForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1beta2DaemonSetList>): void;
  listAppsV1beta2DaemonSetForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListAppsV1beta2DaemonSetForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1beta2DaemonSetList>, callback?: msRest.ServiceCallback<Models.V1beta2DaemonSetList>): Promise<Models.ListAppsV1beta2DaemonSetForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listAppsV1beta2DaemonSetForAllNamespacesOperationSpec,
      callback) as Promise<Models.ListAppsV1beta2DaemonSetForAllNamespacesResponse>;
  }

  /**
   * list or watch objects of kind Deployment
   * @param [options] The optional parameters
   * @returns Promise<Models.ListAppsV1beta2DeploymentForAllNamespacesResponse>
   */
  listAppsV1beta2DeploymentForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListAppsV1beta2DeploymentForAllNamespacesOptionalParams): Promise<Models.ListAppsV1beta2DeploymentForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  listAppsV1beta2DeploymentForAllNamespaces(callback: msRest.ServiceCallback<Models.V1beta2DeploymentList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listAppsV1beta2DeploymentForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesListAppsV1beta2DeploymentForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1beta2DeploymentList>): void;
  listAppsV1beta2DeploymentForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListAppsV1beta2DeploymentForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1beta2DeploymentList>, callback?: msRest.ServiceCallback<Models.V1beta2DeploymentList>): Promise<Models.ListAppsV1beta2DeploymentForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listAppsV1beta2DeploymentForAllNamespacesOperationSpec,
      callback) as Promise<Models.ListAppsV1beta2DeploymentForAllNamespacesResponse>;
  }

  /**
   * list or watch objects of kind ControllerRevision
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ListAppsV1beta2NamespacedControllerRevisionResponse>
   */
  listAppsV1beta2NamespacedControllerRevision(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListAppsV1beta2NamespacedControllerRevisionOptionalParams): Promise<Models.ListAppsV1beta2NamespacedControllerRevisionResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  listAppsV1beta2NamespacedControllerRevision(namespace: string, callback: msRest.ServiceCallback<Models.V1beta2ControllerRevisionList>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  listAppsV1beta2NamespacedControllerRevision(namespace: string, options: Models.OpenShiftAPIwithKubernetesListAppsV1beta2NamespacedControllerRevisionOptionalParams, callback: msRest.ServiceCallback<Models.V1beta2ControllerRevisionList>): void;
  listAppsV1beta2NamespacedControllerRevision(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListAppsV1beta2NamespacedControllerRevisionOptionalParams | msRest.ServiceCallback<Models.V1beta2ControllerRevisionList>, callback?: msRest.ServiceCallback<Models.V1beta2ControllerRevisionList>): Promise<Models.ListAppsV1beta2NamespacedControllerRevisionResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      listAppsV1beta2NamespacedControllerRevisionOperationSpec,
      callback) as Promise<Models.ListAppsV1beta2NamespacedControllerRevisionResponse>;
  }

  /**
   * create a ControllerRevision
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateAppsV1beta2NamespacedControllerRevisionResponse>
   */
  createAppsV1beta2NamespacedControllerRevision(body: Models.V1beta2ControllerRevision, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateAppsV1beta2NamespacedControllerRevisionOptionalParams): Promise<Models.CreateAppsV1beta2NamespacedControllerRevisionResponse>;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  createAppsV1beta2NamespacedControllerRevision(body: Models.V1beta2ControllerRevision, namespace: string, callback: msRest.ServiceCallback<Models.V1beta2ControllerRevision>): void;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  createAppsV1beta2NamespacedControllerRevision(body: Models.V1beta2ControllerRevision, namespace: string, options: Models.OpenShiftAPIwithKubernetesCreateAppsV1beta2NamespacedControllerRevisionOptionalParams, callback: msRest.ServiceCallback<Models.V1beta2ControllerRevision>): void;
  createAppsV1beta2NamespacedControllerRevision(body: Models.V1beta2ControllerRevision, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateAppsV1beta2NamespacedControllerRevisionOptionalParams | msRest.ServiceCallback<Models.V1beta2ControllerRevision>, callback?: msRest.ServiceCallback<Models.V1beta2ControllerRevision>): Promise<Models.CreateAppsV1beta2NamespacedControllerRevisionResponse> {
    return this.sendOperationRequest(
      {
        body,
        namespace,
        options
      },
      createAppsV1beta2NamespacedControllerRevisionOperationSpec,
      callback) as Promise<Models.CreateAppsV1beta2NamespacedControllerRevisionResponse>;
  }

  /**
   * delete collection of ControllerRevision
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteAppsV1beta2CollectionNamespacedControllerRevisionResponse>
   */
  deleteAppsV1beta2CollectionNamespacedControllerRevision(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteAppsV1beta2CollectionNamespacedControllerRevisionOptionalParams): Promise<Models.DeleteAppsV1beta2CollectionNamespacedControllerRevisionResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteAppsV1beta2CollectionNamespacedControllerRevision(namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteAppsV1beta2CollectionNamespacedControllerRevision(namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteAppsV1beta2CollectionNamespacedControllerRevisionOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteAppsV1beta2CollectionNamespacedControllerRevision(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteAppsV1beta2CollectionNamespacedControllerRevisionOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteAppsV1beta2CollectionNamespacedControllerRevisionResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      deleteAppsV1beta2CollectionNamespacedControllerRevisionOperationSpec,
      callback) as Promise<Models.DeleteAppsV1beta2CollectionNamespacedControllerRevisionResponse>;
  }

  /**
   * read the specified ControllerRevision
   * @param name name of the ControllerRevision
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadAppsV1beta2NamespacedControllerRevisionResponse>
   */
  readAppsV1beta2NamespacedControllerRevision(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadAppsV1beta2NamespacedControllerRevisionOptionalParams): Promise<Models.ReadAppsV1beta2NamespacedControllerRevisionResponse>;
  /**
   * @param name name of the ControllerRevision
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readAppsV1beta2NamespacedControllerRevision(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1beta2ControllerRevision>): void;
  /**
   * @param name name of the ControllerRevision
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readAppsV1beta2NamespacedControllerRevision(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadAppsV1beta2NamespacedControllerRevisionOptionalParams, callback: msRest.ServiceCallback<Models.V1beta2ControllerRevision>): void;
  readAppsV1beta2NamespacedControllerRevision(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadAppsV1beta2NamespacedControllerRevisionOptionalParams | msRest.ServiceCallback<Models.V1beta2ControllerRevision>, callback?: msRest.ServiceCallback<Models.V1beta2ControllerRevision>): Promise<Models.ReadAppsV1beta2NamespacedControllerRevisionResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readAppsV1beta2NamespacedControllerRevisionOperationSpec,
      callback) as Promise<Models.ReadAppsV1beta2NamespacedControllerRevisionResponse>;
  }

  /**
   * replace the specified ControllerRevision
   * @param body
   * @param name name of the ControllerRevision
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceAppsV1beta2NamespacedControllerRevisionResponse>
   */
  replaceAppsV1beta2NamespacedControllerRevision(body: Models.V1beta2ControllerRevision, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceAppsV1beta2NamespacedControllerRevisionOptionalParams): Promise<Models.ReplaceAppsV1beta2NamespacedControllerRevisionResponse>;
  /**
   * @param body
   * @param name name of the ControllerRevision
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replaceAppsV1beta2NamespacedControllerRevision(body: Models.V1beta2ControllerRevision, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1beta2ControllerRevision>): void;
  /**
   * @param body
   * @param name name of the ControllerRevision
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceAppsV1beta2NamespacedControllerRevision(body: Models.V1beta2ControllerRevision, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplaceAppsV1beta2NamespacedControllerRevisionOptionalParams, callback: msRest.ServiceCallback<Models.V1beta2ControllerRevision>): void;
  replaceAppsV1beta2NamespacedControllerRevision(body: Models.V1beta2ControllerRevision, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceAppsV1beta2NamespacedControllerRevisionOptionalParams | msRest.ServiceCallback<Models.V1beta2ControllerRevision>, callback?: msRest.ServiceCallback<Models.V1beta2ControllerRevision>): Promise<Models.ReplaceAppsV1beta2NamespacedControllerRevisionResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replaceAppsV1beta2NamespacedControllerRevisionOperationSpec,
      callback) as Promise<Models.ReplaceAppsV1beta2NamespacedControllerRevisionResponse>;
  }

  /**
   * delete a ControllerRevision
   * @param body
   * @param name name of the ControllerRevision
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteAppsV1beta2NamespacedControllerRevisionResponse>
   */
  deleteAppsV1beta2NamespacedControllerRevision(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteAppsV1beta2NamespacedControllerRevisionOptionalParams): Promise<Models.DeleteAppsV1beta2NamespacedControllerRevisionResponse>;
  /**
   * @param body
   * @param name name of the ControllerRevision
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteAppsV1beta2NamespacedControllerRevision(body: Models.V1DeleteOptions, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param name name of the ControllerRevision
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteAppsV1beta2NamespacedControllerRevision(body: Models.V1DeleteOptions, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteAppsV1beta2NamespacedControllerRevisionOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteAppsV1beta2NamespacedControllerRevision(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteAppsV1beta2NamespacedControllerRevisionOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteAppsV1beta2NamespacedControllerRevisionResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      deleteAppsV1beta2NamespacedControllerRevisionOperationSpec,
      callback) as Promise<Models.DeleteAppsV1beta2NamespacedControllerRevisionResponse>;
  }

  /**
   * partially update the specified ControllerRevision
   * @param body
   * @param name name of the ControllerRevision
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchAppsV1beta2NamespacedControllerRevisionResponse>
   */
  patchAppsV1beta2NamespacedControllerRevision(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchAppsV1beta2NamespacedControllerRevisionOptionalParams): Promise<Models.PatchAppsV1beta2NamespacedControllerRevisionResponse>;
  /**
   * @param body
   * @param name name of the ControllerRevision
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  patchAppsV1beta2NamespacedControllerRevision(body: any, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1beta2ControllerRevision>): void;
  /**
   * @param body
   * @param name name of the ControllerRevision
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  patchAppsV1beta2NamespacedControllerRevision(body: any, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesPatchAppsV1beta2NamespacedControllerRevisionOptionalParams, callback: msRest.ServiceCallback<Models.V1beta2ControllerRevision>): void;
  patchAppsV1beta2NamespacedControllerRevision(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchAppsV1beta2NamespacedControllerRevisionOptionalParams | msRest.ServiceCallback<Models.V1beta2ControllerRevision>, callback?: msRest.ServiceCallback<Models.V1beta2ControllerRevision>): Promise<Models.PatchAppsV1beta2NamespacedControllerRevisionResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      patchAppsV1beta2NamespacedControllerRevisionOperationSpec,
      callback) as Promise<Models.PatchAppsV1beta2NamespacedControllerRevisionResponse>;
  }

  /**
   * list or watch objects of kind DaemonSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ListAppsV1beta2NamespacedDaemonSetResponse>
   */
  listAppsV1beta2NamespacedDaemonSet(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListAppsV1beta2NamespacedDaemonSetOptionalParams): Promise<Models.ListAppsV1beta2NamespacedDaemonSetResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  listAppsV1beta2NamespacedDaemonSet(namespace: string, callback: msRest.ServiceCallback<Models.V1beta2DaemonSetList>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  listAppsV1beta2NamespacedDaemonSet(namespace: string, options: Models.OpenShiftAPIwithKubernetesListAppsV1beta2NamespacedDaemonSetOptionalParams, callback: msRest.ServiceCallback<Models.V1beta2DaemonSetList>): void;
  listAppsV1beta2NamespacedDaemonSet(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListAppsV1beta2NamespacedDaemonSetOptionalParams | msRest.ServiceCallback<Models.V1beta2DaemonSetList>, callback?: msRest.ServiceCallback<Models.V1beta2DaemonSetList>): Promise<Models.ListAppsV1beta2NamespacedDaemonSetResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      listAppsV1beta2NamespacedDaemonSetOperationSpec,
      callback) as Promise<Models.ListAppsV1beta2NamespacedDaemonSetResponse>;
  }

  /**
   * create a DaemonSet
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateAppsV1beta2NamespacedDaemonSetResponse>
   */
  createAppsV1beta2NamespacedDaemonSet(body: Models.V1beta2DaemonSet, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateAppsV1beta2NamespacedDaemonSetOptionalParams): Promise<Models.CreateAppsV1beta2NamespacedDaemonSetResponse>;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  createAppsV1beta2NamespacedDaemonSet(body: Models.V1beta2DaemonSet, namespace: string, callback: msRest.ServiceCallback<Models.V1beta2DaemonSet>): void;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  createAppsV1beta2NamespacedDaemonSet(body: Models.V1beta2DaemonSet, namespace: string, options: Models.OpenShiftAPIwithKubernetesCreateAppsV1beta2NamespacedDaemonSetOptionalParams, callback: msRest.ServiceCallback<Models.V1beta2DaemonSet>): void;
  createAppsV1beta2NamespacedDaemonSet(body: Models.V1beta2DaemonSet, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateAppsV1beta2NamespacedDaemonSetOptionalParams | msRest.ServiceCallback<Models.V1beta2DaemonSet>, callback?: msRest.ServiceCallback<Models.V1beta2DaemonSet>): Promise<Models.CreateAppsV1beta2NamespacedDaemonSetResponse> {
    return this.sendOperationRequest(
      {
        body,
        namespace,
        options
      },
      createAppsV1beta2NamespacedDaemonSetOperationSpec,
      callback) as Promise<Models.CreateAppsV1beta2NamespacedDaemonSetResponse>;
  }

  /**
   * delete collection of DaemonSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteAppsV1beta2CollectionNamespacedDaemonSetResponse>
   */
  deleteAppsV1beta2CollectionNamespacedDaemonSet(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteAppsV1beta2CollectionNamespacedDaemonSetOptionalParams): Promise<Models.DeleteAppsV1beta2CollectionNamespacedDaemonSetResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteAppsV1beta2CollectionNamespacedDaemonSet(namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteAppsV1beta2CollectionNamespacedDaemonSet(namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteAppsV1beta2CollectionNamespacedDaemonSetOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteAppsV1beta2CollectionNamespacedDaemonSet(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteAppsV1beta2CollectionNamespacedDaemonSetOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteAppsV1beta2CollectionNamespacedDaemonSetResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      deleteAppsV1beta2CollectionNamespacedDaemonSetOperationSpec,
      callback) as Promise<Models.DeleteAppsV1beta2CollectionNamespacedDaemonSetResponse>;
  }

  /**
   * read the specified DaemonSet
   * @param name name of the DaemonSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadAppsV1beta2NamespacedDaemonSetResponse>
   */
  readAppsV1beta2NamespacedDaemonSet(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadAppsV1beta2NamespacedDaemonSetOptionalParams): Promise<Models.ReadAppsV1beta2NamespacedDaemonSetResponse>;
  /**
   * @param name name of the DaemonSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readAppsV1beta2NamespacedDaemonSet(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1beta2DaemonSet>): void;
  /**
   * @param name name of the DaemonSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readAppsV1beta2NamespacedDaemonSet(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadAppsV1beta2NamespacedDaemonSetOptionalParams, callback: msRest.ServiceCallback<Models.V1beta2DaemonSet>): void;
  readAppsV1beta2NamespacedDaemonSet(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadAppsV1beta2NamespacedDaemonSetOptionalParams | msRest.ServiceCallback<Models.V1beta2DaemonSet>, callback?: msRest.ServiceCallback<Models.V1beta2DaemonSet>): Promise<Models.ReadAppsV1beta2NamespacedDaemonSetResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readAppsV1beta2NamespacedDaemonSetOperationSpec,
      callback) as Promise<Models.ReadAppsV1beta2NamespacedDaemonSetResponse>;
  }

  /**
   * replace the specified DaemonSet
   * @param body
   * @param name name of the DaemonSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceAppsV1beta2NamespacedDaemonSetResponse>
   */
  replaceAppsV1beta2NamespacedDaemonSet(body: Models.V1beta2DaemonSet, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceAppsV1beta2NamespacedDaemonSetOptionalParams): Promise<Models.ReplaceAppsV1beta2NamespacedDaemonSetResponse>;
  /**
   * @param body
   * @param name name of the DaemonSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replaceAppsV1beta2NamespacedDaemonSet(body: Models.V1beta2DaemonSet, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1beta2DaemonSet>): void;
  /**
   * @param body
   * @param name name of the DaemonSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceAppsV1beta2NamespacedDaemonSet(body: Models.V1beta2DaemonSet, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplaceAppsV1beta2NamespacedDaemonSetOptionalParams, callback: msRest.ServiceCallback<Models.V1beta2DaemonSet>): void;
  replaceAppsV1beta2NamespacedDaemonSet(body: Models.V1beta2DaemonSet, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceAppsV1beta2NamespacedDaemonSetOptionalParams | msRest.ServiceCallback<Models.V1beta2DaemonSet>, callback?: msRest.ServiceCallback<Models.V1beta2DaemonSet>): Promise<Models.ReplaceAppsV1beta2NamespacedDaemonSetResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replaceAppsV1beta2NamespacedDaemonSetOperationSpec,
      callback) as Promise<Models.ReplaceAppsV1beta2NamespacedDaemonSetResponse>;
  }

  /**
   * delete a DaemonSet
   * @param body
   * @param name name of the DaemonSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteAppsV1beta2NamespacedDaemonSetResponse>
   */
  deleteAppsV1beta2NamespacedDaemonSet(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteAppsV1beta2NamespacedDaemonSetOptionalParams): Promise<Models.DeleteAppsV1beta2NamespacedDaemonSetResponse>;
  /**
   * @param body
   * @param name name of the DaemonSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteAppsV1beta2NamespacedDaemonSet(body: Models.V1DeleteOptions, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param name name of the DaemonSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteAppsV1beta2NamespacedDaemonSet(body: Models.V1DeleteOptions, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteAppsV1beta2NamespacedDaemonSetOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteAppsV1beta2NamespacedDaemonSet(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteAppsV1beta2NamespacedDaemonSetOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteAppsV1beta2NamespacedDaemonSetResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      deleteAppsV1beta2NamespacedDaemonSetOperationSpec,
      callback) as Promise<Models.DeleteAppsV1beta2NamespacedDaemonSetResponse>;
  }

  /**
   * partially update the specified DaemonSet
   * @param body
   * @param name name of the DaemonSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchAppsV1beta2NamespacedDaemonSetResponse>
   */
  patchAppsV1beta2NamespacedDaemonSet(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchAppsV1beta2NamespacedDaemonSetOptionalParams): Promise<Models.PatchAppsV1beta2NamespacedDaemonSetResponse>;
  /**
   * @param body
   * @param name name of the DaemonSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  patchAppsV1beta2NamespacedDaemonSet(body: any, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1beta2DaemonSet>): void;
  /**
   * @param body
   * @param name name of the DaemonSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  patchAppsV1beta2NamespacedDaemonSet(body: any, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesPatchAppsV1beta2NamespacedDaemonSetOptionalParams, callback: msRest.ServiceCallback<Models.V1beta2DaemonSet>): void;
  patchAppsV1beta2NamespacedDaemonSet(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchAppsV1beta2NamespacedDaemonSetOptionalParams | msRest.ServiceCallback<Models.V1beta2DaemonSet>, callback?: msRest.ServiceCallback<Models.V1beta2DaemonSet>): Promise<Models.PatchAppsV1beta2NamespacedDaemonSetResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      patchAppsV1beta2NamespacedDaemonSetOperationSpec,
      callback) as Promise<Models.PatchAppsV1beta2NamespacedDaemonSetResponse>;
  }

  /**
   * read status of the specified DaemonSet
   * @param name name of the DaemonSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadAppsV1beta2NamespacedDaemonSetStatusResponse>
   */
  readAppsV1beta2NamespacedDaemonSetStatus(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadAppsV1beta2NamespacedDaemonSetStatusOptionalParams): Promise<Models.ReadAppsV1beta2NamespacedDaemonSetStatusResponse>;
  /**
   * @param name name of the DaemonSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readAppsV1beta2NamespacedDaemonSetStatus(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1beta2DaemonSet>): void;
  /**
   * @param name name of the DaemonSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readAppsV1beta2NamespacedDaemonSetStatus(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadAppsV1beta2NamespacedDaemonSetStatusOptionalParams, callback: msRest.ServiceCallback<Models.V1beta2DaemonSet>): void;
  readAppsV1beta2NamespacedDaemonSetStatus(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadAppsV1beta2NamespacedDaemonSetStatusOptionalParams | msRest.ServiceCallback<Models.V1beta2DaemonSet>, callback?: msRest.ServiceCallback<Models.V1beta2DaemonSet>): Promise<Models.ReadAppsV1beta2NamespacedDaemonSetStatusResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readAppsV1beta2NamespacedDaemonSetStatusOperationSpec,
      callback) as Promise<Models.ReadAppsV1beta2NamespacedDaemonSetStatusResponse>;
  }

  /**
   * replace status of the specified DaemonSet
   * @param body
   * @param name name of the DaemonSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceAppsV1beta2NamespacedDaemonSetStatusResponse>
   */
  replaceAppsV1beta2NamespacedDaemonSetStatus(body: Models.V1beta2DaemonSet, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceAppsV1beta2NamespacedDaemonSetStatusOptionalParams): Promise<Models.ReplaceAppsV1beta2NamespacedDaemonSetStatusResponse>;
  /**
   * @param body
   * @param name name of the DaemonSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replaceAppsV1beta2NamespacedDaemonSetStatus(body: Models.V1beta2DaemonSet, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1beta2DaemonSet>): void;
  /**
   * @param body
   * @param name name of the DaemonSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceAppsV1beta2NamespacedDaemonSetStatus(body: Models.V1beta2DaemonSet, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplaceAppsV1beta2NamespacedDaemonSetStatusOptionalParams, callback: msRest.ServiceCallback<Models.V1beta2DaemonSet>): void;
  replaceAppsV1beta2NamespacedDaemonSetStatus(body: Models.V1beta2DaemonSet, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceAppsV1beta2NamespacedDaemonSetStatusOptionalParams | msRest.ServiceCallback<Models.V1beta2DaemonSet>, callback?: msRest.ServiceCallback<Models.V1beta2DaemonSet>): Promise<Models.ReplaceAppsV1beta2NamespacedDaemonSetStatusResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replaceAppsV1beta2NamespacedDaemonSetStatusOperationSpec,
      callback) as Promise<Models.ReplaceAppsV1beta2NamespacedDaemonSetStatusResponse>;
  }

  /**
   * partially update status of the specified DaemonSet
   * @param body
   * @param name name of the DaemonSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchAppsV1beta2NamespacedDaemonSetStatusResponse>
   */
  patchAppsV1beta2NamespacedDaemonSetStatus(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchAppsV1beta2NamespacedDaemonSetStatusOptionalParams): Promise<Models.PatchAppsV1beta2NamespacedDaemonSetStatusResponse>;
  /**
   * @param body
   * @param name name of the DaemonSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  patchAppsV1beta2NamespacedDaemonSetStatus(body: any, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1beta2DaemonSet>): void;
  /**
   * @param body
   * @param name name of the DaemonSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  patchAppsV1beta2NamespacedDaemonSetStatus(body: any, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesPatchAppsV1beta2NamespacedDaemonSetStatusOptionalParams, callback: msRest.ServiceCallback<Models.V1beta2DaemonSet>): void;
  patchAppsV1beta2NamespacedDaemonSetStatus(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchAppsV1beta2NamespacedDaemonSetStatusOptionalParams | msRest.ServiceCallback<Models.V1beta2DaemonSet>, callback?: msRest.ServiceCallback<Models.V1beta2DaemonSet>): Promise<Models.PatchAppsV1beta2NamespacedDaemonSetStatusResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      patchAppsV1beta2NamespacedDaemonSetStatusOperationSpec,
      callback) as Promise<Models.PatchAppsV1beta2NamespacedDaemonSetStatusResponse>;
  }

  /**
   * list or watch objects of kind Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ListAppsV1beta2NamespacedDeploymentResponse>
   */
  listAppsV1beta2NamespacedDeployment(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListAppsV1beta2NamespacedDeploymentOptionalParams): Promise<Models.ListAppsV1beta2NamespacedDeploymentResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  listAppsV1beta2NamespacedDeployment(namespace: string, callback: msRest.ServiceCallback<Models.V1beta2DeploymentList>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  listAppsV1beta2NamespacedDeployment(namespace: string, options: Models.OpenShiftAPIwithKubernetesListAppsV1beta2NamespacedDeploymentOptionalParams, callback: msRest.ServiceCallback<Models.V1beta2DeploymentList>): void;
  listAppsV1beta2NamespacedDeployment(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListAppsV1beta2NamespacedDeploymentOptionalParams | msRest.ServiceCallback<Models.V1beta2DeploymentList>, callback?: msRest.ServiceCallback<Models.V1beta2DeploymentList>): Promise<Models.ListAppsV1beta2NamespacedDeploymentResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      listAppsV1beta2NamespacedDeploymentOperationSpec,
      callback) as Promise<Models.ListAppsV1beta2NamespacedDeploymentResponse>;
  }

  /**
   * create a Deployment
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateAppsV1beta2NamespacedDeploymentResponse>
   */
  createAppsV1beta2NamespacedDeployment(body: Models.V1beta2Deployment, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateAppsV1beta2NamespacedDeploymentOptionalParams): Promise<Models.CreateAppsV1beta2NamespacedDeploymentResponse>;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  createAppsV1beta2NamespacedDeployment(body: Models.V1beta2Deployment, namespace: string, callback: msRest.ServiceCallback<Models.V1beta2Deployment>): void;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  createAppsV1beta2NamespacedDeployment(body: Models.V1beta2Deployment, namespace: string, options: Models.OpenShiftAPIwithKubernetesCreateAppsV1beta2NamespacedDeploymentOptionalParams, callback: msRest.ServiceCallback<Models.V1beta2Deployment>): void;
  createAppsV1beta2NamespacedDeployment(body: Models.V1beta2Deployment, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateAppsV1beta2NamespacedDeploymentOptionalParams | msRest.ServiceCallback<Models.V1beta2Deployment>, callback?: msRest.ServiceCallback<Models.V1beta2Deployment>): Promise<Models.CreateAppsV1beta2NamespacedDeploymentResponse> {
    return this.sendOperationRequest(
      {
        body,
        namespace,
        options
      },
      createAppsV1beta2NamespacedDeploymentOperationSpec,
      callback) as Promise<Models.CreateAppsV1beta2NamespacedDeploymentResponse>;
  }

  /**
   * delete collection of Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteAppsV1beta2CollectionNamespacedDeploymentResponse>
   */
  deleteAppsV1beta2CollectionNamespacedDeployment(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteAppsV1beta2CollectionNamespacedDeploymentOptionalParams): Promise<Models.DeleteAppsV1beta2CollectionNamespacedDeploymentResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteAppsV1beta2CollectionNamespacedDeployment(namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteAppsV1beta2CollectionNamespacedDeployment(namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteAppsV1beta2CollectionNamespacedDeploymentOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteAppsV1beta2CollectionNamespacedDeployment(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteAppsV1beta2CollectionNamespacedDeploymentOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteAppsV1beta2CollectionNamespacedDeploymentResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      deleteAppsV1beta2CollectionNamespacedDeploymentOperationSpec,
      callback) as Promise<Models.DeleteAppsV1beta2CollectionNamespacedDeploymentResponse>;
  }

  /**
   * read the specified Deployment
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadAppsV1beta2NamespacedDeploymentResponse>
   */
  readAppsV1beta2NamespacedDeployment(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadAppsV1beta2NamespacedDeploymentOptionalParams): Promise<Models.ReadAppsV1beta2NamespacedDeploymentResponse>;
  /**
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readAppsV1beta2NamespacedDeployment(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1beta2Deployment>): void;
  /**
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readAppsV1beta2NamespacedDeployment(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadAppsV1beta2NamespacedDeploymentOptionalParams, callback: msRest.ServiceCallback<Models.V1beta2Deployment>): void;
  readAppsV1beta2NamespacedDeployment(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadAppsV1beta2NamespacedDeploymentOptionalParams | msRest.ServiceCallback<Models.V1beta2Deployment>, callback?: msRest.ServiceCallback<Models.V1beta2Deployment>): Promise<Models.ReadAppsV1beta2NamespacedDeploymentResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readAppsV1beta2NamespacedDeploymentOperationSpec,
      callback) as Promise<Models.ReadAppsV1beta2NamespacedDeploymentResponse>;
  }

  /**
   * replace the specified Deployment
   * @param body
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceAppsV1beta2NamespacedDeploymentResponse>
   */
  replaceAppsV1beta2NamespacedDeployment(body: Models.V1beta2Deployment, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceAppsV1beta2NamespacedDeploymentOptionalParams): Promise<Models.ReplaceAppsV1beta2NamespacedDeploymentResponse>;
  /**
   * @param body
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replaceAppsV1beta2NamespacedDeployment(body: Models.V1beta2Deployment, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1beta2Deployment>): void;
  /**
   * @param body
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceAppsV1beta2NamespacedDeployment(body: Models.V1beta2Deployment, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplaceAppsV1beta2NamespacedDeploymentOptionalParams, callback: msRest.ServiceCallback<Models.V1beta2Deployment>): void;
  replaceAppsV1beta2NamespacedDeployment(body: Models.V1beta2Deployment, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceAppsV1beta2NamespacedDeploymentOptionalParams | msRest.ServiceCallback<Models.V1beta2Deployment>, callback?: msRest.ServiceCallback<Models.V1beta2Deployment>): Promise<Models.ReplaceAppsV1beta2NamespacedDeploymentResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replaceAppsV1beta2NamespacedDeploymentOperationSpec,
      callback) as Promise<Models.ReplaceAppsV1beta2NamespacedDeploymentResponse>;
  }

  /**
   * delete a Deployment
   * @param body
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteAppsV1beta2NamespacedDeploymentResponse>
   */
  deleteAppsV1beta2NamespacedDeployment(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteAppsV1beta2NamespacedDeploymentOptionalParams): Promise<Models.DeleteAppsV1beta2NamespacedDeploymentResponse>;
  /**
   * @param body
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteAppsV1beta2NamespacedDeployment(body: Models.V1DeleteOptions, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteAppsV1beta2NamespacedDeployment(body: Models.V1DeleteOptions, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteAppsV1beta2NamespacedDeploymentOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteAppsV1beta2NamespacedDeployment(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteAppsV1beta2NamespacedDeploymentOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteAppsV1beta2NamespacedDeploymentResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      deleteAppsV1beta2NamespacedDeploymentOperationSpec,
      callback) as Promise<Models.DeleteAppsV1beta2NamespacedDeploymentResponse>;
  }

  /**
   * partially update the specified Deployment
   * @param body
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchAppsV1beta2NamespacedDeploymentResponse>
   */
  patchAppsV1beta2NamespacedDeployment(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchAppsV1beta2NamespacedDeploymentOptionalParams): Promise<Models.PatchAppsV1beta2NamespacedDeploymentResponse>;
  /**
   * @param body
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  patchAppsV1beta2NamespacedDeployment(body: any, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1beta2Deployment>): void;
  /**
   * @param body
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  patchAppsV1beta2NamespacedDeployment(body: any, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesPatchAppsV1beta2NamespacedDeploymentOptionalParams, callback: msRest.ServiceCallback<Models.V1beta2Deployment>): void;
  patchAppsV1beta2NamespacedDeployment(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchAppsV1beta2NamespacedDeploymentOptionalParams | msRest.ServiceCallback<Models.V1beta2Deployment>, callback?: msRest.ServiceCallback<Models.V1beta2Deployment>): Promise<Models.PatchAppsV1beta2NamespacedDeploymentResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      patchAppsV1beta2NamespacedDeploymentOperationSpec,
      callback) as Promise<Models.PatchAppsV1beta2NamespacedDeploymentResponse>;
  }

  /**
   * read scale of the specified Deployment
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadAppsV1beta2NamespacedDeploymentScaleResponse>
   */
  readAppsV1beta2NamespacedDeploymentScale(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadAppsV1beta2NamespacedDeploymentScaleOptionalParams): Promise<Models.ReadAppsV1beta2NamespacedDeploymentScaleResponse>;
  /**
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readAppsV1beta2NamespacedDeploymentScale(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1beta2Scale>): void;
  /**
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readAppsV1beta2NamespacedDeploymentScale(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadAppsV1beta2NamespacedDeploymentScaleOptionalParams, callback: msRest.ServiceCallback<Models.V1beta2Scale>): void;
  readAppsV1beta2NamespacedDeploymentScale(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadAppsV1beta2NamespacedDeploymentScaleOptionalParams | msRest.ServiceCallback<Models.V1beta2Scale>, callback?: msRest.ServiceCallback<Models.V1beta2Scale>): Promise<Models.ReadAppsV1beta2NamespacedDeploymentScaleResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readAppsV1beta2NamespacedDeploymentScaleOperationSpec,
      callback) as Promise<Models.ReadAppsV1beta2NamespacedDeploymentScaleResponse>;
  }

  /**
   * replace scale of the specified Deployment
   * @param body
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceAppsV1beta2NamespacedDeploymentScaleResponse>
   */
  replaceAppsV1beta2NamespacedDeploymentScale(body: Models.V1beta2Scale, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceAppsV1beta2NamespacedDeploymentScaleOptionalParams): Promise<Models.ReplaceAppsV1beta2NamespacedDeploymentScaleResponse>;
  /**
   * @param body
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replaceAppsV1beta2NamespacedDeploymentScale(body: Models.V1beta2Scale, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1beta2Scale>): void;
  /**
   * @param body
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceAppsV1beta2NamespacedDeploymentScale(body: Models.V1beta2Scale, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplaceAppsV1beta2NamespacedDeploymentScaleOptionalParams, callback: msRest.ServiceCallback<Models.V1beta2Scale>): void;
  replaceAppsV1beta2NamespacedDeploymentScale(body: Models.V1beta2Scale, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceAppsV1beta2NamespacedDeploymentScaleOptionalParams | msRest.ServiceCallback<Models.V1beta2Scale>, callback?: msRest.ServiceCallback<Models.V1beta2Scale>): Promise<Models.ReplaceAppsV1beta2NamespacedDeploymentScaleResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replaceAppsV1beta2NamespacedDeploymentScaleOperationSpec,
      callback) as Promise<Models.ReplaceAppsV1beta2NamespacedDeploymentScaleResponse>;
  }

  /**
   * partially update scale of the specified Deployment
   * @param body
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchAppsV1beta2NamespacedDeploymentScaleResponse>
   */
  patchAppsV1beta2NamespacedDeploymentScale(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchAppsV1beta2NamespacedDeploymentScaleOptionalParams): Promise<Models.PatchAppsV1beta2NamespacedDeploymentScaleResponse>;
  /**
   * @param body
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  patchAppsV1beta2NamespacedDeploymentScale(body: any, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1beta2Scale>): void;
  /**
   * @param body
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  patchAppsV1beta2NamespacedDeploymentScale(body: any, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesPatchAppsV1beta2NamespacedDeploymentScaleOptionalParams, callback: msRest.ServiceCallback<Models.V1beta2Scale>): void;
  patchAppsV1beta2NamespacedDeploymentScale(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchAppsV1beta2NamespacedDeploymentScaleOptionalParams | msRest.ServiceCallback<Models.V1beta2Scale>, callback?: msRest.ServiceCallback<Models.V1beta2Scale>): Promise<Models.PatchAppsV1beta2NamespacedDeploymentScaleResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      patchAppsV1beta2NamespacedDeploymentScaleOperationSpec,
      callback) as Promise<Models.PatchAppsV1beta2NamespacedDeploymentScaleResponse>;
  }

  /**
   * read status of the specified Deployment
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadAppsV1beta2NamespacedDeploymentStatusResponse>
   */
  readAppsV1beta2NamespacedDeploymentStatus(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadAppsV1beta2NamespacedDeploymentStatusOptionalParams): Promise<Models.ReadAppsV1beta2NamespacedDeploymentStatusResponse>;
  /**
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readAppsV1beta2NamespacedDeploymentStatus(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1beta2Deployment>): void;
  /**
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readAppsV1beta2NamespacedDeploymentStatus(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadAppsV1beta2NamespacedDeploymentStatusOptionalParams, callback: msRest.ServiceCallback<Models.V1beta2Deployment>): void;
  readAppsV1beta2NamespacedDeploymentStatus(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadAppsV1beta2NamespacedDeploymentStatusOptionalParams | msRest.ServiceCallback<Models.V1beta2Deployment>, callback?: msRest.ServiceCallback<Models.V1beta2Deployment>): Promise<Models.ReadAppsV1beta2NamespacedDeploymentStatusResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readAppsV1beta2NamespacedDeploymentStatusOperationSpec,
      callback) as Promise<Models.ReadAppsV1beta2NamespacedDeploymentStatusResponse>;
  }

  /**
   * replace status of the specified Deployment
   * @param body
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceAppsV1beta2NamespacedDeploymentStatusResponse>
   */
  replaceAppsV1beta2NamespacedDeploymentStatus(body: Models.V1beta2Deployment, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceAppsV1beta2NamespacedDeploymentStatusOptionalParams): Promise<Models.ReplaceAppsV1beta2NamespacedDeploymentStatusResponse>;
  /**
   * @param body
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replaceAppsV1beta2NamespacedDeploymentStatus(body: Models.V1beta2Deployment, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1beta2Deployment>): void;
  /**
   * @param body
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceAppsV1beta2NamespacedDeploymentStatus(body: Models.V1beta2Deployment, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplaceAppsV1beta2NamespacedDeploymentStatusOptionalParams, callback: msRest.ServiceCallback<Models.V1beta2Deployment>): void;
  replaceAppsV1beta2NamespacedDeploymentStatus(body: Models.V1beta2Deployment, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceAppsV1beta2NamespacedDeploymentStatusOptionalParams | msRest.ServiceCallback<Models.V1beta2Deployment>, callback?: msRest.ServiceCallback<Models.V1beta2Deployment>): Promise<Models.ReplaceAppsV1beta2NamespacedDeploymentStatusResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replaceAppsV1beta2NamespacedDeploymentStatusOperationSpec,
      callback) as Promise<Models.ReplaceAppsV1beta2NamespacedDeploymentStatusResponse>;
  }

  /**
   * partially update status of the specified Deployment
   * @param body
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchAppsV1beta2NamespacedDeploymentStatusResponse>
   */
  patchAppsV1beta2NamespacedDeploymentStatus(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchAppsV1beta2NamespacedDeploymentStatusOptionalParams): Promise<Models.PatchAppsV1beta2NamespacedDeploymentStatusResponse>;
  /**
   * @param body
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  patchAppsV1beta2NamespacedDeploymentStatus(body: any, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1beta2Deployment>): void;
  /**
   * @param body
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  patchAppsV1beta2NamespacedDeploymentStatus(body: any, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesPatchAppsV1beta2NamespacedDeploymentStatusOptionalParams, callback: msRest.ServiceCallback<Models.V1beta2Deployment>): void;
  patchAppsV1beta2NamespacedDeploymentStatus(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchAppsV1beta2NamespacedDeploymentStatusOptionalParams | msRest.ServiceCallback<Models.V1beta2Deployment>, callback?: msRest.ServiceCallback<Models.V1beta2Deployment>): Promise<Models.PatchAppsV1beta2NamespacedDeploymentStatusResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      patchAppsV1beta2NamespacedDeploymentStatusOperationSpec,
      callback) as Promise<Models.PatchAppsV1beta2NamespacedDeploymentStatusResponse>;
  }

  /**
   * list or watch objects of kind ReplicaSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ListAppsV1beta2NamespacedReplicaSetResponse>
   */
  listAppsV1beta2NamespacedReplicaSet(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListAppsV1beta2NamespacedReplicaSetOptionalParams): Promise<Models.ListAppsV1beta2NamespacedReplicaSetResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  listAppsV1beta2NamespacedReplicaSet(namespace: string, callback: msRest.ServiceCallback<Models.V1beta2ReplicaSetList>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  listAppsV1beta2NamespacedReplicaSet(namespace: string, options: Models.OpenShiftAPIwithKubernetesListAppsV1beta2NamespacedReplicaSetOptionalParams, callback: msRest.ServiceCallback<Models.V1beta2ReplicaSetList>): void;
  listAppsV1beta2NamespacedReplicaSet(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListAppsV1beta2NamespacedReplicaSetOptionalParams | msRest.ServiceCallback<Models.V1beta2ReplicaSetList>, callback?: msRest.ServiceCallback<Models.V1beta2ReplicaSetList>): Promise<Models.ListAppsV1beta2NamespacedReplicaSetResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      listAppsV1beta2NamespacedReplicaSetOperationSpec,
      callback) as Promise<Models.ListAppsV1beta2NamespacedReplicaSetResponse>;
  }

  /**
   * create a ReplicaSet
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateAppsV1beta2NamespacedReplicaSetResponse>
   */
  createAppsV1beta2NamespacedReplicaSet(body: Models.V1beta2ReplicaSet, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateAppsV1beta2NamespacedReplicaSetOptionalParams): Promise<Models.CreateAppsV1beta2NamespacedReplicaSetResponse>;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  createAppsV1beta2NamespacedReplicaSet(body: Models.V1beta2ReplicaSet, namespace: string, callback: msRest.ServiceCallback<Models.V1beta2ReplicaSet>): void;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  createAppsV1beta2NamespacedReplicaSet(body: Models.V1beta2ReplicaSet, namespace: string, options: Models.OpenShiftAPIwithKubernetesCreateAppsV1beta2NamespacedReplicaSetOptionalParams, callback: msRest.ServiceCallback<Models.V1beta2ReplicaSet>): void;
  createAppsV1beta2NamespacedReplicaSet(body: Models.V1beta2ReplicaSet, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateAppsV1beta2NamespacedReplicaSetOptionalParams | msRest.ServiceCallback<Models.V1beta2ReplicaSet>, callback?: msRest.ServiceCallback<Models.V1beta2ReplicaSet>): Promise<Models.CreateAppsV1beta2NamespacedReplicaSetResponse> {
    return this.sendOperationRequest(
      {
        body,
        namespace,
        options
      },
      createAppsV1beta2NamespacedReplicaSetOperationSpec,
      callback) as Promise<Models.CreateAppsV1beta2NamespacedReplicaSetResponse>;
  }

  /**
   * delete collection of ReplicaSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteAppsV1beta2CollectionNamespacedReplicaSetResponse>
   */
  deleteAppsV1beta2CollectionNamespacedReplicaSet(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteAppsV1beta2CollectionNamespacedReplicaSetOptionalParams): Promise<Models.DeleteAppsV1beta2CollectionNamespacedReplicaSetResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteAppsV1beta2CollectionNamespacedReplicaSet(namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteAppsV1beta2CollectionNamespacedReplicaSet(namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteAppsV1beta2CollectionNamespacedReplicaSetOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteAppsV1beta2CollectionNamespacedReplicaSet(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteAppsV1beta2CollectionNamespacedReplicaSetOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteAppsV1beta2CollectionNamespacedReplicaSetResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      deleteAppsV1beta2CollectionNamespacedReplicaSetOperationSpec,
      callback) as Promise<Models.DeleteAppsV1beta2CollectionNamespacedReplicaSetResponse>;
  }

  /**
   * read the specified ReplicaSet
   * @param name name of the ReplicaSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadAppsV1beta2NamespacedReplicaSetResponse>
   */
  readAppsV1beta2NamespacedReplicaSet(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadAppsV1beta2NamespacedReplicaSetOptionalParams): Promise<Models.ReadAppsV1beta2NamespacedReplicaSetResponse>;
  /**
   * @param name name of the ReplicaSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readAppsV1beta2NamespacedReplicaSet(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1beta2ReplicaSet>): void;
  /**
   * @param name name of the ReplicaSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readAppsV1beta2NamespacedReplicaSet(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadAppsV1beta2NamespacedReplicaSetOptionalParams, callback: msRest.ServiceCallback<Models.V1beta2ReplicaSet>): void;
  readAppsV1beta2NamespacedReplicaSet(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadAppsV1beta2NamespacedReplicaSetOptionalParams | msRest.ServiceCallback<Models.V1beta2ReplicaSet>, callback?: msRest.ServiceCallback<Models.V1beta2ReplicaSet>): Promise<Models.ReadAppsV1beta2NamespacedReplicaSetResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readAppsV1beta2NamespacedReplicaSetOperationSpec,
      callback) as Promise<Models.ReadAppsV1beta2NamespacedReplicaSetResponse>;
  }

  /**
   * replace the specified ReplicaSet
   * @param body
   * @param name name of the ReplicaSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceAppsV1beta2NamespacedReplicaSetResponse>
   */
  replaceAppsV1beta2NamespacedReplicaSet(body: Models.V1beta2ReplicaSet, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceAppsV1beta2NamespacedReplicaSetOptionalParams): Promise<Models.ReplaceAppsV1beta2NamespacedReplicaSetResponse>;
  /**
   * @param body
   * @param name name of the ReplicaSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replaceAppsV1beta2NamespacedReplicaSet(body: Models.V1beta2ReplicaSet, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1beta2ReplicaSet>): void;
  /**
   * @param body
   * @param name name of the ReplicaSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceAppsV1beta2NamespacedReplicaSet(body: Models.V1beta2ReplicaSet, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplaceAppsV1beta2NamespacedReplicaSetOptionalParams, callback: msRest.ServiceCallback<Models.V1beta2ReplicaSet>): void;
  replaceAppsV1beta2NamespacedReplicaSet(body: Models.V1beta2ReplicaSet, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceAppsV1beta2NamespacedReplicaSetOptionalParams | msRest.ServiceCallback<Models.V1beta2ReplicaSet>, callback?: msRest.ServiceCallback<Models.V1beta2ReplicaSet>): Promise<Models.ReplaceAppsV1beta2NamespacedReplicaSetResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replaceAppsV1beta2NamespacedReplicaSetOperationSpec,
      callback) as Promise<Models.ReplaceAppsV1beta2NamespacedReplicaSetResponse>;
  }

  /**
   * delete a ReplicaSet
   * @param body
   * @param name name of the ReplicaSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteAppsV1beta2NamespacedReplicaSetResponse>
   */
  deleteAppsV1beta2NamespacedReplicaSet(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteAppsV1beta2NamespacedReplicaSetOptionalParams): Promise<Models.DeleteAppsV1beta2NamespacedReplicaSetResponse>;
  /**
   * @param body
   * @param name name of the ReplicaSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteAppsV1beta2NamespacedReplicaSet(body: Models.V1DeleteOptions, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param name name of the ReplicaSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteAppsV1beta2NamespacedReplicaSet(body: Models.V1DeleteOptions, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteAppsV1beta2NamespacedReplicaSetOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteAppsV1beta2NamespacedReplicaSet(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteAppsV1beta2NamespacedReplicaSetOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteAppsV1beta2NamespacedReplicaSetResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      deleteAppsV1beta2NamespacedReplicaSetOperationSpec,
      callback) as Promise<Models.DeleteAppsV1beta2NamespacedReplicaSetResponse>;
  }

  /**
   * partially update the specified ReplicaSet
   * @param body
   * @param name name of the ReplicaSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchAppsV1beta2NamespacedReplicaSetResponse>
   */
  patchAppsV1beta2NamespacedReplicaSet(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchAppsV1beta2NamespacedReplicaSetOptionalParams): Promise<Models.PatchAppsV1beta2NamespacedReplicaSetResponse>;
  /**
   * @param body
   * @param name name of the ReplicaSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  patchAppsV1beta2NamespacedReplicaSet(body: any, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1beta2ReplicaSet>): void;
  /**
   * @param body
   * @param name name of the ReplicaSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  patchAppsV1beta2NamespacedReplicaSet(body: any, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesPatchAppsV1beta2NamespacedReplicaSetOptionalParams, callback: msRest.ServiceCallback<Models.V1beta2ReplicaSet>): void;
  patchAppsV1beta2NamespacedReplicaSet(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchAppsV1beta2NamespacedReplicaSetOptionalParams | msRest.ServiceCallback<Models.V1beta2ReplicaSet>, callback?: msRest.ServiceCallback<Models.V1beta2ReplicaSet>): Promise<Models.PatchAppsV1beta2NamespacedReplicaSetResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      patchAppsV1beta2NamespacedReplicaSetOperationSpec,
      callback) as Promise<Models.PatchAppsV1beta2NamespacedReplicaSetResponse>;
  }

  /**
   * read scale of the specified ReplicaSet
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadAppsV1beta2NamespacedReplicaSetScaleResponse>
   */
  readAppsV1beta2NamespacedReplicaSetScale(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadAppsV1beta2NamespacedReplicaSetScaleOptionalParams): Promise<Models.ReadAppsV1beta2NamespacedReplicaSetScaleResponse>;
  /**
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readAppsV1beta2NamespacedReplicaSetScale(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1beta2Scale>): void;
  /**
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readAppsV1beta2NamespacedReplicaSetScale(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadAppsV1beta2NamespacedReplicaSetScaleOptionalParams, callback: msRest.ServiceCallback<Models.V1beta2Scale>): void;
  readAppsV1beta2NamespacedReplicaSetScale(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadAppsV1beta2NamespacedReplicaSetScaleOptionalParams | msRest.ServiceCallback<Models.V1beta2Scale>, callback?: msRest.ServiceCallback<Models.V1beta2Scale>): Promise<Models.ReadAppsV1beta2NamespacedReplicaSetScaleResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readAppsV1beta2NamespacedReplicaSetScaleOperationSpec,
      callback) as Promise<Models.ReadAppsV1beta2NamespacedReplicaSetScaleResponse>;
  }

  /**
   * replace scale of the specified ReplicaSet
   * @param body
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceAppsV1beta2NamespacedReplicaSetScaleResponse>
   */
  replaceAppsV1beta2NamespacedReplicaSetScale(body: Models.V1beta2Scale, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceAppsV1beta2NamespacedReplicaSetScaleOptionalParams): Promise<Models.ReplaceAppsV1beta2NamespacedReplicaSetScaleResponse>;
  /**
   * @param body
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replaceAppsV1beta2NamespacedReplicaSetScale(body: Models.V1beta2Scale, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1beta2Scale>): void;
  /**
   * @param body
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceAppsV1beta2NamespacedReplicaSetScale(body: Models.V1beta2Scale, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplaceAppsV1beta2NamespacedReplicaSetScaleOptionalParams, callback: msRest.ServiceCallback<Models.V1beta2Scale>): void;
  replaceAppsV1beta2NamespacedReplicaSetScale(body: Models.V1beta2Scale, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceAppsV1beta2NamespacedReplicaSetScaleOptionalParams | msRest.ServiceCallback<Models.V1beta2Scale>, callback?: msRest.ServiceCallback<Models.V1beta2Scale>): Promise<Models.ReplaceAppsV1beta2NamespacedReplicaSetScaleResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replaceAppsV1beta2NamespacedReplicaSetScaleOperationSpec,
      callback) as Promise<Models.ReplaceAppsV1beta2NamespacedReplicaSetScaleResponse>;
  }

  /**
   * partially update scale of the specified ReplicaSet
   * @param body
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchAppsV1beta2NamespacedReplicaSetScaleResponse>
   */
  patchAppsV1beta2NamespacedReplicaSetScale(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchAppsV1beta2NamespacedReplicaSetScaleOptionalParams): Promise<Models.PatchAppsV1beta2NamespacedReplicaSetScaleResponse>;
  /**
   * @param body
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  patchAppsV1beta2NamespacedReplicaSetScale(body: any, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1beta2Scale>): void;
  /**
   * @param body
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  patchAppsV1beta2NamespacedReplicaSetScale(body: any, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesPatchAppsV1beta2NamespacedReplicaSetScaleOptionalParams, callback: msRest.ServiceCallback<Models.V1beta2Scale>): void;
  patchAppsV1beta2NamespacedReplicaSetScale(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchAppsV1beta2NamespacedReplicaSetScaleOptionalParams | msRest.ServiceCallback<Models.V1beta2Scale>, callback?: msRest.ServiceCallback<Models.V1beta2Scale>): Promise<Models.PatchAppsV1beta2NamespacedReplicaSetScaleResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      patchAppsV1beta2NamespacedReplicaSetScaleOperationSpec,
      callback) as Promise<Models.PatchAppsV1beta2NamespacedReplicaSetScaleResponse>;
  }

  /**
   * read status of the specified ReplicaSet
   * @param name name of the ReplicaSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadAppsV1beta2NamespacedReplicaSetStatusResponse>
   */
  readAppsV1beta2NamespacedReplicaSetStatus(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadAppsV1beta2NamespacedReplicaSetStatusOptionalParams): Promise<Models.ReadAppsV1beta2NamespacedReplicaSetStatusResponse>;
  /**
   * @param name name of the ReplicaSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readAppsV1beta2NamespacedReplicaSetStatus(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1beta2ReplicaSet>): void;
  /**
   * @param name name of the ReplicaSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readAppsV1beta2NamespacedReplicaSetStatus(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadAppsV1beta2NamespacedReplicaSetStatusOptionalParams, callback: msRest.ServiceCallback<Models.V1beta2ReplicaSet>): void;
  readAppsV1beta2NamespacedReplicaSetStatus(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadAppsV1beta2NamespacedReplicaSetStatusOptionalParams | msRest.ServiceCallback<Models.V1beta2ReplicaSet>, callback?: msRest.ServiceCallback<Models.V1beta2ReplicaSet>): Promise<Models.ReadAppsV1beta2NamespacedReplicaSetStatusResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readAppsV1beta2NamespacedReplicaSetStatusOperationSpec,
      callback) as Promise<Models.ReadAppsV1beta2NamespacedReplicaSetStatusResponse>;
  }

  /**
   * replace status of the specified ReplicaSet
   * @param body
   * @param name name of the ReplicaSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceAppsV1beta2NamespacedReplicaSetStatusResponse>
   */
  replaceAppsV1beta2NamespacedReplicaSetStatus(body: Models.V1beta2ReplicaSet, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceAppsV1beta2NamespacedReplicaSetStatusOptionalParams): Promise<Models.ReplaceAppsV1beta2NamespacedReplicaSetStatusResponse>;
  /**
   * @param body
   * @param name name of the ReplicaSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replaceAppsV1beta2NamespacedReplicaSetStatus(body: Models.V1beta2ReplicaSet, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1beta2ReplicaSet>): void;
  /**
   * @param body
   * @param name name of the ReplicaSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceAppsV1beta2NamespacedReplicaSetStatus(body: Models.V1beta2ReplicaSet, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplaceAppsV1beta2NamespacedReplicaSetStatusOptionalParams, callback: msRest.ServiceCallback<Models.V1beta2ReplicaSet>): void;
  replaceAppsV1beta2NamespacedReplicaSetStatus(body: Models.V1beta2ReplicaSet, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceAppsV1beta2NamespacedReplicaSetStatusOptionalParams | msRest.ServiceCallback<Models.V1beta2ReplicaSet>, callback?: msRest.ServiceCallback<Models.V1beta2ReplicaSet>): Promise<Models.ReplaceAppsV1beta2NamespacedReplicaSetStatusResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replaceAppsV1beta2NamespacedReplicaSetStatusOperationSpec,
      callback) as Promise<Models.ReplaceAppsV1beta2NamespacedReplicaSetStatusResponse>;
  }

  /**
   * partially update status of the specified ReplicaSet
   * @param body
   * @param name name of the ReplicaSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchAppsV1beta2NamespacedReplicaSetStatusResponse>
   */
  patchAppsV1beta2NamespacedReplicaSetStatus(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchAppsV1beta2NamespacedReplicaSetStatusOptionalParams): Promise<Models.PatchAppsV1beta2NamespacedReplicaSetStatusResponse>;
  /**
   * @param body
   * @param name name of the ReplicaSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  patchAppsV1beta2NamespacedReplicaSetStatus(body: any, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1beta2ReplicaSet>): void;
  /**
   * @param body
   * @param name name of the ReplicaSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  patchAppsV1beta2NamespacedReplicaSetStatus(body: any, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesPatchAppsV1beta2NamespacedReplicaSetStatusOptionalParams, callback: msRest.ServiceCallback<Models.V1beta2ReplicaSet>): void;
  patchAppsV1beta2NamespacedReplicaSetStatus(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchAppsV1beta2NamespacedReplicaSetStatusOptionalParams | msRest.ServiceCallback<Models.V1beta2ReplicaSet>, callback?: msRest.ServiceCallback<Models.V1beta2ReplicaSet>): Promise<Models.PatchAppsV1beta2NamespacedReplicaSetStatusResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      patchAppsV1beta2NamespacedReplicaSetStatusOperationSpec,
      callback) as Promise<Models.PatchAppsV1beta2NamespacedReplicaSetStatusResponse>;
  }

  /**
   * list or watch objects of kind StatefulSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ListAppsV1beta2NamespacedStatefulSetResponse>
   */
  listAppsV1beta2NamespacedStatefulSet(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListAppsV1beta2NamespacedStatefulSetOptionalParams): Promise<Models.ListAppsV1beta2NamespacedStatefulSetResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  listAppsV1beta2NamespacedStatefulSet(namespace: string, callback: msRest.ServiceCallback<Models.V1beta2StatefulSetList>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  listAppsV1beta2NamespacedStatefulSet(namespace: string, options: Models.OpenShiftAPIwithKubernetesListAppsV1beta2NamespacedStatefulSetOptionalParams, callback: msRest.ServiceCallback<Models.V1beta2StatefulSetList>): void;
  listAppsV1beta2NamespacedStatefulSet(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListAppsV1beta2NamespacedStatefulSetOptionalParams | msRest.ServiceCallback<Models.V1beta2StatefulSetList>, callback?: msRest.ServiceCallback<Models.V1beta2StatefulSetList>): Promise<Models.ListAppsV1beta2NamespacedStatefulSetResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      listAppsV1beta2NamespacedStatefulSetOperationSpec,
      callback) as Promise<Models.ListAppsV1beta2NamespacedStatefulSetResponse>;
  }

  /**
   * create a StatefulSet
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateAppsV1beta2NamespacedStatefulSetResponse>
   */
  createAppsV1beta2NamespacedStatefulSet(body: Models.V1beta2StatefulSet, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateAppsV1beta2NamespacedStatefulSetOptionalParams): Promise<Models.CreateAppsV1beta2NamespacedStatefulSetResponse>;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  createAppsV1beta2NamespacedStatefulSet(body: Models.V1beta2StatefulSet, namespace: string, callback: msRest.ServiceCallback<Models.V1beta2StatefulSet>): void;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  createAppsV1beta2NamespacedStatefulSet(body: Models.V1beta2StatefulSet, namespace: string, options: Models.OpenShiftAPIwithKubernetesCreateAppsV1beta2NamespacedStatefulSetOptionalParams, callback: msRest.ServiceCallback<Models.V1beta2StatefulSet>): void;
  createAppsV1beta2NamespacedStatefulSet(body: Models.V1beta2StatefulSet, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateAppsV1beta2NamespacedStatefulSetOptionalParams | msRest.ServiceCallback<Models.V1beta2StatefulSet>, callback?: msRest.ServiceCallback<Models.V1beta2StatefulSet>): Promise<Models.CreateAppsV1beta2NamespacedStatefulSetResponse> {
    return this.sendOperationRequest(
      {
        body,
        namespace,
        options
      },
      createAppsV1beta2NamespacedStatefulSetOperationSpec,
      callback) as Promise<Models.CreateAppsV1beta2NamespacedStatefulSetResponse>;
  }

  /**
   * delete collection of StatefulSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteAppsV1beta2CollectionNamespacedStatefulSetResponse>
   */
  deleteAppsV1beta2CollectionNamespacedStatefulSet(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteAppsV1beta2CollectionNamespacedStatefulSetOptionalParams): Promise<Models.DeleteAppsV1beta2CollectionNamespacedStatefulSetResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteAppsV1beta2CollectionNamespacedStatefulSet(namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteAppsV1beta2CollectionNamespacedStatefulSet(namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteAppsV1beta2CollectionNamespacedStatefulSetOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteAppsV1beta2CollectionNamespacedStatefulSet(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteAppsV1beta2CollectionNamespacedStatefulSetOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteAppsV1beta2CollectionNamespacedStatefulSetResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      deleteAppsV1beta2CollectionNamespacedStatefulSetOperationSpec,
      callback) as Promise<Models.DeleteAppsV1beta2CollectionNamespacedStatefulSetResponse>;
  }

  /**
   * read the specified StatefulSet
   * @param name name of the StatefulSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadAppsV1beta2NamespacedStatefulSetResponse>
   */
  readAppsV1beta2NamespacedStatefulSet(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadAppsV1beta2NamespacedStatefulSetOptionalParams): Promise<Models.ReadAppsV1beta2NamespacedStatefulSetResponse>;
  /**
   * @param name name of the StatefulSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readAppsV1beta2NamespacedStatefulSet(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1beta2StatefulSet>): void;
  /**
   * @param name name of the StatefulSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readAppsV1beta2NamespacedStatefulSet(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadAppsV1beta2NamespacedStatefulSetOptionalParams, callback: msRest.ServiceCallback<Models.V1beta2StatefulSet>): void;
  readAppsV1beta2NamespacedStatefulSet(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadAppsV1beta2NamespacedStatefulSetOptionalParams | msRest.ServiceCallback<Models.V1beta2StatefulSet>, callback?: msRest.ServiceCallback<Models.V1beta2StatefulSet>): Promise<Models.ReadAppsV1beta2NamespacedStatefulSetResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readAppsV1beta2NamespacedStatefulSetOperationSpec,
      callback) as Promise<Models.ReadAppsV1beta2NamespacedStatefulSetResponse>;
  }

  /**
   * replace the specified StatefulSet
   * @param body
   * @param name name of the StatefulSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceAppsV1beta2NamespacedStatefulSetResponse>
   */
  replaceAppsV1beta2NamespacedStatefulSet(body: Models.V1beta2StatefulSet, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceAppsV1beta2NamespacedStatefulSetOptionalParams): Promise<Models.ReplaceAppsV1beta2NamespacedStatefulSetResponse>;
  /**
   * @param body
   * @param name name of the StatefulSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replaceAppsV1beta2NamespacedStatefulSet(body: Models.V1beta2StatefulSet, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1beta2StatefulSet>): void;
  /**
   * @param body
   * @param name name of the StatefulSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceAppsV1beta2NamespacedStatefulSet(body: Models.V1beta2StatefulSet, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplaceAppsV1beta2NamespacedStatefulSetOptionalParams, callback: msRest.ServiceCallback<Models.V1beta2StatefulSet>): void;
  replaceAppsV1beta2NamespacedStatefulSet(body: Models.V1beta2StatefulSet, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceAppsV1beta2NamespacedStatefulSetOptionalParams | msRest.ServiceCallback<Models.V1beta2StatefulSet>, callback?: msRest.ServiceCallback<Models.V1beta2StatefulSet>): Promise<Models.ReplaceAppsV1beta2NamespacedStatefulSetResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replaceAppsV1beta2NamespacedStatefulSetOperationSpec,
      callback) as Promise<Models.ReplaceAppsV1beta2NamespacedStatefulSetResponse>;
  }

  /**
   * delete a StatefulSet
   * @param body
   * @param name name of the StatefulSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteAppsV1beta2NamespacedStatefulSetResponse>
   */
  deleteAppsV1beta2NamespacedStatefulSet(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteAppsV1beta2NamespacedStatefulSetOptionalParams): Promise<Models.DeleteAppsV1beta2NamespacedStatefulSetResponse>;
  /**
   * @param body
   * @param name name of the StatefulSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteAppsV1beta2NamespacedStatefulSet(body: Models.V1DeleteOptions, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param name name of the StatefulSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteAppsV1beta2NamespacedStatefulSet(body: Models.V1DeleteOptions, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteAppsV1beta2NamespacedStatefulSetOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteAppsV1beta2NamespacedStatefulSet(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteAppsV1beta2NamespacedStatefulSetOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteAppsV1beta2NamespacedStatefulSetResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      deleteAppsV1beta2NamespacedStatefulSetOperationSpec,
      callback) as Promise<Models.DeleteAppsV1beta2NamespacedStatefulSetResponse>;
  }

  /**
   * partially update the specified StatefulSet
   * @param body
   * @param name name of the StatefulSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchAppsV1beta2NamespacedStatefulSetResponse>
   */
  patchAppsV1beta2NamespacedStatefulSet(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchAppsV1beta2NamespacedStatefulSetOptionalParams): Promise<Models.PatchAppsV1beta2NamespacedStatefulSetResponse>;
  /**
   * @param body
   * @param name name of the StatefulSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  patchAppsV1beta2NamespacedStatefulSet(body: any, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1beta2StatefulSet>): void;
  /**
   * @param body
   * @param name name of the StatefulSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  patchAppsV1beta2NamespacedStatefulSet(body: any, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesPatchAppsV1beta2NamespacedStatefulSetOptionalParams, callback: msRest.ServiceCallback<Models.V1beta2StatefulSet>): void;
  patchAppsV1beta2NamespacedStatefulSet(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchAppsV1beta2NamespacedStatefulSetOptionalParams | msRest.ServiceCallback<Models.V1beta2StatefulSet>, callback?: msRest.ServiceCallback<Models.V1beta2StatefulSet>): Promise<Models.PatchAppsV1beta2NamespacedStatefulSetResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      patchAppsV1beta2NamespacedStatefulSetOperationSpec,
      callback) as Promise<Models.PatchAppsV1beta2NamespacedStatefulSetResponse>;
  }

  /**
   * read scale of the specified StatefulSet
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadAppsV1beta2NamespacedStatefulSetScaleResponse>
   */
  readAppsV1beta2NamespacedStatefulSetScale(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadAppsV1beta2NamespacedStatefulSetScaleOptionalParams): Promise<Models.ReadAppsV1beta2NamespacedStatefulSetScaleResponse>;
  /**
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readAppsV1beta2NamespacedStatefulSetScale(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1beta2Scale>): void;
  /**
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readAppsV1beta2NamespacedStatefulSetScale(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadAppsV1beta2NamespacedStatefulSetScaleOptionalParams, callback: msRest.ServiceCallback<Models.V1beta2Scale>): void;
  readAppsV1beta2NamespacedStatefulSetScale(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadAppsV1beta2NamespacedStatefulSetScaleOptionalParams | msRest.ServiceCallback<Models.V1beta2Scale>, callback?: msRest.ServiceCallback<Models.V1beta2Scale>): Promise<Models.ReadAppsV1beta2NamespacedStatefulSetScaleResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readAppsV1beta2NamespacedStatefulSetScaleOperationSpec,
      callback) as Promise<Models.ReadAppsV1beta2NamespacedStatefulSetScaleResponse>;
  }

  /**
   * replace scale of the specified StatefulSet
   * @param body
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceAppsV1beta2NamespacedStatefulSetScaleResponse>
   */
  replaceAppsV1beta2NamespacedStatefulSetScale(body: Models.V1beta2Scale, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceAppsV1beta2NamespacedStatefulSetScaleOptionalParams): Promise<Models.ReplaceAppsV1beta2NamespacedStatefulSetScaleResponse>;
  /**
   * @param body
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replaceAppsV1beta2NamespacedStatefulSetScale(body: Models.V1beta2Scale, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1beta2Scale>): void;
  /**
   * @param body
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceAppsV1beta2NamespacedStatefulSetScale(body: Models.V1beta2Scale, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplaceAppsV1beta2NamespacedStatefulSetScaleOptionalParams, callback: msRest.ServiceCallback<Models.V1beta2Scale>): void;
  replaceAppsV1beta2NamespacedStatefulSetScale(body: Models.V1beta2Scale, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceAppsV1beta2NamespacedStatefulSetScaleOptionalParams | msRest.ServiceCallback<Models.V1beta2Scale>, callback?: msRest.ServiceCallback<Models.V1beta2Scale>): Promise<Models.ReplaceAppsV1beta2NamespacedStatefulSetScaleResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replaceAppsV1beta2NamespacedStatefulSetScaleOperationSpec,
      callback) as Promise<Models.ReplaceAppsV1beta2NamespacedStatefulSetScaleResponse>;
  }

  /**
   * partially update scale of the specified StatefulSet
   * @param body
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchAppsV1beta2NamespacedStatefulSetScaleResponse>
   */
  patchAppsV1beta2NamespacedStatefulSetScale(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchAppsV1beta2NamespacedStatefulSetScaleOptionalParams): Promise<Models.PatchAppsV1beta2NamespacedStatefulSetScaleResponse>;
  /**
   * @param body
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  patchAppsV1beta2NamespacedStatefulSetScale(body: any, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1beta2Scale>): void;
  /**
   * @param body
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  patchAppsV1beta2NamespacedStatefulSetScale(body: any, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesPatchAppsV1beta2NamespacedStatefulSetScaleOptionalParams, callback: msRest.ServiceCallback<Models.V1beta2Scale>): void;
  patchAppsV1beta2NamespacedStatefulSetScale(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchAppsV1beta2NamespacedStatefulSetScaleOptionalParams | msRest.ServiceCallback<Models.V1beta2Scale>, callback?: msRest.ServiceCallback<Models.V1beta2Scale>): Promise<Models.PatchAppsV1beta2NamespacedStatefulSetScaleResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      patchAppsV1beta2NamespacedStatefulSetScaleOperationSpec,
      callback) as Promise<Models.PatchAppsV1beta2NamespacedStatefulSetScaleResponse>;
  }

  /**
   * read status of the specified StatefulSet
   * @param name name of the StatefulSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadAppsV1beta2NamespacedStatefulSetStatusResponse>
   */
  readAppsV1beta2NamespacedStatefulSetStatus(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadAppsV1beta2NamespacedStatefulSetStatusOptionalParams): Promise<Models.ReadAppsV1beta2NamespacedStatefulSetStatusResponse>;
  /**
   * @param name name of the StatefulSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readAppsV1beta2NamespacedStatefulSetStatus(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1beta2StatefulSet>): void;
  /**
   * @param name name of the StatefulSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readAppsV1beta2NamespacedStatefulSetStatus(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadAppsV1beta2NamespacedStatefulSetStatusOptionalParams, callback: msRest.ServiceCallback<Models.V1beta2StatefulSet>): void;
  readAppsV1beta2NamespacedStatefulSetStatus(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadAppsV1beta2NamespacedStatefulSetStatusOptionalParams | msRest.ServiceCallback<Models.V1beta2StatefulSet>, callback?: msRest.ServiceCallback<Models.V1beta2StatefulSet>): Promise<Models.ReadAppsV1beta2NamespacedStatefulSetStatusResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readAppsV1beta2NamespacedStatefulSetStatusOperationSpec,
      callback) as Promise<Models.ReadAppsV1beta2NamespacedStatefulSetStatusResponse>;
  }

  /**
   * replace status of the specified StatefulSet
   * @param body
   * @param name name of the StatefulSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceAppsV1beta2NamespacedStatefulSetStatusResponse>
   */
  replaceAppsV1beta2NamespacedStatefulSetStatus(body: Models.V1beta2StatefulSet, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceAppsV1beta2NamespacedStatefulSetStatusOptionalParams): Promise<Models.ReplaceAppsV1beta2NamespacedStatefulSetStatusResponse>;
  /**
   * @param body
   * @param name name of the StatefulSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replaceAppsV1beta2NamespacedStatefulSetStatus(body: Models.V1beta2StatefulSet, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1beta2StatefulSet>): void;
  /**
   * @param body
   * @param name name of the StatefulSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceAppsV1beta2NamespacedStatefulSetStatus(body: Models.V1beta2StatefulSet, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplaceAppsV1beta2NamespacedStatefulSetStatusOptionalParams, callback: msRest.ServiceCallback<Models.V1beta2StatefulSet>): void;
  replaceAppsV1beta2NamespacedStatefulSetStatus(body: Models.V1beta2StatefulSet, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceAppsV1beta2NamespacedStatefulSetStatusOptionalParams | msRest.ServiceCallback<Models.V1beta2StatefulSet>, callback?: msRest.ServiceCallback<Models.V1beta2StatefulSet>): Promise<Models.ReplaceAppsV1beta2NamespacedStatefulSetStatusResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replaceAppsV1beta2NamespacedStatefulSetStatusOperationSpec,
      callback) as Promise<Models.ReplaceAppsV1beta2NamespacedStatefulSetStatusResponse>;
  }

  /**
   * partially update status of the specified StatefulSet
   * @param body
   * @param name name of the StatefulSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchAppsV1beta2NamespacedStatefulSetStatusResponse>
   */
  patchAppsV1beta2NamespacedStatefulSetStatus(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchAppsV1beta2NamespacedStatefulSetStatusOptionalParams): Promise<Models.PatchAppsV1beta2NamespacedStatefulSetStatusResponse>;
  /**
   * @param body
   * @param name name of the StatefulSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  patchAppsV1beta2NamespacedStatefulSetStatus(body: any, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1beta2StatefulSet>): void;
  /**
   * @param body
   * @param name name of the StatefulSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  patchAppsV1beta2NamespacedStatefulSetStatus(body: any, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesPatchAppsV1beta2NamespacedStatefulSetStatusOptionalParams, callback: msRest.ServiceCallback<Models.V1beta2StatefulSet>): void;
  patchAppsV1beta2NamespacedStatefulSetStatus(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchAppsV1beta2NamespacedStatefulSetStatusOptionalParams | msRest.ServiceCallback<Models.V1beta2StatefulSet>, callback?: msRest.ServiceCallback<Models.V1beta2StatefulSet>): Promise<Models.PatchAppsV1beta2NamespacedStatefulSetStatusResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      patchAppsV1beta2NamespacedStatefulSetStatusOperationSpec,
      callback) as Promise<Models.PatchAppsV1beta2NamespacedStatefulSetStatusResponse>;
  }

  /**
   * list or watch objects of kind ReplicaSet
   * @param [options] The optional parameters
   * @returns Promise<Models.ListAppsV1beta2ReplicaSetForAllNamespacesResponse>
   */
  listAppsV1beta2ReplicaSetForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListAppsV1beta2ReplicaSetForAllNamespacesOptionalParams): Promise<Models.ListAppsV1beta2ReplicaSetForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  listAppsV1beta2ReplicaSetForAllNamespaces(callback: msRest.ServiceCallback<Models.V1beta2ReplicaSetList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listAppsV1beta2ReplicaSetForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesListAppsV1beta2ReplicaSetForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1beta2ReplicaSetList>): void;
  listAppsV1beta2ReplicaSetForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListAppsV1beta2ReplicaSetForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1beta2ReplicaSetList>, callback?: msRest.ServiceCallback<Models.V1beta2ReplicaSetList>): Promise<Models.ListAppsV1beta2ReplicaSetForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listAppsV1beta2ReplicaSetForAllNamespacesOperationSpec,
      callback) as Promise<Models.ListAppsV1beta2ReplicaSetForAllNamespacesResponse>;
  }

  /**
   * list or watch objects of kind StatefulSet
   * @param [options] The optional parameters
   * @returns Promise<Models.ListAppsV1beta2StatefulSetForAllNamespacesResponse>
   */
  listAppsV1beta2StatefulSetForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListAppsV1beta2StatefulSetForAllNamespacesOptionalParams): Promise<Models.ListAppsV1beta2StatefulSetForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  listAppsV1beta2StatefulSetForAllNamespaces(callback: msRest.ServiceCallback<Models.V1beta2StatefulSetList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listAppsV1beta2StatefulSetForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesListAppsV1beta2StatefulSetForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1beta2StatefulSetList>): void;
  listAppsV1beta2StatefulSetForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListAppsV1beta2StatefulSetForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1beta2StatefulSetList>, callback?: msRest.ServiceCallback<Models.V1beta2StatefulSetList>): Promise<Models.ListAppsV1beta2StatefulSetForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listAppsV1beta2StatefulSetForAllNamespacesOperationSpec,
      callback) as Promise<Models.ListAppsV1beta2StatefulSetForAllNamespacesResponse>;
  }

  /**
   * watch individual changes to a list of ControllerRevision
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchAppsV1beta2ControllerRevisionListForAllNamespacesResponse>
   */
  watchAppsV1beta2ControllerRevisionListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchAppsV1beta2ControllerRevisionListForAllNamespacesOptionalParams): Promise<Models.WatchAppsV1beta2ControllerRevisionListForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  watchAppsV1beta2ControllerRevisionListForAllNamespaces(callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  watchAppsV1beta2ControllerRevisionListForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesWatchAppsV1beta2ControllerRevisionListForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchAppsV1beta2ControllerRevisionListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchAppsV1beta2ControllerRevisionListForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchAppsV1beta2ControllerRevisionListForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      watchAppsV1beta2ControllerRevisionListForAllNamespacesOperationSpec,
      callback) as Promise<Models.WatchAppsV1beta2ControllerRevisionListForAllNamespacesResponse>;
  }

  /**
   * watch individual changes to a list of DaemonSet
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchAppsV1beta2DaemonSetListForAllNamespacesResponse>
   */
  watchAppsV1beta2DaemonSetListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchAppsV1beta2DaemonSetListForAllNamespacesOptionalParams): Promise<Models.WatchAppsV1beta2DaemonSetListForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  watchAppsV1beta2DaemonSetListForAllNamespaces(callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  watchAppsV1beta2DaemonSetListForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesWatchAppsV1beta2DaemonSetListForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchAppsV1beta2DaemonSetListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchAppsV1beta2DaemonSetListForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchAppsV1beta2DaemonSetListForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      watchAppsV1beta2DaemonSetListForAllNamespacesOperationSpec,
      callback) as Promise<Models.WatchAppsV1beta2DaemonSetListForAllNamespacesResponse>;
  }

  /**
   * watch individual changes to a list of Deployment
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchAppsV1beta2DeploymentListForAllNamespacesResponse>
   */
  watchAppsV1beta2DeploymentListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchAppsV1beta2DeploymentListForAllNamespacesOptionalParams): Promise<Models.WatchAppsV1beta2DeploymentListForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  watchAppsV1beta2DeploymentListForAllNamespaces(callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  watchAppsV1beta2DeploymentListForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesWatchAppsV1beta2DeploymentListForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchAppsV1beta2DeploymentListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchAppsV1beta2DeploymentListForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchAppsV1beta2DeploymentListForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      watchAppsV1beta2DeploymentListForAllNamespacesOperationSpec,
      callback) as Promise<Models.WatchAppsV1beta2DeploymentListForAllNamespacesResponse>;
  }

  /**
   * watch individual changes to a list of ControllerRevision
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchAppsV1beta2NamespacedControllerRevisionListResponse>
   */
  watchAppsV1beta2NamespacedControllerRevisionList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchAppsV1beta2NamespacedControllerRevisionListOptionalParams): Promise<Models.WatchAppsV1beta2NamespacedControllerRevisionListResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchAppsV1beta2NamespacedControllerRevisionList(namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchAppsV1beta2NamespacedControllerRevisionList(namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchAppsV1beta2NamespacedControllerRevisionListOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchAppsV1beta2NamespacedControllerRevisionList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchAppsV1beta2NamespacedControllerRevisionListOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchAppsV1beta2NamespacedControllerRevisionListResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      watchAppsV1beta2NamespacedControllerRevisionListOperationSpec,
      callback) as Promise<Models.WatchAppsV1beta2NamespacedControllerRevisionListResponse>;
  }

  /**
   * watch changes to an object of kind ControllerRevision
   * @param name name of the ControllerRevision
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchAppsV1beta2NamespacedControllerRevisionResponse>
   */
  watchAppsV1beta2NamespacedControllerRevision(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchAppsV1beta2NamespacedControllerRevisionOptionalParams): Promise<Models.WatchAppsV1beta2NamespacedControllerRevisionResponse>;
  /**
   * @param name name of the ControllerRevision
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchAppsV1beta2NamespacedControllerRevision(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param name name of the ControllerRevision
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchAppsV1beta2NamespacedControllerRevision(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchAppsV1beta2NamespacedControllerRevisionOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchAppsV1beta2NamespacedControllerRevision(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchAppsV1beta2NamespacedControllerRevisionOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchAppsV1beta2NamespacedControllerRevisionResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      watchAppsV1beta2NamespacedControllerRevisionOperationSpec,
      callback) as Promise<Models.WatchAppsV1beta2NamespacedControllerRevisionResponse>;
  }

  /**
   * watch individual changes to a list of DaemonSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchAppsV1beta2NamespacedDaemonSetListResponse>
   */
  watchAppsV1beta2NamespacedDaemonSetList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchAppsV1beta2NamespacedDaemonSetListOptionalParams): Promise<Models.WatchAppsV1beta2NamespacedDaemonSetListResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchAppsV1beta2NamespacedDaemonSetList(namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchAppsV1beta2NamespacedDaemonSetList(namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchAppsV1beta2NamespacedDaemonSetListOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchAppsV1beta2NamespacedDaemonSetList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchAppsV1beta2NamespacedDaemonSetListOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchAppsV1beta2NamespacedDaemonSetListResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      watchAppsV1beta2NamespacedDaemonSetListOperationSpec,
      callback) as Promise<Models.WatchAppsV1beta2NamespacedDaemonSetListResponse>;
  }

  /**
   * watch changes to an object of kind DaemonSet
   * @param name name of the DaemonSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchAppsV1beta2NamespacedDaemonSetResponse>
   */
  watchAppsV1beta2NamespacedDaemonSet(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchAppsV1beta2NamespacedDaemonSetOptionalParams): Promise<Models.WatchAppsV1beta2NamespacedDaemonSetResponse>;
  /**
   * @param name name of the DaemonSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchAppsV1beta2NamespacedDaemonSet(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param name name of the DaemonSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchAppsV1beta2NamespacedDaemonSet(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchAppsV1beta2NamespacedDaemonSetOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchAppsV1beta2NamespacedDaemonSet(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchAppsV1beta2NamespacedDaemonSetOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchAppsV1beta2NamespacedDaemonSetResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      watchAppsV1beta2NamespacedDaemonSetOperationSpec,
      callback) as Promise<Models.WatchAppsV1beta2NamespacedDaemonSetResponse>;
  }

  /**
   * watch individual changes to a list of Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchAppsV1beta2NamespacedDeploymentListResponse>
   */
  watchAppsV1beta2NamespacedDeploymentList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchAppsV1beta2NamespacedDeploymentListOptionalParams): Promise<Models.WatchAppsV1beta2NamespacedDeploymentListResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchAppsV1beta2NamespacedDeploymentList(namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchAppsV1beta2NamespacedDeploymentList(namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchAppsV1beta2NamespacedDeploymentListOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchAppsV1beta2NamespacedDeploymentList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchAppsV1beta2NamespacedDeploymentListOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchAppsV1beta2NamespacedDeploymentListResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      watchAppsV1beta2NamespacedDeploymentListOperationSpec,
      callback) as Promise<Models.WatchAppsV1beta2NamespacedDeploymentListResponse>;
  }

  /**
   * watch changes to an object of kind Deployment
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchAppsV1beta2NamespacedDeploymentResponse>
   */
  watchAppsV1beta2NamespacedDeployment(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchAppsV1beta2NamespacedDeploymentOptionalParams): Promise<Models.WatchAppsV1beta2NamespacedDeploymentResponse>;
  /**
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchAppsV1beta2NamespacedDeployment(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchAppsV1beta2NamespacedDeployment(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchAppsV1beta2NamespacedDeploymentOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchAppsV1beta2NamespacedDeployment(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchAppsV1beta2NamespacedDeploymentOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchAppsV1beta2NamespacedDeploymentResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      watchAppsV1beta2NamespacedDeploymentOperationSpec,
      callback) as Promise<Models.WatchAppsV1beta2NamespacedDeploymentResponse>;
  }

  /**
   * watch individual changes to a list of ReplicaSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchAppsV1beta2NamespacedReplicaSetListResponse>
   */
  watchAppsV1beta2NamespacedReplicaSetList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchAppsV1beta2NamespacedReplicaSetListOptionalParams): Promise<Models.WatchAppsV1beta2NamespacedReplicaSetListResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchAppsV1beta2NamespacedReplicaSetList(namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchAppsV1beta2NamespacedReplicaSetList(namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchAppsV1beta2NamespacedReplicaSetListOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchAppsV1beta2NamespacedReplicaSetList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchAppsV1beta2NamespacedReplicaSetListOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchAppsV1beta2NamespacedReplicaSetListResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      watchAppsV1beta2NamespacedReplicaSetListOperationSpec,
      callback) as Promise<Models.WatchAppsV1beta2NamespacedReplicaSetListResponse>;
  }

  /**
   * watch changes to an object of kind ReplicaSet
   * @param name name of the ReplicaSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchAppsV1beta2NamespacedReplicaSetResponse>
   */
  watchAppsV1beta2NamespacedReplicaSet(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchAppsV1beta2NamespacedReplicaSetOptionalParams): Promise<Models.WatchAppsV1beta2NamespacedReplicaSetResponse>;
  /**
   * @param name name of the ReplicaSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchAppsV1beta2NamespacedReplicaSet(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param name name of the ReplicaSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchAppsV1beta2NamespacedReplicaSet(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchAppsV1beta2NamespacedReplicaSetOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchAppsV1beta2NamespacedReplicaSet(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchAppsV1beta2NamespacedReplicaSetOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchAppsV1beta2NamespacedReplicaSetResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      watchAppsV1beta2NamespacedReplicaSetOperationSpec,
      callback) as Promise<Models.WatchAppsV1beta2NamespacedReplicaSetResponse>;
  }

  /**
   * watch individual changes to a list of StatefulSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchAppsV1beta2NamespacedStatefulSetListResponse>
   */
  watchAppsV1beta2NamespacedStatefulSetList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchAppsV1beta2NamespacedStatefulSetListOptionalParams): Promise<Models.WatchAppsV1beta2NamespacedStatefulSetListResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchAppsV1beta2NamespacedStatefulSetList(namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchAppsV1beta2NamespacedStatefulSetList(namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchAppsV1beta2NamespacedStatefulSetListOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchAppsV1beta2NamespacedStatefulSetList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchAppsV1beta2NamespacedStatefulSetListOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchAppsV1beta2NamespacedStatefulSetListResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      watchAppsV1beta2NamespacedStatefulSetListOperationSpec,
      callback) as Promise<Models.WatchAppsV1beta2NamespacedStatefulSetListResponse>;
  }

  /**
   * watch changes to an object of kind StatefulSet
   * @param name name of the StatefulSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchAppsV1beta2NamespacedStatefulSetResponse>
   */
  watchAppsV1beta2NamespacedStatefulSet(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchAppsV1beta2NamespacedStatefulSetOptionalParams): Promise<Models.WatchAppsV1beta2NamespacedStatefulSetResponse>;
  /**
   * @param name name of the StatefulSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchAppsV1beta2NamespacedStatefulSet(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param name name of the StatefulSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchAppsV1beta2NamespacedStatefulSet(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchAppsV1beta2NamespacedStatefulSetOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchAppsV1beta2NamespacedStatefulSet(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchAppsV1beta2NamespacedStatefulSetOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchAppsV1beta2NamespacedStatefulSetResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      watchAppsV1beta2NamespacedStatefulSetOperationSpec,
      callback) as Promise<Models.WatchAppsV1beta2NamespacedStatefulSetResponse>;
  }

  /**
   * watch individual changes to a list of ReplicaSet
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchAppsV1beta2ReplicaSetListForAllNamespacesResponse>
   */
  watchAppsV1beta2ReplicaSetListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchAppsV1beta2ReplicaSetListForAllNamespacesOptionalParams): Promise<Models.WatchAppsV1beta2ReplicaSetListForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  watchAppsV1beta2ReplicaSetListForAllNamespaces(callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  watchAppsV1beta2ReplicaSetListForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesWatchAppsV1beta2ReplicaSetListForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchAppsV1beta2ReplicaSetListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchAppsV1beta2ReplicaSetListForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchAppsV1beta2ReplicaSetListForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      watchAppsV1beta2ReplicaSetListForAllNamespacesOperationSpec,
      callback) as Promise<Models.WatchAppsV1beta2ReplicaSetListForAllNamespacesResponse>;
  }

  /**
   * watch individual changes to a list of StatefulSet
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchAppsV1beta2StatefulSetListForAllNamespacesResponse>
   */
  watchAppsV1beta2StatefulSetListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchAppsV1beta2StatefulSetListForAllNamespacesOptionalParams): Promise<Models.WatchAppsV1beta2StatefulSetListForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  watchAppsV1beta2StatefulSetListForAllNamespaces(callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  watchAppsV1beta2StatefulSetListForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesWatchAppsV1beta2StatefulSetListForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchAppsV1beta2StatefulSetListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchAppsV1beta2StatefulSetListForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchAppsV1beta2StatefulSetListForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      watchAppsV1beta2StatefulSetListForAllNamespacesOperationSpec,
      callback) as Promise<Models.WatchAppsV1beta2StatefulSetListForAllNamespacesResponse>;
  }

  /**
   * get information of a group
   * @param [options] The optional parameters
   * @returns Promise<Models.GetAuthenticationAPIGroupResponse>
   */
  getAuthenticationAPIGroup(options?: msRest.RequestOptionsBase): Promise<Models.GetAuthenticationAPIGroupResponse>;
  /**
   * @param callback The callback
   */
  getAuthenticationAPIGroup(callback: msRest.ServiceCallback<Models.V1APIGroup>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getAuthenticationAPIGroup(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.V1APIGroup>): void;
  getAuthenticationAPIGroup(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.V1APIGroup>, callback?: msRest.ServiceCallback<Models.V1APIGroup>): Promise<Models.GetAuthenticationAPIGroupResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getAuthenticationAPIGroupOperationSpec,
      callback) as Promise<Models.GetAuthenticationAPIGroupResponse>;
  }

  /**
   * get available resources
   * @param [options] The optional parameters
   * @returns Promise<Models.GetAuthenticationV1APIResourcesResponse>
   */
  getAuthenticationV1APIResources(options?: msRest.RequestOptionsBase): Promise<Models.GetAuthenticationV1APIResourcesResponse>;
  /**
   * @param callback The callback
   */
  getAuthenticationV1APIResources(callback: msRest.ServiceCallback<Models.V1APIResourceList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getAuthenticationV1APIResources(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.V1APIResourceList>): void;
  getAuthenticationV1APIResources(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.V1APIResourceList>, callback?: msRest.ServiceCallback<Models.V1APIResourceList>): Promise<Models.GetAuthenticationV1APIResourcesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getAuthenticationV1APIResourcesOperationSpec,
      callback) as Promise<Models.GetAuthenticationV1APIResourcesResponse>;
  }

  /**
   * create a TokenReview
   * @param body
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateAuthenticationV1TokenReviewResponse>
   */
  createAuthenticationV1TokenReview(body: Models.V1TokenReview, options?: Models.OpenShiftAPIwithKubernetesCreateAuthenticationV1TokenReviewOptionalParams): Promise<Models.CreateAuthenticationV1TokenReviewResponse>;
  /**
   * @param body
   * @param callback The callback
   */
  createAuthenticationV1TokenReview(body: Models.V1TokenReview, callback: msRest.ServiceCallback<Models.V1TokenReview>): void;
  /**
   * @param body
   * @param options The optional parameters
   * @param callback The callback
   */
  createAuthenticationV1TokenReview(body: Models.V1TokenReview, options: Models.OpenShiftAPIwithKubernetesCreateAuthenticationV1TokenReviewOptionalParams, callback: msRest.ServiceCallback<Models.V1TokenReview>): void;
  createAuthenticationV1TokenReview(body: Models.V1TokenReview, options?: Models.OpenShiftAPIwithKubernetesCreateAuthenticationV1TokenReviewOptionalParams | msRest.ServiceCallback<Models.V1TokenReview>, callback?: msRest.ServiceCallback<Models.V1TokenReview>): Promise<Models.CreateAuthenticationV1TokenReviewResponse> {
    return this.sendOperationRequest(
      {
        body,
        options
      },
      createAuthenticationV1TokenReviewOperationSpec,
      callback) as Promise<Models.CreateAuthenticationV1TokenReviewResponse>;
  }

  /**
   * get available resources
   * @param [options] The optional parameters
   * @returns Promise<Models.GetAuthenticationV1beta1APIResourcesResponse>
   */
  getAuthenticationV1beta1APIResources(options?: msRest.RequestOptionsBase): Promise<Models.GetAuthenticationV1beta1APIResourcesResponse>;
  /**
   * @param callback The callback
   */
  getAuthenticationV1beta1APIResources(callback: msRest.ServiceCallback<Models.V1APIResourceList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getAuthenticationV1beta1APIResources(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.V1APIResourceList>): void;
  getAuthenticationV1beta1APIResources(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.V1APIResourceList>, callback?: msRest.ServiceCallback<Models.V1APIResourceList>): Promise<Models.GetAuthenticationV1beta1APIResourcesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getAuthenticationV1beta1APIResourcesOperationSpec,
      callback) as Promise<Models.GetAuthenticationV1beta1APIResourcesResponse>;
  }

  /**
   * create a TokenReview
   * @param body
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateAuthenticationV1beta1TokenReviewResponse>
   */
  createAuthenticationV1beta1TokenReview(body: Models.V1beta1TokenReview, options?: Models.OpenShiftAPIwithKubernetesCreateAuthenticationV1beta1TokenReviewOptionalParams): Promise<Models.CreateAuthenticationV1beta1TokenReviewResponse>;
  /**
   * @param body
   * @param callback The callback
   */
  createAuthenticationV1beta1TokenReview(body: Models.V1beta1TokenReview, callback: msRest.ServiceCallback<Models.V1beta1TokenReview>): void;
  /**
   * @param body
   * @param options The optional parameters
   * @param callback The callback
   */
  createAuthenticationV1beta1TokenReview(body: Models.V1beta1TokenReview, options: Models.OpenShiftAPIwithKubernetesCreateAuthenticationV1beta1TokenReviewOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1TokenReview>): void;
  createAuthenticationV1beta1TokenReview(body: Models.V1beta1TokenReview, options?: Models.OpenShiftAPIwithKubernetesCreateAuthenticationV1beta1TokenReviewOptionalParams | msRest.ServiceCallback<Models.V1beta1TokenReview>, callback?: msRest.ServiceCallback<Models.V1beta1TokenReview>): Promise<Models.CreateAuthenticationV1beta1TokenReviewResponse> {
    return this.sendOperationRequest(
      {
        body,
        options
      },
      createAuthenticationV1beta1TokenReviewOperationSpec,
      callback) as Promise<Models.CreateAuthenticationV1beta1TokenReviewResponse>;
  }

  /**
   * get information of a group
   * @param [options] The optional parameters
   * @returns Promise<Models.GetAuthorizationAPIGroupResponse>
   */
  getAuthorizationAPIGroup(options?: msRest.RequestOptionsBase): Promise<Models.GetAuthorizationAPIGroupResponse>;
  /**
   * @param callback The callback
   */
  getAuthorizationAPIGroup(callback: msRest.ServiceCallback<Models.V1APIGroup>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getAuthorizationAPIGroup(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.V1APIGroup>): void;
  getAuthorizationAPIGroup(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.V1APIGroup>, callback?: msRest.ServiceCallback<Models.V1APIGroup>): Promise<Models.GetAuthorizationAPIGroupResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getAuthorizationAPIGroupOperationSpec,
      callback) as Promise<Models.GetAuthorizationAPIGroupResponse>;
  }

  /**
   * get available resources
   * @param [options] The optional parameters
   * @returns Promise<Models.GetAuthorizationV1APIResourcesResponse>
   */
  getAuthorizationV1APIResources(options?: msRest.RequestOptionsBase): Promise<Models.GetAuthorizationV1APIResourcesResponse>;
  /**
   * @param callback The callback
   */
  getAuthorizationV1APIResources(callback: msRest.ServiceCallback<Models.V1APIResourceList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getAuthorizationV1APIResources(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.V1APIResourceList>): void;
  getAuthorizationV1APIResources(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.V1APIResourceList>, callback?: msRest.ServiceCallback<Models.V1APIResourceList>): Promise<Models.GetAuthorizationV1APIResourcesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getAuthorizationV1APIResourcesOperationSpec,
      callback) as Promise<Models.GetAuthorizationV1APIResourcesResponse>;
  }

  /**
   * create a LocalSubjectAccessReview
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateAuthorizationV1NamespacedLocalSubjectAccessReviewResponse>
   */
  createAuthorizationV1NamespacedLocalSubjectAccessReview(body: Models.V1LocalSubjectAccessReview, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateAuthorizationV1NamespacedLocalSubjectAccessReviewOptionalParams): Promise<Models.CreateAuthorizationV1NamespacedLocalSubjectAccessReviewResponse>;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  createAuthorizationV1NamespacedLocalSubjectAccessReview(body: Models.V1LocalSubjectAccessReview, namespace: string, callback: msRest.ServiceCallback<Models.V1LocalSubjectAccessReview>): void;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  createAuthorizationV1NamespacedLocalSubjectAccessReview(body: Models.V1LocalSubjectAccessReview, namespace: string, options: Models.OpenShiftAPIwithKubernetesCreateAuthorizationV1NamespacedLocalSubjectAccessReviewOptionalParams, callback: msRest.ServiceCallback<Models.V1LocalSubjectAccessReview>): void;
  createAuthorizationV1NamespacedLocalSubjectAccessReview(body: Models.V1LocalSubjectAccessReview, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateAuthorizationV1NamespacedLocalSubjectAccessReviewOptionalParams | msRest.ServiceCallback<Models.V1LocalSubjectAccessReview>, callback?: msRest.ServiceCallback<Models.V1LocalSubjectAccessReview>): Promise<Models.CreateAuthorizationV1NamespacedLocalSubjectAccessReviewResponse> {
    return this.sendOperationRequest(
      {
        body,
        namespace,
        options
      },
      createAuthorizationV1NamespacedLocalSubjectAccessReviewOperationSpec,
      callback) as Promise<Models.CreateAuthorizationV1NamespacedLocalSubjectAccessReviewResponse>;
  }

  /**
   * create a SelfSubjectAccessReview
   * @param body
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateAuthorizationV1SelfSubjectAccessReviewResponse>
   */
  createAuthorizationV1SelfSubjectAccessReview(body: Models.V1SelfSubjectAccessReview, options?: Models.OpenShiftAPIwithKubernetesCreateAuthorizationV1SelfSubjectAccessReviewOptionalParams): Promise<Models.CreateAuthorizationV1SelfSubjectAccessReviewResponse>;
  /**
   * @param body
   * @param callback The callback
   */
  createAuthorizationV1SelfSubjectAccessReview(body: Models.V1SelfSubjectAccessReview, callback: msRest.ServiceCallback<Models.V1SelfSubjectAccessReview>): void;
  /**
   * @param body
   * @param options The optional parameters
   * @param callback The callback
   */
  createAuthorizationV1SelfSubjectAccessReview(body: Models.V1SelfSubjectAccessReview, options: Models.OpenShiftAPIwithKubernetesCreateAuthorizationV1SelfSubjectAccessReviewOptionalParams, callback: msRest.ServiceCallback<Models.V1SelfSubjectAccessReview>): void;
  createAuthorizationV1SelfSubjectAccessReview(body: Models.V1SelfSubjectAccessReview, options?: Models.OpenShiftAPIwithKubernetesCreateAuthorizationV1SelfSubjectAccessReviewOptionalParams | msRest.ServiceCallback<Models.V1SelfSubjectAccessReview>, callback?: msRest.ServiceCallback<Models.V1SelfSubjectAccessReview>): Promise<Models.CreateAuthorizationV1SelfSubjectAccessReviewResponse> {
    return this.sendOperationRequest(
      {
        body,
        options
      },
      createAuthorizationV1SelfSubjectAccessReviewOperationSpec,
      callback) as Promise<Models.CreateAuthorizationV1SelfSubjectAccessReviewResponse>;
  }

  /**
   * create a SelfSubjectRulesReview
   * @param body
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateAuthorizationV1SelfSubjectRulesReviewResponse>
   */
  createAuthorizationV1SelfSubjectRulesReview(body: Models.V1SelfSubjectRulesReview, options?: Models.OpenShiftAPIwithKubernetesCreateAuthorizationV1SelfSubjectRulesReviewOptionalParams): Promise<Models.CreateAuthorizationV1SelfSubjectRulesReviewResponse>;
  /**
   * @param body
   * @param callback The callback
   */
  createAuthorizationV1SelfSubjectRulesReview(body: Models.V1SelfSubjectRulesReview, callback: msRest.ServiceCallback<Models.V1SelfSubjectRulesReview>): void;
  /**
   * @param body
   * @param options The optional parameters
   * @param callback The callback
   */
  createAuthorizationV1SelfSubjectRulesReview(body: Models.V1SelfSubjectRulesReview, options: Models.OpenShiftAPIwithKubernetesCreateAuthorizationV1SelfSubjectRulesReviewOptionalParams, callback: msRest.ServiceCallback<Models.V1SelfSubjectRulesReview>): void;
  createAuthorizationV1SelfSubjectRulesReview(body: Models.V1SelfSubjectRulesReview, options?: Models.OpenShiftAPIwithKubernetesCreateAuthorizationV1SelfSubjectRulesReviewOptionalParams | msRest.ServiceCallback<Models.V1SelfSubjectRulesReview>, callback?: msRest.ServiceCallback<Models.V1SelfSubjectRulesReview>): Promise<Models.CreateAuthorizationV1SelfSubjectRulesReviewResponse> {
    return this.sendOperationRequest(
      {
        body,
        options
      },
      createAuthorizationV1SelfSubjectRulesReviewOperationSpec,
      callback) as Promise<Models.CreateAuthorizationV1SelfSubjectRulesReviewResponse>;
  }

  /**
   * create a SubjectAccessReview
   * @param body
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateAuthorizationV1SubjectAccessReviewResponse>
   */
  createAuthorizationV1SubjectAccessReview(body: Models.V1SubjectAccessReview, options?: Models.OpenShiftAPIwithKubernetesCreateAuthorizationV1SubjectAccessReviewOptionalParams): Promise<Models.CreateAuthorizationV1SubjectAccessReviewResponse>;
  /**
   * @param body
   * @param callback The callback
   */
  createAuthorizationV1SubjectAccessReview(body: Models.V1SubjectAccessReview, callback: msRest.ServiceCallback<Models.V1SubjectAccessReview>): void;
  /**
   * @param body
   * @param options The optional parameters
   * @param callback The callback
   */
  createAuthorizationV1SubjectAccessReview(body: Models.V1SubjectAccessReview, options: Models.OpenShiftAPIwithKubernetesCreateAuthorizationV1SubjectAccessReviewOptionalParams, callback: msRest.ServiceCallback<Models.V1SubjectAccessReview>): void;
  createAuthorizationV1SubjectAccessReview(body: Models.V1SubjectAccessReview, options?: Models.OpenShiftAPIwithKubernetesCreateAuthorizationV1SubjectAccessReviewOptionalParams | msRest.ServiceCallback<Models.V1SubjectAccessReview>, callback?: msRest.ServiceCallback<Models.V1SubjectAccessReview>): Promise<Models.CreateAuthorizationV1SubjectAccessReviewResponse> {
    return this.sendOperationRequest(
      {
        body,
        options
      },
      createAuthorizationV1SubjectAccessReviewOperationSpec,
      callback) as Promise<Models.CreateAuthorizationV1SubjectAccessReviewResponse>;
  }

  /**
   * get available resources
   * @param [options] The optional parameters
   * @returns Promise<Models.GetAuthorizationV1beta1APIResourcesResponse>
   */
  getAuthorizationV1beta1APIResources(options?: msRest.RequestOptionsBase): Promise<Models.GetAuthorizationV1beta1APIResourcesResponse>;
  /**
   * @param callback The callback
   */
  getAuthorizationV1beta1APIResources(callback: msRest.ServiceCallback<Models.V1APIResourceList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getAuthorizationV1beta1APIResources(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.V1APIResourceList>): void;
  getAuthorizationV1beta1APIResources(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.V1APIResourceList>, callback?: msRest.ServiceCallback<Models.V1APIResourceList>): Promise<Models.GetAuthorizationV1beta1APIResourcesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getAuthorizationV1beta1APIResourcesOperationSpec,
      callback) as Promise<Models.GetAuthorizationV1beta1APIResourcesResponse>;
  }

  /**
   * create a LocalSubjectAccessReview
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateAuthorizationV1beta1NamespacedLocalSubjectAccessReviewResponse>
   */
  createAuthorizationV1beta1NamespacedLocalSubjectAccessReview(body: Models.V1beta1LocalSubjectAccessReview, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateAuthorizationV1beta1NamespacedLocalSubjectAccessReviewOptionalParams): Promise<Models.CreateAuthorizationV1beta1NamespacedLocalSubjectAccessReviewResponse>;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  createAuthorizationV1beta1NamespacedLocalSubjectAccessReview(body: Models.V1beta1LocalSubjectAccessReview, namespace: string, callback: msRest.ServiceCallback<Models.V1beta1LocalSubjectAccessReview>): void;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  createAuthorizationV1beta1NamespacedLocalSubjectAccessReview(body: Models.V1beta1LocalSubjectAccessReview, namespace: string, options: Models.OpenShiftAPIwithKubernetesCreateAuthorizationV1beta1NamespacedLocalSubjectAccessReviewOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1LocalSubjectAccessReview>): void;
  createAuthorizationV1beta1NamespacedLocalSubjectAccessReview(body: Models.V1beta1LocalSubjectAccessReview, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateAuthorizationV1beta1NamespacedLocalSubjectAccessReviewOptionalParams | msRest.ServiceCallback<Models.V1beta1LocalSubjectAccessReview>, callback?: msRest.ServiceCallback<Models.V1beta1LocalSubjectAccessReview>): Promise<Models.CreateAuthorizationV1beta1NamespacedLocalSubjectAccessReviewResponse> {
    return this.sendOperationRequest(
      {
        body,
        namespace,
        options
      },
      createAuthorizationV1beta1NamespacedLocalSubjectAccessReviewOperationSpec,
      callback) as Promise<Models.CreateAuthorizationV1beta1NamespacedLocalSubjectAccessReviewResponse>;
  }

  /**
   * create a SelfSubjectAccessReview
   * @param body
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateAuthorizationV1beta1SelfSubjectAccessReviewResponse>
   */
  createAuthorizationV1beta1SelfSubjectAccessReview(body: Models.V1beta1SelfSubjectAccessReview, options?: Models.OpenShiftAPIwithKubernetesCreateAuthorizationV1beta1SelfSubjectAccessReviewOptionalParams): Promise<Models.CreateAuthorizationV1beta1SelfSubjectAccessReviewResponse>;
  /**
   * @param body
   * @param callback The callback
   */
  createAuthorizationV1beta1SelfSubjectAccessReview(body: Models.V1beta1SelfSubjectAccessReview, callback: msRest.ServiceCallback<Models.V1beta1SelfSubjectAccessReview>): void;
  /**
   * @param body
   * @param options The optional parameters
   * @param callback The callback
   */
  createAuthorizationV1beta1SelfSubjectAccessReview(body: Models.V1beta1SelfSubjectAccessReview, options: Models.OpenShiftAPIwithKubernetesCreateAuthorizationV1beta1SelfSubjectAccessReviewOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1SelfSubjectAccessReview>): void;
  createAuthorizationV1beta1SelfSubjectAccessReview(body: Models.V1beta1SelfSubjectAccessReview, options?: Models.OpenShiftAPIwithKubernetesCreateAuthorizationV1beta1SelfSubjectAccessReviewOptionalParams | msRest.ServiceCallback<Models.V1beta1SelfSubjectAccessReview>, callback?: msRest.ServiceCallback<Models.V1beta1SelfSubjectAccessReview>): Promise<Models.CreateAuthorizationV1beta1SelfSubjectAccessReviewResponse> {
    return this.sendOperationRequest(
      {
        body,
        options
      },
      createAuthorizationV1beta1SelfSubjectAccessReviewOperationSpec,
      callback) as Promise<Models.CreateAuthorizationV1beta1SelfSubjectAccessReviewResponse>;
  }

  /**
   * create a SelfSubjectRulesReview
   * @param body
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateAuthorizationV1beta1SelfSubjectRulesReviewResponse>
   */
  createAuthorizationV1beta1SelfSubjectRulesReview(body: Models.V1beta1SelfSubjectRulesReview, options?: Models.OpenShiftAPIwithKubernetesCreateAuthorizationV1beta1SelfSubjectRulesReviewOptionalParams): Promise<Models.CreateAuthorizationV1beta1SelfSubjectRulesReviewResponse>;
  /**
   * @param body
   * @param callback The callback
   */
  createAuthorizationV1beta1SelfSubjectRulesReview(body: Models.V1beta1SelfSubjectRulesReview, callback: msRest.ServiceCallback<Models.V1beta1SelfSubjectRulesReview>): void;
  /**
   * @param body
   * @param options The optional parameters
   * @param callback The callback
   */
  createAuthorizationV1beta1SelfSubjectRulesReview(body: Models.V1beta1SelfSubjectRulesReview, options: Models.OpenShiftAPIwithKubernetesCreateAuthorizationV1beta1SelfSubjectRulesReviewOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1SelfSubjectRulesReview>): void;
  createAuthorizationV1beta1SelfSubjectRulesReview(body: Models.V1beta1SelfSubjectRulesReview, options?: Models.OpenShiftAPIwithKubernetesCreateAuthorizationV1beta1SelfSubjectRulesReviewOptionalParams | msRest.ServiceCallback<Models.V1beta1SelfSubjectRulesReview>, callback?: msRest.ServiceCallback<Models.V1beta1SelfSubjectRulesReview>): Promise<Models.CreateAuthorizationV1beta1SelfSubjectRulesReviewResponse> {
    return this.sendOperationRequest(
      {
        body,
        options
      },
      createAuthorizationV1beta1SelfSubjectRulesReviewOperationSpec,
      callback) as Promise<Models.CreateAuthorizationV1beta1SelfSubjectRulesReviewResponse>;
  }

  /**
   * create a SubjectAccessReview
   * @param body
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateAuthorizationV1beta1SubjectAccessReviewResponse>
   */
  createAuthorizationV1beta1SubjectAccessReview(body: Models.V1beta1SubjectAccessReview, options?: Models.OpenShiftAPIwithKubernetesCreateAuthorizationV1beta1SubjectAccessReviewOptionalParams): Promise<Models.CreateAuthorizationV1beta1SubjectAccessReviewResponse>;
  /**
   * @param body
   * @param callback The callback
   */
  createAuthorizationV1beta1SubjectAccessReview(body: Models.V1beta1SubjectAccessReview, callback: msRest.ServiceCallback<Models.V1beta1SubjectAccessReview>): void;
  /**
   * @param body
   * @param options The optional parameters
   * @param callback The callback
   */
  createAuthorizationV1beta1SubjectAccessReview(body: Models.V1beta1SubjectAccessReview, options: Models.OpenShiftAPIwithKubernetesCreateAuthorizationV1beta1SubjectAccessReviewOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1SubjectAccessReview>): void;
  createAuthorizationV1beta1SubjectAccessReview(body: Models.V1beta1SubjectAccessReview, options?: Models.OpenShiftAPIwithKubernetesCreateAuthorizationV1beta1SubjectAccessReviewOptionalParams | msRest.ServiceCallback<Models.V1beta1SubjectAccessReview>, callback?: msRest.ServiceCallback<Models.V1beta1SubjectAccessReview>): Promise<Models.CreateAuthorizationV1beta1SubjectAccessReviewResponse> {
    return this.sendOperationRequest(
      {
        body,
        options
      },
      createAuthorizationV1beta1SubjectAccessReviewOperationSpec,
      callback) as Promise<Models.CreateAuthorizationV1beta1SubjectAccessReviewResponse>;
  }

  /**
   * get information of a group
   * @param [options] The optional parameters
   * @returns Promise<Models.GetAuthorizationOpenshiftIoAPIGroupResponse>
   */
  getAuthorizationOpenshiftIoAPIGroup(options?: msRest.RequestOptionsBase): Promise<Models.GetAuthorizationOpenshiftIoAPIGroupResponse>;
  /**
   * @param callback The callback
   */
  getAuthorizationOpenshiftIoAPIGroup(callback: msRest.ServiceCallback<Models.V1APIGroup>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getAuthorizationOpenshiftIoAPIGroup(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.V1APIGroup>): void;
  getAuthorizationOpenshiftIoAPIGroup(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.V1APIGroup>, callback?: msRest.ServiceCallback<Models.V1APIGroup>): Promise<Models.GetAuthorizationOpenshiftIoAPIGroupResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getAuthorizationOpenshiftIoAPIGroupOperationSpec,
      callback) as Promise<Models.GetAuthorizationOpenshiftIoAPIGroupResponse>;
  }

  /**
   * get available resources
   * @param [options] The optional parameters
   * @returns Promise<Models.GetAuthorizationOpenshiftIoV1APIResourcesResponse>
   */
  getAuthorizationOpenshiftIoV1APIResources(options?: msRest.RequestOptionsBase): Promise<Models.GetAuthorizationOpenshiftIoV1APIResourcesResponse>;
  /**
   * @param callback The callback
   */
  getAuthorizationOpenshiftIoV1APIResources(callback: msRest.ServiceCallback<Models.V1APIResourceList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getAuthorizationOpenshiftIoV1APIResources(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.V1APIResourceList>): void;
  getAuthorizationOpenshiftIoV1APIResources(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.V1APIResourceList>, callback?: msRest.ServiceCallback<Models.V1APIResourceList>): Promise<Models.GetAuthorizationOpenshiftIoV1APIResourcesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getAuthorizationOpenshiftIoV1APIResourcesOperationSpec,
      callback) as Promise<Models.GetAuthorizationOpenshiftIoV1APIResourcesResponse>;
  }

  /**
   * list objects of kind ClusterRoleBinding
   * @param [options] The optional parameters
   * @returns Promise<Models.ListAuthorizationOpenshiftIoV1ClusterRoleBindingResponse>
   */
  listAuthorizationOpenshiftIoV1ClusterRoleBinding(options?: Models.OpenShiftAPIwithKubernetesListAuthorizationOpenshiftIoV1ClusterRoleBindingOptionalParams): Promise<Models.ListAuthorizationOpenshiftIoV1ClusterRoleBindingResponse>;
  /**
   * @param callback The callback
   */
  listAuthorizationOpenshiftIoV1ClusterRoleBinding(callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1ClusterRoleBindingList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listAuthorizationOpenshiftIoV1ClusterRoleBinding(options: Models.OpenShiftAPIwithKubernetesListAuthorizationOpenshiftIoV1ClusterRoleBindingOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1ClusterRoleBindingList>): void;
  listAuthorizationOpenshiftIoV1ClusterRoleBinding(options?: Models.OpenShiftAPIwithKubernetesListAuthorizationOpenshiftIoV1ClusterRoleBindingOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1ClusterRoleBindingList>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1ClusterRoleBindingList>): Promise<Models.ListAuthorizationOpenshiftIoV1ClusterRoleBindingResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listAuthorizationOpenshiftIoV1ClusterRoleBindingOperationSpec,
      callback) as Promise<Models.ListAuthorizationOpenshiftIoV1ClusterRoleBindingResponse>;
  }

  /**
   * create a ClusterRoleBinding
   * @param body
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateAuthorizationOpenshiftIoV1ClusterRoleBindingResponse>
   */
  createAuthorizationOpenshiftIoV1ClusterRoleBinding(body: Models.Comgithubopenshiftapiauthorizationv1ClusterRoleBinding, options?: Models.OpenShiftAPIwithKubernetesCreateAuthorizationOpenshiftIoV1ClusterRoleBindingOptionalParams): Promise<Models.CreateAuthorizationOpenshiftIoV1ClusterRoleBindingResponse>;
  /**
   * @param body
   * @param callback The callback
   */
  createAuthorizationOpenshiftIoV1ClusterRoleBinding(body: Models.Comgithubopenshiftapiauthorizationv1ClusterRoleBinding, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1ClusterRoleBinding>): void;
  /**
   * @param body
   * @param options The optional parameters
   * @param callback The callback
   */
  createAuthorizationOpenshiftIoV1ClusterRoleBinding(body: Models.Comgithubopenshiftapiauthorizationv1ClusterRoleBinding, options: Models.OpenShiftAPIwithKubernetesCreateAuthorizationOpenshiftIoV1ClusterRoleBindingOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1ClusterRoleBinding>): void;
  createAuthorizationOpenshiftIoV1ClusterRoleBinding(body: Models.Comgithubopenshiftapiauthorizationv1ClusterRoleBinding, options?: Models.OpenShiftAPIwithKubernetesCreateAuthorizationOpenshiftIoV1ClusterRoleBindingOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1ClusterRoleBinding>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1ClusterRoleBinding>): Promise<Models.CreateAuthorizationOpenshiftIoV1ClusterRoleBindingResponse> {
    return this.sendOperationRequest(
      {
        body,
        options
      },
      createAuthorizationOpenshiftIoV1ClusterRoleBindingOperationSpec,
      callback) as Promise<Models.CreateAuthorizationOpenshiftIoV1ClusterRoleBindingResponse>;
  }

  /**
   * read the specified ClusterRoleBinding
   * @param name name of the ClusterRoleBinding
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadAuthorizationOpenshiftIoV1ClusterRoleBindingResponse>
   */
  readAuthorizationOpenshiftIoV1ClusterRoleBinding(name: string, options?: Models.OpenShiftAPIwithKubernetesReadAuthorizationOpenshiftIoV1ClusterRoleBindingOptionalParams): Promise<Models.ReadAuthorizationOpenshiftIoV1ClusterRoleBindingResponse>;
  /**
   * @param name name of the ClusterRoleBinding
   * @param callback The callback
   */
  readAuthorizationOpenshiftIoV1ClusterRoleBinding(name: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1ClusterRoleBinding>): void;
  /**
   * @param name name of the ClusterRoleBinding
   * @param options The optional parameters
   * @param callback The callback
   */
  readAuthorizationOpenshiftIoV1ClusterRoleBinding(name: string, options: Models.OpenShiftAPIwithKubernetesReadAuthorizationOpenshiftIoV1ClusterRoleBindingOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1ClusterRoleBinding>): void;
  readAuthorizationOpenshiftIoV1ClusterRoleBinding(name: string, options?: Models.OpenShiftAPIwithKubernetesReadAuthorizationOpenshiftIoV1ClusterRoleBindingOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1ClusterRoleBinding>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1ClusterRoleBinding>): Promise<Models.ReadAuthorizationOpenshiftIoV1ClusterRoleBindingResponse> {
    return this.sendOperationRequest(
      {
        name,
        options
      },
      readAuthorizationOpenshiftIoV1ClusterRoleBindingOperationSpec,
      callback) as Promise<Models.ReadAuthorizationOpenshiftIoV1ClusterRoleBindingResponse>;
  }

  /**
   * replace the specified ClusterRoleBinding
   * @param body
   * @param name name of the ClusterRoleBinding
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceAuthorizationOpenshiftIoV1ClusterRoleBindingResponse>
   */
  replaceAuthorizationOpenshiftIoV1ClusterRoleBinding(body: Models.Comgithubopenshiftapiauthorizationv1ClusterRoleBinding, name: string, options?: Models.OpenShiftAPIwithKubernetesReplaceAuthorizationOpenshiftIoV1ClusterRoleBindingOptionalParams): Promise<Models.ReplaceAuthorizationOpenshiftIoV1ClusterRoleBindingResponse>;
  /**
   * @param body
   * @param name name of the ClusterRoleBinding
   * @param callback The callback
   */
  replaceAuthorizationOpenshiftIoV1ClusterRoleBinding(body: Models.Comgithubopenshiftapiauthorizationv1ClusterRoleBinding, name: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1ClusterRoleBinding>): void;
  /**
   * @param body
   * @param name name of the ClusterRoleBinding
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceAuthorizationOpenshiftIoV1ClusterRoleBinding(body: Models.Comgithubopenshiftapiauthorizationv1ClusterRoleBinding, name: string, options: Models.OpenShiftAPIwithKubernetesReplaceAuthorizationOpenshiftIoV1ClusterRoleBindingOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1ClusterRoleBinding>): void;
  replaceAuthorizationOpenshiftIoV1ClusterRoleBinding(body: Models.Comgithubopenshiftapiauthorizationv1ClusterRoleBinding, name: string, options?: Models.OpenShiftAPIwithKubernetesReplaceAuthorizationOpenshiftIoV1ClusterRoleBindingOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1ClusterRoleBinding>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1ClusterRoleBinding>): Promise<Models.ReplaceAuthorizationOpenshiftIoV1ClusterRoleBindingResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      replaceAuthorizationOpenshiftIoV1ClusterRoleBindingOperationSpec,
      callback) as Promise<Models.ReplaceAuthorizationOpenshiftIoV1ClusterRoleBindingResponse>;
  }

  /**
   * delete a ClusterRoleBinding
   * @param body
   * @param name name of the ClusterRoleBinding
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteAuthorizationOpenshiftIoV1ClusterRoleBindingResponse>
   */
  deleteAuthorizationOpenshiftIoV1ClusterRoleBinding(body: Models.V1DeleteOptions, name: string, options?: Models.OpenShiftAPIwithKubernetesDeleteAuthorizationOpenshiftIoV1ClusterRoleBindingOptionalParams): Promise<Models.DeleteAuthorizationOpenshiftIoV1ClusterRoleBindingResponse>;
  /**
   * @param body
   * @param name name of the ClusterRoleBinding
   * @param callback The callback
   */
  deleteAuthorizationOpenshiftIoV1ClusterRoleBinding(body: Models.V1DeleteOptions, name: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param name name of the ClusterRoleBinding
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteAuthorizationOpenshiftIoV1ClusterRoleBinding(body: Models.V1DeleteOptions, name: string, options: Models.OpenShiftAPIwithKubernetesDeleteAuthorizationOpenshiftIoV1ClusterRoleBindingOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteAuthorizationOpenshiftIoV1ClusterRoleBinding(body: Models.V1DeleteOptions, name: string, options?: Models.OpenShiftAPIwithKubernetesDeleteAuthorizationOpenshiftIoV1ClusterRoleBindingOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteAuthorizationOpenshiftIoV1ClusterRoleBindingResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      deleteAuthorizationOpenshiftIoV1ClusterRoleBindingOperationSpec,
      callback) as Promise<Models.DeleteAuthorizationOpenshiftIoV1ClusterRoleBindingResponse>;
  }

  /**
   * partially update the specified ClusterRoleBinding
   * @param body
   * @param name name of the ClusterRoleBinding
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchAuthorizationOpenshiftIoV1ClusterRoleBindingResponse>
   */
  patchAuthorizationOpenshiftIoV1ClusterRoleBinding(body: any, name: string, options?: Models.OpenShiftAPIwithKubernetesPatchAuthorizationOpenshiftIoV1ClusterRoleBindingOptionalParams): Promise<Models.PatchAuthorizationOpenshiftIoV1ClusterRoleBindingResponse>;
  /**
   * @param body
   * @param name name of the ClusterRoleBinding
   * @param callback The callback
   */
  patchAuthorizationOpenshiftIoV1ClusterRoleBinding(body: any, name: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1ClusterRoleBinding>): void;
  /**
   * @param body
   * @param name name of the ClusterRoleBinding
   * @param options The optional parameters
   * @param callback The callback
   */
  patchAuthorizationOpenshiftIoV1ClusterRoleBinding(body: any, name: string, options: Models.OpenShiftAPIwithKubernetesPatchAuthorizationOpenshiftIoV1ClusterRoleBindingOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1ClusterRoleBinding>): void;
  patchAuthorizationOpenshiftIoV1ClusterRoleBinding(body: any, name: string, options?: Models.OpenShiftAPIwithKubernetesPatchAuthorizationOpenshiftIoV1ClusterRoleBindingOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1ClusterRoleBinding>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1ClusterRoleBinding>): Promise<Models.PatchAuthorizationOpenshiftIoV1ClusterRoleBindingResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      patchAuthorizationOpenshiftIoV1ClusterRoleBindingOperationSpec,
      callback) as Promise<Models.PatchAuthorizationOpenshiftIoV1ClusterRoleBindingResponse>;
  }

  /**
   * list objects of kind ClusterRole
   * @param [options] The optional parameters
   * @returns Promise<Models.ListAuthorizationOpenshiftIoV1ClusterRoleResponse>
   */
  listAuthorizationOpenshiftIoV1ClusterRole(options?: Models.OpenShiftAPIwithKubernetesListAuthorizationOpenshiftIoV1ClusterRoleOptionalParams): Promise<Models.ListAuthorizationOpenshiftIoV1ClusterRoleResponse>;
  /**
   * @param callback The callback
   */
  listAuthorizationOpenshiftIoV1ClusterRole(callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1ClusterRoleList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listAuthorizationOpenshiftIoV1ClusterRole(options: Models.OpenShiftAPIwithKubernetesListAuthorizationOpenshiftIoV1ClusterRoleOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1ClusterRoleList>): void;
  listAuthorizationOpenshiftIoV1ClusterRole(options?: Models.OpenShiftAPIwithKubernetesListAuthorizationOpenshiftIoV1ClusterRoleOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1ClusterRoleList>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1ClusterRoleList>): Promise<Models.ListAuthorizationOpenshiftIoV1ClusterRoleResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listAuthorizationOpenshiftIoV1ClusterRoleOperationSpec,
      callback) as Promise<Models.ListAuthorizationOpenshiftIoV1ClusterRoleResponse>;
  }

  /**
   * create a ClusterRole
   * @param body
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateAuthorizationOpenshiftIoV1ClusterRoleResponse>
   */
  createAuthorizationOpenshiftIoV1ClusterRole(body: Models.Comgithubopenshiftapiauthorizationv1ClusterRole, options?: Models.OpenShiftAPIwithKubernetesCreateAuthorizationOpenshiftIoV1ClusterRoleOptionalParams): Promise<Models.CreateAuthorizationOpenshiftIoV1ClusterRoleResponse>;
  /**
   * @param body
   * @param callback The callback
   */
  createAuthorizationOpenshiftIoV1ClusterRole(body: Models.Comgithubopenshiftapiauthorizationv1ClusterRole, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1ClusterRole>): void;
  /**
   * @param body
   * @param options The optional parameters
   * @param callback The callback
   */
  createAuthorizationOpenshiftIoV1ClusterRole(body: Models.Comgithubopenshiftapiauthorizationv1ClusterRole, options: Models.OpenShiftAPIwithKubernetesCreateAuthorizationOpenshiftIoV1ClusterRoleOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1ClusterRole>): void;
  createAuthorizationOpenshiftIoV1ClusterRole(body: Models.Comgithubopenshiftapiauthorizationv1ClusterRole, options?: Models.OpenShiftAPIwithKubernetesCreateAuthorizationOpenshiftIoV1ClusterRoleOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1ClusterRole>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1ClusterRole>): Promise<Models.CreateAuthorizationOpenshiftIoV1ClusterRoleResponse> {
    return this.sendOperationRequest(
      {
        body,
        options
      },
      createAuthorizationOpenshiftIoV1ClusterRoleOperationSpec,
      callback) as Promise<Models.CreateAuthorizationOpenshiftIoV1ClusterRoleResponse>;
  }

  /**
   * read the specified ClusterRole
   * @param name name of the ClusterRole
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadAuthorizationOpenshiftIoV1ClusterRoleResponse>
   */
  readAuthorizationOpenshiftIoV1ClusterRole(name: string, options?: Models.OpenShiftAPIwithKubernetesReadAuthorizationOpenshiftIoV1ClusterRoleOptionalParams): Promise<Models.ReadAuthorizationOpenshiftIoV1ClusterRoleResponse>;
  /**
   * @param name name of the ClusterRole
   * @param callback The callback
   */
  readAuthorizationOpenshiftIoV1ClusterRole(name: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1ClusterRole>): void;
  /**
   * @param name name of the ClusterRole
   * @param options The optional parameters
   * @param callback The callback
   */
  readAuthorizationOpenshiftIoV1ClusterRole(name: string, options: Models.OpenShiftAPIwithKubernetesReadAuthorizationOpenshiftIoV1ClusterRoleOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1ClusterRole>): void;
  readAuthorizationOpenshiftIoV1ClusterRole(name: string, options?: Models.OpenShiftAPIwithKubernetesReadAuthorizationOpenshiftIoV1ClusterRoleOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1ClusterRole>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1ClusterRole>): Promise<Models.ReadAuthorizationOpenshiftIoV1ClusterRoleResponse> {
    return this.sendOperationRequest(
      {
        name,
        options
      },
      readAuthorizationOpenshiftIoV1ClusterRoleOperationSpec,
      callback) as Promise<Models.ReadAuthorizationOpenshiftIoV1ClusterRoleResponse>;
  }

  /**
   * replace the specified ClusterRole
   * @param body
   * @param name name of the ClusterRole
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceAuthorizationOpenshiftIoV1ClusterRoleResponse>
   */
  replaceAuthorizationOpenshiftIoV1ClusterRole(body: Models.Comgithubopenshiftapiauthorizationv1ClusterRole, name: string, options?: Models.OpenShiftAPIwithKubernetesReplaceAuthorizationOpenshiftIoV1ClusterRoleOptionalParams): Promise<Models.ReplaceAuthorizationOpenshiftIoV1ClusterRoleResponse>;
  /**
   * @param body
   * @param name name of the ClusterRole
   * @param callback The callback
   */
  replaceAuthorizationOpenshiftIoV1ClusterRole(body: Models.Comgithubopenshiftapiauthorizationv1ClusterRole, name: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1ClusterRole>): void;
  /**
   * @param body
   * @param name name of the ClusterRole
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceAuthorizationOpenshiftIoV1ClusterRole(body: Models.Comgithubopenshiftapiauthorizationv1ClusterRole, name: string, options: Models.OpenShiftAPIwithKubernetesReplaceAuthorizationOpenshiftIoV1ClusterRoleOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1ClusterRole>): void;
  replaceAuthorizationOpenshiftIoV1ClusterRole(body: Models.Comgithubopenshiftapiauthorizationv1ClusterRole, name: string, options?: Models.OpenShiftAPIwithKubernetesReplaceAuthorizationOpenshiftIoV1ClusterRoleOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1ClusterRole>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1ClusterRole>): Promise<Models.ReplaceAuthorizationOpenshiftIoV1ClusterRoleResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      replaceAuthorizationOpenshiftIoV1ClusterRoleOperationSpec,
      callback) as Promise<Models.ReplaceAuthorizationOpenshiftIoV1ClusterRoleResponse>;
  }

  /**
   * delete a ClusterRole
   * @param body
   * @param name name of the ClusterRole
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteAuthorizationOpenshiftIoV1ClusterRoleResponse>
   */
  deleteAuthorizationOpenshiftIoV1ClusterRole(body: Models.V1DeleteOptions, name: string, options?: Models.OpenShiftAPIwithKubernetesDeleteAuthorizationOpenshiftIoV1ClusterRoleOptionalParams): Promise<Models.DeleteAuthorizationOpenshiftIoV1ClusterRoleResponse>;
  /**
   * @param body
   * @param name name of the ClusterRole
   * @param callback The callback
   */
  deleteAuthorizationOpenshiftIoV1ClusterRole(body: Models.V1DeleteOptions, name: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param name name of the ClusterRole
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteAuthorizationOpenshiftIoV1ClusterRole(body: Models.V1DeleteOptions, name: string, options: Models.OpenShiftAPIwithKubernetesDeleteAuthorizationOpenshiftIoV1ClusterRoleOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteAuthorizationOpenshiftIoV1ClusterRole(body: Models.V1DeleteOptions, name: string, options?: Models.OpenShiftAPIwithKubernetesDeleteAuthorizationOpenshiftIoV1ClusterRoleOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteAuthorizationOpenshiftIoV1ClusterRoleResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      deleteAuthorizationOpenshiftIoV1ClusterRoleOperationSpec,
      callback) as Promise<Models.DeleteAuthorizationOpenshiftIoV1ClusterRoleResponse>;
  }

  /**
   * partially update the specified ClusterRole
   * @param body
   * @param name name of the ClusterRole
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchAuthorizationOpenshiftIoV1ClusterRoleResponse>
   */
  patchAuthorizationOpenshiftIoV1ClusterRole(body: any, name: string, options?: Models.OpenShiftAPIwithKubernetesPatchAuthorizationOpenshiftIoV1ClusterRoleOptionalParams): Promise<Models.PatchAuthorizationOpenshiftIoV1ClusterRoleResponse>;
  /**
   * @param body
   * @param name name of the ClusterRole
   * @param callback The callback
   */
  patchAuthorizationOpenshiftIoV1ClusterRole(body: any, name: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1ClusterRole>): void;
  /**
   * @param body
   * @param name name of the ClusterRole
   * @param options The optional parameters
   * @param callback The callback
   */
  patchAuthorizationOpenshiftIoV1ClusterRole(body: any, name: string, options: Models.OpenShiftAPIwithKubernetesPatchAuthorizationOpenshiftIoV1ClusterRoleOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1ClusterRole>): void;
  patchAuthorizationOpenshiftIoV1ClusterRole(body: any, name: string, options?: Models.OpenShiftAPIwithKubernetesPatchAuthorizationOpenshiftIoV1ClusterRoleOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1ClusterRole>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1ClusterRole>): Promise<Models.PatchAuthorizationOpenshiftIoV1ClusterRoleResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      patchAuthorizationOpenshiftIoV1ClusterRoleOperationSpec,
      callback) as Promise<Models.PatchAuthorizationOpenshiftIoV1ClusterRoleResponse>;
  }

  /**
   * create a LocalResourceAccessReview
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns
   * Promise<Models.CreateAuthorizationOpenshiftIoV1NamespacedLocalResourceAccessReviewResponse>
   */
  createAuthorizationOpenshiftIoV1NamespacedLocalResourceAccessReview(body: Models.Comgithubopenshiftapiauthorizationv1LocalResourceAccessReview, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateAuthorizationOpenshiftIoV1NamespacedLocalResourceAccessReviewOptionalParams): Promise<Models.CreateAuthorizationOpenshiftIoV1NamespacedLocalResourceAccessReviewResponse>;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  createAuthorizationOpenshiftIoV1NamespacedLocalResourceAccessReview(body: Models.Comgithubopenshiftapiauthorizationv1LocalResourceAccessReview, namespace: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1LocalResourceAccessReview>): void;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  createAuthorizationOpenshiftIoV1NamespacedLocalResourceAccessReview(body: Models.Comgithubopenshiftapiauthorizationv1LocalResourceAccessReview, namespace: string, options: Models.OpenShiftAPIwithKubernetesCreateAuthorizationOpenshiftIoV1NamespacedLocalResourceAccessReviewOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1LocalResourceAccessReview>): void;
  createAuthorizationOpenshiftIoV1NamespacedLocalResourceAccessReview(body: Models.Comgithubopenshiftapiauthorizationv1LocalResourceAccessReview, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateAuthorizationOpenshiftIoV1NamespacedLocalResourceAccessReviewOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1LocalResourceAccessReview>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1LocalResourceAccessReview>): Promise<Models.CreateAuthorizationOpenshiftIoV1NamespacedLocalResourceAccessReviewResponse> {
    return this.sendOperationRequest(
      {
        body,
        namespace,
        options
      },
      createAuthorizationOpenshiftIoV1NamespacedLocalResourceAccessReviewOperationSpec,
      callback) as Promise<Models.CreateAuthorizationOpenshiftIoV1NamespacedLocalResourceAccessReviewResponse>;
  }

  /**
   * create a LocalSubjectAccessReview
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns
   * Promise<Models.CreateAuthorizationOpenshiftIoV1NamespacedLocalSubjectAccessReviewResponse>
   */
  createAuthorizationOpenshiftIoV1NamespacedLocalSubjectAccessReview(body: Models.Comgithubopenshiftapiauthorizationv1LocalSubjectAccessReview, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateAuthorizationOpenshiftIoV1NamespacedLocalSubjectAccessReviewOptionalParams): Promise<Models.CreateAuthorizationOpenshiftIoV1NamespacedLocalSubjectAccessReviewResponse>;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  createAuthorizationOpenshiftIoV1NamespacedLocalSubjectAccessReview(body: Models.Comgithubopenshiftapiauthorizationv1LocalSubjectAccessReview, namespace: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1LocalSubjectAccessReview>): void;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  createAuthorizationOpenshiftIoV1NamespacedLocalSubjectAccessReview(body: Models.Comgithubopenshiftapiauthorizationv1LocalSubjectAccessReview, namespace: string, options: Models.OpenShiftAPIwithKubernetesCreateAuthorizationOpenshiftIoV1NamespacedLocalSubjectAccessReviewOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1LocalSubjectAccessReview>): void;
  createAuthorizationOpenshiftIoV1NamespacedLocalSubjectAccessReview(body: Models.Comgithubopenshiftapiauthorizationv1LocalSubjectAccessReview, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateAuthorizationOpenshiftIoV1NamespacedLocalSubjectAccessReviewOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1LocalSubjectAccessReview>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1LocalSubjectAccessReview>): Promise<Models.CreateAuthorizationOpenshiftIoV1NamespacedLocalSubjectAccessReviewResponse> {
    return this.sendOperationRequest(
      {
        body,
        namespace,
        options
      },
      createAuthorizationOpenshiftIoV1NamespacedLocalSubjectAccessReviewOperationSpec,
      callback) as Promise<Models.CreateAuthorizationOpenshiftIoV1NamespacedLocalSubjectAccessReviewResponse>;
  }

  /**
   * list or watch objects of kind RoleBindingRestriction
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ListAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionResponse>
   */
  listAuthorizationOpenshiftIoV1NamespacedRoleBindingRestriction(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionOptionalParams): Promise<Models.ListAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  listAuthorizationOpenshiftIoV1NamespacedRoleBindingRestriction(namespace: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1RoleBindingRestrictionList>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  listAuthorizationOpenshiftIoV1NamespacedRoleBindingRestriction(namespace: string, options: Models.OpenShiftAPIwithKubernetesListAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1RoleBindingRestrictionList>): void;
  listAuthorizationOpenshiftIoV1NamespacedRoleBindingRestriction(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1RoleBindingRestrictionList>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1RoleBindingRestrictionList>): Promise<Models.ListAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      listAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionOperationSpec,
      callback) as Promise<Models.ListAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionResponse>;
  }

  /**
   * create a RoleBindingRestriction
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns
   * Promise<Models.CreateAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionResponse>
   */
  createAuthorizationOpenshiftIoV1NamespacedRoleBindingRestriction(body: Models.Comgithubopenshiftapiauthorizationv1RoleBindingRestriction, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionOptionalParams): Promise<Models.CreateAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionResponse>;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  createAuthorizationOpenshiftIoV1NamespacedRoleBindingRestriction(body: Models.Comgithubopenshiftapiauthorizationv1RoleBindingRestriction, namespace: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1RoleBindingRestriction>): void;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  createAuthorizationOpenshiftIoV1NamespacedRoleBindingRestriction(body: Models.Comgithubopenshiftapiauthorizationv1RoleBindingRestriction, namespace: string, options: Models.OpenShiftAPIwithKubernetesCreateAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1RoleBindingRestriction>): void;
  createAuthorizationOpenshiftIoV1NamespacedRoleBindingRestriction(body: Models.Comgithubopenshiftapiauthorizationv1RoleBindingRestriction, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1RoleBindingRestriction>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1RoleBindingRestriction>): Promise<Models.CreateAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionResponse> {
    return this.sendOperationRequest(
      {
        body,
        namespace,
        options
      },
      createAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionOperationSpec,
      callback) as Promise<Models.CreateAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionResponse>;
  }

  /**
   * delete collection of RoleBindingRestriction
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns
   * Promise<Models.DeleteAuthorizationOpenshiftIoV1CollectionNamespacedRoleBindingRestrictionResponse>
   */
  deleteAuthorizationOpenshiftIoV1CollectionNamespacedRoleBindingRestriction(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteAuthorizationOpenshiftIoV1CollectionNamespacedRoleBindingRestrictionOptionalParams): Promise<Models.DeleteAuthorizationOpenshiftIoV1CollectionNamespacedRoleBindingRestrictionResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteAuthorizationOpenshiftIoV1CollectionNamespacedRoleBindingRestriction(namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteAuthorizationOpenshiftIoV1CollectionNamespacedRoleBindingRestriction(namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteAuthorizationOpenshiftIoV1CollectionNamespacedRoleBindingRestrictionOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteAuthorizationOpenshiftIoV1CollectionNamespacedRoleBindingRestriction(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteAuthorizationOpenshiftIoV1CollectionNamespacedRoleBindingRestrictionOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteAuthorizationOpenshiftIoV1CollectionNamespacedRoleBindingRestrictionResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      deleteAuthorizationOpenshiftIoV1CollectionNamespacedRoleBindingRestrictionOperationSpec,
      callback) as Promise<Models.DeleteAuthorizationOpenshiftIoV1CollectionNamespacedRoleBindingRestrictionResponse>;
  }

  /**
   * read the specified RoleBindingRestriction
   * @param name name of the RoleBindingRestriction
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionResponse>
   */
  readAuthorizationOpenshiftIoV1NamespacedRoleBindingRestriction(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionOptionalParams): Promise<Models.ReadAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionResponse>;
  /**
   * @param name name of the RoleBindingRestriction
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readAuthorizationOpenshiftIoV1NamespacedRoleBindingRestriction(name: string, namespace: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1RoleBindingRestriction>): void;
  /**
   * @param name name of the RoleBindingRestriction
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readAuthorizationOpenshiftIoV1NamespacedRoleBindingRestriction(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1RoleBindingRestriction>): void;
  readAuthorizationOpenshiftIoV1NamespacedRoleBindingRestriction(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1RoleBindingRestriction>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1RoleBindingRestriction>): Promise<Models.ReadAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionOperationSpec,
      callback) as Promise<Models.ReadAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionResponse>;
  }

  /**
   * replace the specified RoleBindingRestriction
   * @param body
   * @param name name of the RoleBindingRestriction
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns
   * Promise<Models.ReplaceAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionResponse>
   */
  replaceAuthorizationOpenshiftIoV1NamespacedRoleBindingRestriction(body: Models.Comgithubopenshiftapiauthorizationv1RoleBindingRestriction, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionOptionalParams): Promise<Models.ReplaceAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionResponse>;
  /**
   * @param body
   * @param name name of the RoleBindingRestriction
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replaceAuthorizationOpenshiftIoV1NamespacedRoleBindingRestriction(body: Models.Comgithubopenshiftapiauthorizationv1RoleBindingRestriction, name: string, namespace: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1RoleBindingRestriction>): void;
  /**
   * @param body
   * @param name name of the RoleBindingRestriction
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceAuthorizationOpenshiftIoV1NamespacedRoleBindingRestriction(body: Models.Comgithubopenshiftapiauthorizationv1RoleBindingRestriction, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplaceAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1RoleBindingRestriction>): void;
  replaceAuthorizationOpenshiftIoV1NamespacedRoleBindingRestriction(body: Models.Comgithubopenshiftapiauthorizationv1RoleBindingRestriction, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1RoleBindingRestriction>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1RoleBindingRestriction>): Promise<Models.ReplaceAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replaceAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionOperationSpec,
      callback) as Promise<Models.ReplaceAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionResponse>;
  }

  /**
   * delete a RoleBindingRestriction
   * @param body
   * @param name name of the RoleBindingRestriction
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns
   * Promise<Models.DeleteAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionResponse>
   */
  deleteAuthorizationOpenshiftIoV1NamespacedRoleBindingRestriction(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionOptionalParams): Promise<Models.DeleteAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionResponse>;
  /**
   * @param body
   * @param name name of the RoleBindingRestriction
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteAuthorizationOpenshiftIoV1NamespacedRoleBindingRestriction(body: Models.V1DeleteOptions, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param name name of the RoleBindingRestriction
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteAuthorizationOpenshiftIoV1NamespacedRoleBindingRestriction(body: Models.V1DeleteOptions, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteAuthorizationOpenshiftIoV1NamespacedRoleBindingRestriction(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      deleteAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionOperationSpec,
      callback) as Promise<Models.DeleteAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionResponse>;
  }

  /**
   * partially update the specified RoleBindingRestriction
   * @param body
   * @param name name of the RoleBindingRestriction
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionResponse>
   */
  patchAuthorizationOpenshiftIoV1NamespacedRoleBindingRestriction(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionOptionalParams): Promise<Models.PatchAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionResponse>;
  /**
   * @param body
   * @param name name of the RoleBindingRestriction
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  patchAuthorizationOpenshiftIoV1NamespacedRoleBindingRestriction(body: any, name: string, namespace: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1RoleBindingRestriction>): void;
  /**
   * @param body
   * @param name name of the RoleBindingRestriction
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  patchAuthorizationOpenshiftIoV1NamespacedRoleBindingRestriction(body: any, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesPatchAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1RoleBindingRestriction>): void;
  patchAuthorizationOpenshiftIoV1NamespacedRoleBindingRestriction(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1RoleBindingRestriction>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1RoleBindingRestriction>): Promise<Models.PatchAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      patchAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionOperationSpec,
      callback) as Promise<Models.PatchAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionResponse>;
  }

  /**
   * list objects of kind RoleBinding
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ListAuthorizationOpenshiftIoV1NamespacedRoleBindingResponse>
   */
  listAuthorizationOpenshiftIoV1NamespacedRoleBinding(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListAuthorizationOpenshiftIoV1NamespacedRoleBindingOptionalParams): Promise<Models.ListAuthorizationOpenshiftIoV1NamespacedRoleBindingResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  listAuthorizationOpenshiftIoV1NamespacedRoleBinding(namespace: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1RoleBindingList>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  listAuthorizationOpenshiftIoV1NamespacedRoleBinding(namespace: string, options: Models.OpenShiftAPIwithKubernetesListAuthorizationOpenshiftIoV1NamespacedRoleBindingOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1RoleBindingList>): void;
  listAuthorizationOpenshiftIoV1NamespacedRoleBinding(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListAuthorizationOpenshiftIoV1NamespacedRoleBindingOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1RoleBindingList>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1RoleBindingList>): Promise<Models.ListAuthorizationOpenshiftIoV1NamespacedRoleBindingResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      listAuthorizationOpenshiftIoV1NamespacedRoleBindingOperationSpec,
      callback) as Promise<Models.ListAuthorizationOpenshiftIoV1NamespacedRoleBindingResponse>;
  }

  /**
   * create a RoleBinding
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateAuthorizationOpenshiftIoV1NamespacedRoleBindingResponse>
   */
  createAuthorizationOpenshiftIoV1NamespacedRoleBinding(body: Models.Comgithubopenshiftapiauthorizationv1RoleBinding, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateAuthorizationOpenshiftIoV1NamespacedRoleBindingOptionalParams): Promise<Models.CreateAuthorizationOpenshiftIoV1NamespacedRoleBindingResponse>;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  createAuthorizationOpenshiftIoV1NamespacedRoleBinding(body: Models.Comgithubopenshiftapiauthorizationv1RoleBinding, namespace: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1RoleBinding>): void;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  createAuthorizationOpenshiftIoV1NamespacedRoleBinding(body: Models.Comgithubopenshiftapiauthorizationv1RoleBinding, namespace: string, options: Models.OpenShiftAPIwithKubernetesCreateAuthorizationOpenshiftIoV1NamespacedRoleBindingOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1RoleBinding>): void;
  createAuthorizationOpenshiftIoV1NamespacedRoleBinding(body: Models.Comgithubopenshiftapiauthorizationv1RoleBinding, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateAuthorizationOpenshiftIoV1NamespacedRoleBindingOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1RoleBinding>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1RoleBinding>): Promise<Models.CreateAuthorizationOpenshiftIoV1NamespacedRoleBindingResponse> {
    return this.sendOperationRequest(
      {
        body,
        namespace,
        options
      },
      createAuthorizationOpenshiftIoV1NamespacedRoleBindingOperationSpec,
      callback) as Promise<Models.CreateAuthorizationOpenshiftIoV1NamespacedRoleBindingResponse>;
  }

  /**
   * read the specified RoleBinding
   * @param name name of the RoleBinding
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadAuthorizationOpenshiftIoV1NamespacedRoleBindingResponse>
   */
  readAuthorizationOpenshiftIoV1NamespacedRoleBinding(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadAuthorizationOpenshiftIoV1NamespacedRoleBindingOptionalParams): Promise<Models.ReadAuthorizationOpenshiftIoV1NamespacedRoleBindingResponse>;
  /**
   * @param name name of the RoleBinding
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readAuthorizationOpenshiftIoV1NamespacedRoleBinding(name: string, namespace: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1RoleBinding>): void;
  /**
   * @param name name of the RoleBinding
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readAuthorizationOpenshiftIoV1NamespacedRoleBinding(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadAuthorizationOpenshiftIoV1NamespacedRoleBindingOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1RoleBinding>): void;
  readAuthorizationOpenshiftIoV1NamespacedRoleBinding(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadAuthorizationOpenshiftIoV1NamespacedRoleBindingOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1RoleBinding>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1RoleBinding>): Promise<Models.ReadAuthorizationOpenshiftIoV1NamespacedRoleBindingResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readAuthorizationOpenshiftIoV1NamespacedRoleBindingOperationSpec,
      callback) as Promise<Models.ReadAuthorizationOpenshiftIoV1NamespacedRoleBindingResponse>;
  }

  /**
   * replace the specified RoleBinding
   * @param body
   * @param name name of the RoleBinding
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceAuthorizationOpenshiftIoV1NamespacedRoleBindingResponse>
   */
  replaceAuthorizationOpenshiftIoV1NamespacedRoleBinding(body: Models.Comgithubopenshiftapiauthorizationv1RoleBinding, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceAuthorizationOpenshiftIoV1NamespacedRoleBindingOptionalParams): Promise<Models.ReplaceAuthorizationOpenshiftIoV1NamespacedRoleBindingResponse>;
  /**
   * @param body
   * @param name name of the RoleBinding
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replaceAuthorizationOpenshiftIoV1NamespacedRoleBinding(body: Models.Comgithubopenshiftapiauthorizationv1RoleBinding, name: string, namespace: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1RoleBinding>): void;
  /**
   * @param body
   * @param name name of the RoleBinding
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceAuthorizationOpenshiftIoV1NamespacedRoleBinding(body: Models.Comgithubopenshiftapiauthorizationv1RoleBinding, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplaceAuthorizationOpenshiftIoV1NamespacedRoleBindingOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1RoleBinding>): void;
  replaceAuthorizationOpenshiftIoV1NamespacedRoleBinding(body: Models.Comgithubopenshiftapiauthorizationv1RoleBinding, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceAuthorizationOpenshiftIoV1NamespacedRoleBindingOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1RoleBinding>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1RoleBinding>): Promise<Models.ReplaceAuthorizationOpenshiftIoV1NamespacedRoleBindingResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replaceAuthorizationOpenshiftIoV1NamespacedRoleBindingOperationSpec,
      callback) as Promise<Models.ReplaceAuthorizationOpenshiftIoV1NamespacedRoleBindingResponse>;
  }

  /**
   * delete a RoleBinding
   * @param body
   * @param name name of the RoleBinding
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteAuthorizationOpenshiftIoV1NamespacedRoleBindingResponse>
   */
  deleteAuthorizationOpenshiftIoV1NamespacedRoleBinding(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteAuthorizationOpenshiftIoV1NamespacedRoleBindingOptionalParams): Promise<Models.DeleteAuthorizationOpenshiftIoV1NamespacedRoleBindingResponse>;
  /**
   * @param body
   * @param name name of the RoleBinding
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteAuthorizationOpenshiftIoV1NamespacedRoleBinding(body: Models.V1DeleteOptions, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param name name of the RoleBinding
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteAuthorizationOpenshiftIoV1NamespacedRoleBinding(body: Models.V1DeleteOptions, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteAuthorizationOpenshiftIoV1NamespacedRoleBindingOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteAuthorizationOpenshiftIoV1NamespacedRoleBinding(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteAuthorizationOpenshiftIoV1NamespacedRoleBindingOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteAuthorizationOpenshiftIoV1NamespacedRoleBindingResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      deleteAuthorizationOpenshiftIoV1NamespacedRoleBindingOperationSpec,
      callback) as Promise<Models.DeleteAuthorizationOpenshiftIoV1NamespacedRoleBindingResponse>;
  }

  /**
   * partially update the specified RoleBinding
   * @param body
   * @param name name of the RoleBinding
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchAuthorizationOpenshiftIoV1NamespacedRoleBindingResponse>
   */
  patchAuthorizationOpenshiftIoV1NamespacedRoleBinding(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchAuthorizationOpenshiftIoV1NamespacedRoleBindingOptionalParams): Promise<Models.PatchAuthorizationOpenshiftIoV1NamespacedRoleBindingResponse>;
  /**
   * @param body
   * @param name name of the RoleBinding
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  patchAuthorizationOpenshiftIoV1NamespacedRoleBinding(body: any, name: string, namespace: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1RoleBinding>): void;
  /**
   * @param body
   * @param name name of the RoleBinding
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  patchAuthorizationOpenshiftIoV1NamespacedRoleBinding(body: any, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesPatchAuthorizationOpenshiftIoV1NamespacedRoleBindingOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1RoleBinding>): void;
  patchAuthorizationOpenshiftIoV1NamespacedRoleBinding(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchAuthorizationOpenshiftIoV1NamespacedRoleBindingOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1RoleBinding>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1RoleBinding>): Promise<Models.PatchAuthorizationOpenshiftIoV1NamespacedRoleBindingResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      patchAuthorizationOpenshiftIoV1NamespacedRoleBindingOperationSpec,
      callback) as Promise<Models.PatchAuthorizationOpenshiftIoV1NamespacedRoleBindingResponse>;
  }

  /**
   * list objects of kind Role
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ListAuthorizationOpenshiftIoV1NamespacedRoleResponse>
   */
  listAuthorizationOpenshiftIoV1NamespacedRole(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListAuthorizationOpenshiftIoV1NamespacedRoleOptionalParams): Promise<Models.ListAuthorizationOpenshiftIoV1NamespacedRoleResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  listAuthorizationOpenshiftIoV1NamespacedRole(namespace: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1RoleList>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  listAuthorizationOpenshiftIoV1NamespacedRole(namespace: string, options: Models.OpenShiftAPIwithKubernetesListAuthorizationOpenshiftIoV1NamespacedRoleOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1RoleList>): void;
  listAuthorizationOpenshiftIoV1NamespacedRole(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListAuthorizationOpenshiftIoV1NamespacedRoleOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1RoleList>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1RoleList>): Promise<Models.ListAuthorizationOpenshiftIoV1NamespacedRoleResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      listAuthorizationOpenshiftIoV1NamespacedRoleOperationSpec,
      callback) as Promise<Models.ListAuthorizationOpenshiftIoV1NamespacedRoleResponse>;
  }

  /**
   * create a Role
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateAuthorizationOpenshiftIoV1NamespacedRoleResponse>
   */
  createAuthorizationOpenshiftIoV1NamespacedRole(body: Models.Comgithubopenshiftapiauthorizationv1Role, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateAuthorizationOpenshiftIoV1NamespacedRoleOptionalParams): Promise<Models.CreateAuthorizationOpenshiftIoV1NamespacedRoleResponse>;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  createAuthorizationOpenshiftIoV1NamespacedRole(body: Models.Comgithubopenshiftapiauthorizationv1Role, namespace: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1Role>): void;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  createAuthorizationOpenshiftIoV1NamespacedRole(body: Models.Comgithubopenshiftapiauthorizationv1Role, namespace: string, options: Models.OpenShiftAPIwithKubernetesCreateAuthorizationOpenshiftIoV1NamespacedRoleOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1Role>): void;
  createAuthorizationOpenshiftIoV1NamespacedRole(body: Models.Comgithubopenshiftapiauthorizationv1Role, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateAuthorizationOpenshiftIoV1NamespacedRoleOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1Role>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1Role>): Promise<Models.CreateAuthorizationOpenshiftIoV1NamespacedRoleResponse> {
    return this.sendOperationRequest(
      {
        body,
        namespace,
        options
      },
      createAuthorizationOpenshiftIoV1NamespacedRoleOperationSpec,
      callback) as Promise<Models.CreateAuthorizationOpenshiftIoV1NamespacedRoleResponse>;
  }

  /**
   * read the specified Role
   * @param name name of the Role
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadAuthorizationOpenshiftIoV1NamespacedRoleResponse>
   */
  readAuthorizationOpenshiftIoV1NamespacedRole(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadAuthorizationOpenshiftIoV1NamespacedRoleOptionalParams): Promise<Models.ReadAuthorizationOpenshiftIoV1NamespacedRoleResponse>;
  /**
   * @param name name of the Role
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readAuthorizationOpenshiftIoV1NamespacedRole(name: string, namespace: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1Role>): void;
  /**
   * @param name name of the Role
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readAuthorizationOpenshiftIoV1NamespacedRole(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadAuthorizationOpenshiftIoV1NamespacedRoleOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1Role>): void;
  readAuthorizationOpenshiftIoV1NamespacedRole(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadAuthorizationOpenshiftIoV1NamespacedRoleOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1Role>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1Role>): Promise<Models.ReadAuthorizationOpenshiftIoV1NamespacedRoleResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readAuthorizationOpenshiftIoV1NamespacedRoleOperationSpec,
      callback) as Promise<Models.ReadAuthorizationOpenshiftIoV1NamespacedRoleResponse>;
  }

  /**
   * replace the specified Role
   * @param body
   * @param name name of the Role
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceAuthorizationOpenshiftIoV1NamespacedRoleResponse>
   */
  replaceAuthorizationOpenshiftIoV1NamespacedRole(body: Models.Comgithubopenshiftapiauthorizationv1Role, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceAuthorizationOpenshiftIoV1NamespacedRoleOptionalParams): Promise<Models.ReplaceAuthorizationOpenshiftIoV1NamespacedRoleResponse>;
  /**
   * @param body
   * @param name name of the Role
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replaceAuthorizationOpenshiftIoV1NamespacedRole(body: Models.Comgithubopenshiftapiauthorizationv1Role, name: string, namespace: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1Role>): void;
  /**
   * @param body
   * @param name name of the Role
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceAuthorizationOpenshiftIoV1NamespacedRole(body: Models.Comgithubopenshiftapiauthorizationv1Role, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplaceAuthorizationOpenshiftIoV1NamespacedRoleOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1Role>): void;
  replaceAuthorizationOpenshiftIoV1NamespacedRole(body: Models.Comgithubopenshiftapiauthorizationv1Role, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceAuthorizationOpenshiftIoV1NamespacedRoleOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1Role>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1Role>): Promise<Models.ReplaceAuthorizationOpenshiftIoV1NamespacedRoleResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replaceAuthorizationOpenshiftIoV1NamespacedRoleOperationSpec,
      callback) as Promise<Models.ReplaceAuthorizationOpenshiftIoV1NamespacedRoleResponse>;
  }

  /**
   * delete a Role
   * @param body
   * @param name name of the Role
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteAuthorizationOpenshiftIoV1NamespacedRoleResponse>
   */
  deleteAuthorizationOpenshiftIoV1NamespacedRole(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteAuthorizationOpenshiftIoV1NamespacedRoleOptionalParams): Promise<Models.DeleteAuthorizationOpenshiftIoV1NamespacedRoleResponse>;
  /**
   * @param body
   * @param name name of the Role
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteAuthorizationOpenshiftIoV1NamespacedRole(body: Models.V1DeleteOptions, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param name name of the Role
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteAuthorizationOpenshiftIoV1NamespacedRole(body: Models.V1DeleteOptions, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteAuthorizationOpenshiftIoV1NamespacedRoleOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteAuthorizationOpenshiftIoV1NamespacedRole(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteAuthorizationOpenshiftIoV1NamespacedRoleOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteAuthorizationOpenshiftIoV1NamespacedRoleResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      deleteAuthorizationOpenshiftIoV1NamespacedRoleOperationSpec,
      callback) as Promise<Models.DeleteAuthorizationOpenshiftIoV1NamespacedRoleResponse>;
  }

  /**
   * partially update the specified Role
   * @param body
   * @param name name of the Role
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchAuthorizationOpenshiftIoV1NamespacedRoleResponse>
   */
  patchAuthorizationOpenshiftIoV1NamespacedRole(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchAuthorizationOpenshiftIoV1NamespacedRoleOptionalParams): Promise<Models.PatchAuthorizationOpenshiftIoV1NamespacedRoleResponse>;
  /**
   * @param body
   * @param name name of the Role
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  patchAuthorizationOpenshiftIoV1NamespacedRole(body: any, name: string, namespace: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1Role>): void;
  /**
   * @param body
   * @param name name of the Role
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  patchAuthorizationOpenshiftIoV1NamespacedRole(body: any, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesPatchAuthorizationOpenshiftIoV1NamespacedRoleOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1Role>): void;
  patchAuthorizationOpenshiftIoV1NamespacedRole(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchAuthorizationOpenshiftIoV1NamespacedRoleOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1Role>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1Role>): Promise<Models.PatchAuthorizationOpenshiftIoV1NamespacedRoleResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      patchAuthorizationOpenshiftIoV1NamespacedRoleOperationSpec,
      callback) as Promise<Models.PatchAuthorizationOpenshiftIoV1NamespacedRoleResponse>;
  }

  /**
   * create a SelfSubjectRulesReview
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns
   * Promise<Models.CreateAuthorizationOpenshiftIoV1NamespacedSelfSubjectRulesReviewResponse>
   */
  createAuthorizationOpenshiftIoV1NamespacedSelfSubjectRulesReview(body: Models.Comgithubopenshiftapiauthorizationv1SelfSubjectRulesReview, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateAuthorizationOpenshiftIoV1NamespacedSelfSubjectRulesReviewOptionalParams): Promise<Models.CreateAuthorizationOpenshiftIoV1NamespacedSelfSubjectRulesReviewResponse>;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  createAuthorizationOpenshiftIoV1NamespacedSelfSubjectRulesReview(body: Models.Comgithubopenshiftapiauthorizationv1SelfSubjectRulesReview, namespace: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1SelfSubjectRulesReview>): void;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  createAuthorizationOpenshiftIoV1NamespacedSelfSubjectRulesReview(body: Models.Comgithubopenshiftapiauthorizationv1SelfSubjectRulesReview, namespace: string, options: Models.OpenShiftAPIwithKubernetesCreateAuthorizationOpenshiftIoV1NamespacedSelfSubjectRulesReviewOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1SelfSubjectRulesReview>): void;
  createAuthorizationOpenshiftIoV1NamespacedSelfSubjectRulesReview(body: Models.Comgithubopenshiftapiauthorizationv1SelfSubjectRulesReview, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateAuthorizationOpenshiftIoV1NamespacedSelfSubjectRulesReviewOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1SelfSubjectRulesReview>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1SelfSubjectRulesReview>): Promise<Models.CreateAuthorizationOpenshiftIoV1NamespacedSelfSubjectRulesReviewResponse> {
    return this.sendOperationRequest(
      {
        body,
        namespace,
        options
      },
      createAuthorizationOpenshiftIoV1NamespacedSelfSubjectRulesReviewOperationSpec,
      callback) as Promise<Models.CreateAuthorizationOpenshiftIoV1NamespacedSelfSubjectRulesReviewResponse>;
  }

  /**
   * create a SubjectRulesReview
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateAuthorizationOpenshiftIoV1NamespacedSubjectRulesReviewResponse>
   */
  createAuthorizationOpenshiftIoV1NamespacedSubjectRulesReview(body: Models.Comgithubopenshiftapiauthorizationv1SubjectRulesReview, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateAuthorizationOpenshiftIoV1NamespacedSubjectRulesReviewOptionalParams): Promise<Models.CreateAuthorizationOpenshiftIoV1NamespacedSubjectRulesReviewResponse>;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  createAuthorizationOpenshiftIoV1NamespacedSubjectRulesReview(body: Models.Comgithubopenshiftapiauthorizationv1SubjectRulesReview, namespace: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1SubjectRulesReview>): void;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  createAuthorizationOpenshiftIoV1NamespacedSubjectRulesReview(body: Models.Comgithubopenshiftapiauthorizationv1SubjectRulesReview, namespace: string, options: Models.OpenShiftAPIwithKubernetesCreateAuthorizationOpenshiftIoV1NamespacedSubjectRulesReviewOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1SubjectRulesReview>): void;
  createAuthorizationOpenshiftIoV1NamespacedSubjectRulesReview(body: Models.Comgithubopenshiftapiauthorizationv1SubjectRulesReview, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateAuthorizationOpenshiftIoV1NamespacedSubjectRulesReviewOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1SubjectRulesReview>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1SubjectRulesReview>): Promise<Models.CreateAuthorizationOpenshiftIoV1NamespacedSubjectRulesReviewResponse> {
    return this.sendOperationRequest(
      {
        body,
        namespace,
        options
      },
      createAuthorizationOpenshiftIoV1NamespacedSubjectRulesReviewOperationSpec,
      callback) as Promise<Models.CreateAuthorizationOpenshiftIoV1NamespacedSubjectRulesReviewResponse>;
  }

  /**
   * create a ResourceAccessReview
   * @param body
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateAuthorizationOpenshiftIoV1ResourceAccessReviewResponse>
   */
  createAuthorizationOpenshiftIoV1ResourceAccessReview(body: Models.Comgithubopenshiftapiauthorizationv1ResourceAccessReview, options?: Models.OpenShiftAPIwithKubernetesCreateAuthorizationOpenshiftIoV1ResourceAccessReviewOptionalParams): Promise<Models.CreateAuthorizationOpenshiftIoV1ResourceAccessReviewResponse>;
  /**
   * @param body
   * @param callback The callback
   */
  createAuthorizationOpenshiftIoV1ResourceAccessReview(body: Models.Comgithubopenshiftapiauthorizationv1ResourceAccessReview, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1ResourceAccessReview>): void;
  /**
   * @param body
   * @param options The optional parameters
   * @param callback The callback
   */
  createAuthorizationOpenshiftIoV1ResourceAccessReview(body: Models.Comgithubopenshiftapiauthorizationv1ResourceAccessReview, options: Models.OpenShiftAPIwithKubernetesCreateAuthorizationOpenshiftIoV1ResourceAccessReviewOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1ResourceAccessReview>): void;
  createAuthorizationOpenshiftIoV1ResourceAccessReview(body: Models.Comgithubopenshiftapiauthorizationv1ResourceAccessReview, options?: Models.OpenShiftAPIwithKubernetesCreateAuthorizationOpenshiftIoV1ResourceAccessReviewOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1ResourceAccessReview>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1ResourceAccessReview>): Promise<Models.CreateAuthorizationOpenshiftIoV1ResourceAccessReviewResponse> {
    return this.sendOperationRequest(
      {
        body,
        options
      },
      createAuthorizationOpenshiftIoV1ResourceAccessReviewOperationSpec,
      callback) as Promise<Models.CreateAuthorizationOpenshiftIoV1ResourceAccessReviewResponse>;
  }

  /**
   * list or watch objects of kind RoleBindingRestriction
   * @param [options] The optional parameters
   * @returns
   * Promise<Models.ListAuthorizationOpenshiftIoV1RoleBindingRestrictionForAllNamespacesResponse>
   */
  listAuthorizationOpenshiftIoV1RoleBindingRestrictionForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListAuthorizationOpenshiftIoV1RoleBindingRestrictionForAllNamespacesOptionalParams): Promise<Models.ListAuthorizationOpenshiftIoV1RoleBindingRestrictionForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  listAuthorizationOpenshiftIoV1RoleBindingRestrictionForAllNamespaces(callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1RoleBindingRestrictionList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listAuthorizationOpenshiftIoV1RoleBindingRestrictionForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesListAuthorizationOpenshiftIoV1RoleBindingRestrictionForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1RoleBindingRestrictionList>): void;
  listAuthorizationOpenshiftIoV1RoleBindingRestrictionForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListAuthorizationOpenshiftIoV1RoleBindingRestrictionForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1RoleBindingRestrictionList>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1RoleBindingRestrictionList>): Promise<Models.ListAuthorizationOpenshiftIoV1RoleBindingRestrictionForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listAuthorizationOpenshiftIoV1RoleBindingRestrictionForAllNamespacesOperationSpec,
      callback) as Promise<Models.ListAuthorizationOpenshiftIoV1RoleBindingRestrictionForAllNamespacesResponse>;
  }

  /**
   * list objects of kind RoleBinding
   * @param [options] The optional parameters
   * @returns Promise<Models.ListAuthorizationOpenshiftIoV1RoleBindingForAllNamespacesResponse>
   */
  listAuthorizationOpenshiftIoV1RoleBindingForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListAuthorizationOpenshiftIoV1RoleBindingForAllNamespacesOptionalParams): Promise<Models.ListAuthorizationOpenshiftIoV1RoleBindingForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  listAuthorizationOpenshiftIoV1RoleBindingForAllNamespaces(callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1RoleBindingList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listAuthorizationOpenshiftIoV1RoleBindingForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesListAuthorizationOpenshiftIoV1RoleBindingForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1RoleBindingList>): void;
  listAuthorizationOpenshiftIoV1RoleBindingForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListAuthorizationOpenshiftIoV1RoleBindingForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1RoleBindingList>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1RoleBindingList>): Promise<Models.ListAuthorizationOpenshiftIoV1RoleBindingForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listAuthorizationOpenshiftIoV1RoleBindingForAllNamespacesOperationSpec,
      callback) as Promise<Models.ListAuthorizationOpenshiftIoV1RoleBindingForAllNamespacesResponse>;
  }

  /**
   * list objects of kind Role
   * @param [options] The optional parameters
   * @returns Promise<Models.ListAuthorizationOpenshiftIoV1RoleForAllNamespacesResponse>
   */
  listAuthorizationOpenshiftIoV1RoleForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListAuthorizationOpenshiftIoV1RoleForAllNamespacesOptionalParams): Promise<Models.ListAuthorizationOpenshiftIoV1RoleForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  listAuthorizationOpenshiftIoV1RoleForAllNamespaces(callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1RoleList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listAuthorizationOpenshiftIoV1RoleForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesListAuthorizationOpenshiftIoV1RoleForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1RoleList>): void;
  listAuthorizationOpenshiftIoV1RoleForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListAuthorizationOpenshiftIoV1RoleForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1RoleList>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1RoleList>): Promise<Models.ListAuthorizationOpenshiftIoV1RoleForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listAuthorizationOpenshiftIoV1RoleForAllNamespacesOperationSpec,
      callback) as Promise<Models.ListAuthorizationOpenshiftIoV1RoleForAllNamespacesResponse>;
  }

  /**
   * create a SubjectAccessReview
   * @param body
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateAuthorizationOpenshiftIoV1SubjectAccessReviewResponse>
   */
  createAuthorizationOpenshiftIoV1SubjectAccessReview(body: Models.Comgithubopenshiftapiauthorizationv1SubjectAccessReview, options?: Models.OpenShiftAPIwithKubernetesCreateAuthorizationOpenshiftIoV1SubjectAccessReviewOptionalParams): Promise<Models.CreateAuthorizationOpenshiftIoV1SubjectAccessReviewResponse>;
  /**
   * @param body
   * @param callback The callback
   */
  createAuthorizationOpenshiftIoV1SubjectAccessReview(body: Models.Comgithubopenshiftapiauthorizationv1SubjectAccessReview, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1SubjectAccessReview>): void;
  /**
   * @param body
   * @param options The optional parameters
   * @param callback The callback
   */
  createAuthorizationOpenshiftIoV1SubjectAccessReview(body: Models.Comgithubopenshiftapiauthorizationv1SubjectAccessReview, options: Models.OpenShiftAPIwithKubernetesCreateAuthorizationOpenshiftIoV1SubjectAccessReviewOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1SubjectAccessReview>): void;
  createAuthorizationOpenshiftIoV1SubjectAccessReview(body: Models.Comgithubopenshiftapiauthorizationv1SubjectAccessReview, options?: Models.OpenShiftAPIwithKubernetesCreateAuthorizationOpenshiftIoV1SubjectAccessReviewOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1SubjectAccessReview>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiauthorizationv1SubjectAccessReview>): Promise<Models.CreateAuthorizationOpenshiftIoV1SubjectAccessReviewResponse> {
    return this.sendOperationRequest(
      {
        body,
        options
      },
      createAuthorizationOpenshiftIoV1SubjectAccessReviewOperationSpec,
      callback) as Promise<Models.CreateAuthorizationOpenshiftIoV1SubjectAccessReviewResponse>;
  }

  /**
   * watch individual changes to a list of RoleBindingRestriction
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns
   * Promise<Models.WatchAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionListResponse>
   */
  watchAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionListOptionalParams): Promise<Models.WatchAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionListResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionList(namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionList(namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionListOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionListOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionListResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      watchAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionListOperationSpec,
      callback) as Promise<Models.WatchAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionListResponse>;
  }

  /**
   * watch changes to an object of kind RoleBindingRestriction
   * @param name name of the RoleBindingRestriction
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionResponse>
   */
  watchAuthorizationOpenshiftIoV1NamespacedRoleBindingRestriction(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionOptionalParams): Promise<Models.WatchAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionResponse>;
  /**
   * @param name name of the RoleBindingRestriction
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchAuthorizationOpenshiftIoV1NamespacedRoleBindingRestriction(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param name name of the RoleBindingRestriction
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchAuthorizationOpenshiftIoV1NamespacedRoleBindingRestriction(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchAuthorizationOpenshiftIoV1NamespacedRoleBindingRestriction(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      watchAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionOperationSpec,
      callback) as Promise<Models.WatchAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionResponse>;
  }

  /**
   * watch individual changes to a list of RoleBindingRestriction
   * @param [options] The optional parameters
   * @returns
   * Promise<Models.WatchAuthorizationOpenshiftIoV1RoleBindingRestrictionListForAllNamespacesResponse>
   */
  watchAuthorizationOpenshiftIoV1RoleBindingRestrictionListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchAuthorizationOpenshiftIoV1RoleBindingRestrictionListForAllNamespacesOptionalParams): Promise<Models.WatchAuthorizationOpenshiftIoV1RoleBindingRestrictionListForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  watchAuthorizationOpenshiftIoV1RoleBindingRestrictionListForAllNamespaces(callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  watchAuthorizationOpenshiftIoV1RoleBindingRestrictionListForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesWatchAuthorizationOpenshiftIoV1RoleBindingRestrictionListForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchAuthorizationOpenshiftIoV1RoleBindingRestrictionListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchAuthorizationOpenshiftIoV1RoleBindingRestrictionListForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchAuthorizationOpenshiftIoV1RoleBindingRestrictionListForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      watchAuthorizationOpenshiftIoV1RoleBindingRestrictionListForAllNamespacesOperationSpec,
      callback) as Promise<Models.WatchAuthorizationOpenshiftIoV1RoleBindingRestrictionListForAllNamespacesResponse>;
  }

  /**
   * get information of a group
   * @param [options] The optional parameters
   * @returns Promise<Models.GetAutoscalingAPIGroupResponse>
   */
  getAutoscalingAPIGroup(options?: msRest.RequestOptionsBase): Promise<Models.GetAutoscalingAPIGroupResponse>;
  /**
   * @param callback The callback
   */
  getAutoscalingAPIGroup(callback: msRest.ServiceCallback<Models.V1APIGroup>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getAutoscalingAPIGroup(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.V1APIGroup>): void;
  getAutoscalingAPIGroup(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.V1APIGroup>, callback?: msRest.ServiceCallback<Models.V1APIGroup>): Promise<Models.GetAutoscalingAPIGroupResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getAutoscalingAPIGroupOperationSpec,
      callback) as Promise<Models.GetAutoscalingAPIGroupResponse>;
  }

  /**
   * get available resources
   * @param [options] The optional parameters
   * @returns Promise<Models.GetAutoscalingV1APIResourcesResponse>
   */
  getAutoscalingV1APIResources(options?: msRest.RequestOptionsBase): Promise<Models.GetAutoscalingV1APIResourcesResponse>;
  /**
   * @param callback The callback
   */
  getAutoscalingV1APIResources(callback: msRest.ServiceCallback<Models.V1APIResourceList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getAutoscalingV1APIResources(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.V1APIResourceList>): void;
  getAutoscalingV1APIResources(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.V1APIResourceList>, callback?: msRest.ServiceCallback<Models.V1APIResourceList>): Promise<Models.GetAutoscalingV1APIResourcesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getAutoscalingV1APIResourcesOperationSpec,
      callback) as Promise<Models.GetAutoscalingV1APIResourcesResponse>;
  }

  /**
   * list or watch objects of kind HorizontalPodAutoscaler
   * @param [options] The optional parameters
   * @returns Promise<Models.ListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesResponse>
   */
  listAutoscalingV1HorizontalPodAutoscalerForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesOptionalParams): Promise<Models.ListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  listAutoscalingV1HorizontalPodAutoscalerForAllNamespaces(callback: msRest.ServiceCallback<Models.V1HorizontalPodAutoscalerList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listAutoscalingV1HorizontalPodAutoscalerForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1HorizontalPodAutoscalerList>): void;
  listAutoscalingV1HorizontalPodAutoscalerForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1HorizontalPodAutoscalerList>, callback?: msRest.ServiceCallback<Models.V1HorizontalPodAutoscalerList>): Promise<Models.ListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listAutoscalingV1HorizontalPodAutoscalerForAllNamespacesOperationSpec,
      callback) as Promise<Models.ListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesResponse>;
  }

  /**
   * list or watch objects of kind HorizontalPodAutoscaler
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ListAutoscalingV1NamespacedHorizontalPodAutoscalerResponse>
   */
  listAutoscalingV1NamespacedHorizontalPodAutoscaler(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListAutoscalingV1NamespacedHorizontalPodAutoscalerOptionalParams): Promise<Models.ListAutoscalingV1NamespacedHorizontalPodAutoscalerResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  listAutoscalingV1NamespacedHorizontalPodAutoscaler(namespace: string, callback: msRest.ServiceCallback<Models.V1HorizontalPodAutoscalerList>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  listAutoscalingV1NamespacedHorizontalPodAutoscaler(namespace: string, options: Models.OpenShiftAPIwithKubernetesListAutoscalingV1NamespacedHorizontalPodAutoscalerOptionalParams, callback: msRest.ServiceCallback<Models.V1HorizontalPodAutoscalerList>): void;
  listAutoscalingV1NamespacedHorizontalPodAutoscaler(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListAutoscalingV1NamespacedHorizontalPodAutoscalerOptionalParams | msRest.ServiceCallback<Models.V1HorizontalPodAutoscalerList>, callback?: msRest.ServiceCallback<Models.V1HorizontalPodAutoscalerList>): Promise<Models.ListAutoscalingV1NamespacedHorizontalPodAutoscalerResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      listAutoscalingV1NamespacedHorizontalPodAutoscalerOperationSpec,
      callback) as Promise<Models.ListAutoscalingV1NamespacedHorizontalPodAutoscalerResponse>;
  }

  /**
   * create a HorizontalPodAutoscaler
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateAutoscalingV1NamespacedHorizontalPodAutoscalerResponse>
   */
  createAutoscalingV1NamespacedHorizontalPodAutoscaler(body: Models.V1HorizontalPodAutoscaler, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateAutoscalingV1NamespacedHorizontalPodAutoscalerOptionalParams): Promise<Models.CreateAutoscalingV1NamespacedHorizontalPodAutoscalerResponse>;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  createAutoscalingV1NamespacedHorizontalPodAutoscaler(body: Models.V1HorizontalPodAutoscaler, namespace: string, callback: msRest.ServiceCallback<Models.V1HorizontalPodAutoscaler>): void;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  createAutoscalingV1NamespacedHorizontalPodAutoscaler(body: Models.V1HorizontalPodAutoscaler, namespace: string, options: Models.OpenShiftAPIwithKubernetesCreateAutoscalingV1NamespacedHorizontalPodAutoscalerOptionalParams, callback: msRest.ServiceCallback<Models.V1HorizontalPodAutoscaler>): void;
  createAutoscalingV1NamespacedHorizontalPodAutoscaler(body: Models.V1HorizontalPodAutoscaler, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateAutoscalingV1NamespacedHorizontalPodAutoscalerOptionalParams | msRest.ServiceCallback<Models.V1HorizontalPodAutoscaler>, callback?: msRest.ServiceCallback<Models.V1HorizontalPodAutoscaler>): Promise<Models.CreateAutoscalingV1NamespacedHorizontalPodAutoscalerResponse> {
    return this.sendOperationRequest(
      {
        body,
        namespace,
        options
      },
      createAutoscalingV1NamespacedHorizontalPodAutoscalerOperationSpec,
      callback) as Promise<Models.CreateAutoscalingV1NamespacedHorizontalPodAutoscalerResponse>;
  }

  /**
   * delete collection of HorizontalPodAutoscaler
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteAutoscalingV1CollectionNamespacedHorizontalPodAutoscalerResponse>
   */
  deleteAutoscalingV1CollectionNamespacedHorizontalPodAutoscaler(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteAutoscalingV1CollectionNamespacedHorizontalPodAutoscalerOptionalParams): Promise<Models.DeleteAutoscalingV1CollectionNamespacedHorizontalPodAutoscalerResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteAutoscalingV1CollectionNamespacedHorizontalPodAutoscaler(namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteAutoscalingV1CollectionNamespacedHorizontalPodAutoscaler(namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteAutoscalingV1CollectionNamespacedHorizontalPodAutoscalerOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteAutoscalingV1CollectionNamespacedHorizontalPodAutoscaler(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteAutoscalingV1CollectionNamespacedHorizontalPodAutoscalerOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteAutoscalingV1CollectionNamespacedHorizontalPodAutoscalerResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      deleteAutoscalingV1CollectionNamespacedHorizontalPodAutoscalerOperationSpec,
      callback) as Promise<Models.DeleteAutoscalingV1CollectionNamespacedHorizontalPodAutoscalerResponse>;
  }

  /**
   * read the specified HorizontalPodAutoscaler
   * @param name name of the HorizontalPodAutoscaler
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadAutoscalingV1NamespacedHorizontalPodAutoscalerResponse>
   */
  readAutoscalingV1NamespacedHorizontalPodAutoscaler(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadAutoscalingV1NamespacedHorizontalPodAutoscalerOptionalParams): Promise<Models.ReadAutoscalingV1NamespacedHorizontalPodAutoscalerResponse>;
  /**
   * @param name name of the HorizontalPodAutoscaler
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readAutoscalingV1NamespacedHorizontalPodAutoscaler(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1HorizontalPodAutoscaler>): void;
  /**
   * @param name name of the HorizontalPodAutoscaler
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readAutoscalingV1NamespacedHorizontalPodAutoscaler(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadAutoscalingV1NamespacedHorizontalPodAutoscalerOptionalParams, callback: msRest.ServiceCallback<Models.V1HorizontalPodAutoscaler>): void;
  readAutoscalingV1NamespacedHorizontalPodAutoscaler(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadAutoscalingV1NamespacedHorizontalPodAutoscalerOptionalParams | msRest.ServiceCallback<Models.V1HorizontalPodAutoscaler>, callback?: msRest.ServiceCallback<Models.V1HorizontalPodAutoscaler>): Promise<Models.ReadAutoscalingV1NamespacedHorizontalPodAutoscalerResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readAutoscalingV1NamespacedHorizontalPodAutoscalerOperationSpec,
      callback) as Promise<Models.ReadAutoscalingV1NamespacedHorizontalPodAutoscalerResponse>;
  }

  /**
   * replace the specified HorizontalPodAutoscaler
   * @param body
   * @param name name of the HorizontalPodAutoscaler
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceAutoscalingV1NamespacedHorizontalPodAutoscalerResponse>
   */
  replaceAutoscalingV1NamespacedHorizontalPodAutoscaler(body: Models.V1HorizontalPodAutoscaler, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceAutoscalingV1NamespacedHorizontalPodAutoscalerOptionalParams): Promise<Models.ReplaceAutoscalingV1NamespacedHorizontalPodAutoscalerResponse>;
  /**
   * @param body
   * @param name name of the HorizontalPodAutoscaler
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replaceAutoscalingV1NamespacedHorizontalPodAutoscaler(body: Models.V1HorizontalPodAutoscaler, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1HorizontalPodAutoscaler>): void;
  /**
   * @param body
   * @param name name of the HorizontalPodAutoscaler
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceAutoscalingV1NamespacedHorizontalPodAutoscaler(body: Models.V1HorizontalPodAutoscaler, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplaceAutoscalingV1NamespacedHorizontalPodAutoscalerOptionalParams, callback: msRest.ServiceCallback<Models.V1HorizontalPodAutoscaler>): void;
  replaceAutoscalingV1NamespacedHorizontalPodAutoscaler(body: Models.V1HorizontalPodAutoscaler, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceAutoscalingV1NamespacedHorizontalPodAutoscalerOptionalParams | msRest.ServiceCallback<Models.V1HorizontalPodAutoscaler>, callback?: msRest.ServiceCallback<Models.V1HorizontalPodAutoscaler>): Promise<Models.ReplaceAutoscalingV1NamespacedHorizontalPodAutoscalerResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replaceAutoscalingV1NamespacedHorizontalPodAutoscalerOperationSpec,
      callback) as Promise<Models.ReplaceAutoscalingV1NamespacedHorizontalPodAutoscalerResponse>;
  }

  /**
   * delete a HorizontalPodAutoscaler
   * @param body
   * @param name name of the HorizontalPodAutoscaler
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteAutoscalingV1NamespacedHorizontalPodAutoscalerResponse>
   */
  deleteAutoscalingV1NamespacedHorizontalPodAutoscaler(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteAutoscalingV1NamespacedHorizontalPodAutoscalerOptionalParams): Promise<Models.DeleteAutoscalingV1NamespacedHorizontalPodAutoscalerResponse>;
  /**
   * @param body
   * @param name name of the HorizontalPodAutoscaler
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteAutoscalingV1NamespacedHorizontalPodAutoscaler(body: Models.V1DeleteOptions, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param name name of the HorizontalPodAutoscaler
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteAutoscalingV1NamespacedHorizontalPodAutoscaler(body: Models.V1DeleteOptions, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteAutoscalingV1NamespacedHorizontalPodAutoscalerOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteAutoscalingV1NamespacedHorizontalPodAutoscaler(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteAutoscalingV1NamespacedHorizontalPodAutoscalerOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteAutoscalingV1NamespacedHorizontalPodAutoscalerResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      deleteAutoscalingV1NamespacedHorizontalPodAutoscalerOperationSpec,
      callback) as Promise<Models.DeleteAutoscalingV1NamespacedHorizontalPodAutoscalerResponse>;
  }

  /**
   * partially update the specified HorizontalPodAutoscaler
   * @param body
   * @param name name of the HorizontalPodAutoscaler
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchAutoscalingV1NamespacedHorizontalPodAutoscalerResponse>
   */
  patchAutoscalingV1NamespacedHorizontalPodAutoscaler(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchAutoscalingV1NamespacedHorizontalPodAutoscalerOptionalParams): Promise<Models.PatchAutoscalingV1NamespacedHorizontalPodAutoscalerResponse>;
  /**
   * @param body
   * @param name name of the HorizontalPodAutoscaler
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  patchAutoscalingV1NamespacedHorizontalPodAutoscaler(body: any, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1HorizontalPodAutoscaler>): void;
  /**
   * @param body
   * @param name name of the HorizontalPodAutoscaler
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  patchAutoscalingV1NamespacedHorizontalPodAutoscaler(body: any, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesPatchAutoscalingV1NamespacedHorizontalPodAutoscalerOptionalParams, callback: msRest.ServiceCallback<Models.V1HorizontalPodAutoscaler>): void;
  patchAutoscalingV1NamespacedHorizontalPodAutoscaler(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchAutoscalingV1NamespacedHorizontalPodAutoscalerOptionalParams | msRest.ServiceCallback<Models.V1HorizontalPodAutoscaler>, callback?: msRest.ServiceCallback<Models.V1HorizontalPodAutoscaler>): Promise<Models.PatchAutoscalingV1NamespacedHorizontalPodAutoscalerResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      patchAutoscalingV1NamespacedHorizontalPodAutoscalerOperationSpec,
      callback) as Promise<Models.PatchAutoscalingV1NamespacedHorizontalPodAutoscalerResponse>;
  }

  /**
   * read status of the specified HorizontalPodAutoscaler
   * @param name name of the HorizontalPodAutoscaler
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadAutoscalingV1NamespacedHorizontalPodAutoscalerStatusResponse>
   */
  readAutoscalingV1NamespacedHorizontalPodAutoscalerStatus(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadAutoscalingV1NamespacedHorizontalPodAutoscalerStatusOptionalParams): Promise<Models.ReadAutoscalingV1NamespacedHorizontalPodAutoscalerStatusResponse>;
  /**
   * @param name name of the HorizontalPodAutoscaler
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readAutoscalingV1NamespacedHorizontalPodAutoscalerStatus(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1HorizontalPodAutoscaler>): void;
  /**
   * @param name name of the HorizontalPodAutoscaler
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readAutoscalingV1NamespacedHorizontalPodAutoscalerStatus(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadAutoscalingV1NamespacedHorizontalPodAutoscalerStatusOptionalParams, callback: msRest.ServiceCallback<Models.V1HorizontalPodAutoscaler>): void;
  readAutoscalingV1NamespacedHorizontalPodAutoscalerStatus(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadAutoscalingV1NamespacedHorizontalPodAutoscalerStatusOptionalParams | msRest.ServiceCallback<Models.V1HorizontalPodAutoscaler>, callback?: msRest.ServiceCallback<Models.V1HorizontalPodAutoscaler>): Promise<Models.ReadAutoscalingV1NamespacedHorizontalPodAutoscalerStatusResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readAutoscalingV1NamespacedHorizontalPodAutoscalerStatusOperationSpec,
      callback) as Promise<Models.ReadAutoscalingV1NamespacedHorizontalPodAutoscalerStatusResponse>;
  }

  /**
   * replace status of the specified HorizontalPodAutoscaler
   * @param body
   * @param name name of the HorizontalPodAutoscaler
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceAutoscalingV1NamespacedHorizontalPodAutoscalerStatusResponse>
   */
  replaceAutoscalingV1NamespacedHorizontalPodAutoscalerStatus(body: Models.V1HorizontalPodAutoscaler, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceAutoscalingV1NamespacedHorizontalPodAutoscalerStatusOptionalParams): Promise<Models.ReplaceAutoscalingV1NamespacedHorizontalPodAutoscalerStatusResponse>;
  /**
   * @param body
   * @param name name of the HorizontalPodAutoscaler
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replaceAutoscalingV1NamespacedHorizontalPodAutoscalerStatus(body: Models.V1HorizontalPodAutoscaler, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1HorizontalPodAutoscaler>): void;
  /**
   * @param body
   * @param name name of the HorizontalPodAutoscaler
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceAutoscalingV1NamespacedHorizontalPodAutoscalerStatus(body: Models.V1HorizontalPodAutoscaler, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplaceAutoscalingV1NamespacedHorizontalPodAutoscalerStatusOptionalParams, callback: msRest.ServiceCallback<Models.V1HorizontalPodAutoscaler>): void;
  replaceAutoscalingV1NamespacedHorizontalPodAutoscalerStatus(body: Models.V1HorizontalPodAutoscaler, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceAutoscalingV1NamespacedHorizontalPodAutoscalerStatusOptionalParams | msRest.ServiceCallback<Models.V1HorizontalPodAutoscaler>, callback?: msRest.ServiceCallback<Models.V1HorizontalPodAutoscaler>): Promise<Models.ReplaceAutoscalingV1NamespacedHorizontalPodAutoscalerStatusResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replaceAutoscalingV1NamespacedHorizontalPodAutoscalerStatusOperationSpec,
      callback) as Promise<Models.ReplaceAutoscalingV1NamespacedHorizontalPodAutoscalerStatusResponse>;
  }

  /**
   * partially update status of the specified HorizontalPodAutoscaler
   * @param body
   * @param name name of the HorizontalPodAutoscaler
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchAutoscalingV1NamespacedHorizontalPodAutoscalerStatusResponse>
   */
  patchAutoscalingV1NamespacedHorizontalPodAutoscalerStatus(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchAutoscalingV1NamespacedHorizontalPodAutoscalerStatusOptionalParams): Promise<Models.PatchAutoscalingV1NamespacedHorizontalPodAutoscalerStatusResponse>;
  /**
   * @param body
   * @param name name of the HorizontalPodAutoscaler
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  patchAutoscalingV1NamespacedHorizontalPodAutoscalerStatus(body: any, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1HorizontalPodAutoscaler>): void;
  /**
   * @param body
   * @param name name of the HorizontalPodAutoscaler
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  patchAutoscalingV1NamespacedHorizontalPodAutoscalerStatus(body: any, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesPatchAutoscalingV1NamespacedHorizontalPodAutoscalerStatusOptionalParams, callback: msRest.ServiceCallback<Models.V1HorizontalPodAutoscaler>): void;
  patchAutoscalingV1NamespacedHorizontalPodAutoscalerStatus(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchAutoscalingV1NamespacedHorizontalPodAutoscalerStatusOptionalParams | msRest.ServiceCallback<Models.V1HorizontalPodAutoscaler>, callback?: msRest.ServiceCallback<Models.V1HorizontalPodAutoscaler>): Promise<Models.PatchAutoscalingV1NamespacedHorizontalPodAutoscalerStatusResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      patchAutoscalingV1NamespacedHorizontalPodAutoscalerStatusOperationSpec,
      callback) as Promise<Models.PatchAutoscalingV1NamespacedHorizontalPodAutoscalerStatusResponse>;
  }

  /**
   * watch individual changes to a list of HorizontalPodAutoscaler
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesResponse>
   */
  watchAutoscalingV1HorizontalPodAutoscalerListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesOptionalParams): Promise<Models.WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  watchAutoscalingV1HorizontalPodAutoscalerListForAllNamespaces(callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  watchAutoscalingV1HorizontalPodAutoscalerListForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesWatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchAutoscalingV1HorizontalPodAutoscalerListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      watchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesOperationSpec,
      callback) as Promise<Models.WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesResponse>;
  }

  /**
   * watch individual changes to a list of HorizontalPodAutoscaler
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchAutoscalingV1NamespacedHorizontalPodAutoscalerListResponse>
   */
  watchAutoscalingV1NamespacedHorizontalPodAutoscalerList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchAutoscalingV1NamespacedHorizontalPodAutoscalerListOptionalParams): Promise<Models.WatchAutoscalingV1NamespacedHorizontalPodAutoscalerListResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchAutoscalingV1NamespacedHorizontalPodAutoscalerList(namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchAutoscalingV1NamespacedHorizontalPodAutoscalerList(namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchAutoscalingV1NamespacedHorizontalPodAutoscalerListOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchAutoscalingV1NamespacedHorizontalPodAutoscalerList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchAutoscalingV1NamespacedHorizontalPodAutoscalerListOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchAutoscalingV1NamespacedHorizontalPodAutoscalerListResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      watchAutoscalingV1NamespacedHorizontalPodAutoscalerListOperationSpec,
      callback) as Promise<Models.WatchAutoscalingV1NamespacedHorizontalPodAutoscalerListResponse>;
  }

  /**
   * watch changes to an object of kind HorizontalPodAutoscaler
   * @param name name of the HorizontalPodAutoscaler
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchAutoscalingV1NamespacedHorizontalPodAutoscalerResponse>
   */
  watchAutoscalingV1NamespacedHorizontalPodAutoscaler(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchAutoscalingV1NamespacedHorizontalPodAutoscalerOptionalParams): Promise<Models.WatchAutoscalingV1NamespacedHorizontalPodAutoscalerResponse>;
  /**
   * @param name name of the HorizontalPodAutoscaler
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchAutoscalingV1NamespacedHorizontalPodAutoscaler(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param name name of the HorizontalPodAutoscaler
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchAutoscalingV1NamespacedHorizontalPodAutoscaler(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchAutoscalingV1NamespacedHorizontalPodAutoscalerOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchAutoscalingV1NamespacedHorizontalPodAutoscaler(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchAutoscalingV1NamespacedHorizontalPodAutoscalerOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchAutoscalingV1NamespacedHorizontalPodAutoscalerResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      watchAutoscalingV1NamespacedHorizontalPodAutoscalerOperationSpec,
      callback) as Promise<Models.WatchAutoscalingV1NamespacedHorizontalPodAutoscalerResponse>;
  }

  /**
   * get available resources
   * @param [options] The optional parameters
   * @returns Promise<Models.GetAutoscalingV2beta1APIResourcesResponse>
   */
  getAutoscalingV2beta1APIResources(options?: msRest.RequestOptionsBase): Promise<Models.GetAutoscalingV2beta1APIResourcesResponse>;
  /**
   * @param callback The callback
   */
  getAutoscalingV2beta1APIResources(callback: msRest.ServiceCallback<Models.V1APIResourceList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getAutoscalingV2beta1APIResources(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.V1APIResourceList>): void;
  getAutoscalingV2beta1APIResources(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.V1APIResourceList>, callback?: msRest.ServiceCallback<Models.V1APIResourceList>): Promise<Models.GetAutoscalingV2beta1APIResourcesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getAutoscalingV2beta1APIResourcesOperationSpec,
      callback) as Promise<Models.GetAutoscalingV2beta1APIResourcesResponse>;
  }

  /**
   * list or watch objects of kind HorizontalPodAutoscaler
   * @param [options] The optional parameters
   * @returns Promise<Models.ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesResponse>
   */
  listAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesOptionalParams): Promise<Models.ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  listAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespaces(callback: msRest.ServiceCallback<Models.V2beta1HorizontalPodAutoscalerList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V2beta1HorizontalPodAutoscalerList>): void;
  listAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V2beta1HorizontalPodAutoscalerList>, callback?: msRest.ServiceCallback<Models.V2beta1HorizontalPodAutoscalerList>): Promise<Models.ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesOperationSpec,
      callback) as Promise<Models.ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesResponse>;
  }

  /**
   * list or watch objects of kind HorizontalPodAutoscaler
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ListAutoscalingV2beta1NamespacedHorizontalPodAutoscalerResponse>
   */
  listAutoscalingV2beta1NamespacedHorizontalPodAutoscaler(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListAutoscalingV2beta1NamespacedHorizontalPodAutoscalerOptionalParams): Promise<Models.ListAutoscalingV2beta1NamespacedHorizontalPodAutoscalerResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  listAutoscalingV2beta1NamespacedHorizontalPodAutoscaler(namespace: string, callback: msRest.ServiceCallback<Models.V2beta1HorizontalPodAutoscalerList>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  listAutoscalingV2beta1NamespacedHorizontalPodAutoscaler(namespace: string, options: Models.OpenShiftAPIwithKubernetesListAutoscalingV2beta1NamespacedHorizontalPodAutoscalerOptionalParams, callback: msRest.ServiceCallback<Models.V2beta1HorizontalPodAutoscalerList>): void;
  listAutoscalingV2beta1NamespacedHorizontalPodAutoscaler(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListAutoscalingV2beta1NamespacedHorizontalPodAutoscalerOptionalParams | msRest.ServiceCallback<Models.V2beta1HorizontalPodAutoscalerList>, callback?: msRest.ServiceCallback<Models.V2beta1HorizontalPodAutoscalerList>): Promise<Models.ListAutoscalingV2beta1NamespacedHorizontalPodAutoscalerResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      listAutoscalingV2beta1NamespacedHorizontalPodAutoscalerOperationSpec,
      callback) as Promise<Models.ListAutoscalingV2beta1NamespacedHorizontalPodAutoscalerResponse>;
  }

  /**
   * create a HorizontalPodAutoscaler
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateAutoscalingV2beta1NamespacedHorizontalPodAutoscalerResponse>
   */
  createAutoscalingV2beta1NamespacedHorizontalPodAutoscaler(body: Models.V2beta1HorizontalPodAutoscaler, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateAutoscalingV2beta1NamespacedHorizontalPodAutoscalerOptionalParams): Promise<Models.CreateAutoscalingV2beta1NamespacedHorizontalPodAutoscalerResponse>;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  createAutoscalingV2beta1NamespacedHorizontalPodAutoscaler(body: Models.V2beta1HorizontalPodAutoscaler, namespace: string, callback: msRest.ServiceCallback<Models.V2beta1HorizontalPodAutoscaler>): void;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  createAutoscalingV2beta1NamespacedHorizontalPodAutoscaler(body: Models.V2beta1HorizontalPodAutoscaler, namespace: string, options: Models.OpenShiftAPIwithKubernetesCreateAutoscalingV2beta1NamespacedHorizontalPodAutoscalerOptionalParams, callback: msRest.ServiceCallback<Models.V2beta1HorizontalPodAutoscaler>): void;
  createAutoscalingV2beta1NamespacedHorizontalPodAutoscaler(body: Models.V2beta1HorizontalPodAutoscaler, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateAutoscalingV2beta1NamespacedHorizontalPodAutoscalerOptionalParams | msRest.ServiceCallback<Models.V2beta1HorizontalPodAutoscaler>, callback?: msRest.ServiceCallback<Models.V2beta1HorizontalPodAutoscaler>): Promise<Models.CreateAutoscalingV2beta1NamespacedHorizontalPodAutoscalerResponse> {
    return this.sendOperationRequest(
      {
        body,
        namespace,
        options
      },
      createAutoscalingV2beta1NamespacedHorizontalPodAutoscalerOperationSpec,
      callback) as Promise<Models.CreateAutoscalingV2beta1NamespacedHorizontalPodAutoscalerResponse>;
  }

  /**
   * delete collection of HorizontalPodAutoscaler
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns
   * Promise<Models.DeleteAutoscalingV2beta1CollectionNamespacedHorizontalPodAutoscalerResponse>
   */
  deleteAutoscalingV2beta1CollectionNamespacedHorizontalPodAutoscaler(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteAutoscalingV2beta1CollectionNamespacedHorizontalPodAutoscalerOptionalParams): Promise<Models.DeleteAutoscalingV2beta1CollectionNamespacedHorizontalPodAutoscalerResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteAutoscalingV2beta1CollectionNamespacedHorizontalPodAutoscaler(namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteAutoscalingV2beta1CollectionNamespacedHorizontalPodAutoscaler(namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteAutoscalingV2beta1CollectionNamespacedHorizontalPodAutoscalerOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteAutoscalingV2beta1CollectionNamespacedHorizontalPodAutoscaler(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteAutoscalingV2beta1CollectionNamespacedHorizontalPodAutoscalerOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteAutoscalingV2beta1CollectionNamespacedHorizontalPodAutoscalerResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      deleteAutoscalingV2beta1CollectionNamespacedHorizontalPodAutoscalerOperationSpec,
      callback) as Promise<Models.DeleteAutoscalingV2beta1CollectionNamespacedHorizontalPodAutoscalerResponse>;
  }

  /**
   * read the specified HorizontalPodAutoscaler
   * @param name name of the HorizontalPodAutoscaler
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerResponse>
   */
  readAutoscalingV2beta1NamespacedHorizontalPodAutoscaler(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerOptionalParams): Promise<Models.ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerResponse>;
  /**
   * @param name name of the HorizontalPodAutoscaler
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readAutoscalingV2beta1NamespacedHorizontalPodAutoscaler(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V2beta1HorizontalPodAutoscaler>): void;
  /**
   * @param name name of the HorizontalPodAutoscaler
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readAutoscalingV2beta1NamespacedHorizontalPodAutoscaler(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerOptionalParams, callback: msRest.ServiceCallback<Models.V2beta1HorizontalPodAutoscaler>): void;
  readAutoscalingV2beta1NamespacedHorizontalPodAutoscaler(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerOptionalParams | msRest.ServiceCallback<Models.V2beta1HorizontalPodAutoscaler>, callback?: msRest.ServiceCallback<Models.V2beta1HorizontalPodAutoscaler>): Promise<Models.ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readAutoscalingV2beta1NamespacedHorizontalPodAutoscalerOperationSpec,
      callback) as Promise<Models.ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerResponse>;
  }

  /**
   * replace the specified HorizontalPodAutoscaler
   * @param body
   * @param name name of the HorizontalPodAutoscaler
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerResponse>
   */
  replaceAutoscalingV2beta1NamespacedHorizontalPodAutoscaler(body: Models.V2beta1HorizontalPodAutoscaler, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerOptionalParams): Promise<Models.ReplaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerResponse>;
  /**
   * @param body
   * @param name name of the HorizontalPodAutoscaler
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replaceAutoscalingV2beta1NamespacedHorizontalPodAutoscaler(body: Models.V2beta1HorizontalPodAutoscaler, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V2beta1HorizontalPodAutoscaler>): void;
  /**
   * @param body
   * @param name name of the HorizontalPodAutoscaler
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceAutoscalingV2beta1NamespacedHorizontalPodAutoscaler(body: Models.V2beta1HorizontalPodAutoscaler, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerOptionalParams, callback: msRest.ServiceCallback<Models.V2beta1HorizontalPodAutoscaler>): void;
  replaceAutoscalingV2beta1NamespacedHorizontalPodAutoscaler(body: Models.V2beta1HorizontalPodAutoscaler, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerOptionalParams | msRest.ServiceCallback<Models.V2beta1HorizontalPodAutoscaler>, callback?: msRest.ServiceCallback<Models.V2beta1HorizontalPodAutoscaler>): Promise<Models.ReplaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerOperationSpec,
      callback) as Promise<Models.ReplaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerResponse>;
  }

  /**
   * delete a HorizontalPodAutoscaler
   * @param body
   * @param name name of the HorizontalPodAutoscaler
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteAutoscalingV2beta1NamespacedHorizontalPodAutoscalerResponse>
   */
  deleteAutoscalingV2beta1NamespacedHorizontalPodAutoscaler(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteAutoscalingV2beta1NamespacedHorizontalPodAutoscalerOptionalParams): Promise<Models.DeleteAutoscalingV2beta1NamespacedHorizontalPodAutoscalerResponse>;
  /**
   * @param body
   * @param name name of the HorizontalPodAutoscaler
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteAutoscalingV2beta1NamespacedHorizontalPodAutoscaler(body: Models.V1DeleteOptions, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param name name of the HorizontalPodAutoscaler
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteAutoscalingV2beta1NamespacedHorizontalPodAutoscaler(body: Models.V1DeleteOptions, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteAutoscalingV2beta1NamespacedHorizontalPodAutoscalerOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteAutoscalingV2beta1NamespacedHorizontalPodAutoscaler(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteAutoscalingV2beta1NamespacedHorizontalPodAutoscalerOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteAutoscalingV2beta1NamespacedHorizontalPodAutoscalerResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      deleteAutoscalingV2beta1NamespacedHorizontalPodAutoscalerOperationSpec,
      callback) as Promise<Models.DeleteAutoscalingV2beta1NamespacedHorizontalPodAutoscalerResponse>;
  }

  /**
   * partially update the specified HorizontalPodAutoscaler
   * @param body
   * @param name name of the HorizontalPodAutoscaler
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerResponse>
   */
  patchAutoscalingV2beta1NamespacedHorizontalPodAutoscaler(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerOptionalParams): Promise<Models.PatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerResponse>;
  /**
   * @param body
   * @param name name of the HorizontalPodAutoscaler
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  patchAutoscalingV2beta1NamespacedHorizontalPodAutoscaler(body: any, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V2beta1HorizontalPodAutoscaler>): void;
  /**
   * @param body
   * @param name name of the HorizontalPodAutoscaler
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  patchAutoscalingV2beta1NamespacedHorizontalPodAutoscaler(body: any, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesPatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerOptionalParams, callback: msRest.ServiceCallback<Models.V2beta1HorizontalPodAutoscaler>): void;
  patchAutoscalingV2beta1NamespacedHorizontalPodAutoscaler(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerOptionalParams | msRest.ServiceCallback<Models.V2beta1HorizontalPodAutoscaler>, callback?: msRest.ServiceCallback<Models.V2beta1HorizontalPodAutoscaler>): Promise<Models.PatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      patchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerOperationSpec,
      callback) as Promise<Models.PatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerResponse>;
  }

  /**
   * read status of the specified HorizontalPodAutoscaler
   * @param name name of the HorizontalPodAutoscaler
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusResponse>
   */
  readAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatus(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusOptionalParams): Promise<Models.ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusResponse>;
  /**
   * @param name name of the HorizontalPodAutoscaler
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatus(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V2beta1HorizontalPodAutoscaler>): void;
  /**
   * @param name name of the HorizontalPodAutoscaler
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatus(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusOptionalParams, callback: msRest.ServiceCallback<Models.V2beta1HorizontalPodAutoscaler>): void;
  readAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatus(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusOptionalParams | msRest.ServiceCallback<Models.V2beta1HorizontalPodAutoscaler>, callback?: msRest.ServiceCallback<Models.V2beta1HorizontalPodAutoscaler>): Promise<Models.ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusOperationSpec,
      callback) as Promise<Models.ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusResponse>;
  }

  /**
   * replace status of the specified HorizontalPodAutoscaler
   * @param body
   * @param name name of the HorizontalPodAutoscaler
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns
   * Promise<Models.ReplaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusResponse>
   */
  replaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatus(body: Models.V2beta1HorizontalPodAutoscaler, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusOptionalParams): Promise<Models.ReplaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusResponse>;
  /**
   * @param body
   * @param name name of the HorizontalPodAutoscaler
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatus(body: Models.V2beta1HorizontalPodAutoscaler, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V2beta1HorizontalPodAutoscaler>): void;
  /**
   * @param body
   * @param name name of the HorizontalPodAutoscaler
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatus(body: Models.V2beta1HorizontalPodAutoscaler, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusOptionalParams, callback: msRest.ServiceCallback<Models.V2beta1HorizontalPodAutoscaler>): void;
  replaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatus(body: Models.V2beta1HorizontalPodAutoscaler, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusOptionalParams | msRest.ServiceCallback<Models.V2beta1HorizontalPodAutoscaler>, callback?: msRest.ServiceCallback<Models.V2beta1HorizontalPodAutoscaler>): Promise<Models.ReplaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusOperationSpec,
      callback) as Promise<Models.ReplaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusResponse>;
  }

  /**
   * partially update status of the specified HorizontalPodAutoscaler
   * @param body
   * @param name name of the HorizontalPodAutoscaler
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusResponse>
   */
  patchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatus(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusOptionalParams): Promise<Models.PatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusResponse>;
  /**
   * @param body
   * @param name name of the HorizontalPodAutoscaler
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  patchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatus(body: any, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V2beta1HorizontalPodAutoscaler>): void;
  /**
   * @param body
   * @param name name of the HorizontalPodAutoscaler
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  patchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatus(body: any, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesPatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusOptionalParams, callback: msRest.ServiceCallback<Models.V2beta1HorizontalPodAutoscaler>): void;
  patchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatus(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusOptionalParams | msRest.ServiceCallback<Models.V2beta1HorizontalPodAutoscaler>, callback?: msRest.ServiceCallback<Models.V2beta1HorizontalPodAutoscaler>): Promise<Models.PatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      patchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusOperationSpec,
      callback) as Promise<Models.PatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusResponse>;
  }

  /**
   * watch individual changes to a list of HorizontalPodAutoscaler
   * @param [options] The optional parameters
   * @returns
   * Promise<Models.WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesResponse>
   */
  watchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesOptionalParams): Promise<Models.WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  watchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespaces(callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  watchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesWatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      watchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesOperationSpec,
      callback) as Promise<Models.WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesResponse>;
  }

  /**
   * watch individual changes to a list of HorizontalPodAutoscaler
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerListResponse>
   */
  watchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerListOptionalParams): Promise<Models.WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerListResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerList(namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerList(namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerListOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerListOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerListResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      watchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerListOperationSpec,
      callback) as Promise<Models.WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerListResponse>;
  }

  /**
   * watch changes to an object of kind HorizontalPodAutoscaler
   * @param name name of the HorizontalPodAutoscaler
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerResponse>
   */
  watchAutoscalingV2beta1NamespacedHorizontalPodAutoscaler(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerOptionalParams): Promise<Models.WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerResponse>;
  /**
   * @param name name of the HorizontalPodAutoscaler
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchAutoscalingV2beta1NamespacedHorizontalPodAutoscaler(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param name name of the HorizontalPodAutoscaler
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchAutoscalingV2beta1NamespacedHorizontalPodAutoscaler(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchAutoscalingV2beta1NamespacedHorizontalPodAutoscaler(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      watchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerOperationSpec,
      callback) as Promise<Models.WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerResponse>;
  }

  /**
   * get information of a group
   * @param [options] The optional parameters
   * @returns Promise<Models.GetBatchAPIGroupResponse>
   */
  getBatchAPIGroup(options?: msRest.RequestOptionsBase): Promise<Models.GetBatchAPIGroupResponse>;
  /**
   * @param callback The callback
   */
  getBatchAPIGroup(callback: msRest.ServiceCallback<Models.V1APIGroup>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getBatchAPIGroup(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.V1APIGroup>): void;
  getBatchAPIGroup(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.V1APIGroup>, callback?: msRest.ServiceCallback<Models.V1APIGroup>): Promise<Models.GetBatchAPIGroupResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getBatchAPIGroupOperationSpec,
      callback) as Promise<Models.GetBatchAPIGroupResponse>;
  }

  /**
   * get available resources
   * @param [options] The optional parameters
   * @returns Promise<Models.GetBatchV1APIResourcesResponse>
   */
  getBatchV1APIResources(options?: msRest.RequestOptionsBase): Promise<Models.GetBatchV1APIResourcesResponse>;
  /**
   * @param callback The callback
   */
  getBatchV1APIResources(callback: msRest.ServiceCallback<Models.V1APIResourceList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getBatchV1APIResources(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.V1APIResourceList>): void;
  getBatchV1APIResources(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.V1APIResourceList>, callback?: msRest.ServiceCallback<Models.V1APIResourceList>): Promise<Models.GetBatchV1APIResourcesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getBatchV1APIResourcesOperationSpec,
      callback) as Promise<Models.GetBatchV1APIResourcesResponse>;
  }

  /**
   * list or watch objects of kind Job
   * @param [options] The optional parameters
   * @returns Promise<Models.ListBatchV1JobForAllNamespacesResponse>
   */
  listBatchV1JobForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListBatchV1JobForAllNamespacesOptionalParams): Promise<Models.ListBatchV1JobForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  listBatchV1JobForAllNamespaces(callback: msRest.ServiceCallback<Models.V1JobList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listBatchV1JobForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesListBatchV1JobForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1JobList>): void;
  listBatchV1JobForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListBatchV1JobForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1JobList>, callback?: msRest.ServiceCallback<Models.V1JobList>): Promise<Models.ListBatchV1JobForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listBatchV1JobForAllNamespacesOperationSpec,
      callback) as Promise<Models.ListBatchV1JobForAllNamespacesResponse>;
  }

  /**
   * list or watch objects of kind Job
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ListBatchV1NamespacedJobResponse>
   */
  listBatchV1NamespacedJob(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListBatchV1NamespacedJobOptionalParams): Promise<Models.ListBatchV1NamespacedJobResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  listBatchV1NamespacedJob(namespace: string, callback: msRest.ServiceCallback<Models.V1JobList>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  listBatchV1NamespacedJob(namespace: string, options: Models.OpenShiftAPIwithKubernetesListBatchV1NamespacedJobOptionalParams, callback: msRest.ServiceCallback<Models.V1JobList>): void;
  listBatchV1NamespacedJob(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListBatchV1NamespacedJobOptionalParams | msRest.ServiceCallback<Models.V1JobList>, callback?: msRest.ServiceCallback<Models.V1JobList>): Promise<Models.ListBatchV1NamespacedJobResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      listBatchV1NamespacedJobOperationSpec,
      callback) as Promise<Models.ListBatchV1NamespacedJobResponse>;
  }

  /**
   * create a Job
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateBatchV1NamespacedJobResponse>
   */
  createBatchV1NamespacedJob(body: Models.V1Job, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateBatchV1NamespacedJobOptionalParams): Promise<Models.CreateBatchV1NamespacedJobResponse>;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  createBatchV1NamespacedJob(body: Models.V1Job, namespace: string, callback: msRest.ServiceCallback<Models.V1Job>): void;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  createBatchV1NamespacedJob(body: Models.V1Job, namespace: string, options: Models.OpenShiftAPIwithKubernetesCreateBatchV1NamespacedJobOptionalParams, callback: msRest.ServiceCallback<Models.V1Job>): void;
  createBatchV1NamespacedJob(body: Models.V1Job, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateBatchV1NamespacedJobOptionalParams | msRest.ServiceCallback<Models.V1Job>, callback?: msRest.ServiceCallback<Models.V1Job>): Promise<Models.CreateBatchV1NamespacedJobResponse> {
    return this.sendOperationRequest(
      {
        body,
        namespace,
        options
      },
      createBatchV1NamespacedJobOperationSpec,
      callback) as Promise<Models.CreateBatchV1NamespacedJobResponse>;
  }

  /**
   * delete collection of Job
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteBatchV1CollectionNamespacedJobResponse>
   */
  deleteBatchV1CollectionNamespacedJob(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteBatchV1CollectionNamespacedJobOptionalParams): Promise<Models.DeleteBatchV1CollectionNamespacedJobResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteBatchV1CollectionNamespacedJob(namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteBatchV1CollectionNamespacedJob(namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteBatchV1CollectionNamespacedJobOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteBatchV1CollectionNamespacedJob(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteBatchV1CollectionNamespacedJobOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteBatchV1CollectionNamespacedJobResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      deleteBatchV1CollectionNamespacedJobOperationSpec,
      callback) as Promise<Models.DeleteBatchV1CollectionNamespacedJobResponse>;
  }

  /**
   * read the specified Job
   * @param name name of the Job
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadBatchV1NamespacedJobResponse>
   */
  readBatchV1NamespacedJob(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadBatchV1NamespacedJobOptionalParams): Promise<Models.ReadBatchV1NamespacedJobResponse>;
  /**
   * @param name name of the Job
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readBatchV1NamespacedJob(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Job>): void;
  /**
   * @param name name of the Job
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readBatchV1NamespacedJob(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadBatchV1NamespacedJobOptionalParams, callback: msRest.ServiceCallback<Models.V1Job>): void;
  readBatchV1NamespacedJob(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadBatchV1NamespacedJobOptionalParams | msRest.ServiceCallback<Models.V1Job>, callback?: msRest.ServiceCallback<Models.V1Job>): Promise<Models.ReadBatchV1NamespacedJobResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readBatchV1NamespacedJobOperationSpec,
      callback) as Promise<Models.ReadBatchV1NamespacedJobResponse>;
  }

  /**
   * replace the specified Job
   * @param body
   * @param name name of the Job
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceBatchV1NamespacedJobResponse>
   */
  replaceBatchV1NamespacedJob(body: Models.V1Job, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceBatchV1NamespacedJobOptionalParams): Promise<Models.ReplaceBatchV1NamespacedJobResponse>;
  /**
   * @param body
   * @param name name of the Job
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replaceBatchV1NamespacedJob(body: Models.V1Job, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Job>): void;
  /**
   * @param body
   * @param name name of the Job
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceBatchV1NamespacedJob(body: Models.V1Job, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplaceBatchV1NamespacedJobOptionalParams, callback: msRest.ServiceCallback<Models.V1Job>): void;
  replaceBatchV1NamespacedJob(body: Models.V1Job, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceBatchV1NamespacedJobOptionalParams | msRest.ServiceCallback<Models.V1Job>, callback?: msRest.ServiceCallback<Models.V1Job>): Promise<Models.ReplaceBatchV1NamespacedJobResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replaceBatchV1NamespacedJobOperationSpec,
      callback) as Promise<Models.ReplaceBatchV1NamespacedJobResponse>;
  }

  /**
   * delete a Job
   * @param body
   * @param name name of the Job
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteBatchV1NamespacedJobResponse>
   */
  deleteBatchV1NamespacedJob(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteBatchV1NamespacedJobOptionalParams): Promise<Models.DeleteBatchV1NamespacedJobResponse>;
  /**
   * @param body
   * @param name name of the Job
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteBatchV1NamespacedJob(body: Models.V1DeleteOptions, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param name name of the Job
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteBatchV1NamespacedJob(body: Models.V1DeleteOptions, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteBatchV1NamespacedJobOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteBatchV1NamespacedJob(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteBatchV1NamespacedJobOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteBatchV1NamespacedJobResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      deleteBatchV1NamespacedJobOperationSpec,
      callback) as Promise<Models.DeleteBatchV1NamespacedJobResponse>;
  }

  /**
   * partially update the specified Job
   * @param body
   * @param name name of the Job
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchBatchV1NamespacedJobResponse>
   */
  patchBatchV1NamespacedJob(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchBatchV1NamespacedJobOptionalParams): Promise<Models.PatchBatchV1NamespacedJobResponse>;
  /**
   * @param body
   * @param name name of the Job
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  patchBatchV1NamespacedJob(body: any, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Job>): void;
  /**
   * @param body
   * @param name name of the Job
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  patchBatchV1NamespacedJob(body: any, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesPatchBatchV1NamespacedJobOptionalParams, callback: msRest.ServiceCallback<Models.V1Job>): void;
  patchBatchV1NamespacedJob(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchBatchV1NamespacedJobOptionalParams | msRest.ServiceCallback<Models.V1Job>, callback?: msRest.ServiceCallback<Models.V1Job>): Promise<Models.PatchBatchV1NamespacedJobResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      patchBatchV1NamespacedJobOperationSpec,
      callback) as Promise<Models.PatchBatchV1NamespacedJobResponse>;
  }

  /**
   * read status of the specified Job
   * @param name name of the Job
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadBatchV1NamespacedJobStatusResponse>
   */
  readBatchV1NamespacedJobStatus(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadBatchV1NamespacedJobStatusOptionalParams): Promise<Models.ReadBatchV1NamespacedJobStatusResponse>;
  /**
   * @param name name of the Job
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readBatchV1NamespacedJobStatus(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Job>): void;
  /**
   * @param name name of the Job
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readBatchV1NamespacedJobStatus(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadBatchV1NamespacedJobStatusOptionalParams, callback: msRest.ServiceCallback<Models.V1Job>): void;
  readBatchV1NamespacedJobStatus(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadBatchV1NamespacedJobStatusOptionalParams | msRest.ServiceCallback<Models.V1Job>, callback?: msRest.ServiceCallback<Models.V1Job>): Promise<Models.ReadBatchV1NamespacedJobStatusResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readBatchV1NamespacedJobStatusOperationSpec,
      callback) as Promise<Models.ReadBatchV1NamespacedJobStatusResponse>;
  }

  /**
   * replace status of the specified Job
   * @param body
   * @param name name of the Job
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceBatchV1NamespacedJobStatusResponse>
   */
  replaceBatchV1NamespacedJobStatus(body: Models.V1Job, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceBatchV1NamespacedJobStatusOptionalParams): Promise<Models.ReplaceBatchV1NamespacedJobStatusResponse>;
  /**
   * @param body
   * @param name name of the Job
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replaceBatchV1NamespacedJobStatus(body: Models.V1Job, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Job>): void;
  /**
   * @param body
   * @param name name of the Job
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceBatchV1NamespacedJobStatus(body: Models.V1Job, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplaceBatchV1NamespacedJobStatusOptionalParams, callback: msRest.ServiceCallback<Models.V1Job>): void;
  replaceBatchV1NamespacedJobStatus(body: Models.V1Job, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceBatchV1NamespacedJobStatusOptionalParams | msRest.ServiceCallback<Models.V1Job>, callback?: msRest.ServiceCallback<Models.V1Job>): Promise<Models.ReplaceBatchV1NamespacedJobStatusResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replaceBatchV1NamespacedJobStatusOperationSpec,
      callback) as Promise<Models.ReplaceBatchV1NamespacedJobStatusResponse>;
  }

  /**
   * partially update status of the specified Job
   * @param body
   * @param name name of the Job
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchBatchV1NamespacedJobStatusResponse>
   */
  patchBatchV1NamespacedJobStatus(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchBatchV1NamespacedJobStatusOptionalParams): Promise<Models.PatchBatchV1NamespacedJobStatusResponse>;
  /**
   * @param body
   * @param name name of the Job
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  patchBatchV1NamespacedJobStatus(body: any, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Job>): void;
  /**
   * @param body
   * @param name name of the Job
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  patchBatchV1NamespacedJobStatus(body: any, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesPatchBatchV1NamespacedJobStatusOptionalParams, callback: msRest.ServiceCallback<Models.V1Job>): void;
  patchBatchV1NamespacedJobStatus(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchBatchV1NamespacedJobStatusOptionalParams | msRest.ServiceCallback<Models.V1Job>, callback?: msRest.ServiceCallback<Models.V1Job>): Promise<Models.PatchBatchV1NamespacedJobStatusResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      patchBatchV1NamespacedJobStatusOperationSpec,
      callback) as Promise<Models.PatchBatchV1NamespacedJobStatusResponse>;
  }

  /**
   * watch individual changes to a list of Job
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchBatchV1JobListForAllNamespacesResponse>
   */
  watchBatchV1JobListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchBatchV1JobListForAllNamespacesOptionalParams): Promise<Models.WatchBatchV1JobListForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  watchBatchV1JobListForAllNamespaces(callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  watchBatchV1JobListForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesWatchBatchV1JobListForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchBatchV1JobListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchBatchV1JobListForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchBatchV1JobListForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      watchBatchV1JobListForAllNamespacesOperationSpec,
      callback) as Promise<Models.WatchBatchV1JobListForAllNamespacesResponse>;
  }

  /**
   * watch individual changes to a list of Job
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchBatchV1NamespacedJobListResponse>
   */
  watchBatchV1NamespacedJobList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchBatchV1NamespacedJobListOptionalParams): Promise<Models.WatchBatchV1NamespacedJobListResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchBatchV1NamespacedJobList(namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchBatchV1NamespacedJobList(namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchBatchV1NamespacedJobListOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchBatchV1NamespacedJobList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchBatchV1NamespacedJobListOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchBatchV1NamespacedJobListResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      watchBatchV1NamespacedJobListOperationSpec,
      callback) as Promise<Models.WatchBatchV1NamespacedJobListResponse>;
  }

  /**
   * watch changes to an object of kind Job
   * @param name name of the Job
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchBatchV1NamespacedJobResponse>
   */
  watchBatchV1NamespacedJob(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchBatchV1NamespacedJobOptionalParams): Promise<Models.WatchBatchV1NamespacedJobResponse>;
  /**
   * @param name name of the Job
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchBatchV1NamespacedJob(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param name name of the Job
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchBatchV1NamespacedJob(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchBatchV1NamespacedJobOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchBatchV1NamespacedJob(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchBatchV1NamespacedJobOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchBatchV1NamespacedJobResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      watchBatchV1NamespacedJobOperationSpec,
      callback) as Promise<Models.WatchBatchV1NamespacedJobResponse>;
  }

  /**
   * get available resources
   * @param [options] The optional parameters
   * @returns Promise<Models.GetBatchV1beta1APIResourcesResponse>
   */
  getBatchV1beta1APIResources(options?: msRest.RequestOptionsBase): Promise<Models.GetBatchV1beta1APIResourcesResponse>;
  /**
   * @param callback The callback
   */
  getBatchV1beta1APIResources(callback: msRest.ServiceCallback<Models.V1APIResourceList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getBatchV1beta1APIResources(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.V1APIResourceList>): void;
  getBatchV1beta1APIResources(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.V1APIResourceList>, callback?: msRest.ServiceCallback<Models.V1APIResourceList>): Promise<Models.GetBatchV1beta1APIResourcesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getBatchV1beta1APIResourcesOperationSpec,
      callback) as Promise<Models.GetBatchV1beta1APIResourcesResponse>;
  }

  /**
   * list or watch objects of kind CronJob
   * @param [options] The optional parameters
   * @returns Promise<Models.ListBatchV1beta1CronJobForAllNamespacesResponse>
   */
  listBatchV1beta1CronJobForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListBatchV1beta1CronJobForAllNamespacesOptionalParams): Promise<Models.ListBatchV1beta1CronJobForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  listBatchV1beta1CronJobForAllNamespaces(callback: msRest.ServiceCallback<Models.V1beta1CronJobList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listBatchV1beta1CronJobForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesListBatchV1beta1CronJobForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1CronJobList>): void;
  listBatchV1beta1CronJobForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListBatchV1beta1CronJobForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1beta1CronJobList>, callback?: msRest.ServiceCallback<Models.V1beta1CronJobList>): Promise<Models.ListBatchV1beta1CronJobForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listBatchV1beta1CronJobForAllNamespacesOperationSpec,
      callback) as Promise<Models.ListBatchV1beta1CronJobForAllNamespacesResponse>;
  }

  /**
   * list or watch objects of kind CronJob
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ListBatchV1beta1NamespacedCronJobResponse>
   */
  listBatchV1beta1NamespacedCronJob(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListBatchV1beta1NamespacedCronJobOptionalParams): Promise<Models.ListBatchV1beta1NamespacedCronJobResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  listBatchV1beta1NamespacedCronJob(namespace: string, callback: msRest.ServiceCallback<Models.V1beta1CronJobList>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  listBatchV1beta1NamespacedCronJob(namespace: string, options: Models.OpenShiftAPIwithKubernetesListBatchV1beta1NamespacedCronJobOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1CronJobList>): void;
  listBatchV1beta1NamespacedCronJob(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListBatchV1beta1NamespacedCronJobOptionalParams | msRest.ServiceCallback<Models.V1beta1CronJobList>, callback?: msRest.ServiceCallback<Models.V1beta1CronJobList>): Promise<Models.ListBatchV1beta1NamespacedCronJobResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      listBatchV1beta1NamespacedCronJobOperationSpec,
      callback) as Promise<Models.ListBatchV1beta1NamespacedCronJobResponse>;
  }

  /**
   * create a CronJob
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateBatchV1beta1NamespacedCronJobResponse>
   */
  createBatchV1beta1NamespacedCronJob(body: Models.V1beta1CronJob, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateBatchV1beta1NamespacedCronJobOptionalParams): Promise<Models.CreateBatchV1beta1NamespacedCronJobResponse>;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  createBatchV1beta1NamespacedCronJob(body: Models.V1beta1CronJob, namespace: string, callback: msRest.ServiceCallback<Models.V1beta1CronJob>): void;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  createBatchV1beta1NamespacedCronJob(body: Models.V1beta1CronJob, namespace: string, options: Models.OpenShiftAPIwithKubernetesCreateBatchV1beta1NamespacedCronJobOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1CronJob>): void;
  createBatchV1beta1NamespacedCronJob(body: Models.V1beta1CronJob, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateBatchV1beta1NamespacedCronJobOptionalParams | msRest.ServiceCallback<Models.V1beta1CronJob>, callback?: msRest.ServiceCallback<Models.V1beta1CronJob>): Promise<Models.CreateBatchV1beta1NamespacedCronJobResponse> {
    return this.sendOperationRequest(
      {
        body,
        namespace,
        options
      },
      createBatchV1beta1NamespacedCronJobOperationSpec,
      callback) as Promise<Models.CreateBatchV1beta1NamespacedCronJobResponse>;
  }

  /**
   * delete collection of CronJob
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteBatchV1beta1CollectionNamespacedCronJobResponse>
   */
  deleteBatchV1beta1CollectionNamespacedCronJob(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteBatchV1beta1CollectionNamespacedCronJobOptionalParams): Promise<Models.DeleteBatchV1beta1CollectionNamespacedCronJobResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteBatchV1beta1CollectionNamespacedCronJob(namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteBatchV1beta1CollectionNamespacedCronJob(namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteBatchV1beta1CollectionNamespacedCronJobOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteBatchV1beta1CollectionNamespacedCronJob(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteBatchV1beta1CollectionNamespacedCronJobOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteBatchV1beta1CollectionNamespacedCronJobResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      deleteBatchV1beta1CollectionNamespacedCronJobOperationSpec,
      callback) as Promise<Models.DeleteBatchV1beta1CollectionNamespacedCronJobResponse>;
  }

  /**
   * read the specified CronJob
   * @param name name of the CronJob
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadBatchV1beta1NamespacedCronJobResponse>
   */
  readBatchV1beta1NamespacedCronJob(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadBatchV1beta1NamespacedCronJobOptionalParams): Promise<Models.ReadBatchV1beta1NamespacedCronJobResponse>;
  /**
   * @param name name of the CronJob
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readBatchV1beta1NamespacedCronJob(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1beta1CronJob>): void;
  /**
   * @param name name of the CronJob
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readBatchV1beta1NamespacedCronJob(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadBatchV1beta1NamespacedCronJobOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1CronJob>): void;
  readBatchV1beta1NamespacedCronJob(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadBatchV1beta1NamespacedCronJobOptionalParams | msRest.ServiceCallback<Models.V1beta1CronJob>, callback?: msRest.ServiceCallback<Models.V1beta1CronJob>): Promise<Models.ReadBatchV1beta1NamespacedCronJobResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readBatchV1beta1NamespacedCronJobOperationSpec,
      callback) as Promise<Models.ReadBatchV1beta1NamespacedCronJobResponse>;
  }

  /**
   * replace the specified CronJob
   * @param body
   * @param name name of the CronJob
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceBatchV1beta1NamespacedCronJobResponse>
   */
  replaceBatchV1beta1NamespacedCronJob(body: Models.V1beta1CronJob, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceBatchV1beta1NamespacedCronJobOptionalParams): Promise<Models.ReplaceBatchV1beta1NamespacedCronJobResponse>;
  /**
   * @param body
   * @param name name of the CronJob
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replaceBatchV1beta1NamespacedCronJob(body: Models.V1beta1CronJob, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1beta1CronJob>): void;
  /**
   * @param body
   * @param name name of the CronJob
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceBatchV1beta1NamespacedCronJob(body: Models.V1beta1CronJob, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplaceBatchV1beta1NamespacedCronJobOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1CronJob>): void;
  replaceBatchV1beta1NamespacedCronJob(body: Models.V1beta1CronJob, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceBatchV1beta1NamespacedCronJobOptionalParams | msRest.ServiceCallback<Models.V1beta1CronJob>, callback?: msRest.ServiceCallback<Models.V1beta1CronJob>): Promise<Models.ReplaceBatchV1beta1NamespacedCronJobResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replaceBatchV1beta1NamespacedCronJobOperationSpec,
      callback) as Promise<Models.ReplaceBatchV1beta1NamespacedCronJobResponse>;
  }

  /**
   * delete a CronJob
   * @param body
   * @param name name of the CronJob
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteBatchV1beta1NamespacedCronJobResponse>
   */
  deleteBatchV1beta1NamespacedCronJob(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteBatchV1beta1NamespacedCronJobOptionalParams): Promise<Models.DeleteBatchV1beta1NamespacedCronJobResponse>;
  /**
   * @param body
   * @param name name of the CronJob
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteBatchV1beta1NamespacedCronJob(body: Models.V1DeleteOptions, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param name name of the CronJob
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteBatchV1beta1NamespacedCronJob(body: Models.V1DeleteOptions, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteBatchV1beta1NamespacedCronJobOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteBatchV1beta1NamespacedCronJob(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteBatchV1beta1NamespacedCronJobOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteBatchV1beta1NamespacedCronJobResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      deleteBatchV1beta1NamespacedCronJobOperationSpec,
      callback) as Promise<Models.DeleteBatchV1beta1NamespacedCronJobResponse>;
  }

  /**
   * partially update the specified CronJob
   * @param body
   * @param name name of the CronJob
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchBatchV1beta1NamespacedCronJobResponse>
   */
  patchBatchV1beta1NamespacedCronJob(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchBatchV1beta1NamespacedCronJobOptionalParams): Promise<Models.PatchBatchV1beta1NamespacedCronJobResponse>;
  /**
   * @param body
   * @param name name of the CronJob
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  patchBatchV1beta1NamespacedCronJob(body: any, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1beta1CronJob>): void;
  /**
   * @param body
   * @param name name of the CronJob
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  patchBatchV1beta1NamespacedCronJob(body: any, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesPatchBatchV1beta1NamespacedCronJobOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1CronJob>): void;
  patchBatchV1beta1NamespacedCronJob(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchBatchV1beta1NamespacedCronJobOptionalParams | msRest.ServiceCallback<Models.V1beta1CronJob>, callback?: msRest.ServiceCallback<Models.V1beta1CronJob>): Promise<Models.PatchBatchV1beta1NamespacedCronJobResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      patchBatchV1beta1NamespacedCronJobOperationSpec,
      callback) as Promise<Models.PatchBatchV1beta1NamespacedCronJobResponse>;
  }

  /**
   * read status of the specified CronJob
   * @param name name of the CronJob
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadBatchV1beta1NamespacedCronJobStatusResponse>
   */
  readBatchV1beta1NamespacedCronJobStatus(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadBatchV1beta1NamespacedCronJobStatusOptionalParams): Promise<Models.ReadBatchV1beta1NamespacedCronJobStatusResponse>;
  /**
   * @param name name of the CronJob
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readBatchV1beta1NamespacedCronJobStatus(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1beta1CronJob>): void;
  /**
   * @param name name of the CronJob
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readBatchV1beta1NamespacedCronJobStatus(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadBatchV1beta1NamespacedCronJobStatusOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1CronJob>): void;
  readBatchV1beta1NamespacedCronJobStatus(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadBatchV1beta1NamespacedCronJobStatusOptionalParams | msRest.ServiceCallback<Models.V1beta1CronJob>, callback?: msRest.ServiceCallback<Models.V1beta1CronJob>): Promise<Models.ReadBatchV1beta1NamespacedCronJobStatusResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readBatchV1beta1NamespacedCronJobStatusOperationSpec,
      callback) as Promise<Models.ReadBatchV1beta1NamespacedCronJobStatusResponse>;
  }

  /**
   * replace status of the specified CronJob
   * @param body
   * @param name name of the CronJob
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceBatchV1beta1NamespacedCronJobStatusResponse>
   */
  replaceBatchV1beta1NamespacedCronJobStatus(body: Models.V1beta1CronJob, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceBatchV1beta1NamespacedCronJobStatusOptionalParams): Promise<Models.ReplaceBatchV1beta1NamespacedCronJobStatusResponse>;
  /**
   * @param body
   * @param name name of the CronJob
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replaceBatchV1beta1NamespacedCronJobStatus(body: Models.V1beta1CronJob, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1beta1CronJob>): void;
  /**
   * @param body
   * @param name name of the CronJob
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceBatchV1beta1NamespacedCronJobStatus(body: Models.V1beta1CronJob, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplaceBatchV1beta1NamespacedCronJobStatusOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1CronJob>): void;
  replaceBatchV1beta1NamespacedCronJobStatus(body: Models.V1beta1CronJob, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceBatchV1beta1NamespacedCronJobStatusOptionalParams | msRest.ServiceCallback<Models.V1beta1CronJob>, callback?: msRest.ServiceCallback<Models.V1beta1CronJob>): Promise<Models.ReplaceBatchV1beta1NamespacedCronJobStatusResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replaceBatchV1beta1NamespacedCronJobStatusOperationSpec,
      callback) as Promise<Models.ReplaceBatchV1beta1NamespacedCronJobStatusResponse>;
  }

  /**
   * partially update status of the specified CronJob
   * @param body
   * @param name name of the CronJob
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchBatchV1beta1NamespacedCronJobStatusResponse>
   */
  patchBatchV1beta1NamespacedCronJobStatus(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchBatchV1beta1NamespacedCronJobStatusOptionalParams): Promise<Models.PatchBatchV1beta1NamespacedCronJobStatusResponse>;
  /**
   * @param body
   * @param name name of the CronJob
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  patchBatchV1beta1NamespacedCronJobStatus(body: any, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1beta1CronJob>): void;
  /**
   * @param body
   * @param name name of the CronJob
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  patchBatchV1beta1NamespacedCronJobStatus(body: any, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesPatchBatchV1beta1NamespacedCronJobStatusOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1CronJob>): void;
  patchBatchV1beta1NamespacedCronJobStatus(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchBatchV1beta1NamespacedCronJobStatusOptionalParams | msRest.ServiceCallback<Models.V1beta1CronJob>, callback?: msRest.ServiceCallback<Models.V1beta1CronJob>): Promise<Models.PatchBatchV1beta1NamespacedCronJobStatusResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      patchBatchV1beta1NamespacedCronJobStatusOperationSpec,
      callback) as Promise<Models.PatchBatchV1beta1NamespacedCronJobStatusResponse>;
  }

  /**
   * watch individual changes to a list of CronJob
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchBatchV1beta1CronJobListForAllNamespacesResponse>
   */
  watchBatchV1beta1CronJobListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchBatchV1beta1CronJobListForAllNamespacesOptionalParams): Promise<Models.WatchBatchV1beta1CronJobListForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  watchBatchV1beta1CronJobListForAllNamespaces(callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  watchBatchV1beta1CronJobListForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesWatchBatchV1beta1CronJobListForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchBatchV1beta1CronJobListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchBatchV1beta1CronJobListForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchBatchV1beta1CronJobListForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      watchBatchV1beta1CronJobListForAllNamespacesOperationSpec,
      callback) as Promise<Models.WatchBatchV1beta1CronJobListForAllNamespacesResponse>;
  }

  /**
   * watch individual changes to a list of CronJob
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchBatchV1beta1NamespacedCronJobListResponse>
   */
  watchBatchV1beta1NamespacedCronJobList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchBatchV1beta1NamespacedCronJobListOptionalParams): Promise<Models.WatchBatchV1beta1NamespacedCronJobListResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchBatchV1beta1NamespacedCronJobList(namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchBatchV1beta1NamespacedCronJobList(namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchBatchV1beta1NamespacedCronJobListOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchBatchV1beta1NamespacedCronJobList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchBatchV1beta1NamespacedCronJobListOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchBatchV1beta1NamespacedCronJobListResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      watchBatchV1beta1NamespacedCronJobListOperationSpec,
      callback) as Promise<Models.WatchBatchV1beta1NamespacedCronJobListResponse>;
  }

  /**
   * watch changes to an object of kind CronJob
   * @param name name of the CronJob
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchBatchV1beta1NamespacedCronJobResponse>
   */
  watchBatchV1beta1NamespacedCronJob(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchBatchV1beta1NamespacedCronJobOptionalParams): Promise<Models.WatchBatchV1beta1NamespacedCronJobResponse>;
  /**
   * @param name name of the CronJob
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchBatchV1beta1NamespacedCronJob(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param name name of the CronJob
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchBatchV1beta1NamespacedCronJob(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchBatchV1beta1NamespacedCronJobOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchBatchV1beta1NamespacedCronJob(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchBatchV1beta1NamespacedCronJobOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchBatchV1beta1NamespacedCronJobResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      watchBatchV1beta1NamespacedCronJobOperationSpec,
      callback) as Promise<Models.WatchBatchV1beta1NamespacedCronJobResponse>;
  }

  /**
   * get information of a group
   * @param [options] The optional parameters
   * @returns Promise<Models.GetBuildOpenshiftIoAPIGroupResponse>
   */
  getBuildOpenshiftIoAPIGroup(options?: msRest.RequestOptionsBase): Promise<Models.GetBuildOpenshiftIoAPIGroupResponse>;
  /**
   * @param callback The callback
   */
  getBuildOpenshiftIoAPIGroup(callback: msRest.ServiceCallback<Models.V1APIGroup>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getBuildOpenshiftIoAPIGroup(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.V1APIGroup>): void;
  getBuildOpenshiftIoAPIGroup(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.V1APIGroup>, callback?: msRest.ServiceCallback<Models.V1APIGroup>): Promise<Models.GetBuildOpenshiftIoAPIGroupResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getBuildOpenshiftIoAPIGroupOperationSpec,
      callback) as Promise<Models.GetBuildOpenshiftIoAPIGroupResponse>;
  }

  /**
   * get available resources
   * @param [options] The optional parameters
   * @returns Promise<Models.GetBuildOpenshiftIoV1APIResourcesResponse>
   */
  getBuildOpenshiftIoV1APIResources(options?: msRest.RequestOptionsBase): Promise<Models.GetBuildOpenshiftIoV1APIResourcesResponse>;
  /**
   * @param callback The callback
   */
  getBuildOpenshiftIoV1APIResources(callback: msRest.ServiceCallback<Models.V1APIResourceList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getBuildOpenshiftIoV1APIResources(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.V1APIResourceList>): void;
  getBuildOpenshiftIoV1APIResources(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.V1APIResourceList>, callback?: msRest.ServiceCallback<Models.V1APIResourceList>): Promise<Models.GetBuildOpenshiftIoV1APIResourcesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getBuildOpenshiftIoV1APIResourcesOperationSpec,
      callback) as Promise<Models.GetBuildOpenshiftIoV1APIResourcesResponse>;
  }

  /**
   * list or watch objects of kind BuildConfig
   * @param [options] The optional parameters
   * @returns Promise<Models.ListBuildOpenshiftIoV1BuildConfigForAllNamespacesResponse>
   */
  listBuildOpenshiftIoV1BuildConfigForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListBuildOpenshiftIoV1BuildConfigForAllNamespacesOptionalParams): Promise<Models.ListBuildOpenshiftIoV1BuildConfigForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  listBuildOpenshiftIoV1BuildConfigForAllNamespaces(callback: msRest.ServiceCallback<Models.Comgithubopenshiftapibuildv1BuildConfigList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listBuildOpenshiftIoV1BuildConfigForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesListBuildOpenshiftIoV1BuildConfigForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapibuildv1BuildConfigList>): void;
  listBuildOpenshiftIoV1BuildConfigForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListBuildOpenshiftIoV1BuildConfigForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapibuildv1BuildConfigList>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapibuildv1BuildConfigList>): Promise<Models.ListBuildOpenshiftIoV1BuildConfigForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listBuildOpenshiftIoV1BuildConfigForAllNamespacesOperationSpec,
      callback) as Promise<Models.ListBuildOpenshiftIoV1BuildConfigForAllNamespacesResponse>;
  }

  /**
   * list or watch objects of kind Build
   * @param [options] The optional parameters
   * @returns Promise<Models.ListBuildOpenshiftIoV1BuildForAllNamespacesResponse>
   */
  listBuildOpenshiftIoV1BuildForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListBuildOpenshiftIoV1BuildForAllNamespacesOptionalParams): Promise<Models.ListBuildOpenshiftIoV1BuildForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  listBuildOpenshiftIoV1BuildForAllNamespaces(callback: msRest.ServiceCallback<Models.Comgithubopenshiftapibuildv1BuildList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listBuildOpenshiftIoV1BuildForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesListBuildOpenshiftIoV1BuildForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapibuildv1BuildList>): void;
  listBuildOpenshiftIoV1BuildForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListBuildOpenshiftIoV1BuildForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapibuildv1BuildList>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapibuildv1BuildList>): Promise<Models.ListBuildOpenshiftIoV1BuildForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listBuildOpenshiftIoV1BuildForAllNamespacesOperationSpec,
      callback) as Promise<Models.ListBuildOpenshiftIoV1BuildForAllNamespacesResponse>;
  }

  /**
   * list or watch objects of kind BuildConfig
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ListBuildOpenshiftIoV1NamespacedBuildConfigResponse>
   */
  listBuildOpenshiftIoV1NamespacedBuildConfig(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListBuildOpenshiftIoV1NamespacedBuildConfigOptionalParams): Promise<Models.ListBuildOpenshiftIoV1NamespacedBuildConfigResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  listBuildOpenshiftIoV1NamespacedBuildConfig(namespace: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapibuildv1BuildConfigList>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  listBuildOpenshiftIoV1NamespacedBuildConfig(namespace: string, options: Models.OpenShiftAPIwithKubernetesListBuildOpenshiftIoV1NamespacedBuildConfigOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapibuildv1BuildConfigList>): void;
  listBuildOpenshiftIoV1NamespacedBuildConfig(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListBuildOpenshiftIoV1NamespacedBuildConfigOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapibuildv1BuildConfigList>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapibuildv1BuildConfigList>): Promise<Models.ListBuildOpenshiftIoV1NamespacedBuildConfigResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      listBuildOpenshiftIoV1NamespacedBuildConfigOperationSpec,
      callback) as Promise<Models.ListBuildOpenshiftIoV1NamespacedBuildConfigResponse>;
  }

  /**
   * create a BuildConfig
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateBuildOpenshiftIoV1NamespacedBuildConfigResponse>
   */
  createBuildOpenshiftIoV1NamespacedBuildConfig(body: Models.Comgithubopenshiftapibuildv1BuildConfig, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateBuildOpenshiftIoV1NamespacedBuildConfigOptionalParams): Promise<Models.CreateBuildOpenshiftIoV1NamespacedBuildConfigResponse>;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  createBuildOpenshiftIoV1NamespacedBuildConfig(body: Models.Comgithubopenshiftapibuildv1BuildConfig, namespace: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapibuildv1BuildConfig>): void;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  createBuildOpenshiftIoV1NamespacedBuildConfig(body: Models.Comgithubopenshiftapibuildv1BuildConfig, namespace: string, options: Models.OpenShiftAPIwithKubernetesCreateBuildOpenshiftIoV1NamespacedBuildConfigOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapibuildv1BuildConfig>): void;
  createBuildOpenshiftIoV1NamespacedBuildConfig(body: Models.Comgithubopenshiftapibuildv1BuildConfig, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateBuildOpenshiftIoV1NamespacedBuildConfigOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapibuildv1BuildConfig>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapibuildv1BuildConfig>): Promise<Models.CreateBuildOpenshiftIoV1NamespacedBuildConfigResponse> {
    return this.sendOperationRequest(
      {
        body,
        namespace,
        options
      },
      createBuildOpenshiftIoV1NamespacedBuildConfigOperationSpec,
      callback) as Promise<Models.CreateBuildOpenshiftIoV1NamespacedBuildConfigResponse>;
  }

  /**
   * delete collection of BuildConfig
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteBuildOpenshiftIoV1CollectionNamespacedBuildConfigResponse>
   */
  deleteBuildOpenshiftIoV1CollectionNamespacedBuildConfig(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteBuildOpenshiftIoV1CollectionNamespacedBuildConfigOptionalParams): Promise<Models.DeleteBuildOpenshiftIoV1CollectionNamespacedBuildConfigResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteBuildOpenshiftIoV1CollectionNamespacedBuildConfig(namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteBuildOpenshiftIoV1CollectionNamespacedBuildConfig(namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteBuildOpenshiftIoV1CollectionNamespacedBuildConfigOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteBuildOpenshiftIoV1CollectionNamespacedBuildConfig(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteBuildOpenshiftIoV1CollectionNamespacedBuildConfigOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteBuildOpenshiftIoV1CollectionNamespacedBuildConfigResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      deleteBuildOpenshiftIoV1CollectionNamespacedBuildConfigOperationSpec,
      callback) as Promise<Models.DeleteBuildOpenshiftIoV1CollectionNamespacedBuildConfigResponse>;
  }

  /**
   * read the specified BuildConfig
   * @param name name of the BuildConfig
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadBuildOpenshiftIoV1NamespacedBuildConfigResponse>
   */
  readBuildOpenshiftIoV1NamespacedBuildConfig(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadBuildOpenshiftIoV1NamespacedBuildConfigOptionalParams): Promise<Models.ReadBuildOpenshiftIoV1NamespacedBuildConfigResponse>;
  /**
   * @param name name of the BuildConfig
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readBuildOpenshiftIoV1NamespacedBuildConfig(name: string, namespace: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapibuildv1BuildConfig>): void;
  /**
   * @param name name of the BuildConfig
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readBuildOpenshiftIoV1NamespacedBuildConfig(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadBuildOpenshiftIoV1NamespacedBuildConfigOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapibuildv1BuildConfig>): void;
  readBuildOpenshiftIoV1NamespacedBuildConfig(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadBuildOpenshiftIoV1NamespacedBuildConfigOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapibuildv1BuildConfig>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapibuildv1BuildConfig>): Promise<Models.ReadBuildOpenshiftIoV1NamespacedBuildConfigResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readBuildOpenshiftIoV1NamespacedBuildConfigOperationSpec,
      callback) as Promise<Models.ReadBuildOpenshiftIoV1NamespacedBuildConfigResponse>;
  }

  /**
   * replace the specified BuildConfig
   * @param body
   * @param name name of the BuildConfig
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceBuildOpenshiftIoV1NamespacedBuildConfigResponse>
   */
  replaceBuildOpenshiftIoV1NamespacedBuildConfig(body: Models.Comgithubopenshiftapibuildv1BuildConfig, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceBuildOpenshiftIoV1NamespacedBuildConfigOptionalParams): Promise<Models.ReplaceBuildOpenshiftIoV1NamespacedBuildConfigResponse>;
  /**
   * @param body
   * @param name name of the BuildConfig
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replaceBuildOpenshiftIoV1NamespacedBuildConfig(body: Models.Comgithubopenshiftapibuildv1BuildConfig, name: string, namespace: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapibuildv1BuildConfig>): void;
  /**
   * @param body
   * @param name name of the BuildConfig
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceBuildOpenshiftIoV1NamespacedBuildConfig(body: Models.Comgithubopenshiftapibuildv1BuildConfig, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplaceBuildOpenshiftIoV1NamespacedBuildConfigOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapibuildv1BuildConfig>): void;
  replaceBuildOpenshiftIoV1NamespacedBuildConfig(body: Models.Comgithubopenshiftapibuildv1BuildConfig, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceBuildOpenshiftIoV1NamespacedBuildConfigOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapibuildv1BuildConfig>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapibuildv1BuildConfig>): Promise<Models.ReplaceBuildOpenshiftIoV1NamespacedBuildConfigResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replaceBuildOpenshiftIoV1NamespacedBuildConfigOperationSpec,
      callback) as Promise<Models.ReplaceBuildOpenshiftIoV1NamespacedBuildConfigResponse>;
  }

  /**
   * delete a BuildConfig
   * @param body
   * @param name name of the BuildConfig
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteBuildOpenshiftIoV1NamespacedBuildConfigResponse>
   */
  deleteBuildOpenshiftIoV1NamespacedBuildConfig(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteBuildOpenshiftIoV1NamespacedBuildConfigOptionalParams): Promise<Models.DeleteBuildOpenshiftIoV1NamespacedBuildConfigResponse>;
  /**
   * @param body
   * @param name name of the BuildConfig
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteBuildOpenshiftIoV1NamespacedBuildConfig(body: Models.V1DeleteOptions, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param name name of the BuildConfig
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteBuildOpenshiftIoV1NamespacedBuildConfig(body: Models.V1DeleteOptions, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteBuildOpenshiftIoV1NamespacedBuildConfigOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteBuildOpenshiftIoV1NamespacedBuildConfig(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteBuildOpenshiftIoV1NamespacedBuildConfigOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteBuildOpenshiftIoV1NamespacedBuildConfigResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      deleteBuildOpenshiftIoV1NamespacedBuildConfigOperationSpec,
      callback) as Promise<Models.DeleteBuildOpenshiftIoV1NamespacedBuildConfigResponse>;
  }

  /**
   * partially update the specified BuildConfig
   * @param body
   * @param name name of the BuildConfig
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchBuildOpenshiftIoV1NamespacedBuildConfigResponse>
   */
  patchBuildOpenshiftIoV1NamespacedBuildConfig(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchBuildOpenshiftIoV1NamespacedBuildConfigOptionalParams): Promise<Models.PatchBuildOpenshiftIoV1NamespacedBuildConfigResponse>;
  /**
   * @param body
   * @param name name of the BuildConfig
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  patchBuildOpenshiftIoV1NamespacedBuildConfig(body: any, name: string, namespace: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapibuildv1BuildConfig>): void;
  /**
   * @param body
   * @param name name of the BuildConfig
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  patchBuildOpenshiftIoV1NamespacedBuildConfig(body: any, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesPatchBuildOpenshiftIoV1NamespacedBuildConfigOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapibuildv1BuildConfig>): void;
  patchBuildOpenshiftIoV1NamespacedBuildConfig(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchBuildOpenshiftIoV1NamespacedBuildConfigOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapibuildv1BuildConfig>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapibuildv1BuildConfig>): Promise<Models.PatchBuildOpenshiftIoV1NamespacedBuildConfigResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      patchBuildOpenshiftIoV1NamespacedBuildConfigOperationSpec,
      callback) as Promise<Models.PatchBuildOpenshiftIoV1NamespacedBuildConfigResponse>;
  }

  /**
   * create instantiate of a BuildConfig
   * @param body
   * @param name name of the BuildRequest
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateBuildOpenshiftIoV1NamespacedBuildConfigInstantiateResponse>
   */
  createBuildOpenshiftIoV1NamespacedBuildConfigInstantiate(body: Models.Comgithubopenshiftapibuildv1BuildRequest, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateBuildOpenshiftIoV1NamespacedBuildConfigInstantiateOptionalParams): Promise<Models.CreateBuildOpenshiftIoV1NamespacedBuildConfigInstantiateResponse>;
  /**
   * @param body
   * @param name name of the BuildRequest
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  createBuildOpenshiftIoV1NamespacedBuildConfigInstantiate(body: Models.Comgithubopenshiftapibuildv1BuildRequest, name: string, namespace: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapibuildv1Build>): void;
  /**
   * @param body
   * @param name name of the BuildRequest
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  createBuildOpenshiftIoV1NamespacedBuildConfigInstantiate(body: Models.Comgithubopenshiftapibuildv1BuildRequest, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesCreateBuildOpenshiftIoV1NamespacedBuildConfigInstantiateOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapibuildv1Build>): void;
  createBuildOpenshiftIoV1NamespacedBuildConfigInstantiate(body: Models.Comgithubopenshiftapibuildv1BuildRequest, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateBuildOpenshiftIoV1NamespacedBuildConfigInstantiateOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapibuildv1Build>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapibuildv1Build>): Promise<Models.CreateBuildOpenshiftIoV1NamespacedBuildConfigInstantiateResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      createBuildOpenshiftIoV1NamespacedBuildConfigInstantiateOperationSpec,
      callback) as Promise<Models.CreateBuildOpenshiftIoV1NamespacedBuildConfigInstantiateResponse>;
  }

  /**
   * connect POST requests to instantiatebinary of BuildConfig
   * @param name name of the BinaryBuildRequestOptions
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns
   * Promise<Models.ConnectBuildOpenshiftIoV1PostNamespacedBuildConfigInstantiatebinaryResponse>
   */
  connectBuildOpenshiftIoV1PostNamespacedBuildConfigInstantiatebinary(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesConnectBuildOpenshiftIoV1PostNamespacedBuildConfigInstantiatebinaryOptionalParams): Promise<Models.ConnectBuildOpenshiftIoV1PostNamespacedBuildConfigInstantiatebinaryResponse>;
  /**
   * @param name name of the BinaryBuildRequestOptions
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  connectBuildOpenshiftIoV1PostNamespacedBuildConfigInstantiatebinary(name: string, namespace: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapibuildv1Build>): void;
  /**
   * @param name name of the BinaryBuildRequestOptions
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  connectBuildOpenshiftIoV1PostNamespacedBuildConfigInstantiatebinary(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesConnectBuildOpenshiftIoV1PostNamespacedBuildConfigInstantiatebinaryOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapibuildv1Build>): void;
  connectBuildOpenshiftIoV1PostNamespacedBuildConfigInstantiatebinary(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesConnectBuildOpenshiftIoV1PostNamespacedBuildConfigInstantiatebinaryOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapibuildv1Build>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapibuildv1Build>): Promise<Models.ConnectBuildOpenshiftIoV1PostNamespacedBuildConfigInstantiatebinaryResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      connectBuildOpenshiftIoV1PostNamespacedBuildConfigInstantiatebinaryOperationSpec,
      callback) as Promise<Models.ConnectBuildOpenshiftIoV1PostNamespacedBuildConfigInstantiatebinaryResponse>;
  }

  /**
   * connect POST requests to webhooks of BuildConfig
   * @param name name of the Build
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ConnectBuildOpenshiftIoV1PostNamespacedBuildConfigWebhooksResponse>
   */
  connectBuildOpenshiftIoV1PostNamespacedBuildConfigWebhooks(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesConnectBuildOpenshiftIoV1PostNamespacedBuildConfigWebhooksOptionalParams): Promise<Models.ConnectBuildOpenshiftIoV1PostNamespacedBuildConfigWebhooksResponse>;
  /**
   * @param name name of the Build
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  connectBuildOpenshiftIoV1PostNamespacedBuildConfigWebhooks(name: string, namespace: string, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param name name of the Build
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  connectBuildOpenshiftIoV1PostNamespacedBuildConfigWebhooks(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesConnectBuildOpenshiftIoV1PostNamespacedBuildConfigWebhooksOptionalParams, callback: msRest.ServiceCallback<string>): void;
  connectBuildOpenshiftIoV1PostNamespacedBuildConfigWebhooks(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesConnectBuildOpenshiftIoV1PostNamespacedBuildConfigWebhooksOptionalParams | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.ConnectBuildOpenshiftIoV1PostNamespacedBuildConfigWebhooksResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      connectBuildOpenshiftIoV1PostNamespacedBuildConfigWebhooksOperationSpec,
      callback) as Promise<Models.ConnectBuildOpenshiftIoV1PostNamespacedBuildConfigWebhooksResponse>;
  }

  /**
   * connect POST requests to webhooks of BuildConfig
   * @param name name of the Build
   * @param namespace object name and auth scope, such as for teams and projects
   * @param path path to the resource
   * @param path1 Path is the URL path to use for the current proxy request to pod.
   * @param [options] The optional parameters
   * @returns
   * Promise<Models.ConnectBuildOpenshiftIoV1PostNamespacedBuildConfigWebhooksWithPathResponse>
   */
  connectBuildOpenshiftIoV1PostNamespacedBuildConfigWebhooksWithPath(name: string, namespace: string, path: string, path1: string, options?: msRest.RequestOptionsBase): Promise<Models.ConnectBuildOpenshiftIoV1PostNamespacedBuildConfigWebhooksWithPathResponse>;
  /**
   * @param name name of the Build
   * @param namespace object name and auth scope, such as for teams and projects
   * @param path path to the resource
   * @param path1 Path is the URL path to use for the current proxy request to pod.
   * @param callback The callback
   */
  connectBuildOpenshiftIoV1PostNamespacedBuildConfigWebhooksWithPath(name: string, namespace: string, path: string, path1: string, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param name name of the Build
   * @param namespace object name and auth scope, such as for teams and projects
   * @param path path to the resource
   * @param path1 Path is the URL path to use for the current proxy request to pod.
   * @param options The optional parameters
   * @param callback The callback
   */
  connectBuildOpenshiftIoV1PostNamespacedBuildConfigWebhooksWithPath(name: string, namespace: string, path: string, path1: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
  connectBuildOpenshiftIoV1PostNamespacedBuildConfigWebhooksWithPath(name: string, namespace: string, path: string, path1: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.ConnectBuildOpenshiftIoV1PostNamespacedBuildConfigWebhooksWithPathResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        path,
        path1,
        options
      },
      connectBuildOpenshiftIoV1PostNamespacedBuildConfigWebhooksWithPathOperationSpec,
      callback) as Promise<Models.ConnectBuildOpenshiftIoV1PostNamespacedBuildConfigWebhooksWithPathResponse>;
  }

  /**
   * list or watch objects of kind Build
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ListBuildOpenshiftIoV1NamespacedBuildResponse>
   */
  listBuildOpenshiftIoV1NamespacedBuild(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListBuildOpenshiftIoV1NamespacedBuildOptionalParams): Promise<Models.ListBuildOpenshiftIoV1NamespacedBuildResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  listBuildOpenshiftIoV1NamespacedBuild(namespace: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapibuildv1BuildList>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  listBuildOpenshiftIoV1NamespacedBuild(namespace: string, options: Models.OpenShiftAPIwithKubernetesListBuildOpenshiftIoV1NamespacedBuildOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapibuildv1BuildList>): void;
  listBuildOpenshiftIoV1NamespacedBuild(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListBuildOpenshiftIoV1NamespacedBuildOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapibuildv1BuildList>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapibuildv1BuildList>): Promise<Models.ListBuildOpenshiftIoV1NamespacedBuildResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      listBuildOpenshiftIoV1NamespacedBuildOperationSpec,
      callback) as Promise<Models.ListBuildOpenshiftIoV1NamespacedBuildResponse>;
  }

  /**
   * create a Build
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateBuildOpenshiftIoV1NamespacedBuildResponse>
   */
  createBuildOpenshiftIoV1NamespacedBuild(body: Models.Comgithubopenshiftapibuildv1Build, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateBuildOpenshiftIoV1NamespacedBuildOptionalParams): Promise<Models.CreateBuildOpenshiftIoV1NamespacedBuildResponse>;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  createBuildOpenshiftIoV1NamespacedBuild(body: Models.Comgithubopenshiftapibuildv1Build, namespace: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapibuildv1Build>): void;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  createBuildOpenshiftIoV1NamespacedBuild(body: Models.Comgithubopenshiftapibuildv1Build, namespace: string, options: Models.OpenShiftAPIwithKubernetesCreateBuildOpenshiftIoV1NamespacedBuildOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapibuildv1Build>): void;
  createBuildOpenshiftIoV1NamespacedBuild(body: Models.Comgithubopenshiftapibuildv1Build, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateBuildOpenshiftIoV1NamespacedBuildOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapibuildv1Build>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapibuildv1Build>): Promise<Models.CreateBuildOpenshiftIoV1NamespacedBuildResponse> {
    return this.sendOperationRequest(
      {
        body,
        namespace,
        options
      },
      createBuildOpenshiftIoV1NamespacedBuildOperationSpec,
      callback) as Promise<Models.CreateBuildOpenshiftIoV1NamespacedBuildResponse>;
  }

  /**
   * delete collection of Build
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteBuildOpenshiftIoV1CollectionNamespacedBuildResponse>
   */
  deleteBuildOpenshiftIoV1CollectionNamespacedBuild(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteBuildOpenshiftIoV1CollectionNamespacedBuildOptionalParams): Promise<Models.DeleteBuildOpenshiftIoV1CollectionNamespacedBuildResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteBuildOpenshiftIoV1CollectionNamespacedBuild(namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteBuildOpenshiftIoV1CollectionNamespacedBuild(namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteBuildOpenshiftIoV1CollectionNamespacedBuildOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteBuildOpenshiftIoV1CollectionNamespacedBuild(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteBuildOpenshiftIoV1CollectionNamespacedBuildOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteBuildOpenshiftIoV1CollectionNamespacedBuildResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      deleteBuildOpenshiftIoV1CollectionNamespacedBuildOperationSpec,
      callback) as Promise<Models.DeleteBuildOpenshiftIoV1CollectionNamespacedBuildResponse>;
  }

  /**
   * read the specified Build
   * @param name name of the Build
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadBuildOpenshiftIoV1NamespacedBuildResponse>
   */
  readBuildOpenshiftIoV1NamespacedBuild(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadBuildOpenshiftIoV1NamespacedBuildOptionalParams): Promise<Models.ReadBuildOpenshiftIoV1NamespacedBuildResponse>;
  /**
   * @param name name of the Build
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readBuildOpenshiftIoV1NamespacedBuild(name: string, namespace: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapibuildv1Build>): void;
  /**
   * @param name name of the Build
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readBuildOpenshiftIoV1NamespacedBuild(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadBuildOpenshiftIoV1NamespacedBuildOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapibuildv1Build>): void;
  readBuildOpenshiftIoV1NamespacedBuild(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadBuildOpenshiftIoV1NamespacedBuildOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapibuildv1Build>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapibuildv1Build>): Promise<Models.ReadBuildOpenshiftIoV1NamespacedBuildResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readBuildOpenshiftIoV1NamespacedBuildOperationSpec,
      callback) as Promise<Models.ReadBuildOpenshiftIoV1NamespacedBuildResponse>;
  }

  /**
   * replace the specified Build
   * @param body
   * @param name name of the Build
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceBuildOpenshiftIoV1NamespacedBuildResponse>
   */
  replaceBuildOpenshiftIoV1NamespacedBuild(body: Models.Comgithubopenshiftapibuildv1Build, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceBuildOpenshiftIoV1NamespacedBuildOptionalParams): Promise<Models.ReplaceBuildOpenshiftIoV1NamespacedBuildResponse>;
  /**
   * @param body
   * @param name name of the Build
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replaceBuildOpenshiftIoV1NamespacedBuild(body: Models.Comgithubopenshiftapibuildv1Build, name: string, namespace: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapibuildv1Build>): void;
  /**
   * @param body
   * @param name name of the Build
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceBuildOpenshiftIoV1NamespacedBuild(body: Models.Comgithubopenshiftapibuildv1Build, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplaceBuildOpenshiftIoV1NamespacedBuildOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapibuildv1Build>): void;
  replaceBuildOpenshiftIoV1NamespacedBuild(body: Models.Comgithubopenshiftapibuildv1Build, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceBuildOpenshiftIoV1NamespacedBuildOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapibuildv1Build>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapibuildv1Build>): Promise<Models.ReplaceBuildOpenshiftIoV1NamespacedBuildResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replaceBuildOpenshiftIoV1NamespacedBuildOperationSpec,
      callback) as Promise<Models.ReplaceBuildOpenshiftIoV1NamespacedBuildResponse>;
  }

  /**
   * delete a Build
   * @param body
   * @param name name of the Build
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteBuildOpenshiftIoV1NamespacedBuildResponse>
   */
  deleteBuildOpenshiftIoV1NamespacedBuild(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteBuildOpenshiftIoV1NamespacedBuildOptionalParams): Promise<Models.DeleteBuildOpenshiftIoV1NamespacedBuildResponse>;
  /**
   * @param body
   * @param name name of the Build
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteBuildOpenshiftIoV1NamespacedBuild(body: Models.V1DeleteOptions, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param name name of the Build
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteBuildOpenshiftIoV1NamespacedBuild(body: Models.V1DeleteOptions, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteBuildOpenshiftIoV1NamespacedBuildOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteBuildOpenshiftIoV1NamespacedBuild(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteBuildOpenshiftIoV1NamespacedBuildOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteBuildOpenshiftIoV1NamespacedBuildResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      deleteBuildOpenshiftIoV1NamespacedBuildOperationSpec,
      callback) as Promise<Models.DeleteBuildOpenshiftIoV1NamespacedBuildResponse>;
  }

  /**
   * partially update the specified Build
   * @param body
   * @param name name of the Build
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchBuildOpenshiftIoV1NamespacedBuildResponse>
   */
  patchBuildOpenshiftIoV1NamespacedBuild(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchBuildOpenshiftIoV1NamespacedBuildOptionalParams): Promise<Models.PatchBuildOpenshiftIoV1NamespacedBuildResponse>;
  /**
   * @param body
   * @param name name of the Build
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  patchBuildOpenshiftIoV1NamespacedBuild(body: any, name: string, namespace: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapibuildv1Build>): void;
  /**
   * @param body
   * @param name name of the Build
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  patchBuildOpenshiftIoV1NamespacedBuild(body: any, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesPatchBuildOpenshiftIoV1NamespacedBuildOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapibuildv1Build>): void;
  patchBuildOpenshiftIoV1NamespacedBuild(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchBuildOpenshiftIoV1NamespacedBuildOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapibuildv1Build>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapibuildv1Build>): Promise<Models.PatchBuildOpenshiftIoV1NamespacedBuildResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      patchBuildOpenshiftIoV1NamespacedBuildOperationSpec,
      callback) as Promise<Models.PatchBuildOpenshiftIoV1NamespacedBuildResponse>;
  }

  /**
   * create clone of a Build
   * @param body
   * @param name name of the BuildRequest
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateBuildOpenshiftIoV1NamespacedBuildCloneResponse>
   */
  createBuildOpenshiftIoV1NamespacedBuildClone(body: Models.Comgithubopenshiftapibuildv1BuildRequest, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateBuildOpenshiftIoV1NamespacedBuildCloneOptionalParams): Promise<Models.CreateBuildOpenshiftIoV1NamespacedBuildCloneResponse>;
  /**
   * @param body
   * @param name name of the BuildRequest
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  createBuildOpenshiftIoV1NamespacedBuildClone(body: Models.Comgithubopenshiftapibuildv1BuildRequest, name: string, namespace: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapibuildv1BuildRequest>): void;
  /**
   * @param body
   * @param name name of the BuildRequest
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  createBuildOpenshiftIoV1NamespacedBuildClone(body: Models.Comgithubopenshiftapibuildv1BuildRequest, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesCreateBuildOpenshiftIoV1NamespacedBuildCloneOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapibuildv1BuildRequest>): void;
  createBuildOpenshiftIoV1NamespacedBuildClone(body: Models.Comgithubopenshiftapibuildv1BuildRequest, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateBuildOpenshiftIoV1NamespacedBuildCloneOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapibuildv1BuildRequest>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapibuildv1BuildRequest>): Promise<Models.CreateBuildOpenshiftIoV1NamespacedBuildCloneResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      createBuildOpenshiftIoV1NamespacedBuildCloneOperationSpec,
      callback) as Promise<Models.CreateBuildOpenshiftIoV1NamespacedBuildCloneResponse>;
  }

  /**
   * replace details of the specified Build
   * @param body
   * @param name name of the Build
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceBuildOpenshiftIoV1NamespacedBuildDetailsResponse>
   */
  replaceBuildOpenshiftIoV1NamespacedBuildDetails(body: Models.Comgithubopenshiftapibuildv1Build, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceBuildOpenshiftIoV1NamespacedBuildDetailsOptionalParams): Promise<Models.ReplaceBuildOpenshiftIoV1NamespacedBuildDetailsResponse>;
  /**
   * @param body
   * @param name name of the Build
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replaceBuildOpenshiftIoV1NamespacedBuildDetails(body: Models.Comgithubopenshiftapibuildv1Build, name: string, namespace: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapibuildv1Build>): void;
  /**
   * @param body
   * @param name name of the Build
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceBuildOpenshiftIoV1NamespacedBuildDetails(body: Models.Comgithubopenshiftapibuildv1Build, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplaceBuildOpenshiftIoV1NamespacedBuildDetailsOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapibuildv1Build>): void;
  replaceBuildOpenshiftIoV1NamespacedBuildDetails(body: Models.Comgithubopenshiftapibuildv1Build, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceBuildOpenshiftIoV1NamespacedBuildDetailsOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapibuildv1Build>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapibuildv1Build>): Promise<Models.ReplaceBuildOpenshiftIoV1NamespacedBuildDetailsResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replaceBuildOpenshiftIoV1NamespacedBuildDetailsOperationSpec,
      callback) as Promise<Models.ReplaceBuildOpenshiftIoV1NamespacedBuildDetailsResponse>;
  }

  /**
   * read log of the specified Build
   * @param name name of the BuildLog
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadBuildOpenshiftIoV1NamespacedBuildLogResponse>
   */
  readBuildOpenshiftIoV1NamespacedBuildLog(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadBuildOpenshiftIoV1NamespacedBuildLogOptionalParams): Promise<Models.ReadBuildOpenshiftIoV1NamespacedBuildLogResponse>;
  /**
   * @param name name of the BuildLog
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readBuildOpenshiftIoV1NamespacedBuildLog(name: string, namespace: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapibuildv1BuildLog>): void;
  /**
   * @param name name of the BuildLog
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readBuildOpenshiftIoV1NamespacedBuildLog(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadBuildOpenshiftIoV1NamespacedBuildLogOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapibuildv1BuildLog>): void;
  readBuildOpenshiftIoV1NamespacedBuildLog(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadBuildOpenshiftIoV1NamespacedBuildLogOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapibuildv1BuildLog>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapibuildv1BuildLog>): Promise<Models.ReadBuildOpenshiftIoV1NamespacedBuildLogResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readBuildOpenshiftIoV1NamespacedBuildLogOperationSpec,
      callback) as Promise<Models.ReadBuildOpenshiftIoV1NamespacedBuildLogResponse>;
  }

  /**
   * watch individual changes to a list of BuildConfig
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchBuildOpenshiftIoV1BuildConfigListForAllNamespacesResponse>
   */
  watchBuildOpenshiftIoV1BuildConfigListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchBuildOpenshiftIoV1BuildConfigListForAllNamespacesOptionalParams): Promise<Models.WatchBuildOpenshiftIoV1BuildConfigListForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  watchBuildOpenshiftIoV1BuildConfigListForAllNamespaces(callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  watchBuildOpenshiftIoV1BuildConfigListForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesWatchBuildOpenshiftIoV1BuildConfigListForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchBuildOpenshiftIoV1BuildConfigListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchBuildOpenshiftIoV1BuildConfigListForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchBuildOpenshiftIoV1BuildConfigListForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      watchBuildOpenshiftIoV1BuildConfigListForAllNamespacesOperationSpec,
      callback) as Promise<Models.WatchBuildOpenshiftIoV1BuildConfigListForAllNamespacesResponse>;
  }

  /**
   * watch individual changes to a list of Build
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchBuildOpenshiftIoV1BuildListForAllNamespacesResponse>
   */
  watchBuildOpenshiftIoV1BuildListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchBuildOpenshiftIoV1BuildListForAllNamespacesOptionalParams): Promise<Models.WatchBuildOpenshiftIoV1BuildListForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  watchBuildOpenshiftIoV1BuildListForAllNamespaces(callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  watchBuildOpenshiftIoV1BuildListForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesWatchBuildOpenshiftIoV1BuildListForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchBuildOpenshiftIoV1BuildListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchBuildOpenshiftIoV1BuildListForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchBuildOpenshiftIoV1BuildListForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      watchBuildOpenshiftIoV1BuildListForAllNamespacesOperationSpec,
      callback) as Promise<Models.WatchBuildOpenshiftIoV1BuildListForAllNamespacesResponse>;
  }

  /**
   * watch individual changes to a list of BuildConfig
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchBuildOpenshiftIoV1NamespacedBuildConfigListResponse>
   */
  watchBuildOpenshiftIoV1NamespacedBuildConfigList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchBuildOpenshiftIoV1NamespacedBuildConfigListOptionalParams): Promise<Models.WatchBuildOpenshiftIoV1NamespacedBuildConfigListResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchBuildOpenshiftIoV1NamespacedBuildConfigList(namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchBuildOpenshiftIoV1NamespacedBuildConfigList(namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchBuildOpenshiftIoV1NamespacedBuildConfigListOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchBuildOpenshiftIoV1NamespacedBuildConfigList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchBuildOpenshiftIoV1NamespacedBuildConfigListOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchBuildOpenshiftIoV1NamespacedBuildConfigListResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      watchBuildOpenshiftIoV1NamespacedBuildConfigListOperationSpec,
      callback) as Promise<Models.WatchBuildOpenshiftIoV1NamespacedBuildConfigListResponse>;
  }

  /**
   * watch changes to an object of kind BuildConfig
   * @param name name of the BuildConfig
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchBuildOpenshiftIoV1NamespacedBuildConfigResponse>
   */
  watchBuildOpenshiftIoV1NamespacedBuildConfig(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchBuildOpenshiftIoV1NamespacedBuildConfigOptionalParams): Promise<Models.WatchBuildOpenshiftIoV1NamespacedBuildConfigResponse>;
  /**
   * @param name name of the BuildConfig
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchBuildOpenshiftIoV1NamespacedBuildConfig(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param name name of the BuildConfig
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchBuildOpenshiftIoV1NamespacedBuildConfig(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchBuildOpenshiftIoV1NamespacedBuildConfigOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchBuildOpenshiftIoV1NamespacedBuildConfig(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchBuildOpenshiftIoV1NamespacedBuildConfigOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchBuildOpenshiftIoV1NamespacedBuildConfigResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      watchBuildOpenshiftIoV1NamespacedBuildConfigOperationSpec,
      callback) as Promise<Models.WatchBuildOpenshiftIoV1NamespacedBuildConfigResponse>;
  }

  /**
   * watch individual changes to a list of Build
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchBuildOpenshiftIoV1NamespacedBuildListResponse>
   */
  watchBuildOpenshiftIoV1NamespacedBuildList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchBuildOpenshiftIoV1NamespacedBuildListOptionalParams): Promise<Models.WatchBuildOpenshiftIoV1NamespacedBuildListResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchBuildOpenshiftIoV1NamespacedBuildList(namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchBuildOpenshiftIoV1NamespacedBuildList(namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchBuildOpenshiftIoV1NamespacedBuildListOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchBuildOpenshiftIoV1NamespacedBuildList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchBuildOpenshiftIoV1NamespacedBuildListOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchBuildOpenshiftIoV1NamespacedBuildListResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      watchBuildOpenshiftIoV1NamespacedBuildListOperationSpec,
      callback) as Promise<Models.WatchBuildOpenshiftIoV1NamespacedBuildListResponse>;
  }

  /**
   * watch changes to an object of kind Build
   * @param name name of the Build
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchBuildOpenshiftIoV1NamespacedBuildResponse>
   */
  watchBuildOpenshiftIoV1NamespacedBuild(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchBuildOpenshiftIoV1NamespacedBuildOptionalParams): Promise<Models.WatchBuildOpenshiftIoV1NamespacedBuildResponse>;
  /**
   * @param name name of the Build
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchBuildOpenshiftIoV1NamespacedBuild(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param name name of the Build
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchBuildOpenshiftIoV1NamespacedBuild(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchBuildOpenshiftIoV1NamespacedBuildOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchBuildOpenshiftIoV1NamespacedBuild(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchBuildOpenshiftIoV1NamespacedBuildOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchBuildOpenshiftIoV1NamespacedBuildResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      watchBuildOpenshiftIoV1NamespacedBuildOperationSpec,
      callback) as Promise<Models.WatchBuildOpenshiftIoV1NamespacedBuildResponse>;
  }

  /**
   * get information of a group
   * @param [options] The optional parameters
   * @returns Promise<Models.GetCertificatesAPIGroupResponse>
   */
  getCertificatesAPIGroup(options?: msRest.RequestOptionsBase): Promise<Models.GetCertificatesAPIGroupResponse>;
  /**
   * @param callback The callback
   */
  getCertificatesAPIGroup(callback: msRest.ServiceCallback<Models.V1APIGroup>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getCertificatesAPIGroup(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.V1APIGroup>): void;
  getCertificatesAPIGroup(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.V1APIGroup>, callback?: msRest.ServiceCallback<Models.V1APIGroup>): Promise<Models.GetCertificatesAPIGroupResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getCertificatesAPIGroupOperationSpec,
      callback) as Promise<Models.GetCertificatesAPIGroupResponse>;
  }

  /**
   * get available resources
   * @param [options] The optional parameters
   * @returns Promise<Models.GetCertificatesV1beta1APIResourcesResponse>
   */
  getCertificatesV1beta1APIResources(options?: msRest.RequestOptionsBase): Promise<Models.GetCertificatesV1beta1APIResourcesResponse>;
  /**
   * @param callback The callback
   */
  getCertificatesV1beta1APIResources(callback: msRest.ServiceCallback<Models.V1APIResourceList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getCertificatesV1beta1APIResources(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.V1APIResourceList>): void;
  getCertificatesV1beta1APIResources(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.V1APIResourceList>, callback?: msRest.ServiceCallback<Models.V1APIResourceList>): Promise<Models.GetCertificatesV1beta1APIResourcesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getCertificatesV1beta1APIResourcesOperationSpec,
      callback) as Promise<Models.GetCertificatesV1beta1APIResourcesResponse>;
  }

  /**
   * list or watch objects of kind CertificateSigningRequest
   * @param [options] The optional parameters
   * @returns Promise<Models.ListCertificatesV1beta1CertificateSigningRequestResponse>
   */
  listCertificatesV1beta1CertificateSigningRequest(options?: Models.OpenShiftAPIwithKubernetesListCertificatesV1beta1CertificateSigningRequestOptionalParams): Promise<Models.ListCertificatesV1beta1CertificateSigningRequestResponse>;
  /**
   * @param callback The callback
   */
  listCertificatesV1beta1CertificateSigningRequest(callback: msRest.ServiceCallback<Models.V1beta1CertificateSigningRequestList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listCertificatesV1beta1CertificateSigningRequest(options: Models.OpenShiftAPIwithKubernetesListCertificatesV1beta1CertificateSigningRequestOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1CertificateSigningRequestList>): void;
  listCertificatesV1beta1CertificateSigningRequest(options?: Models.OpenShiftAPIwithKubernetesListCertificatesV1beta1CertificateSigningRequestOptionalParams | msRest.ServiceCallback<Models.V1beta1CertificateSigningRequestList>, callback?: msRest.ServiceCallback<Models.V1beta1CertificateSigningRequestList>): Promise<Models.ListCertificatesV1beta1CertificateSigningRequestResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listCertificatesV1beta1CertificateSigningRequestOperationSpec,
      callback) as Promise<Models.ListCertificatesV1beta1CertificateSigningRequestResponse>;
  }

  /**
   * create a CertificateSigningRequest
   * @param body
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateCertificatesV1beta1CertificateSigningRequestResponse>
   */
  createCertificatesV1beta1CertificateSigningRequest(body: Models.V1beta1CertificateSigningRequest, options?: Models.OpenShiftAPIwithKubernetesCreateCertificatesV1beta1CertificateSigningRequestOptionalParams): Promise<Models.CreateCertificatesV1beta1CertificateSigningRequestResponse>;
  /**
   * @param body
   * @param callback The callback
   */
  createCertificatesV1beta1CertificateSigningRequest(body: Models.V1beta1CertificateSigningRequest, callback: msRest.ServiceCallback<Models.V1beta1CertificateSigningRequest>): void;
  /**
   * @param body
   * @param options The optional parameters
   * @param callback The callback
   */
  createCertificatesV1beta1CertificateSigningRequest(body: Models.V1beta1CertificateSigningRequest, options: Models.OpenShiftAPIwithKubernetesCreateCertificatesV1beta1CertificateSigningRequestOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1CertificateSigningRequest>): void;
  createCertificatesV1beta1CertificateSigningRequest(body: Models.V1beta1CertificateSigningRequest, options?: Models.OpenShiftAPIwithKubernetesCreateCertificatesV1beta1CertificateSigningRequestOptionalParams | msRest.ServiceCallback<Models.V1beta1CertificateSigningRequest>, callback?: msRest.ServiceCallback<Models.V1beta1CertificateSigningRequest>): Promise<Models.CreateCertificatesV1beta1CertificateSigningRequestResponse> {
    return this.sendOperationRequest(
      {
        body,
        options
      },
      createCertificatesV1beta1CertificateSigningRequestOperationSpec,
      callback) as Promise<Models.CreateCertificatesV1beta1CertificateSigningRequestResponse>;
  }

  /**
   * delete collection of CertificateSigningRequest
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteCertificatesV1beta1CollectionCertificateSigningRequestResponse>
   */
  deleteCertificatesV1beta1CollectionCertificateSigningRequest(options?: Models.OpenShiftAPIwithKubernetesDeleteCertificatesV1beta1CollectionCertificateSigningRequestOptionalParams): Promise<Models.DeleteCertificatesV1beta1CollectionCertificateSigningRequestResponse>;
  /**
   * @param callback The callback
   */
  deleteCertificatesV1beta1CollectionCertificateSigningRequest(callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteCertificatesV1beta1CollectionCertificateSigningRequest(options: Models.OpenShiftAPIwithKubernetesDeleteCertificatesV1beta1CollectionCertificateSigningRequestOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteCertificatesV1beta1CollectionCertificateSigningRequest(options?: Models.OpenShiftAPIwithKubernetesDeleteCertificatesV1beta1CollectionCertificateSigningRequestOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteCertificatesV1beta1CollectionCertificateSigningRequestResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      deleteCertificatesV1beta1CollectionCertificateSigningRequestOperationSpec,
      callback) as Promise<Models.DeleteCertificatesV1beta1CollectionCertificateSigningRequestResponse>;
  }

  /**
   * read the specified CertificateSigningRequest
   * @param name name of the CertificateSigningRequest
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadCertificatesV1beta1CertificateSigningRequestResponse>
   */
  readCertificatesV1beta1CertificateSigningRequest(name: string, options?: Models.OpenShiftAPIwithKubernetesReadCertificatesV1beta1CertificateSigningRequestOptionalParams): Promise<Models.ReadCertificatesV1beta1CertificateSigningRequestResponse>;
  /**
   * @param name name of the CertificateSigningRequest
   * @param callback The callback
   */
  readCertificatesV1beta1CertificateSigningRequest(name: string, callback: msRest.ServiceCallback<Models.V1beta1CertificateSigningRequest>): void;
  /**
   * @param name name of the CertificateSigningRequest
   * @param options The optional parameters
   * @param callback The callback
   */
  readCertificatesV1beta1CertificateSigningRequest(name: string, options: Models.OpenShiftAPIwithKubernetesReadCertificatesV1beta1CertificateSigningRequestOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1CertificateSigningRequest>): void;
  readCertificatesV1beta1CertificateSigningRequest(name: string, options?: Models.OpenShiftAPIwithKubernetesReadCertificatesV1beta1CertificateSigningRequestOptionalParams | msRest.ServiceCallback<Models.V1beta1CertificateSigningRequest>, callback?: msRest.ServiceCallback<Models.V1beta1CertificateSigningRequest>): Promise<Models.ReadCertificatesV1beta1CertificateSigningRequestResponse> {
    return this.sendOperationRequest(
      {
        name,
        options
      },
      readCertificatesV1beta1CertificateSigningRequestOperationSpec,
      callback) as Promise<Models.ReadCertificatesV1beta1CertificateSigningRequestResponse>;
  }

  /**
   * replace the specified CertificateSigningRequest
   * @param body
   * @param name name of the CertificateSigningRequest
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceCertificatesV1beta1CertificateSigningRequestResponse>
   */
  replaceCertificatesV1beta1CertificateSigningRequest(body: Models.V1beta1CertificateSigningRequest, name: string, options?: Models.OpenShiftAPIwithKubernetesReplaceCertificatesV1beta1CertificateSigningRequestOptionalParams): Promise<Models.ReplaceCertificatesV1beta1CertificateSigningRequestResponse>;
  /**
   * @param body
   * @param name name of the CertificateSigningRequest
   * @param callback The callback
   */
  replaceCertificatesV1beta1CertificateSigningRequest(body: Models.V1beta1CertificateSigningRequest, name: string, callback: msRest.ServiceCallback<Models.V1beta1CertificateSigningRequest>): void;
  /**
   * @param body
   * @param name name of the CertificateSigningRequest
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceCertificatesV1beta1CertificateSigningRequest(body: Models.V1beta1CertificateSigningRequest, name: string, options: Models.OpenShiftAPIwithKubernetesReplaceCertificatesV1beta1CertificateSigningRequestOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1CertificateSigningRequest>): void;
  replaceCertificatesV1beta1CertificateSigningRequest(body: Models.V1beta1CertificateSigningRequest, name: string, options?: Models.OpenShiftAPIwithKubernetesReplaceCertificatesV1beta1CertificateSigningRequestOptionalParams | msRest.ServiceCallback<Models.V1beta1CertificateSigningRequest>, callback?: msRest.ServiceCallback<Models.V1beta1CertificateSigningRequest>): Promise<Models.ReplaceCertificatesV1beta1CertificateSigningRequestResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      replaceCertificatesV1beta1CertificateSigningRequestOperationSpec,
      callback) as Promise<Models.ReplaceCertificatesV1beta1CertificateSigningRequestResponse>;
  }

  /**
   * delete a CertificateSigningRequest
   * @param body
   * @param name name of the CertificateSigningRequest
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteCertificatesV1beta1CertificateSigningRequestResponse>
   */
  deleteCertificatesV1beta1CertificateSigningRequest(body: Models.V1DeleteOptions, name: string, options?: Models.OpenShiftAPIwithKubernetesDeleteCertificatesV1beta1CertificateSigningRequestOptionalParams): Promise<Models.DeleteCertificatesV1beta1CertificateSigningRequestResponse>;
  /**
   * @param body
   * @param name name of the CertificateSigningRequest
   * @param callback The callback
   */
  deleteCertificatesV1beta1CertificateSigningRequest(body: Models.V1DeleteOptions, name: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param name name of the CertificateSigningRequest
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteCertificatesV1beta1CertificateSigningRequest(body: Models.V1DeleteOptions, name: string, options: Models.OpenShiftAPIwithKubernetesDeleteCertificatesV1beta1CertificateSigningRequestOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteCertificatesV1beta1CertificateSigningRequest(body: Models.V1DeleteOptions, name: string, options?: Models.OpenShiftAPIwithKubernetesDeleteCertificatesV1beta1CertificateSigningRequestOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteCertificatesV1beta1CertificateSigningRequestResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      deleteCertificatesV1beta1CertificateSigningRequestOperationSpec,
      callback) as Promise<Models.DeleteCertificatesV1beta1CertificateSigningRequestResponse>;
  }

  /**
   * partially update the specified CertificateSigningRequest
   * @param body
   * @param name name of the CertificateSigningRequest
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchCertificatesV1beta1CertificateSigningRequestResponse>
   */
  patchCertificatesV1beta1CertificateSigningRequest(body: any, name: string, options?: Models.OpenShiftAPIwithKubernetesPatchCertificatesV1beta1CertificateSigningRequestOptionalParams): Promise<Models.PatchCertificatesV1beta1CertificateSigningRequestResponse>;
  /**
   * @param body
   * @param name name of the CertificateSigningRequest
   * @param callback The callback
   */
  patchCertificatesV1beta1CertificateSigningRequest(body: any, name: string, callback: msRest.ServiceCallback<Models.V1beta1CertificateSigningRequest>): void;
  /**
   * @param body
   * @param name name of the CertificateSigningRequest
   * @param options The optional parameters
   * @param callback The callback
   */
  patchCertificatesV1beta1CertificateSigningRequest(body: any, name: string, options: Models.OpenShiftAPIwithKubernetesPatchCertificatesV1beta1CertificateSigningRequestOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1CertificateSigningRequest>): void;
  patchCertificatesV1beta1CertificateSigningRequest(body: any, name: string, options?: Models.OpenShiftAPIwithKubernetesPatchCertificatesV1beta1CertificateSigningRequestOptionalParams | msRest.ServiceCallback<Models.V1beta1CertificateSigningRequest>, callback?: msRest.ServiceCallback<Models.V1beta1CertificateSigningRequest>): Promise<Models.PatchCertificatesV1beta1CertificateSigningRequestResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      patchCertificatesV1beta1CertificateSigningRequestOperationSpec,
      callback) as Promise<Models.PatchCertificatesV1beta1CertificateSigningRequestResponse>;
  }

  /**
   * replace approval of the specified CertificateSigningRequest
   * @param body
   * @param name name of the CertificateSigningRequest
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceCertificatesV1beta1CertificateSigningRequestApprovalResponse>
   */
  replaceCertificatesV1beta1CertificateSigningRequestApproval(body: Models.V1beta1CertificateSigningRequest, name: string, options?: Models.OpenShiftAPIwithKubernetesReplaceCertificatesV1beta1CertificateSigningRequestApprovalOptionalParams): Promise<Models.ReplaceCertificatesV1beta1CertificateSigningRequestApprovalResponse>;
  /**
   * @param body
   * @param name name of the CertificateSigningRequest
   * @param callback The callback
   */
  replaceCertificatesV1beta1CertificateSigningRequestApproval(body: Models.V1beta1CertificateSigningRequest, name: string, callback: msRest.ServiceCallback<Models.V1beta1CertificateSigningRequest>): void;
  /**
   * @param body
   * @param name name of the CertificateSigningRequest
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceCertificatesV1beta1CertificateSigningRequestApproval(body: Models.V1beta1CertificateSigningRequest, name: string, options: Models.OpenShiftAPIwithKubernetesReplaceCertificatesV1beta1CertificateSigningRequestApprovalOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1CertificateSigningRequest>): void;
  replaceCertificatesV1beta1CertificateSigningRequestApproval(body: Models.V1beta1CertificateSigningRequest, name: string, options?: Models.OpenShiftAPIwithKubernetesReplaceCertificatesV1beta1CertificateSigningRequestApprovalOptionalParams | msRest.ServiceCallback<Models.V1beta1CertificateSigningRequest>, callback?: msRest.ServiceCallback<Models.V1beta1CertificateSigningRequest>): Promise<Models.ReplaceCertificatesV1beta1CertificateSigningRequestApprovalResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      replaceCertificatesV1beta1CertificateSigningRequestApprovalOperationSpec,
      callback) as Promise<Models.ReplaceCertificatesV1beta1CertificateSigningRequestApprovalResponse>;
  }

  /**
   * read status of the specified CertificateSigningRequest
   * @param name name of the CertificateSigningRequest
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadCertificatesV1beta1CertificateSigningRequestStatusResponse>
   */
  readCertificatesV1beta1CertificateSigningRequestStatus(name: string, options?: Models.OpenShiftAPIwithKubernetesReadCertificatesV1beta1CertificateSigningRequestStatusOptionalParams): Promise<Models.ReadCertificatesV1beta1CertificateSigningRequestStatusResponse>;
  /**
   * @param name name of the CertificateSigningRequest
   * @param callback The callback
   */
  readCertificatesV1beta1CertificateSigningRequestStatus(name: string, callback: msRest.ServiceCallback<Models.V1beta1CertificateSigningRequest>): void;
  /**
   * @param name name of the CertificateSigningRequest
   * @param options The optional parameters
   * @param callback The callback
   */
  readCertificatesV1beta1CertificateSigningRequestStatus(name: string, options: Models.OpenShiftAPIwithKubernetesReadCertificatesV1beta1CertificateSigningRequestStatusOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1CertificateSigningRequest>): void;
  readCertificatesV1beta1CertificateSigningRequestStatus(name: string, options?: Models.OpenShiftAPIwithKubernetesReadCertificatesV1beta1CertificateSigningRequestStatusOptionalParams | msRest.ServiceCallback<Models.V1beta1CertificateSigningRequest>, callback?: msRest.ServiceCallback<Models.V1beta1CertificateSigningRequest>): Promise<Models.ReadCertificatesV1beta1CertificateSigningRequestStatusResponse> {
    return this.sendOperationRequest(
      {
        name,
        options
      },
      readCertificatesV1beta1CertificateSigningRequestStatusOperationSpec,
      callback) as Promise<Models.ReadCertificatesV1beta1CertificateSigningRequestStatusResponse>;
  }

  /**
   * replace status of the specified CertificateSigningRequest
   * @param body
   * @param name name of the CertificateSigningRequest
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceCertificatesV1beta1CertificateSigningRequestStatusResponse>
   */
  replaceCertificatesV1beta1CertificateSigningRequestStatus(body: Models.V1beta1CertificateSigningRequest, name: string, options?: Models.OpenShiftAPIwithKubernetesReplaceCertificatesV1beta1CertificateSigningRequestStatusOptionalParams): Promise<Models.ReplaceCertificatesV1beta1CertificateSigningRequestStatusResponse>;
  /**
   * @param body
   * @param name name of the CertificateSigningRequest
   * @param callback The callback
   */
  replaceCertificatesV1beta1CertificateSigningRequestStatus(body: Models.V1beta1CertificateSigningRequest, name: string, callback: msRest.ServiceCallback<Models.V1beta1CertificateSigningRequest>): void;
  /**
   * @param body
   * @param name name of the CertificateSigningRequest
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceCertificatesV1beta1CertificateSigningRequestStatus(body: Models.V1beta1CertificateSigningRequest, name: string, options: Models.OpenShiftAPIwithKubernetesReplaceCertificatesV1beta1CertificateSigningRequestStatusOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1CertificateSigningRequest>): void;
  replaceCertificatesV1beta1CertificateSigningRequestStatus(body: Models.V1beta1CertificateSigningRequest, name: string, options?: Models.OpenShiftAPIwithKubernetesReplaceCertificatesV1beta1CertificateSigningRequestStatusOptionalParams | msRest.ServiceCallback<Models.V1beta1CertificateSigningRequest>, callback?: msRest.ServiceCallback<Models.V1beta1CertificateSigningRequest>): Promise<Models.ReplaceCertificatesV1beta1CertificateSigningRequestStatusResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      replaceCertificatesV1beta1CertificateSigningRequestStatusOperationSpec,
      callback) as Promise<Models.ReplaceCertificatesV1beta1CertificateSigningRequestStatusResponse>;
  }

  /**
   * partially update status of the specified CertificateSigningRequest
   * @param body
   * @param name name of the CertificateSigningRequest
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchCertificatesV1beta1CertificateSigningRequestStatusResponse>
   */
  patchCertificatesV1beta1CertificateSigningRequestStatus(body: any, name: string, options?: Models.OpenShiftAPIwithKubernetesPatchCertificatesV1beta1CertificateSigningRequestStatusOptionalParams): Promise<Models.PatchCertificatesV1beta1CertificateSigningRequestStatusResponse>;
  /**
   * @param body
   * @param name name of the CertificateSigningRequest
   * @param callback The callback
   */
  patchCertificatesV1beta1CertificateSigningRequestStatus(body: any, name: string, callback: msRest.ServiceCallback<Models.V1beta1CertificateSigningRequest>): void;
  /**
   * @param body
   * @param name name of the CertificateSigningRequest
   * @param options The optional parameters
   * @param callback The callback
   */
  patchCertificatesV1beta1CertificateSigningRequestStatus(body: any, name: string, options: Models.OpenShiftAPIwithKubernetesPatchCertificatesV1beta1CertificateSigningRequestStatusOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1CertificateSigningRequest>): void;
  patchCertificatesV1beta1CertificateSigningRequestStatus(body: any, name: string, options?: Models.OpenShiftAPIwithKubernetesPatchCertificatesV1beta1CertificateSigningRequestStatusOptionalParams | msRest.ServiceCallback<Models.V1beta1CertificateSigningRequest>, callback?: msRest.ServiceCallback<Models.V1beta1CertificateSigningRequest>): Promise<Models.PatchCertificatesV1beta1CertificateSigningRequestStatusResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      patchCertificatesV1beta1CertificateSigningRequestStatusOperationSpec,
      callback) as Promise<Models.PatchCertificatesV1beta1CertificateSigningRequestStatusResponse>;
  }

  /**
   * watch individual changes to a list of CertificateSigningRequest
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchCertificatesV1beta1CertificateSigningRequestListResponse>
   */
  watchCertificatesV1beta1CertificateSigningRequestList(options?: Models.OpenShiftAPIwithKubernetesWatchCertificatesV1beta1CertificateSigningRequestListOptionalParams): Promise<Models.WatchCertificatesV1beta1CertificateSigningRequestListResponse>;
  /**
   * @param callback The callback
   */
  watchCertificatesV1beta1CertificateSigningRequestList(callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  watchCertificatesV1beta1CertificateSigningRequestList(options: Models.OpenShiftAPIwithKubernetesWatchCertificatesV1beta1CertificateSigningRequestListOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchCertificatesV1beta1CertificateSigningRequestList(options?: Models.OpenShiftAPIwithKubernetesWatchCertificatesV1beta1CertificateSigningRequestListOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchCertificatesV1beta1CertificateSigningRequestListResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      watchCertificatesV1beta1CertificateSigningRequestListOperationSpec,
      callback) as Promise<Models.WatchCertificatesV1beta1CertificateSigningRequestListResponse>;
  }

  /**
   * watch changes to an object of kind CertificateSigningRequest
   * @param name name of the CertificateSigningRequest
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchCertificatesV1beta1CertificateSigningRequestResponse>
   */
  watchCertificatesV1beta1CertificateSigningRequest(name: string, options?: Models.OpenShiftAPIwithKubernetesWatchCertificatesV1beta1CertificateSigningRequestOptionalParams): Promise<Models.WatchCertificatesV1beta1CertificateSigningRequestResponse>;
  /**
   * @param name name of the CertificateSigningRequest
   * @param callback The callback
   */
  watchCertificatesV1beta1CertificateSigningRequest(name: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param name name of the CertificateSigningRequest
   * @param options The optional parameters
   * @param callback The callback
   */
  watchCertificatesV1beta1CertificateSigningRequest(name: string, options: Models.OpenShiftAPIwithKubernetesWatchCertificatesV1beta1CertificateSigningRequestOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchCertificatesV1beta1CertificateSigningRequest(name: string, options?: Models.OpenShiftAPIwithKubernetesWatchCertificatesV1beta1CertificateSigningRequestOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchCertificatesV1beta1CertificateSigningRequestResponse> {
    return this.sendOperationRequest(
      {
        name,
        options
      },
      watchCertificatesV1beta1CertificateSigningRequestOperationSpec,
      callback) as Promise<Models.WatchCertificatesV1beta1CertificateSigningRequestResponse>;
  }

  /**
   * get information of a group
   * @param [options] The optional parameters
   * @returns Promise<Models.GetEventsAPIGroupResponse>
   */
  getEventsAPIGroup(options?: msRest.RequestOptionsBase): Promise<Models.GetEventsAPIGroupResponse>;
  /**
   * @param callback The callback
   */
  getEventsAPIGroup(callback: msRest.ServiceCallback<Models.V1APIGroup>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getEventsAPIGroup(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.V1APIGroup>): void;
  getEventsAPIGroup(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.V1APIGroup>, callback?: msRest.ServiceCallback<Models.V1APIGroup>): Promise<Models.GetEventsAPIGroupResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getEventsAPIGroupOperationSpec,
      callback) as Promise<Models.GetEventsAPIGroupResponse>;
  }

  /**
   * get available resources
   * @param [options] The optional parameters
   * @returns Promise<Models.GetEventsV1beta1APIResourcesResponse>
   */
  getEventsV1beta1APIResources(options?: msRest.RequestOptionsBase): Promise<Models.GetEventsV1beta1APIResourcesResponse>;
  /**
   * @param callback The callback
   */
  getEventsV1beta1APIResources(callback: msRest.ServiceCallback<Models.V1APIResourceList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getEventsV1beta1APIResources(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.V1APIResourceList>): void;
  getEventsV1beta1APIResources(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.V1APIResourceList>, callback?: msRest.ServiceCallback<Models.V1APIResourceList>): Promise<Models.GetEventsV1beta1APIResourcesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getEventsV1beta1APIResourcesOperationSpec,
      callback) as Promise<Models.GetEventsV1beta1APIResourcesResponse>;
  }

  /**
   * list or watch objects of kind Event
   * @param [options] The optional parameters
   * @returns Promise<Models.ListEventsV1beta1EventForAllNamespacesResponse>
   */
  listEventsV1beta1EventForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListEventsV1beta1EventForAllNamespacesOptionalParams): Promise<Models.ListEventsV1beta1EventForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  listEventsV1beta1EventForAllNamespaces(callback: msRest.ServiceCallback<Models.V1beta1EventList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listEventsV1beta1EventForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesListEventsV1beta1EventForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1EventList>): void;
  listEventsV1beta1EventForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListEventsV1beta1EventForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1beta1EventList>, callback?: msRest.ServiceCallback<Models.V1beta1EventList>): Promise<Models.ListEventsV1beta1EventForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listEventsV1beta1EventForAllNamespacesOperationSpec,
      callback) as Promise<Models.ListEventsV1beta1EventForAllNamespacesResponse>;
  }

  /**
   * list or watch objects of kind Event
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ListEventsV1beta1NamespacedEventResponse>
   */
  listEventsV1beta1NamespacedEvent(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListEventsV1beta1NamespacedEventOptionalParams): Promise<Models.ListEventsV1beta1NamespacedEventResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  listEventsV1beta1NamespacedEvent(namespace: string, callback: msRest.ServiceCallback<Models.V1beta1EventList>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  listEventsV1beta1NamespacedEvent(namespace: string, options: Models.OpenShiftAPIwithKubernetesListEventsV1beta1NamespacedEventOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1EventList>): void;
  listEventsV1beta1NamespacedEvent(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListEventsV1beta1NamespacedEventOptionalParams | msRest.ServiceCallback<Models.V1beta1EventList>, callback?: msRest.ServiceCallback<Models.V1beta1EventList>): Promise<Models.ListEventsV1beta1NamespacedEventResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      listEventsV1beta1NamespacedEventOperationSpec,
      callback) as Promise<Models.ListEventsV1beta1NamespacedEventResponse>;
  }

  /**
   * create an Event
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateEventsV1beta1NamespacedEventResponse>
   */
  createEventsV1beta1NamespacedEvent(body: Models.V1beta1Event, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateEventsV1beta1NamespacedEventOptionalParams): Promise<Models.CreateEventsV1beta1NamespacedEventResponse>;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  createEventsV1beta1NamespacedEvent(body: Models.V1beta1Event, namespace: string, callback: msRest.ServiceCallback<Models.V1beta1Event>): void;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  createEventsV1beta1NamespacedEvent(body: Models.V1beta1Event, namespace: string, options: Models.OpenShiftAPIwithKubernetesCreateEventsV1beta1NamespacedEventOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1Event>): void;
  createEventsV1beta1NamespacedEvent(body: Models.V1beta1Event, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateEventsV1beta1NamespacedEventOptionalParams | msRest.ServiceCallback<Models.V1beta1Event>, callback?: msRest.ServiceCallback<Models.V1beta1Event>): Promise<Models.CreateEventsV1beta1NamespacedEventResponse> {
    return this.sendOperationRequest(
      {
        body,
        namespace,
        options
      },
      createEventsV1beta1NamespacedEventOperationSpec,
      callback) as Promise<Models.CreateEventsV1beta1NamespacedEventResponse>;
  }

  /**
   * delete collection of Event
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteEventsV1beta1CollectionNamespacedEventResponse>
   */
  deleteEventsV1beta1CollectionNamespacedEvent(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteEventsV1beta1CollectionNamespacedEventOptionalParams): Promise<Models.DeleteEventsV1beta1CollectionNamespacedEventResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteEventsV1beta1CollectionNamespacedEvent(namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteEventsV1beta1CollectionNamespacedEvent(namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteEventsV1beta1CollectionNamespacedEventOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteEventsV1beta1CollectionNamespacedEvent(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteEventsV1beta1CollectionNamespacedEventOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteEventsV1beta1CollectionNamespacedEventResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      deleteEventsV1beta1CollectionNamespacedEventOperationSpec,
      callback) as Promise<Models.DeleteEventsV1beta1CollectionNamespacedEventResponse>;
  }

  /**
   * read the specified Event
   * @param name name of the Event
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadEventsV1beta1NamespacedEventResponse>
   */
  readEventsV1beta1NamespacedEvent(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadEventsV1beta1NamespacedEventOptionalParams): Promise<Models.ReadEventsV1beta1NamespacedEventResponse>;
  /**
   * @param name name of the Event
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readEventsV1beta1NamespacedEvent(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1beta1Event>): void;
  /**
   * @param name name of the Event
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readEventsV1beta1NamespacedEvent(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadEventsV1beta1NamespacedEventOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1Event>): void;
  readEventsV1beta1NamespacedEvent(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadEventsV1beta1NamespacedEventOptionalParams | msRest.ServiceCallback<Models.V1beta1Event>, callback?: msRest.ServiceCallback<Models.V1beta1Event>): Promise<Models.ReadEventsV1beta1NamespacedEventResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readEventsV1beta1NamespacedEventOperationSpec,
      callback) as Promise<Models.ReadEventsV1beta1NamespacedEventResponse>;
  }

  /**
   * replace the specified Event
   * @param body
   * @param name name of the Event
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceEventsV1beta1NamespacedEventResponse>
   */
  replaceEventsV1beta1NamespacedEvent(body: Models.V1beta1Event, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceEventsV1beta1NamespacedEventOptionalParams): Promise<Models.ReplaceEventsV1beta1NamespacedEventResponse>;
  /**
   * @param body
   * @param name name of the Event
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replaceEventsV1beta1NamespacedEvent(body: Models.V1beta1Event, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1beta1Event>): void;
  /**
   * @param body
   * @param name name of the Event
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceEventsV1beta1NamespacedEvent(body: Models.V1beta1Event, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplaceEventsV1beta1NamespacedEventOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1Event>): void;
  replaceEventsV1beta1NamespacedEvent(body: Models.V1beta1Event, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceEventsV1beta1NamespacedEventOptionalParams | msRest.ServiceCallback<Models.V1beta1Event>, callback?: msRest.ServiceCallback<Models.V1beta1Event>): Promise<Models.ReplaceEventsV1beta1NamespacedEventResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replaceEventsV1beta1NamespacedEventOperationSpec,
      callback) as Promise<Models.ReplaceEventsV1beta1NamespacedEventResponse>;
  }

  /**
   * delete an Event
   * @param body
   * @param name name of the Event
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteEventsV1beta1NamespacedEventResponse>
   */
  deleteEventsV1beta1NamespacedEvent(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteEventsV1beta1NamespacedEventOptionalParams): Promise<Models.DeleteEventsV1beta1NamespacedEventResponse>;
  /**
   * @param body
   * @param name name of the Event
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteEventsV1beta1NamespacedEvent(body: Models.V1DeleteOptions, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param name name of the Event
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteEventsV1beta1NamespacedEvent(body: Models.V1DeleteOptions, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteEventsV1beta1NamespacedEventOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteEventsV1beta1NamespacedEvent(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteEventsV1beta1NamespacedEventOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteEventsV1beta1NamespacedEventResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      deleteEventsV1beta1NamespacedEventOperationSpec,
      callback) as Promise<Models.DeleteEventsV1beta1NamespacedEventResponse>;
  }

  /**
   * partially update the specified Event
   * @param body
   * @param name name of the Event
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchEventsV1beta1NamespacedEventResponse>
   */
  patchEventsV1beta1NamespacedEvent(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchEventsV1beta1NamespacedEventOptionalParams): Promise<Models.PatchEventsV1beta1NamespacedEventResponse>;
  /**
   * @param body
   * @param name name of the Event
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  patchEventsV1beta1NamespacedEvent(body: any, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1beta1Event>): void;
  /**
   * @param body
   * @param name name of the Event
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  patchEventsV1beta1NamespacedEvent(body: any, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesPatchEventsV1beta1NamespacedEventOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1Event>): void;
  patchEventsV1beta1NamespacedEvent(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchEventsV1beta1NamespacedEventOptionalParams | msRest.ServiceCallback<Models.V1beta1Event>, callback?: msRest.ServiceCallback<Models.V1beta1Event>): Promise<Models.PatchEventsV1beta1NamespacedEventResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      patchEventsV1beta1NamespacedEventOperationSpec,
      callback) as Promise<Models.PatchEventsV1beta1NamespacedEventResponse>;
  }

  /**
   * watch individual changes to a list of Event
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchEventsV1beta1EventListForAllNamespacesResponse>
   */
  watchEventsV1beta1EventListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchEventsV1beta1EventListForAllNamespacesOptionalParams): Promise<Models.WatchEventsV1beta1EventListForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  watchEventsV1beta1EventListForAllNamespaces(callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  watchEventsV1beta1EventListForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesWatchEventsV1beta1EventListForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchEventsV1beta1EventListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchEventsV1beta1EventListForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchEventsV1beta1EventListForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      watchEventsV1beta1EventListForAllNamespacesOperationSpec,
      callback) as Promise<Models.WatchEventsV1beta1EventListForAllNamespacesResponse>;
  }

  /**
   * watch individual changes to a list of Event
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchEventsV1beta1NamespacedEventListResponse>
   */
  watchEventsV1beta1NamespacedEventList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchEventsV1beta1NamespacedEventListOptionalParams): Promise<Models.WatchEventsV1beta1NamespacedEventListResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchEventsV1beta1NamespacedEventList(namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchEventsV1beta1NamespacedEventList(namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchEventsV1beta1NamespacedEventListOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchEventsV1beta1NamespacedEventList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchEventsV1beta1NamespacedEventListOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchEventsV1beta1NamespacedEventListResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      watchEventsV1beta1NamespacedEventListOperationSpec,
      callback) as Promise<Models.WatchEventsV1beta1NamespacedEventListResponse>;
  }

  /**
   * watch changes to an object of kind Event
   * @param name name of the Event
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchEventsV1beta1NamespacedEventResponse>
   */
  watchEventsV1beta1NamespacedEvent(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchEventsV1beta1NamespacedEventOptionalParams): Promise<Models.WatchEventsV1beta1NamespacedEventResponse>;
  /**
   * @param name name of the Event
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchEventsV1beta1NamespacedEvent(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param name name of the Event
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchEventsV1beta1NamespacedEvent(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchEventsV1beta1NamespacedEventOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchEventsV1beta1NamespacedEvent(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchEventsV1beta1NamespacedEventOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchEventsV1beta1NamespacedEventResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      watchEventsV1beta1NamespacedEventOperationSpec,
      callback) as Promise<Models.WatchEventsV1beta1NamespacedEventResponse>;
  }

  /**
   * get information of a group
   * @param [options] The optional parameters
   * @returns Promise<Models.GetExtensionsAPIGroupResponse>
   */
  getExtensionsAPIGroup(options?: msRest.RequestOptionsBase): Promise<Models.GetExtensionsAPIGroupResponse>;
  /**
   * @param callback The callback
   */
  getExtensionsAPIGroup(callback: msRest.ServiceCallback<Models.V1APIGroup>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getExtensionsAPIGroup(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.V1APIGroup>): void;
  getExtensionsAPIGroup(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.V1APIGroup>, callback?: msRest.ServiceCallback<Models.V1APIGroup>): Promise<Models.GetExtensionsAPIGroupResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getExtensionsAPIGroupOperationSpec,
      callback) as Promise<Models.GetExtensionsAPIGroupResponse>;
  }

  /**
   * get available resources
   * @param [options] The optional parameters
   * @returns Promise<Models.GetExtensionsV1beta1APIResourcesResponse>
   */
  getExtensionsV1beta1APIResources(options?: msRest.RequestOptionsBase): Promise<Models.GetExtensionsV1beta1APIResourcesResponse>;
  /**
   * @param callback The callback
   */
  getExtensionsV1beta1APIResources(callback: msRest.ServiceCallback<Models.V1APIResourceList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getExtensionsV1beta1APIResources(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.V1APIResourceList>): void;
  getExtensionsV1beta1APIResources(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.V1APIResourceList>, callback?: msRest.ServiceCallback<Models.V1APIResourceList>): Promise<Models.GetExtensionsV1beta1APIResourcesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getExtensionsV1beta1APIResourcesOperationSpec,
      callback) as Promise<Models.GetExtensionsV1beta1APIResourcesResponse>;
  }

  /**
   * list or watch objects of kind DaemonSet
   * @param [options] The optional parameters
   * @returns Promise<Models.ListExtensionsV1beta1DaemonSetForAllNamespacesResponse>
   */
  listExtensionsV1beta1DaemonSetForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListExtensionsV1beta1DaemonSetForAllNamespacesOptionalParams): Promise<Models.ListExtensionsV1beta1DaemonSetForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  listExtensionsV1beta1DaemonSetForAllNamespaces(callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1DaemonSetList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listExtensionsV1beta1DaemonSetForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesListExtensionsV1beta1DaemonSetForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1DaemonSetList>): void;
  listExtensionsV1beta1DaemonSetForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListExtensionsV1beta1DaemonSetForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1DaemonSetList>, callback?: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1DaemonSetList>): Promise<Models.ListExtensionsV1beta1DaemonSetForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listExtensionsV1beta1DaemonSetForAllNamespacesOperationSpec,
      callback) as Promise<Models.ListExtensionsV1beta1DaemonSetForAllNamespacesResponse>;
  }

  /**
   * list or watch objects of kind Deployment
   * @param [options] The optional parameters
   * @returns Promise<Models.ListExtensionsV1beta1DeploymentForAllNamespacesResponse>
   */
  listExtensionsV1beta1DeploymentForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListExtensionsV1beta1DeploymentForAllNamespacesOptionalParams): Promise<Models.ListExtensionsV1beta1DeploymentForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  listExtensionsV1beta1DeploymentForAllNamespaces(callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1DeploymentList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listExtensionsV1beta1DeploymentForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesListExtensionsV1beta1DeploymentForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1DeploymentList>): void;
  listExtensionsV1beta1DeploymentForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListExtensionsV1beta1DeploymentForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1DeploymentList>, callback?: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1DeploymentList>): Promise<Models.ListExtensionsV1beta1DeploymentForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listExtensionsV1beta1DeploymentForAllNamespacesOperationSpec,
      callback) as Promise<Models.ListExtensionsV1beta1DeploymentForAllNamespacesResponse>;
  }

  /**
   * list or watch objects of kind Ingress
   * @param [options] The optional parameters
   * @returns Promise<Models.ListExtensionsV1beta1IngressForAllNamespacesResponse>
   */
  listExtensionsV1beta1IngressForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListExtensionsV1beta1IngressForAllNamespacesOptionalParams): Promise<Models.ListExtensionsV1beta1IngressForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  listExtensionsV1beta1IngressForAllNamespaces(callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1IngressList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listExtensionsV1beta1IngressForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesListExtensionsV1beta1IngressForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1IngressList>): void;
  listExtensionsV1beta1IngressForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListExtensionsV1beta1IngressForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1IngressList>, callback?: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1IngressList>): Promise<Models.ListExtensionsV1beta1IngressForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listExtensionsV1beta1IngressForAllNamespacesOperationSpec,
      callback) as Promise<Models.ListExtensionsV1beta1IngressForAllNamespacesResponse>;
  }

  /**
   * list or watch objects of kind DaemonSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ListExtensionsV1beta1NamespacedDaemonSetResponse>
   */
  listExtensionsV1beta1NamespacedDaemonSet(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListExtensionsV1beta1NamespacedDaemonSetOptionalParams): Promise<Models.ListExtensionsV1beta1NamespacedDaemonSetResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  listExtensionsV1beta1NamespacedDaemonSet(namespace: string, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1DaemonSetList>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  listExtensionsV1beta1NamespacedDaemonSet(namespace: string, options: Models.OpenShiftAPIwithKubernetesListExtensionsV1beta1NamespacedDaemonSetOptionalParams, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1DaemonSetList>): void;
  listExtensionsV1beta1NamespacedDaemonSet(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListExtensionsV1beta1NamespacedDaemonSetOptionalParams | msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1DaemonSetList>, callback?: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1DaemonSetList>): Promise<Models.ListExtensionsV1beta1NamespacedDaemonSetResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      listExtensionsV1beta1NamespacedDaemonSetOperationSpec,
      callback) as Promise<Models.ListExtensionsV1beta1NamespacedDaemonSetResponse>;
  }

  /**
   * create a DaemonSet
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateExtensionsV1beta1NamespacedDaemonSetResponse>
   */
  createExtensionsV1beta1NamespacedDaemonSet(body: Models.Iok8sapiextensionsv1beta1DaemonSet, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateExtensionsV1beta1NamespacedDaemonSetOptionalParams): Promise<Models.CreateExtensionsV1beta1NamespacedDaemonSetResponse>;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  createExtensionsV1beta1NamespacedDaemonSet(body: Models.Iok8sapiextensionsv1beta1DaemonSet, namespace: string, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1DaemonSet>): void;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  createExtensionsV1beta1NamespacedDaemonSet(body: Models.Iok8sapiextensionsv1beta1DaemonSet, namespace: string, options: Models.OpenShiftAPIwithKubernetesCreateExtensionsV1beta1NamespacedDaemonSetOptionalParams, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1DaemonSet>): void;
  createExtensionsV1beta1NamespacedDaemonSet(body: Models.Iok8sapiextensionsv1beta1DaemonSet, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateExtensionsV1beta1NamespacedDaemonSetOptionalParams | msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1DaemonSet>, callback?: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1DaemonSet>): Promise<Models.CreateExtensionsV1beta1NamespacedDaemonSetResponse> {
    return this.sendOperationRequest(
      {
        body,
        namespace,
        options
      },
      createExtensionsV1beta1NamespacedDaemonSetOperationSpec,
      callback) as Promise<Models.CreateExtensionsV1beta1NamespacedDaemonSetResponse>;
  }

  /**
   * delete collection of DaemonSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteExtensionsV1beta1CollectionNamespacedDaemonSetResponse>
   */
  deleteExtensionsV1beta1CollectionNamespacedDaemonSet(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteExtensionsV1beta1CollectionNamespacedDaemonSetOptionalParams): Promise<Models.DeleteExtensionsV1beta1CollectionNamespacedDaemonSetResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteExtensionsV1beta1CollectionNamespacedDaemonSet(namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteExtensionsV1beta1CollectionNamespacedDaemonSet(namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteExtensionsV1beta1CollectionNamespacedDaemonSetOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteExtensionsV1beta1CollectionNamespacedDaemonSet(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteExtensionsV1beta1CollectionNamespacedDaemonSetOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteExtensionsV1beta1CollectionNamespacedDaemonSetResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      deleteExtensionsV1beta1CollectionNamespacedDaemonSetOperationSpec,
      callback) as Promise<Models.DeleteExtensionsV1beta1CollectionNamespacedDaemonSetResponse>;
  }

  /**
   * read the specified DaemonSet
   * @param name name of the DaemonSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadExtensionsV1beta1NamespacedDaemonSetResponse>
   */
  readExtensionsV1beta1NamespacedDaemonSet(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadExtensionsV1beta1NamespacedDaemonSetOptionalParams): Promise<Models.ReadExtensionsV1beta1NamespacedDaemonSetResponse>;
  /**
   * @param name name of the DaemonSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readExtensionsV1beta1NamespacedDaemonSet(name: string, namespace: string, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1DaemonSet>): void;
  /**
   * @param name name of the DaemonSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readExtensionsV1beta1NamespacedDaemonSet(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadExtensionsV1beta1NamespacedDaemonSetOptionalParams, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1DaemonSet>): void;
  readExtensionsV1beta1NamespacedDaemonSet(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadExtensionsV1beta1NamespacedDaemonSetOptionalParams | msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1DaemonSet>, callback?: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1DaemonSet>): Promise<Models.ReadExtensionsV1beta1NamespacedDaemonSetResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readExtensionsV1beta1NamespacedDaemonSetOperationSpec,
      callback) as Promise<Models.ReadExtensionsV1beta1NamespacedDaemonSetResponse>;
  }

  /**
   * replace the specified DaemonSet
   * @param body
   * @param name name of the DaemonSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceExtensionsV1beta1NamespacedDaemonSetResponse>
   */
  replaceExtensionsV1beta1NamespacedDaemonSet(body: Models.Iok8sapiextensionsv1beta1DaemonSet, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceExtensionsV1beta1NamespacedDaemonSetOptionalParams): Promise<Models.ReplaceExtensionsV1beta1NamespacedDaemonSetResponse>;
  /**
   * @param body
   * @param name name of the DaemonSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replaceExtensionsV1beta1NamespacedDaemonSet(body: Models.Iok8sapiextensionsv1beta1DaemonSet, name: string, namespace: string, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1DaemonSet>): void;
  /**
   * @param body
   * @param name name of the DaemonSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceExtensionsV1beta1NamespacedDaemonSet(body: Models.Iok8sapiextensionsv1beta1DaemonSet, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplaceExtensionsV1beta1NamespacedDaemonSetOptionalParams, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1DaemonSet>): void;
  replaceExtensionsV1beta1NamespacedDaemonSet(body: Models.Iok8sapiextensionsv1beta1DaemonSet, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceExtensionsV1beta1NamespacedDaemonSetOptionalParams | msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1DaemonSet>, callback?: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1DaemonSet>): Promise<Models.ReplaceExtensionsV1beta1NamespacedDaemonSetResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replaceExtensionsV1beta1NamespacedDaemonSetOperationSpec,
      callback) as Promise<Models.ReplaceExtensionsV1beta1NamespacedDaemonSetResponse>;
  }

  /**
   * delete a DaemonSet
   * @param body
   * @param name name of the DaemonSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteExtensionsV1beta1NamespacedDaemonSetResponse>
   */
  deleteExtensionsV1beta1NamespacedDaemonSet(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteExtensionsV1beta1NamespacedDaemonSetOptionalParams): Promise<Models.DeleteExtensionsV1beta1NamespacedDaemonSetResponse>;
  /**
   * @param body
   * @param name name of the DaemonSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteExtensionsV1beta1NamespacedDaemonSet(body: Models.V1DeleteOptions, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param name name of the DaemonSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteExtensionsV1beta1NamespacedDaemonSet(body: Models.V1DeleteOptions, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteExtensionsV1beta1NamespacedDaemonSetOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteExtensionsV1beta1NamespacedDaemonSet(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteExtensionsV1beta1NamespacedDaemonSetOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteExtensionsV1beta1NamespacedDaemonSetResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      deleteExtensionsV1beta1NamespacedDaemonSetOperationSpec,
      callback) as Promise<Models.DeleteExtensionsV1beta1NamespacedDaemonSetResponse>;
  }

  /**
   * partially update the specified DaemonSet
   * @param body
   * @param name name of the DaemonSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchExtensionsV1beta1NamespacedDaemonSetResponse>
   */
  patchExtensionsV1beta1NamespacedDaemonSet(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchExtensionsV1beta1NamespacedDaemonSetOptionalParams): Promise<Models.PatchExtensionsV1beta1NamespacedDaemonSetResponse>;
  /**
   * @param body
   * @param name name of the DaemonSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  patchExtensionsV1beta1NamespacedDaemonSet(body: any, name: string, namespace: string, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1DaemonSet>): void;
  /**
   * @param body
   * @param name name of the DaemonSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  patchExtensionsV1beta1NamespacedDaemonSet(body: any, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesPatchExtensionsV1beta1NamespacedDaemonSetOptionalParams, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1DaemonSet>): void;
  patchExtensionsV1beta1NamespacedDaemonSet(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchExtensionsV1beta1NamespacedDaemonSetOptionalParams | msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1DaemonSet>, callback?: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1DaemonSet>): Promise<Models.PatchExtensionsV1beta1NamespacedDaemonSetResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      patchExtensionsV1beta1NamespacedDaemonSetOperationSpec,
      callback) as Promise<Models.PatchExtensionsV1beta1NamespacedDaemonSetResponse>;
  }

  /**
   * read status of the specified DaemonSet
   * @param name name of the DaemonSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadExtensionsV1beta1NamespacedDaemonSetStatusResponse>
   */
  readExtensionsV1beta1NamespacedDaemonSetStatus(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadExtensionsV1beta1NamespacedDaemonSetStatusOptionalParams): Promise<Models.ReadExtensionsV1beta1NamespacedDaemonSetStatusResponse>;
  /**
   * @param name name of the DaemonSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readExtensionsV1beta1NamespacedDaemonSetStatus(name: string, namespace: string, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1DaemonSet>): void;
  /**
   * @param name name of the DaemonSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readExtensionsV1beta1NamespacedDaemonSetStatus(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadExtensionsV1beta1NamespacedDaemonSetStatusOptionalParams, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1DaemonSet>): void;
  readExtensionsV1beta1NamespacedDaemonSetStatus(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadExtensionsV1beta1NamespacedDaemonSetStatusOptionalParams | msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1DaemonSet>, callback?: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1DaemonSet>): Promise<Models.ReadExtensionsV1beta1NamespacedDaemonSetStatusResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readExtensionsV1beta1NamespacedDaemonSetStatusOperationSpec,
      callback) as Promise<Models.ReadExtensionsV1beta1NamespacedDaemonSetStatusResponse>;
  }

  /**
   * replace status of the specified DaemonSet
   * @param body
   * @param name name of the DaemonSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceExtensionsV1beta1NamespacedDaemonSetStatusResponse>
   */
  replaceExtensionsV1beta1NamespacedDaemonSetStatus(body: Models.Iok8sapiextensionsv1beta1DaemonSet, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceExtensionsV1beta1NamespacedDaemonSetStatusOptionalParams): Promise<Models.ReplaceExtensionsV1beta1NamespacedDaemonSetStatusResponse>;
  /**
   * @param body
   * @param name name of the DaemonSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replaceExtensionsV1beta1NamespacedDaemonSetStatus(body: Models.Iok8sapiextensionsv1beta1DaemonSet, name: string, namespace: string, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1DaemonSet>): void;
  /**
   * @param body
   * @param name name of the DaemonSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceExtensionsV1beta1NamespacedDaemonSetStatus(body: Models.Iok8sapiextensionsv1beta1DaemonSet, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplaceExtensionsV1beta1NamespacedDaemonSetStatusOptionalParams, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1DaemonSet>): void;
  replaceExtensionsV1beta1NamespacedDaemonSetStatus(body: Models.Iok8sapiextensionsv1beta1DaemonSet, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceExtensionsV1beta1NamespacedDaemonSetStatusOptionalParams | msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1DaemonSet>, callback?: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1DaemonSet>): Promise<Models.ReplaceExtensionsV1beta1NamespacedDaemonSetStatusResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replaceExtensionsV1beta1NamespacedDaemonSetStatusOperationSpec,
      callback) as Promise<Models.ReplaceExtensionsV1beta1NamespacedDaemonSetStatusResponse>;
  }

  /**
   * partially update status of the specified DaemonSet
   * @param body
   * @param name name of the DaemonSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchExtensionsV1beta1NamespacedDaemonSetStatusResponse>
   */
  patchExtensionsV1beta1NamespacedDaemonSetStatus(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchExtensionsV1beta1NamespacedDaemonSetStatusOptionalParams): Promise<Models.PatchExtensionsV1beta1NamespacedDaemonSetStatusResponse>;
  /**
   * @param body
   * @param name name of the DaemonSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  patchExtensionsV1beta1NamespacedDaemonSetStatus(body: any, name: string, namespace: string, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1DaemonSet>): void;
  /**
   * @param body
   * @param name name of the DaemonSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  patchExtensionsV1beta1NamespacedDaemonSetStatus(body: any, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesPatchExtensionsV1beta1NamespacedDaemonSetStatusOptionalParams, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1DaemonSet>): void;
  patchExtensionsV1beta1NamespacedDaemonSetStatus(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchExtensionsV1beta1NamespacedDaemonSetStatusOptionalParams | msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1DaemonSet>, callback?: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1DaemonSet>): Promise<Models.PatchExtensionsV1beta1NamespacedDaemonSetStatusResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      patchExtensionsV1beta1NamespacedDaemonSetStatusOperationSpec,
      callback) as Promise<Models.PatchExtensionsV1beta1NamespacedDaemonSetStatusResponse>;
  }

  /**
   * list or watch objects of kind Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ListExtensionsV1beta1NamespacedDeploymentResponse>
   */
  listExtensionsV1beta1NamespacedDeployment(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListExtensionsV1beta1NamespacedDeploymentOptionalParams): Promise<Models.ListExtensionsV1beta1NamespacedDeploymentResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  listExtensionsV1beta1NamespacedDeployment(namespace: string, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1DeploymentList>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  listExtensionsV1beta1NamespacedDeployment(namespace: string, options: Models.OpenShiftAPIwithKubernetesListExtensionsV1beta1NamespacedDeploymentOptionalParams, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1DeploymentList>): void;
  listExtensionsV1beta1NamespacedDeployment(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListExtensionsV1beta1NamespacedDeploymentOptionalParams | msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1DeploymentList>, callback?: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1DeploymentList>): Promise<Models.ListExtensionsV1beta1NamespacedDeploymentResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      listExtensionsV1beta1NamespacedDeploymentOperationSpec,
      callback) as Promise<Models.ListExtensionsV1beta1NamespacedDeploymentResponse>;
  }

  /**
   * create a Deployment
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateExtensionsV1beta1NamespacedDeploymentResponse>
   */
  createExtensionsV1beta1NamespacedDeployment(body: Models.Iok8sapiextensionsv1beta1Deployment, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateExtensionsV1beta1NamespacedDeploymentOptionalParams): Promise<Models.CreateExtensionsV1beta1NamespacedDeploymentResponse>;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  createExtensionsV1beta1NamespacedDeployment(body: Models.Iok8sapiextensionsv1beta1Deployment, namespace: string, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Deployment>): void;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  createExtensionsV1beta1NamespacedDeployment(body: Models.Iok8sapiextensionsv1beta1Deployment, namespace: string, options: Models.OpenShiftAPIwithKubernetesCreateExtensionsV1beta1NamespacedDeploymentOptionalParams, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Deployment>): void;
  createExtensionsV1beta1NamespacedDeployment(body: Models.Iok8sapiextensionsv1beta1Deployment, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateExtensionsV1beta1NamespacedDeploymentOptionalParams | msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Deployment>, callback?: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Deployment>): Promise<Models.CreateExtensionsV1beta1NamespacedDeploymentResponse> {
    return this.sendOperationRequest(
      {
        body,
        namespace,
        options
      },
      createExtensionsV1beta1NamespacedDeploymentOperationSpec,
      callback) as Promise<Models.CreateExtensionsV1beta1NamespacedDeploymentResponse>;
  }

  /**
   * delete collection of Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteExtensionsV1beta1CollectionNamespacedDeploymentResponse>
   */
  deleteExtensionsV1beta1CollectionNamespacedDeployment(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteExtensionsV1beta1CollectionNamespacedDeploymentOptionalParams): Promise<Models.DeleteExtensionsV1beta1CollectionNamespacedDeploymentResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteExtensionsV1beta1CollectionNamespacedDeployment(namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteExtensionsV1beta1CollectionNamespacedDeployment(namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteExtensionsV1beta1CollectionNamespacedDeploymentOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteExtensionsV1beta1CollectionNamespacedDeployment(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteExtensionsV1beta1CollectionNamespacedDeploymentOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteExtensionsV1beta1CollectionNamespacedDeploymentResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      deleteExtensionsV1beta1CollectionNamespacedDeploymentOperationSpec,
      callback) as Promise<Models.DeleteExtensionsV1beta1CollectionNamespacedDeploymentResponse>;
  }

  /**
   * read the specified Deployment
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadExtensionsV1beta1NamespacedDeploymentResponse>
   */
  readExtensionsV1beta1NamespacedDeployment(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadExtensionsV1beta1NamespacedDeploymentOptionalParams): Promise<Models.ReadExtensionsV1beta1NamespacedDeploymentResponse>;
  /**
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readExtensionsV1beta1NamespacedDeployment(name: string, namespace: string, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Deployment>): void;
  /**
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readExtensionsV1beta1NamespacedDeployment(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadExtensionsV1beta1NamespacedDeploymentOptionalParams, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Deployment>): void;
  readExtensionsV1beta1NamespacedDeployment(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadExtensionsV1beta1NamespacedDeploymentOptionalParams | msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Deployment>, callback?: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Deployment>): Promise<Models.ReadExtensionsV1beta1NamespacedDeploymentResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readExtensionsV1beta1NamespacedDeploymentOperationSpec,
      callback) as Promise<Models.ReadExtensionsV1beta1NamespacedDeploymentResponse>;
  }

  /**
   * replace the specified Deployment
   * @param body
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceExtensionsV1beta1NamespacedDeploymentResponse>
   */
  replaceExtensionsV1beta1NamespacedDeployment(body: Models.Iok8sapiextensionsv1beta1Deployment, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceExtensionsV1beta1NamespacedDeploymentOptionalParams): Promise<Models.ReplaceExtensionsV1beta1NamespacedDeploymentResponse>;
  /**
   * @param body
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replaceExtensionsV1beta1NamespacedDeployment(body: Models.Iok8sapiextensionsv1beta1Deployment, name: string, namespace: string, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Deployment>): void;
  /**
   * @param body
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceExtensionsV1beta1NamespacedDeployment(body: Models.Iok8sapiextensionsv1beta1Deployment, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplaceExtensionsV1beta1NamespacedDeploymentOptionalParams, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Deployment>): void;
  replaceExtensionsV1beta1NamespacedDeployment(body: Models.Iok8sapiextensionsv1beta1Deployment, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceExtensionsV1beta1NamespacedDeploymentOptionalParams | msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Deployment>, callback?: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Deployment>): Promise<Models.ReplaceExtensionsV1beta1NamespacedDeploymentResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replaceExtensionsV1beta1NamespacedDeploymentOperationSpec,
      callback) as Promise<Models.ReplaceExtensionsV1beta1NamespacedDeploymentResponse>;
  }

  /**
   * delete a Deployment
   * @param body
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteExtensionsV1beta1NamespacedDeploymentResponse>
   */
  deleteExtensionsV1beta1NamespacedDeployment(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteExtensionsV1beta1NamespacedDeploymentOptionalParams): Promise<Models.DeleteExtensionsV1beta1NamespacedDeploymentResponse>;
  /**
   * @param body
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteExtensionsV1beta1NamespacedDeployment(body: Models.V1DeleteOptions, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteExtensionsV1beta1NamespacedDeployment(body: Models.V1DeleteOptions, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteExtensionsV1beta1NamespacedDeploymentOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteExtensionsV1beta1NamespacedDeployment(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteExtensionsV1beta1NamespacedDeploymentOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteExtensionsV1beta1NamespacedDeploymentResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      deleteExtensionsV1beta1NamespacedDeploymentOperationSpec,
      callback) as Promise<Models.DeleteExtensionsV1beta1NamespacedDeploymentResponse>;
  }

  /**
   * partially update the specified Deployment
   * @param body
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchExtensionsV1beta1NamespacedDeploymentResponse>
   */
  patchExtensionsV1beta1NamespacedDeployment(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchExtensionsV1beta1NamespacedDeploymentOptionalParams): Promise<Models.PatchExtensionsV1beta1NamespacedDeploymentResponse>;
  /**
   * @param body
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  patchExtensionsV1beta1NamespacedDeployment(body: any, name: string, namespace: string, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Deployment>): void;
  /**
   * @param body
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  patchExtensionsV1beta1NamespacedDeployment(body: any, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesPatchExtensionsV1beta1NamespacedDeploymentOptionalParams, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Deployment>): void;
  patchExtensionsV1beta1NamespacedDeployment(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchExtensionsV1beta1NamespacedDeploymentOptionalParams | msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Deployment>, callback?: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Deployment>): Promise<Models.PatchExtensionsV1beta1NamespacedDeploymentResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      patchExtensionsV1beta1NamespacedDeploymentOperationSpec,
      callback) as Promise<Models.PatchExtensionsV1beta1NamespacedDeploymentResponse>;
  }

  /**
   * create rollback of a Deployment
   * @param body
   * @param name name of the DeploymentRollback
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateExtensionsV1beta1NamespacedDeploymentRollbackResponse>
   */
  createExtensionsV1beta1NamespacedDeploymentRollback(body: Models.Iok8sapiextensionsv1beta1DeploymentRollback, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateExtensionsV1beta1NamespacedDeploymentRollbackOptionalParams): Promise<Models.CreateExtensionsV1beta1NamespacedDeploymentRollbackResponse>;
  /**
   * @param body
   * @param name name of the DeploymentRollback
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  createExtensionsV1beta1NamespacedDeploymentRollback(body: Models.Iok8sapiextensionsv1beta1DeploymentRollback, name: string, namespace: string, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1DeploymentRollback>): void;
  /**
   * @param body
   * @param name name of the DeploymentRollback
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  createExtensionsV1beta1NamespacedDeploymentRollback(body: Models.Iok8sapiextensionsv1beta1DeploymentRollback, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesCreateExtensionsV1beta1NamespacedDeploymentRollbackOptionalParams, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1DeploymentRollback>): void;
  createExtensionsV1beta1NamespacedDeploymentRollback(body: Models.Iok8sapiextensionsv1beta1DeploymentRollback, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateExtensionsV1beta1NamespacedDeploymentRollbackOptionalParams | msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1DeploymentRollback>, callback?: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1DeploymentRollback>): Promise<Models.CreateExtensionsV1beta1NamespacedDeploymentRollbackResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      createExtensionsV1beta1NamespacedDeploymentRollbackOperationSpec,
      callback) as Promise<Models.CreateExtensionsV1beta1NamespacedDeploymentRollbackResponse>;
  }

  /**
   * read scale of the specified Deployment
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadExtensionsV1beta1NamespacedDeploymentScaleResponse>
   */
  readExtensionsV1beta1NamespacedDeploymentScale(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadExtensionsV1beta1NamespacedDeploymentScaleOptionalParams): Promise<Models.ReadExtensionsV1beta1NamespacedDeploymentScaleResponse>;
  /**
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readExtensionsV1beta1NamespacedDeploymentScale(name: string, namespace: string, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Scale>): void;
  /**
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readExtensionsV1beta1NamespacedDeploymentScale(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadExtensionsV1beta1NamespacedDeploymentScaleOptionalParams, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Scale>): void;
  readExtensionsV1beta1NamespacedDeploymentScale(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadExtensionsV1beta1NamespacedDeploymentScaleOptionalParams | msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Scale>, callback?: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Scale>): Promise<Models.ReadExtensionsV1beta1NamespacedDeploymentScaleResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readExtensionsV1beta1NamespacedDeploymentScaleOperationSpec,
      callback) as Promise<Models.ReadExtensionsV1beta1NamespacedDeploymentScaleResponse>;
  }

  /**
   * replace scale of the specified Deployment
   * @param body
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceExtensionsV1beta1NamespacedDeploymentScaleResponse>
   */
  replaceExtensionsV1beta1NamespacedDeploymentScale(body: Models.Iok8sapiextensionsv1beta1Scale, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceExtensionsV1beta1NamespacedDeploymentScaleOptionalParams): Promise<Models.ReplaceExtensionsV1beta1NamespacedDeploymentScaleResponse>;
  /**
   * @param body
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replaceExtensionsV1beta1NamespacedDeploymentScale(body: Models.Iok8sapiextensionsv1beta1Scale, name: string, namespace: string, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Scale>): void;
  /**
   * @param body
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceExtensionsV1beta1NamespacedDeploymentScale(body: Models.Iok8sapiextensionsv1beta1Scale, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplaceExtensionsV1beta1NamespacedDeploymentScaleOptionalParams, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Scale>): void;
  replaceExtensionsV1beta1NamespacedDeploymentScale(body: Models.Iok8sapiextensionsv1beta1Scale, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceExtensionsV1beta1NamespacedDeploymentScaleOptionalParams | msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Scale>, callback?: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Scale>): Promise<Models.ReplaceExtensionsV1beta1NamespacedDeploymentScaleResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replaceExtensionsV1beta1NamespacedDeploymentScaleOperationSpec,
      callback) as Promise<Models.ReplaceExtensionsV1beta1NamespacedDeploymentScaleResponse>;
  }

  /**
   * partially update scale of the specified Deployment
   * @param body
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchExtensionsV1beta1NamespacedDeploymentScaleResponse>
   */
  patchExtensionsV1beta1NamespacedDeploymentScale(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchExtensionsV1beta1NamespacedDeploymentScaleOptionalParams): Promise<Models.PatchExtensionsV1beta1NamespacedDeploymentScaleResponse>;
  /**
   * @param body
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  patchExtensionsV1beta1NamespacedDeploymentScale(body: any, name: string, namespace: string, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Scale>): void;
  /**
   * @param body
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  patchExtensionsV1beta1NamespacedDeploymentScale(body: any, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesPatchExtensionsV1beta1NamespacedDeploymentScaleOptionalParams, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Scale>): void;
  patchExtensionsV1beta1NamespacedDeploymentScale(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchExtensionsV1beta1NamespacedDeploymentScaleOptionalParams | msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Scale>, callback?: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Scale>): Promise<Models.PatchExtensionsV1beta1NamespacedDeploymentScaleResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      patchExtensionsV1beta1NamespacedDeploymentScaleOperationSpec,
      callback) as Promise<Models.PatchExtensionsV1beta1NamespacedDeploymentScaleResponse>;
  }

  /**
   * read status of the specified Deployment
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadExtensionsV1beta1NamespacedDeploymentStatusResponse>
   */
  readExtensionsV1beta1NamespacedDeploymentStatus(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadExtensionsV1beta1NamespacedDeploymentStatusOptionalParams): Promise<Models.ReadExtensionsV1beta1NamespacedDeploymentStatusResponse>;
  /**
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readExtensionsV1beta1NamespacedDeploymentStatus(name: string, namespace: string, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Deployment>): void;
  /**
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readExtensionsV1beta1NamespacedDeploymentStatus(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadExtensionsV1beta1NamespacedDeploymentStatusOptionalParams, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Deployment>): void;
  readExtensionsV1beta1NamespacedDeploymentStatus(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadExtensionsV1beta1NamespacedDeploymentStatusOptionalParams | msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Deployment>, callback?: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Deployment>): Promise<Models.ReadExtensionsV1beta1NamespacedDeploymentStatusResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readExtensionsV1beta1NamespacedDeploymentStatusOperationSpec,
      callback) as Promise<Models.ReadExtensionsV1beta1NamespacedDeploymentStatusResponse>;
  }

  /**
   * replace status of the specified Deployment
   * @param body
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceExtensionsV1beta1NamespacedDeploymentStatusResponse>
   */
  replaceExtensionsV1beta1NamespacedDeploymentStatus(body: Models.Iok8sapiextensionsv1beta1Deployment, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceExtensionsV1beta1NamespacedDeploymentStatusOptionalParams): Promise<Models.ReplaceExtensionsV1beta1NamespacedDeploymentStatusResponse>;
  /**
   * @param body
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replaceExtensionsV1beta1NamespacedDeploymentStatus(body: Models.Iok8sapiextensionsv1beta1Deployment, name: string, namespace: string, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Deployment>): void;
  /**
   * @param body
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceExtensionsV1beta1NamespacedDeploymentStatus(body: Models.Iok8sapiextensionsv1beta1Deployment, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplaceExtensionsV1beta1NamespacedDeploymentStatusOptionalParams, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Deployment>): void;
  replaceExtensionsV1beta1NamespacedDeploymentStatus(body: Models.Iok8sapiextensionsv1beta1Deployment, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceExtensionsV1beta1NamespacedDeploymentStatusOptionalParams | msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Deployment>, callback?: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Deployment>): Promise<Models.ReplaceExtensionsV1beta1NamespacedDeploymentStatusResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replaceExtensionsV1beta1NamespacedDeploymentStatusOperationSpec,
      callback) as Promise<Models.ReplaceExtensionsV1beta1NamespacedDeploymentStatusResponse>;
  }

  /**
   * partially update status of the specified Deployment
   * @param body
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchExtensionsV1beta1NamespacedDeploymentStatusResponse>
   */
  patchExtensionsV1beta1NamespacedDeploymentStatus(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchExtensionsV1beta1NamespacedDeploymentStatusOptionalParams): Promise<Models.PatchExtensionsV1beta1NamespacedDeploymentStatusResponse>;
  /**
   * @param body
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  patchExtensionsV1beta1NamespacedDeploymentStatus(body: any, name: string, namespace: string, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Deployment>): void;
  /**
   * @param body
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  patchExtensionsV1beta1NamespacedDeploymentStatus(body: any, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesPatchExtensionsV1beta1NamespacedDeploymentStatusOptionalParams, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Deployment>): void;
  patchExtensionsV1beta1NamespacedDeploymentStatus(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchExtensionsV1beta1NamespacedDeploymentStatusOptionalParams | msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Deployment>, callback?: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Deployment>): Promise<Models.PatchExtensionsV1beta1NamespacedDeploymentStatusResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      patchExtensionsV1beta1NamespacedDeploymentStatusOperationSpec,
      callback) as Promise<Models.PatchExtensionsV1beta1NamespacedDeploymentStatusResponse>;
  }

  /**
   * list or watch objects of kind Ingress
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ListExtensionsV1beta1NamespacedIngressResponse>
   */
  listExtensionsV1beta1NamespacedIngress(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListExtensionsV1beta1NamespacedIngressOptionalParams): Promise<Models.ListExtensionsV1beta1NamespacedIngressResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  listExtensionsV1beta1NamespacedIngress(namespace: string, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1IngressList>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  listExtensionsV1beta1NamespacedIngress(namespace: string, options: Models.OpenShiftAPIwithKubernetesListExtensionsV1beta1NamespacedIngressOptionalParams, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1IngressList>): void;
  listExtensionsV1beta1NamespacedIngress(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListExtensionsV1beta1NamespacedIngressOptionalParams | msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1IngressList>, callback?: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1IngressList>): Promise<Models.ListExtensionsV1beta1NamespacedIngressResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      listExtensionsV1beta1NamespacedIngressOperationSpec,
      callback) as Promise<Models.ListExtensionsV1beta1NamespacedIngressResponse>;
  }

  /**
   * create an Ingress
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateExtensionsV1beta1NamespacedIngressResponse>
   */
  createExtensionsV1beta1NamespacedIngress(body: Models.Iok8sapiextensionsv1beta1Ingress, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateExtensionsV1beta1NamespacedIngressOptionalParams): Promise<Models.CreateExtensionsV1beta1NamespacedIngressResponse>;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  createExtensionsV1beta1NamespacedIngress(body: Models.Iok8sapiextensionsv1beta1Ingress, namespace: string, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Ingress>): void;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  createExtensionsV1beta1NamespacedIngress(body: Models.Iok8sapiextensionsv1beta1Ingress, namespace: string, options: Models.OpenShiftAPIwithKubernetesCreateExtensionsV1beta1NamespacedIngressOptionalParams, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Ingress>): void;
  createExtensionsV1beta1NamespacedIngress(body: Models.Iok8sapiextensionsv1beta1Ingress, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateExtensionsV1beta1NamespacedIngressOptionalParams | msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Ingress>, callback?: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Ingress>): Promise<Models.CreateExtensionsV1beta1NamespacedIngressResponse> {
    return this.sendOperationRequest(
      {
        body,
        namespace,
        options
      },
      createExtensionsV1beta1NamespacedIngressOperationSpec,
      callback) as Promise<Models.CreateExtensionsV1beta1NamespacedIngressResponse>;
  }

  /**
   * delete collection of Ingress
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteExtensionsV1beta1CollectionNamespacedIngressResponse>
   */
  deleteExtensionsV1beta1CollectionNamespacedIngress(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteExtensionsV1beta1CollectionNamespacedIngressOptionalParams): Promise<Models.DeleteExtensionsV1beta1CollectionNamespacedIngressResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteExtensionsV1beta1CollectionNamespacedIngress(namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteExtensionsV1beta1CollectionNamespacedIngress(namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteExtensionsV1beta1CollectionNamespacedIngressOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteExtensionsV1beta1CollectionNamespacedIngress(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteExtensionsV1beta1CollectionNamespacedIngressOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteExtensionsV1beta1CollectionNamespacedIngressResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      deleteExtensionsV1beta1CollectionNamespacedIngressOperationSpec,
      callback) as Promise<Models.DeleteExtensionsV1beta1CollectionNamespacedIngressResponse>;
  }

  /**
   * read the specified Ingress
   * @param name name of the Ingress
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadExtensionsV1beta1NamespacedIngressResponse>
   */
  readExtensionsV1beta1NamespacedIngress(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadExtensionsV1beta1NamespacedIngressOptionalParams): Promise<Models.ReadExtensionsV1beta1NamespacedIngressResponse>;
  /**
   * @param name name of the Ingress
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readExtensionsV1beta1NamespacedIngress(name: string, namespace: string, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Ingress>): void;
  /**
   * @param name name of the Ingress
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readExtensionsV1beta1NamespacedIngress(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadExtensionsV1beta1NamespacedIngressOptionalParams, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Ingress>): void;
  readExtensionsV1beta1NamespacedIngress(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadExtensionsV1beta1NamespacedIngressOptionalParams | msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Ingress>, callback?: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Ingress>): Promise<Models.ReadExtensionsV1beta1NamespacedIngressResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readExtensionsV1beta1NamespacedIngressOperationSpec,
      callback) as Promise<Models.ReadExtensionsV1beta1NamespacedIngressResponse>;
  }

  /**
   * replace the specified Ingress
   * @param body
   * @param name name of the Ingress
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceExtensionsV1beta1NamespacedIngressResponse>
   */
  replaceExtensionsV1beta1NamespacedIngress(body: Models.Iok8sapiextensionsv1beta1Ingress, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceExtensionsV1beta1NamespacedIngressOptionalParams): Promise<Models.ReplaceExtensionsV1beta1NamespacedIngressResponse>;
  /**
   * @param body
   * @param name name of the Ingress
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replaceExtensionsV1beta1NamespacedIngress(body: Models.Iok8sapiextensionsv1beta1Ingress, name: string, namespace: string, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Ingress>): void;
  /**
   * @param body
   * @param name name of the Ingress
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceExtensionsV1beta1NamespacedIngress(body: Models.Iok8sapiextensionsv1beta1Ingress, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplaceExtensionsV1beta1NamespacedIngressOptionalParams, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Ingress>): void;
  replaceExtensionsV1beta1NamespacedIngress(body: Models.Iok8sapiextensionsv1beta1Ingress, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceExtensionsV1beta1NamespacedIngressOptionalParams | msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Ingress>, callback?: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Ingress>): Promise<Models.ReplaceExtensionsV1beta1NamespacedIngressResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replaceExtensionsV1beta1NamespacedIngressOperationSpec,
      callback) as Promise<Models.ReplaceExtensionsV1beta1NamespacedIngressResponse>;
  }

  /**
   * delete an Ingress
   * @param body
   * @param name name of the Ingress
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteExtensionsV1beta1NamespacedIngressResponse>
   */
  deleteExtensionsV1beta1NamespacedIngress(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteExtensionsV1beta1NamespacedIngressOptionalParams): Promise<Models.DeleteExtensionsV1beta1NamespacedIngressResponse>;
  /**
   * @param body
   * @param name name of the Ingress
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteExtensionsV1beta1NamespacedIngress(body: Models.V1DeleteOptions, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param name name of the Ingress
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteExtensionsV1beta1NamespacedIngress(body: Models.V1DeleteOptions, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteExtensionsV1beta1NamespacedIngressOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteExtensionsV1beta1NamespacedIngress(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteExtensionsV1beta1NamespacedIngressOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteExtensionsV1beta1NamespacedIngressResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      deleteExtensionsV1beta1NamespacedIngressOperationSpec,
      callback) as Promise<Models.DeleteExtensionsV1beta1NamespacedIngressResponse>;
  }

  /**
   * partially update the specified Ingress
   * @param body
   * @param name name of the Ingress
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchExtensionsV1beta1NamespacedIngressResponse>
   */
  patchExtensionsV1beta1NamespacedIngress(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchExtensionsV1beta1NamespacedIngressOptionalParams): Promise<Models.PatchExtensionsV1beta1NamespacedIngressResponse>;
  /**
   * @param body
   * @param name name of the Ingress
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  patchExtensionsV1beta1NamespacedIngress(body: any, name: string, namespace: string, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Ingress>): void;
  /**
   * @param body
   * @param name name of the Ingress
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  patchExtensionsV1beta1NamespacedIngress(body: any, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesPatchExtensionsV1beta1NamespacedIngressOptionalParams, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Ingress>): void;
  patchExtensionsV1beta1NamespacedIngress(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchExtensionsV1beta1NamespacedIngressOptionalParams | msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Ingress>, callback?: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Ingress>): Promise<Models.PatchExtensionsV1beta1NamespacedIngressResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      patchExtensionsV1beta1NamespacedIngressOperationSpec,
      callback) as Promise<Models.PatchExtensionsV1beta1NamespacedIngressResponse>;
  }

  /**
   * read status of the specified Ingress
   * @param name name of the Ingress
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadExtensionsV1beta1NamespacedIngressStatusResponse>
   */
  readExtensionsV1beta1NamespacedIngressStatus(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadExtensionsV1beta1NamespacedIngressStatusOptionalParams): Promise<Models.ReadExtensionsV1beta1NamespacedIngressStatusResponse>;
  /**
   * @param name name of the Ingress
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readExtensionsV1beta1NamespacedIngressStatus(name: string, namespace: string, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Ingress>): void;
  /**
   * @param name name of the Ingress
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readExtensionsV1beta1NamespacedIngressStatus(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadExtensionsV1beta1NamespacedIngressStatusOptionalParams, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Ingress>): void;
  readExtensionsV1beta1NamespacedIngressStatus(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadExtensionsV1beta1NamespacedIngressStatusOptionalParams | msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Ingress>, callback?: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Ingress>): Promise<Models.ReadExtensionsV1beta1NamespacedIngressStatusResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readExtensionsV1beta1NamespacedIngressStatusOperationSpec,
      callback) as Promise<Models.ReadExtensionsV1beta1NamespacedIngressStatusResponse>;
  }

  /**
   * replace status of the specified Ingress
   * @param body
   * @param name name of the Ingress
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceExtensionsV1beta1NamespacedIngressStatusResponse>
   */
  replaceExtensionsV1beta1NamespacedIngressStatus(body: Models.Iok8sapiextensionsv1beta1Ingress, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceExtensionsV1beta1NamespacedIngressStatusOptionalParams): Promise<Models.ReplaceExtensionsV1beta1NamespacedIngressStatusResponse>;
  /**
   * @param body
   * @param name name of the Ingress
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replaceExtensionsV1beta1NamespacedIngressStatus(body: Models.Iok8sapiextensionsv1beta1Ingress, name: string, namespace: string, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Ingress>): void;
  /**
   * @param body
   * @param name name of the Ingress
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceExtensionsV1beta1NamespacedIngressStatus(body: Models.Iok8sapiextensionsv1beta1Ingress, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplaceExtensionsV1beta1NamespacedIngressStatusOptionalParams, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Ingress>): void;
  replaceExtensionsV1beta1NamespacedIngressStatus(body: Models.Iok8sapiextensionsv1beta1Ingress, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceExtensionsV1beta1NamespacedIngressStatusOptionalParams | msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Ingress>, callback?: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Ingress>): Promise<Models.ReplaceExtensionsV1beta1NamespacedIngressStatusResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replaceExtensionsV1beta1NamespacedIngressStatusOperationSpec,
      callback) as Promise<Models.ReplaceExtensionsV1beta1NamespacedIngressStatusResponse>;
  }

  /**
   * partially update status of the specified Ingress
   * @param body
   * @param name name of the Ingress
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchExtensionsV1beta1NamespacedIngressStatusResponse>
   */
  patchExtensionsV1beta1NamespacedIngressStatus(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchExtensionsV1beta1NamespacedIngressStatusOptionalParams): Promise<Models.PatchExtensionsV1beta1NamespacedIngressStatusResponse>;
  /**
   * @param body
   * @param name name of the Ingress
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  patchExtensionsV1beta1NamespacedIngressStatus(body: any, name: string, namespace: string, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Ingress>): void;
  /**
   * @param body
   * @param name name of the Ingress
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  patchExtensionsV1beta1NamespacedIngressStatus(body: any, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesPatchExtensionsV1beta1NamespacedIngressStatusOptionalParams, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Ingress>): void;
  patchExtensionsV1beta1NamespacedIngressStatus(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchExtensionsV1beta1NamespacedIngressStatusOptionalParams | msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Ingress>, callback?: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Ingress>): Promise<Models.PatchExtensionsV1beta1NamespacedIngressStatusResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      patchExtensionsV1beta1NamespacedIngressStatusOperationSpec,
      callback) as Promise<Models.PatchExtensionsV1beta1NamespacedIngressStatusResponse>;
  }

  /**
   * list or watch objects of kind NetworkPolicy
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ListExtensionsV1beta1NamespacedNetworkPolicyResponse>
   */
  listExtensionsV1beta1NamespacedNetworkPolicy(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListExtensionsV1beta1NamespacedNetworkPolicyOptionalParams): Promise<Models.ListExtensionsV1beta1NamespacedNetworkPolicyResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  listExtensionsV1beta1NamespacedNetworkPolicy(namespace: string, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1NetworkPolicyList>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  listExtensionsV1beta1NamespacedNetworkPolicy(namespace: string, options: Models.OpenShiftAPIwithKubernetesListExtensionsV1beta1NamespacedNetworkPolicyOptionalParams, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1NetworkPolicyList>): void;
  listExtensionsV1beta1NamespacedNetworkPolicy(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListExtensionsV1beta1NamespacedNetworkPolicyOptionalParams | msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1NetworkPolicyList>, callback?: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1NetworkPolicyList>): Promise<Models.ListExtensionsV1beta1NamespacedNetworkPolicyResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      listExtensionsV1beta1NamespacedNetworkPolicyOperationSpec,
      callback) as Promise<Models.ListExtensionsV1beta1NamespacedNetworkPolicyResponse>;
  }

  /**
   * create a NetworkPolicy
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateExtensionsV1beta1NamespacedNetworkPolicyResponse>
   */
  createExtensionsV1beta1NamespacedNetworkPolicy(body: Models.Iok8sapiextensionsv1beta1NetworkPolicy, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateExtensionsV1beta1NamespacedNetworkPolicyOptionalParams): Promise<Models.CreateExtensionsV1beta1NamespacedNetworkPolicyResponse>;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  createExtensionsV1beta1NamespacedNetworkPolicy(body: Models.Iok8sapiextensionsv1beta1NetworkPolicy, namespace: string, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1NetworkPolicy>): void;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  createExtensionsV1beta1NamespacedNetworkPolicy(body: Models.Iok8sapiextensionsv1beta1NetworkPolicy, namespace: string, options: Models.OpenShiftAPIwithKubernetesCreateExtensionsV1beta1NamespacedNetworkPolicyOptionalParams, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1NetworkPolicy>): void;
  createExtensionsV1beta1NamespacedNetworkPolicy(body: Models.Iok8sapiextensionsv1beta1NetworkPolicy, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateExtensionsV1beta1NamespacedNetworkPolicyOptionalParams | msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1NetworkPolicy>, callback?: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1NetworkPolicy>): Promise<Models.CreateExtensionsV1beta1NamespacedNetworkPolicyResponse> {
    return this.sendOperationRequest(
      {
        body,
        namespace,
        options
      },
      createExtensionsV1beta1NamespacedNetworkPolicyOperationSpec,
      callback) as Promise<Models.CreateExtensionsV1beta1NamespacedNetworkPolicyResponse>;
  }

  /**
   * delete collection of NetworkPolicy
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteExtensionsV1beta1CollectionNamespacedNetworkPolicyResponse>
   */
  deleteExtensionsV1beta1CollectionNamespacedNetworkPolicy(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteExtensionsV1beta1CollectionNamespacedNetworkPolicyOptionalParams): Promise<Models.DeleteExtensionsV1beta1CollectionNamespacedNetworkPolicyResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteExtensionsV1beta1CollectionNamespacedNetworkPolicy(namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteExtensionsV1beta1CollectionNamespacedNetworkPolicy(namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteExtensionsV1beta1CollectionNamespacedNetworkPolicyOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteExtensionsV1beta1CollectionNamespacedNetworkPolicy(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteExtensionsV1beta1CollectionNamespacedNetworkPolicyOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteExtensionsV1beta1CollectionNamespacedNetworkPolicyResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      deleteExtensionsV1beta1CollectionNamespacedNetworkPolicyOperationSpec,
      callback) as Promise<Models.DeleteExtensionsV1beta1CollectionNamespacedNetworkPolicyResponse>;
  }

  /**
   * read the specified NetworkPolicy
   * @param name name of the NetworkPolicy
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadExtensionsV1beta1NamespacedNetworkPolicyResponse>
   */
  readExtensionsV1beta1NamespacedNetworkPolicy(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadExtensionsV1beta1NamespacedNetworkPolicyOptionalParams): Promise<Models.ReadExtensionsV1beta1NamespacedNetworkPolicyResponse>;
  /**
   * @param name name of the NetworkPolicy
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readExtensionsV1beta1NamespacedNetworkPolicy(name: string, namespace: string, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1NetworkPolicy>): void;
  /**
   * @param name name of the NetworkPolicy
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readExtensionsV1beta1NamespacedNetworkPolicy(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadExtensionsV1beta1NamespacedNetworkPolicyOptionalParams, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1NetworkPolicy>): void;
  readExtensionsV1beta1NamespacedNetworkPolicy(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadExtensionsV1beta1NamespacedNetworkPolicyOptionalParams | msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1NetworkPolicy>, callback?: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1NetworkPolicy>): Promise<Models.ReadExtensionsV1beta1NamespacedNetworkPolicyResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readExtensionsV1beta1NamespacedNetworkPolicyOperationSpec,
      callback) as Promise<Models.ReadExtensionsV1beta1NamespacedNetworkPolicyResponse>;
  }

  /**
   * replace the specified NetworkPolicy
   * @param body
   * @param name name of the NetworkPolicy
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceExtensionsV1beta1NamespacedNetworkPolicyResponse>
   */
  replaceExtensionsV1beta1NamespacedNetworkPolicy(body: Models.Iok8sapiextensionsv1beta1NetworkPolicy, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceExtensionsV1beta1NamespacedNetworkPolicyOptionalParams): Promise<Models.ReplaceExtensionsV1beta1NamespacedNetworkPolicyResponse>;
  /**
   * @param body
   * @param name name of the NetworkPolicy
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replaceExtensionsV1beta1NamespacedNetworkPolicy(body: Models.Iok8sapiextensionsv1beta1NetworkPolicy, name: string, namespace: string, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1NetworkPolicy>): void;
  /**
   * @param body
   * @param name name of the NetworkPolicy
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceExtensionsV1beta1NamespacedNetworkPolicy(body: Models.Iok8sapiextensionsv1beta1NetworkPolicy, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplaceExtensionsV1beta1NamespacedNetworkPolicyOptionalParams, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1NetworkPolicy>): void;
  replaceExtensionsV1beta1NamespacedNetworkPolicy(body: Models.Iok8sapiextensionsv1beta1NetworkPolicy, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceExtensionsV1beta1NamespacedNetworkPolicyOptionalParams | msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1NetworkPolicy>, callback?: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1NetworkPolicy>): Promise<Models.ReplaceExtensionsV1beta1NamespacedNetworkPolicyResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replaceExtensionsV1beta1NamespacedNetworkPolicyOperationSpec,
      callback) as Promise<Models.ReplaceExtensionsV1beta1NamespacedNetworkPolicyResponse>;
  }

  /**
   * delete a NetworkPolicy
   * @param body
   * @param name name of the NetworkPolicy
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteExtensionsV1beta1NamespacedNetworkPolicyResponse>
   */
  deleteExtensionsV1beta1NamespacedNetworkPolicy(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteExtensionsV1beta1NamespacedNetworkPolicyOptionalParams): Promise<Models.DeleteExtensionsV1beta1NamespacedNetworkPolicyResponse>;
  /**
   * @param body
   * @param name name of the NetworkPolicy
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteExtensionsV1beta1NamespacedNetworkPolicy(body: Models.V1DeleteOptions, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param name name of the NetworkPolicy
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteExtensionsV1beta1NamespacedNetworkPolicy(body: Models.V1DeleteOptions, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteExtensionsV1beta1NamespacedNetworkPolicyOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteExtensionsV1beta1NamespacedNetworkPolicy(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteExtensionsV1beta1NamespacedNetworkPolicyOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteExtensionsV1beta1NamespacedNetworkPolicyResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      deleteExtensionsV1beta1NamespacedNetworkPolicyOperationSpec,
      callback) as Promise<Models.DeleteExtensionsV1beta1NamespacedNetworkPolicyResponse>;
  }

  /**
   * partially update the specified NetworkPolicy
   * @param body
   * @param name name of the NetworkPolicy
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchExtensionsV1beta1NamespacedNetworkPolicyResponse>
   */
  patchExtensionsV1beta1NamespacedNetworkPolicy(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchExtensionsV1beta1NamespacedNetworkPolicyOptionalParams): Promise<Models.PatchExtensionsV1beta1NamespacedNetworkPolicyResponse>;
  /**
   * @param body
   * @param name name of the NetworkPolicy
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  patchExtensionsV1beta1NamespacedNetworkPolicy(body: any, name: string, namespace: string, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1NetworkPolicy>): void;
  /**
   * @param body
   * @param name name of the NetworkPolicy
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  patchExtensionsV1beta1NamespacedNetworkPolicy(body: any, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesPatchExtensionsV1beta1NamespacedNetworkPolicyOptionalParams, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1NetworkPolicy>): void;
  patchExtensionsV1beta1NamespacedNetworkPolicy(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchExtensionsV1beta1NamespacedNetworkPolicyOptionalParams | msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1NetworkPolicy>, callback?: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1NetworkPolicy>): Promise<Models.PatchExtensionsV1beta1NamespacedNetworkPolicyResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      patchExtensionsV1beta1NamespacedNetworkPolicyOperationSpec,
      callback) as Promise<Models.PatchExtensionsV1beta1NamespacedNetworkPolicyResponse>;
  }

  /**
   * list or watch objects of kind ReplicaSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ListExtensionsV1beta1NamespacedReplicaSetResponse>
   */
  listExtensionsV1beta1NamespacedReplicaSet(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListExtensionsV1beta1NamespacedReplicaSetOptionalParams): Promise<Models.ListExtensionsV1beta1NamespacedReplicaSetResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  listExtensionsV1beta1NamespacedReplicaSet(namespace: string, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1ReplicaSetList>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  listExtensionsV1beta1NamespacedReplicaSet(namespace: string, options: Models.OpenShiftAPIwithKubernetesListExtensionsV1beta1NamespacedReplicaSetOptionalParams, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1ReplicaSetList>): void;
  listExtensionsV1beta1NamespacedReplicaSet(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListExtensionsV1beta1NamespacedReplicaSetOptionalParams | msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1ReplicaSetList>, callback?: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1ReplicaSetList>): Promise<Models.ListExtensionsV1beta1NamespacedReplicaSetResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      listExtensionsV1beta1NamespacedReplicaSetOperationSpec,
      callback) as Promise<Models.ListExtensionsV1beta1NamespacedReplicaSetResponse>;
  }

  /**
   * create a ReplicaSet
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateExtensionsV1beta1NamespacedReplicaSetResponse>
   */
  createExtensionsV1beta1NamespacedReplicaSet(body: Models.Iok8sapiextensionsv1beta1ReplicaSet, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateExtensionsV1beta1NamespacedReplicaSetOptionalParams): Promise<Models.CreateExtensionsV1beta1NamespacedReplicaSetResponse>;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  createExtensionsV1beta1NamespacedReplicaSet(body: Models.Iok8sapiextensionsv1beta1ReplicaSet, namespace: string, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1ReplicaSet>): void;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  createExtensionsV1beta1NamespacedReplicaSet(body: Models.Iok8sapiextensionsv1beta1ReplicaSet, namespace: string, options: Models.OpenShiftAPIwithKubernetesCreateExtensionsV1beta1NamespacedReplicaSetOptionalParams, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1ReplicaSet>): void;
  createExtensionsV1beta1NamespacedReplicaSet(body: Models.Iok8sapiextensionsv1beta1ReplicaSet, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateExtensionsV1beta1NamespacedReplicaSetOptionalParams | msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1ReplicaSet>, callback?: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1ReplicaSet>): Promise<Models.CreateExtensionsV1beta1NamespacedReplicaSetResponse> {
    return this.sendOperationRequest(
      {
        body,
        namespace,
        options
      },
      createExtensionsV1beta1NamespacedReplicaSetOperationSpec,
      callback) as Promise<Models.CreateExtensionsV1beta1NamespacedReplicaSetResponse>;
  }

  /**
   * delete collection of ReplicaSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteExtensionsV1beta1CollectionNamespacedReplicaSetResponse>
   */
  deleteExtensionsV1beta1CollectionNamespacedReplicaSet(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteExtensionsV1beta1CollectionNamespacedReplicaSetOptionalParams): Promise<Models.DeleteExtensionsV1beta1CollectionNamespacedReplicaSetResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteExtensionsV1beta1CollectionNamespacedReplicaSet(namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteExtensionsV1beta1CollectionNamespacedReplicaSet(namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteExtensionsV1beta1CollectionNamespacedReplicaSetOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteExtensionsV1beta1CollectionNamespacedReplicaSet(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteExtensionsV1beta1CollectionNamespacedReplicaSetOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteExtensionsV1beta1CollectionNamespacedReplicaSetResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      deleteExtensionsV1beta1CollectionNamespacedReplicaSetOperationSpec,
      callback) as Promise<Models.DeleteExtensionsV1beta1CollectionNamespacedReplicaSetResponse>;
  }

  /**
   * read the specified ReplicaSet
   * @param name name of the ReplicaSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadExtensionsV1beta1NamespacedReplicaSetResponse>
   */
  readExtensionsV1beta1NamespacedReplicaSet(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadExtensionsV1beta1NamespacedReplicaSetOptionalParams): Promise<Models.ReadExtensionsV1beta1NamespacedReplicaSetResponse>;
  /**
   * @param name name of the ReplicaSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readExtensionsV1beta1NamespacedReplicaSet(name: string, namespace: string, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1ReplicaSet>): void;
  /**
   * @param name name of the ReplicaSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readExtensionsV1beta1NamespacedReplicaSet(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadExtensionsV1beta1NamespacedReplicaSetOptionalParams, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1ReplicaSet>): void;
  readExtensionsV1beta1NamespacedReplicaSet(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadExtensionsV1beta1NamespacedReplicaSetOptionalParams | msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1ReplicaSet>, callback?: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1ReplicaSet>): Promise<Models.ReadExtensionsV1beta1NamespacedReplicaSetResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readExtensionsV1beta1NamespacedReplicaSetOperationSpec,
      callback) as Promise<Models.ReadExtensionsV1beta1NamespacedReplicaSetResponse>;
  }

  /**
   * replace the specified ReplicaSet
   * @param body
   * @param name name of the ReplicaSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceExtensionsV1beta1NamespacedReplicaSetResponse>
   */
  replaceExtensionsV1beta1NamespacedReplicaSet(body: Models.Iok8sapiextensionsv1beta1ReplicaSet, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceExtensionsV1beta1NamespacedReplicaSetOptionalParams): Promise<Models.ReplaceExtensionsV1beta1NamespacedReplicaSetResponse>;
  /**
   * @param body
   * @param name name of the ReplicaSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replaceExtensionsV1beta1NamespacedReplicaSet(body: Models.Iok8sapiextensionsv1beta1ReplicaSet, name: string, namespace: string, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1ReplicaSet>): void;
  /**
   * @param body
   * @param name name of the ReplicaSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceExtensionsV1beta1NamespacedReplicaSet(body: Models.Iok8sapiextensionsv1beta1ReplicaSet, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplaceExtensionsV1beta1NamespacedReplicaSetOptionalParams, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1ReplicaSet>): void;
  replaceExtensionsV1beta1NamespacedReplicaSet(body: Models.Iok8sapiextensionsv1beta1ReplicaSet, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceExtensionsV1beta1NamespacedReplicaSetOptionalParams | msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1ReplicaSet>, callback?: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1ReplicaSet>): Promise<Models.ReplaceExtensionsV1beta1NamespacedReplicaSetResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replaceExtensionsV1beta1NamespacedReplicaSetOperationSpec,
      callback) as Promise<Models.ReplaceExtensionsV1beta1NamespacedReplicaSetResponse>;
  }

  /**
   * delete a ReplicaSet
   * @param body
   * @param name name of the ReplicaSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteExtensionsV1beta1NamespacedReplicaSetResponse>
   */
  deleteExtensionsV1beta1NamespacedReplicaSet(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteExtensionsV1beta1NamespacedReplicaSetOptionalParams): Promise<Models.DeleteExtensionsV1beta1NamespacedReplicaSetResponse>;
  /**
   * @param body
   * @param name name of the ReplicaSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteExtensionsV1beta1NamespacedReplicaSet(body: Models.V1DeleteOptions, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param name name of the ReplicaSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteExtensionsV1beta1NamespacedReplicaSet(body: Models.V1DeleteOptions, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteExtensionsV1beta1NamespacedReplicaSetOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteExtensionsV1beta1NamespacedReplicaSet(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteExtensionsV1beta1NamespacedReplicaSetOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteExtensionsV1beta1NamespacedReplicaSetResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      deleteExtensionsV1beta1NamespacedReplicaSetOperationSpec,
      callback) as Promise<Models.DeleteExtensionsV1beta1NamespacedReplicaSetResponse>;
  }

  /**
   * partially update the specified ReplicaSet
   * @param body
   * @param name name of the ReplicaSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchExtensionsV1beta1NamespacedReplicaSetResponse>
   */
  patchExtensionsV1beta1NamespacedReplicaSet(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchExtensionsV1beta1NamespacedReplicaSetOptionalParams): Promise<Models.PatchExtensionsV1beta1NamespacedReplicaSetResponse>;
  /**
   * @param body
   * @param name name of the ReplicaSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  patchExtensionsV1beta1NamespacedReplicaSet(body: any, name: string, namespace: string, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1ReplicaSet>): void;
  /**
   * @param body
   * @param name name of the ReplicaSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  patchExtensionsV1beta1NamespacedReplicaSet(body: any, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesPatchExtensionsV1beta1NamespacedReplicaSetOptionalParams, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1ReplicaSet>): void;
  patchExtensionsV1beta1NamespacedReplicaSet(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchExtensionsV1beta1NamespacedReplicaSetOptionalParams | msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1ReplicaSet>, callback?: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1ReplicaSet>): Promise<Models.PatchExtensionsV1beta1NamespacedReplicaSetResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      patchExtensionsV1beta1NamespacedReplicaSetOperationSpec,
      callback) as Promise<Models.PatchExtensionsV1beta1NamespacedReplicaSetResponse>;
  }

  /**
   * read scale of the specified ReplicaSet
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadExtensionsV1beta1NamespacedReplicaSetScaleResponse>
   */
  readExtensionsV1beta1NamespacedReplicaSetScale(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadExtensionsV1beta1NamespacedReplicaSetScaleOptionalParams): Promise<Models.ReadExtensionsV1beta1NamespacedReplicaSetScaleResponse>;
  /**
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readExtensionsV1beta1NamespacedReplicaSetScale(name: string, namespace: string, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Scale>): void;
  /**
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readExtensionsV1beta1NamespacedReplicaSetScale(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadExtensionsV1beta1NamespacedReplicaSetScaleOptionalParams, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Scale>): void;
  readExtensionsV1beta1NamespacedReplicaSetScale(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadExtensionsV1beta1NamespacedReplicaSetScaleOptionalParams | msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Scale>, callback?: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Scale>): Promise<Models.ReadExtensionsV1beta1NamespacedReplicaSetScaleResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readExtensionsV1beta1NamespacedReplicaSetScaleOperationSpec,
      callback) as Promise<Models.ReadExtensionsV1beta1NamespacedReplicaSetScaleResponse>;
  }

  /**
   * replace scale of the specified ReplicaSet
   * @param body
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceExtensionsV1beta1NamespacedReplicaSetScaleResponse>
   */
  replaceExtensionsV1beta1NamespacedReplicaSetScale(body: Models.Iok8sapiextensionsv1beta1Scale, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceExtensionsV1beta1NamespacedReplicaSetScaleOptionalParams): Promise<Models.ReplaceExtensionsV1beta1NamespacedReplicaSetScaleResponse>;
  /**
   * @param body
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replaceExtensionsV1beta1NamespacedReplicaSetScale(body: Models.Iok8sapiextensionsv1beta1Scale, name: string, namespace: string, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Scale>): void;
  /**
   * @param body
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceExtensionsV1beta1NamespacedReplicaSetScale(body: Models.Iok8sapiextensionsv1beta1Scale, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplaceExtensionsV1beta1NamespacedReplicaSetScaleOptionalParams, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Scale>): void;
  replaceExtensionsV1beta1NamespacedReplicaSetScale(body: Models.Iok8sapiextensionsv1beta1Scale, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceExtensionsV1beta1NamespacedReplicaSetScaleOptionalParams | msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Scale>, callback?: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Scale>): Promise<Models.ReplaceExtensionsV1beta1NamespacedReplicaSetScaleResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replaceExtensionsV1beta1NamespacedReplicaSetScaleOperationSpec,
      callback) as Promise<Models.ReplaceExtensionsV1beta1NamespacedReplicaSetScaleResponse>;
  }

  /**
   * partially update scale of the specified ReplicaSet
   * @param body
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchExtensionsV1beta1NamespacedReplicaSetScaleResponse>
   */
  patchExtensionsV1beta1NamespacedReplicaSetScale(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchExtensionsV1beta1NamespacedReplicaSetScaleOptionalParams): Promise<Models.PatchExtensionsV1beta1NamespacedReplicaSetScaleResponse>;
  /**
   * @param body
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  patchExtensionsV1beta1NamespacedReplicaSetScale(body: any, name: string, namespace: string, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Scale>): void;
  /**
   * @param body
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  patchExtensionsV1beta1NamespacedReplicaSetScale(body: any, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesPatchExtensionsV1beta1NamespacedReplicaSetScaleOptionalParams, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Scale>): void;
  patchExtensionsV1beta1NamespacedReplicaSetScale(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchExtensionsV1beta1NamespacedReplicaSetScaleOptionalParams | msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Scale>, callback?: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Scale>): Promise<Models.PatchExtensionsV1beta1NamespacedReplicaSetScaleResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      patchExtensionsV1beta1NamespacedReplicaSetScaleOperationSpec,
      callback) as Promise<Models.PatchExtensionsV1beta1NamespacedReplicaSetScaleResponse>;
  }

  /**
   * read status of the specified ReplicaSet
   * @param name name of the ReplicaSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadExtensionsV1beta1NamespacedReplicaSetStatusResponse>
   */
  readExtensionsV1beta1NamespacedReplicaSetStatus(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadExtensionsV1beta1NamespacedReplicaSetStatusOptionalParams): Promise<Models.ReadExtensionsV1beta1NamespacedReplicaSetStatusResponse>;
  /**
   * @param name name of the ReplicaSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readExtensionsV1beta1NamespacedReplicaSetStatus(name: string, namespace: string, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1ReplicaSet>): void;
  /**
   * @param name name of the ReplicaSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readExtensionsV1beta1NamespacedReplicaSetStatus(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadExtensionsV1beta1NamespacedReplicaSetStatusOptionalParams, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1ReplicaSet>): void;
  readExtensionsV1beta1NamespacedReplicaSetStatus(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadExtensionsV1beta1NamespacedReplicaSetStatusOptionalParams | msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1ReplicaSet>, callback?: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1ReplicaSet>): Promise<Models.ReadExtensionsV1beta1NamespacedReplicaSetStatusResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readExtensionsV1beta1NamespacedReplicaSetStatusOperationSpec,
      callback) as Promise<Models.ReadExtensionsV1beta1NamespacedReplicaSetStatusResponse>;
  }

  /**
   * replace status of the specified ReplicaSet
   * @param body
   * @param name name of the ReplicaSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceExtensionsV1beta1NamespacedReplicaSetStatusResponse>
   */
  replaceExtensionsV1beta1NamespacedReplicaSetStatus(body: Models.Iok8sapiextensionsv1beta1ReplicaSet, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceExtensionsV1beta1NamespacedReplicaSetStatusOptionalParams): Promise<Models.ReplaceExtensionsV1beta1NamespacedReplicaSetStatusResponse>;
  /**
   * @param body
   * @param name name of the ReplicaSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replaceExtensionsV1beta1NamespacedReplicaSetStatus(body: Models.Iok8sapiextensionsv1beta1ReplicaSet, name: string, namespace: string, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1ReplicaSet>): void;
  /**
   * @param body
   * @param name name of the ReplicaSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceExtensionsV1beta1NamespacedReplicaSetStatus(body: Models.Iok8sapiextensionsv1beta1ReplicaSet, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplaceExtensionsV1beta1NamespacedReplicaSetStatusOptionalParams, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1ReplicaSet>): void;
  replaceExtensionsV1beta1NamespacedReplicaSetStatus(body: Models.Iok8sapiextensionsv1beta1ReplicaSet, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceExtensionsV1beta1NamespacedReplicaSetStatusOptionalParams | msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1ReplicaSet>, callback?: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1ReplicaSet>): Promise<Models.ReplaceExtensionsV1beta1NamespacedReplicaSetStatusResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replaceExtensionsV1beta1NamespacedReplicaSetStatusOperationSpec,
      callback) as Promise<Models.ReplaceExtensionsV1beta1NamespacedReplicaSetStatusResponse>;
  }

  /**
   * partially update status of the specified ReplicaSet
   * @param body
   * @param name name of the ReplicaSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchExtensionsV1beta1NamespacedReplicaSetStatusResponse>
   */
  patchExtensionsV1beta1NamespacedReplicaSetStatus(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchExtensionsV1beta1NamespacedReplicaSetStatusOptionalParams): Promise<Models.PatchExtensionsV1beta1NamespacedReplicaSetStatusResponse>;
  /**
   * @param body
   * @param name name of the ReplicaSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  patchExtensionsV1beta1NamespacedReplicaSetStatus(body: any, name: string, namespace: string, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1ReplicaSet>): void;
  /**
   * @param body
   * @param name name of the ReplicaSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  patchExtensionsV1beta1NamespacedReplicaSetStatus(body: any, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesPatchExtensionsV1beta1NamespacedReplicaSetStatusOptionalParams, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1ReplicaSet>): void;
  patchExtensionsV1beta1NamespacedReplicaSetStatus(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchExtensionsV1beta1NamespacedReplicaSetStatusOptionalParams | msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1ReplicaSet>, callback?: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1ReplicaSet>): Promise<Models.PatchExtensionsV1beta1NamespacedReplicaSetStatusResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      patchExtensionsV1beta1NamespacedReplicaSetStatusOperationSpec,
      callback) as Promise<Models.PatchExtensionsV1beta1NamespacedReplicaSetStatusResponse>;
  }

  /**
   * read scale of the specified ReplicationControllerDummy
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadExtensionsV1beta1NamespacedReplicationControllerDummyScaleResponse>
   */
  readExtensionsV1beta1NamespacedReplicationControllerDummyScale(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadExtensionsV1beta1NamespacedReplicationControllerDummyScaleOptionalParams): Promise<Models.ReadExtensionsV1beta1NamespacedReplicationControllerDummyScaleResponse>;
  /**
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readExtensionsV1beta1NamespacedReplicationControllerDummyScale(name: string, namespace: string, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Scale>): void;
  /**
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readExtensionsV1beta1NamespacedReplicationControllerDummyScale(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadExtensionsV1beta1NamespacedReplicationControllerDummyScaleOptionalParams, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Scale>): void;
  readExtensionsV1beta1NamespacedReplicationControllerDummyScale(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadExtensionsV1beta1NamespacedReplicationControllerDummyScaleOptionalParams | msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Scale>, callback?: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Scale>): Promise<Models.ReadExtensionsV1beta1NamespacedReplicationControllerDummyScaleResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readExtensionsV1beta1NamespacedReplicationControllerDummyScaleOperationSpec,
      callback) as Promise<Models.ReadExtensionsV1beta1NamespacedReplicationControllerDummyScaleResponse>;
  }

  /**
   * replace scale of the specified ReplicationControllerDummy
   * @param body
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns
   * Promise<Models.ReplaceExtensionsV1beta1NamespacedReplicationControllerDummyScaleResponse>
   */
  replaceExtensionsV1beta1NamespacedReplicationControllerDummyScale(body: Models.Iok8sapiextensionsv1beta1Scale, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceExtensionsV1beta1NamespacedReplicationControllerDummyScaleOptionalParams): Promise<Models.ReplaceExtensionsV1beta1NamespacedReplicationControllerDummyScaleResponse>;
  /**
   * @param body
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replaceExtensionsV1beta1NamespacedReplicationControllerDummyScale(body: Models.Iok8sapiextensionsv1beta1Scale, name: string, namespace: string, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Scale>): void;
  /**
   * @param body
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceExtensionsV1beta1NamespacedReplicationControllerDummyScale(body: Models.Iok8sapiextensionsv1beta1Scale, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplaceExtensionsV1beta1NamespacedReplicationControllerDummyScaleOptionalParams, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Scale>): void;
  replaceExtensionsV1beta1NamespacedReplicationControllerDummyScale(body: Models.Iok8sapiextensionsv1beta1Scale, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceExtensionsV1beta1NamespacedReplicationControllerDummyScaleOptionalParams | msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Scale>, callback?: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Scale>): Promise<Models.ReplaceExtensionsV1beta1NamespacedReplicationControllerDummyScaleResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replaceExtensionsV1beta1NamespacedReplicationControllerDummyScaleOperationSpec,
      callback) as Promise<Models.ReplaceExtensionsV1beta1NamespacedReplicationControllerDummyScaleResponse>;
  }

  /**
   * partially update scale of the specified ReplicationControllerDummy
   * @param body
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchExtensionsV1beta1NamespacedReplicationControllerDummyScaleResponse>
   */
  patchExtensionsV1beta1NamespacedReplicationControllerDummyScale(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchExtensionsV1beta1NamespacedReplicationControllerDummyScaleOptionalParams): Promise<Models.PatchExtensionsV1beta1NamespacedReplicationControllerDummyScaleResponse>;
  /**
   * @param body
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  patchExtensionsV1beta1NamespacedReplicationControllerDummyScale(body: any, name: string, namespace: string, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Scale>): void;
  /**
   * @param body
   * @param name name of the Scale
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  patchExtensionsV1beta1NamespacedReplicationControllerDummyScale(body: any, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesPatchExtensionsV1beta1NamespacedReplicationControllerDummyScaleOptionalParams, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Scale>): void;
  patchExtensionsV1beta1NamespacedReplicationControllerDummyScale(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchExtensionsV1beta1NamespacedReplicationControllerDummyScaleOptionalParams | msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Scale>, callback?: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1Scale>): Promise<Models.PatchExtensionsV1beta1NamespacedReplicationControllerDummyScaleResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      patchExtensionsV1beta1NamespacedReplicationControllerDummyScaleOperationSpec,
      callback) as Promise<Models.PatchExtensionsV1beta1NamespacedReplicationControllerDummyScaleResponse>;
  }

  /**
   * list or watch objects of kind NetworkPolicy
   * @param [options] The optional parameters
   * @returns Promise<Models.ListExtensionsV1beta1NetworkPolicyForAllNamespacesResponse>
   */
  listExtensionsV1beta1NetworkPolicyForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListExtensionsV1beta1NetworkPolicyForAllNamespacesOptionalParams): Promise<Models.ListExtensionsV1beta1NetworkPolicyForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  listExtensionsV1beta1NetworkPolicyForAllNamespaces(callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1NetworkPolicyList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listExtensionsV1beta1NetworkPolicyForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesListExtensionsV1beta1NetworkPolicyForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1NetworkPolicyList>): void;
  listExtensionsV1beta1NetworkPolicyForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListExtensionsV1beta1NetworkPolicyForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1NetworkPolicyList>, callback?: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1NetworkPolicyList>): Promise<Models.ListExtensionsV1beta1NetworkPolicyForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listExtensionsV1beta1NetworkPolicyForAllNamespacesOperationSpec,
      callback) as Promise<Models.ListExtensionsV1beta1NetworkPolicyForAllNamespacesResponse>;
  }

  /**
   * list or watch objects of kind PodSecurityPolicy
   * @param [options] The optional parameters
   * @returns Promise<Models.ListExtensionsV1beta1PodSecurityPolicyResponse>
   */
  listExtensionsV1beta1PodSecurityPolicy(options?: Models.OpenShiftAPIwithKubernetesListExtensionsV1beta1PodSecurityPolicyOptionalParams): Promise<Models.ListExtensionsV1beta1PodSecurityPolicyResponse>;
  /**
   * @param callback The callback
   */
  listExtensionsV1beta1PodSecurityPolicy(callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1PodSecurityPolicyList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listExtensionsV1beta1PodSecurityPolicy(options: Models.OpenShiftAPIwithKubernetesListExtensionsV1beta1PodSecurityPolicyOptionalParams, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1PodSecurityPolicyList>): void;
  listExtensionsV1beta1PodSecurityPolicy(options?: Models.OpenShiftAPIwithKubernetesListExtensionsV1beta1PodSecurityPolicyOptionalParams | msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1PodSecurityPolicyList>, callback?: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1PodSecurityPolicyList>): Promise<Models.ListExtensionsV1beta1PodSecurityPolicyResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listExtensionsV1beta1PodSecurityPolicyOperationSpec,
      callback) as Promise<Models.ListExtensionsV1beta1PodSecurityPolicyResponse>;
  }

  /**
   * create a PodSecurityPolicy
   * @param body
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateExtensionsV1beta1PodSecurityPolicyResponse>
   */
  createExtensionsV1beta1PodSecurityPolicy(body: Models.Iok8sapiextensionsv1beta1PodSecurityPolicy, options?: Models.OpenShiftAPIwithKubernetesCreateExtensionsV1beta1PodSecurityPolicyOptionalParams): Promise<Models.CreateExtensionsV1beta1PodSecurityPolicyResponse>;
  /**
   * @param body
   * @param callback The callback
   */
  createExtensionsV1beta1PodSecurityPolicy(body: Models.Iok8sapiextensionsv1beta1PodSecurityPolicy, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1PodSecurityPolicy>): void;
  /**
   * @param body
   * @param options The optional parameters
   * @param callback The callback
   */
  createExtensionsV1beta1PodSecurityPolicy(body: Models.Iok8sapiextensionsv1beta1PodSecurityPolicy, options: Models.OpenShiftAPIwithKubernetesCreateExtensionsV1beta1PodSecurityPolicyOptionalParams, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1PodSecurityPolicy>): void;
  createExtensionsV1beta1PodSecurityPolicy(body: Models.Iok8sapiextensionsv1beta1PodSecurityPolicy, options?: Models.OpenShiftAPIwithKubernetesCreateExtensionsV1beta1PodSecurityPolicyOptionalParams | msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1PodSecurityPolicy>, callback?: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1PodSecurityPolicy>): Promise<Models.CreateExtensionsV1beta1PodSecurityPolicyResponse> {
    return this.sendOperationRequest(
      {
        body,
        options
      },
      createExtensionsV1beta1PodSecurityPolicyOperationSpec,
      callback) as Promise<Models.CreateExtensionsV1beta1PodSecurityPolicyResponse>;
  }

  /**
   * delete collection of PodSecurityPolicy
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteExtensionsV1beta1CollectionPodSecurityPolicyResponse>
   */
  deleteExtensionsV1beta1CollectionPodSecurityPolicy(options?: Models.OpenShiftAPIwithKubernetesDeleteExtensionsV1beta1CollectionPodSecurityPolicyOptionalParams): Promise<Models.DeleteExtensionsV1beta1CollectionPodSecurityPolicyResponse>;
  /**
   * @param callback The callback
   */
  deleteExtensionsV1beta1CollectionPodSecurityPolicy(callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteExtensionsV1beta1CollectionPodSecurityPolicy(options: Models.OpenShiftAPIwithKubernetesDeleteExtensionsV1beta1CollectionPodSecurityPolicyOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteExtensionsV1beta1CollectionPodSecurityPolicy(options?: Models.OpenShiftAPIwithKubernetesDeleteExtensionsV1beta1CollectionPodSecurityPolicyOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteExtensionsV1beta1CollectionPodSecurityPolicyResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      deleteExtensionsV1beta1CollectionPodSecurityPolicyOperationSpec,
      callback) as Promise<Models.DeleteExtensionsV1beta1CollectionPodSecurityPolicyResponse>;
  }

  /**
   * read the specified PodSecurityPolicy
   * @param name name of the PodSecurityPolicy
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadExtensionsV1beta1PodSecurityPolicyResponse>
   */
  readExtensionsV1beta1PodSecurityPolicy(name: string, options?: Models.OpenShiftAPIwithKubernetesReadExtensionsV1beta1PodSecurityPolicyOptionalParams): Promise<Models.ReadExtensionsV1beta1PodSecurityPolicyResponse>;
  /**
   * @param name name of the PodSecurityPolicy
   * @param callback The callback
   */
  readExtensionsV1beta1PodSecurityPolicy(name: string, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1PodSecurityPolicy>): void;
  /**
   * @param name name of the PodSecurityPolicy
   * @param options The optional parameters
   * @param callback The callback
   */
  readExtensionsV1beta1PodSecurityPolicy(name: string, options: Models.OpenShiftAPIwithKubernetesReadExtensionsV1beta1PodSecurityPolicyOptionalParams, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1PodSecurityPolicy>): void;
  readExtensionsV1beta1PodSecurityPolicy(name: string, options?: Models.OpenShiftAPIwithKubernetesReadExtensionsV1beta1PodSecurityPolicyOptionalParams | msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1PodSecurityPolicy>, callback?: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1PodSecurityPolicy>): Promise<Models.ReadExtensionsV1beta1PodSecurityPolicyResponse> {
    return this.sendOperationRequest(
      {
        name,
        options
      },
      readExtensionsV1beta1PodSecurityPolicyOperationSpec,
      callback) as Promise<Models.ReadExtensionsV1beta1PodSecurityPolicyResponse>;
  }

  /**
   * replace the specified PodSecurityPolicy
   * @param body
   * @param name name of the PodSecurityPolicy
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceExtensionsV1beta1PodSecurityPolicyResponse>
   */
  replaceExtensionsV1beta1PodSecurityPolicy(body: Models.Iok8sapiextensionsv1beta1PodSecurityPolicy, name: string, options?: Models.OpenShiftAPIwithKubernetesReplaceExtensionsV1beta1PodSecurityPolicyOptionalParams): Promise<Models.ReplaceExtensionsV1beta1PodSecurityPolicyResponse>;
  /**
   * @param body
   * @param name name of the PodSecurityPolicy
   * @param callback The callback
   */
  replaceExtensionsV1beta1PodSecurityPolicy(body: Models.Iok8sapiextensionsv1beta1PodSecurityPolicy, name: string, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1PodSecurityPolicy>): void;
  /**
   * @param body
   * @param name name of the PodSecurityPolicy
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceExtensionsV1beta1PodSecurityPolicy(body: Models.Iok8sapiextensionsv1beta1PodSecurityPolicy, name: string, options: Models.OpenShiftAPIwithKubernetesReplaceExtensionsV1beta1PodSecurityPolicyOptionalParams, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1PodSecurityPolicy>): void;
  replaceExtensionsV1beta1PodSecurityPolicy(body: Models.Iok8sapiextensionsv1beta1PodSecurityPolicy, name: string, options?: Models.OpenShiftAPIwithKubernetesReplaceExtensionsV1beta1PodSecurityPolicyOptionalParams | msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1PodSecurityPolicy>, callback?: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1PodSecurityPolicy>): Promise<Models.ReplaceExtensionsV1beta1PodSecurityPolicyResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      replaceExtensionsV1beta1PodSecurityPolicyOperationSpec,
      callback) as Promise<Models.ReplaceExtensionsV1beta1PodSecurityPolicyResponse>;
  }

  /**
   * delete a PodSecurityPolicy
   * @param body
   * @param name name of the PodSecurityPolicy
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteExtensionsV1beta1PodSecurityPolicyResponse>
   */
  deleteExtensionsV1beta1PodSecurityPolicy(body: Models.V1DeleteOptions, name: string, options?: Models.OpenShiftAPIwithKubernetesDeleteExtensionsV1beta1PodSecurityPolicyOptionalParams): Promise<Models.DeleteExtensionsV1beta1PodSecurityPolicyResponse>;
  /**
   * @param body
   * @param name name of the PodSecurityPolicy
   * @param callback The callback
   */
  deleteExtensionsV1beta1PodSecurityPolicy(body: Models.V1DeleteOptions, name: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param name name of the PodSecurityPolicy
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteExtensionsV1beta1PodSecurityPolicy(body: Models.V1DeleteOptions, name: string, options: Models.OpenShiftAPIwithKubernetesDeleteExtensionsV1beta1PodSecurityPolicyOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteExtensionsV1beta1PodSecurityPolicy(body: Models.V1DeleteOptions, name: string, options?: Models.OpenShiftAPIwithKubernetesDeleteExtensionsV1beta1PodSecurityPolicyOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteExtensionsV1beta1PodSecurityPolicyResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      deleteExtensionsV1beta1PodSecurityPolicyOperationSpec,
      callback) as Promise<Models.DeleteExtensionsV1beta1PodSecurityPolicyResponse>;
  }

  /**
   * partially update the specified PodSecurityPolicy
   * @param body
   * @param name name of the PodSecurityPolicy
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchExtensionsV1beta1PodSecurityPolicyResponse>
   */
  patchExtensionsV1beta1PodSecurityPolicy(body: any, name: string, options?: Models.OpenShiftAPIwithKubernetesPatchExtensionsV1beta1PodSecurityPolicyOptionalParams): Promise<Models.PatchExtensionsV1beta1PodSecurityPolicyResponse>;
  /**
   * @param body
   * @param name name of the PodSecurityPolicy
   * @param callback The callback
   */
  patchExtensionsV1beta1PodSecurityPolicy(body: any, name: string, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1PodSecurityPolicy>): void;
  /**
   * @param body
   * @param name name of the PodSecurityPolicy
   * @param options The optional parameters
   * @param callback The callback
   */
  patchExtensionsV1beta1PodSecurityPolicy(body: any, name: string, options: Models.OpenShiftAPIwithKubernetesPatchExtensionsV1beta1PodSecurityPolicyOptionalParams, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1PodSecurityPolicy>): void;
  patchExtensionsV1beta1PodSecurityPolicy(body: any, name: string, options?: Models.OpenShiftAPIwithKubernetesPatchExtensionsV1beta1PodSecurityPolicyOptionalParams | msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1PodSecurityPolicy>, callback?: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1PodSecurityPolicy>): Promise<Models.PatchExtensionsV1beta1PodSecurityPolicyResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      patchExtensionsV1beta1PodSecurityPolicyOperationSpec,
      callback) as Promise<Models.PatchExtensionsV1beta1PodSecurityPolicyResponse>;
  }

  /**
   * list or watch objects of kind ReplicaSet
   * @param [options] The optional parameters
   * @returns Promise<Models.ListExtensionsV1beta1ReplicaSetForAllNamespacesResponse>
   */
  listExtensionsV1beta1ReplicaSetForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListExtensionsV1beta1ReplicaSetForAllNamespacesOptionalParams): Promise<Models.ListExtensionsV1beta1ReplicaSetForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  listExtensionsV1beta1ReplicaSetForAllNamespaces(callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1ReplicaSetList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listExtensionsV1beta1ReplicaSetForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesListExtensionsV1beta1ReplicaSetForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1ReplicaSetList>): void;
  listExtensionsV1beta1ReplicaSetForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListExtensionsV1beta1ReplicaSetForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1ReplicaSetList>, callback?: msRest.ServiceCallback<Models.Iok8sapiextensionsv1beta1ReplicaSetList>): Promise<Models.ListExtensionsV1beta1ReplicaSetForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listExtensionsV1beta1ReplicaSetForAllNamespacesOperationSpec,
      callback) as Promise<Models.ListExtensionsV1beta1ReplicaSetForAllNamespacesResponse>;
  }

  /**
   * watch individual changes to a list of DaemonSet
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchExtensionsV1beta1DaemonSetListForAllNamespacesResponse>
   */
  watchExtensionsV1beta1DaemonSetListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchExtensionsV1beta1DaemonSetListForAllNamespacesOptionalParams): Promise<Models.WatchExtensionsV1beta1DaemonSetListForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  watchExtensionsV1beta1DaemonSetListForAllNamespaces(callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  watchExtensionsV1beta1DaemonSetListForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesWatchExtensionsV1beta1DaemonSetListForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchExtensionsV1beta1DaemonSetListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchExtensionsV1beta1DaemonSetListForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchExtensionsV1beta1DaemonSetListForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      watchExtensionsV1beta1DaemonSetListForAllNamespacesOperationSpec,
      callback) as Promise<Models.WatchExtensionsV1beta1DaemonSetListForAllNamespacesResponse>;
  }

  /**
   * watch individual changes to a list of Deployment
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchExtensionsV1beta1DeploymentListForAllNamespacesResponse>
   */
  watchExtensionsV1beta1DeploymentListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchExtensionsV1beta1DeploymentListForAllNamespacesOptionalParams): Promise<Models.WatchExtensionsV1beta1DeploymentListForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  watchExtensionsV1beta1DeploymentListForAllNamespaces(callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  watchExtensionsV1beta1DeploymentListForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesWatchExtensionsV1beta1DeploymentListForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchExtensionsV1beta1DeploymentListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchExtensionsV1beta1DeploymentListForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchExtensionsV1beta1DeploymentListForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      watchExtensionsV1beta1DeploymentListForAllNamespacesOperationSpec,
      callback) as Promise<Models.WatchExtensionsV1beta1DeploymentListForAllNamespacesResponse>;
  }

  /**
   * watch individual changes to a list of Ingress
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchExtensionsV1beta1IngressListForAllNamespacesResponse>
   */
  watchExtensionsV1beta1IngressListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchExtensionsV1beta1IngressListForAllNamespacesOptionalParams): Promise<Models.WatchExtensionsV1beta1IngressListForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  watchExtensionsV1beta1IngressListForAllNamespaces(callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  watchExtensionsV1beta1IngressListForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesWatchExtensionsV1beta1IngressListForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchExtensionsV1beta1IngressListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchExtensionsV1beta1IngressListForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchExtensionsV1beta1IngressListForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      watchExtensionsV1beta1IngressListForAllNamespacesOperationSpec,
      callback) as Promise<Models.WatchExtensionsV1beta1IngressListForAllNamespacesResponse>;
  }

  /**
   * watch individual changes to a list of DaemonSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchExtensionsV1beta1NamespacedDaemonSetListResponse>
   */
  watchExtensionsV1beta1NamespacedDaemonSetList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchExtensionsV1beta1NamespacedDaemonSetListOptionalParams): Promise<Models.WatchExtensionsV1beta1NamespacedDaemonSetListResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchExtensionsV1beta1NamespacedDaemonSetList(namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchExtensionsV1beta1NamespacedDaemonSetList(namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchExtensionsV1beta1NamespacedDaemonSetListOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchExtensionsV1beta1NamespacedDaemonSetList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchExtensionsV1beta1NamespacedDaemonSetListOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchExtensionsV1beta1NamespacedDaemonSetListResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      watchExtensionsV1beta1NamespacedDaemonSetListOperationSpec,
      callback) as Promise<Models.WatchExtensionsV1beta1NamespacedDaemonSetListResponse>;
  }

  /**
   * watch changes to an object of kind DaemonSet
   * @param name name of the DaemonSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchExtensionsV1beta1NamespacedDaemonSetResponse>
   */
  watchExtensionsV1beta1NamespacedDaemonSet(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchExtensionsV1beta1NamespacedDaemonSetOptionalParams): Promise<Models.WatchExtensionsV1beta1NamespacedDaemonSetResponse>;
  /**
   * @param name name of the DaemonSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchExtensionsV1beta1NamespacedDaemonSet(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param name name of the DaemonSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchExtensionsV1beta1NamespacedDaemonSet(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchExtensionsV1beta1NamespacedDaemonSetOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchExtensionsV1beta1NamespacedDaemonSet(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchExtensionsV1beta1NamespacedDaemonSetOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchExtensionsV1beta1NamespacedDaemonSetResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      watchExtensionsV1beta1NamespacedDaemonSetOperationSpec,
      callback) as Promise<Models.WatchExtensionsV1beta1NamespacedDaemonSetResponse>;
  }

  /**
   * watch individual changes to a list of Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchExtensionsV1beta1NamespacedDeploymentListResponse>
   */
  watchExtensionsV1beta1NamespacedDeploymentList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchExtensionsV1beta1NamespacedDeploymentListOptionalParams): Promise<Models.WatchExtensionsV1beta1NamespacedDeploymentListResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchExtensionsV1beta1NamespacedDeploymentList(namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchExtensionsV1beta1NamespacedDeploymentList(namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchExtensionsV1beta1NamespacedDeploymentListOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchExtensionsV1beta1NamespacedDeploymentList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchExtensionsV1beta1NamespacedDeploymentListOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchExtensionsV1beta1NamespacedDeploymentListResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      watchExtensionsV1beta1NamespacedDeploymentListOperationSpec,
      callback) as Promise<Models.WatchExtensionsV1beta1NamespacedDeploymentListResponse>;
  }

  /**
   * watch changes to an object of kind Deployment
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchExtensionsV1beta1NamespacedDeploymentResponse>
   */
  watchExtensionsV1beta1NamespacedDeployment(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchExtensionsV1beta1NamespacedDeploymentOptionalParams): Promise<Models.WatchExtensionsV1beta1NamespacedDeploymentResponse>;
  /**
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchExtensionsV1beta1NamespacedDeployment(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param name name of the Deployment
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchExtensionsV1beta1NamespacedDeployment(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchExtensionsV1beta1NamespacedDeploymentOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchExtensionsV1beta1NamespacedDeployment(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchExtensionsV1beta1NamespacedDeploymentOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchExtensionsV1beta1NamespacedDeploymentResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      watchExtensionsV1beta1NamespacedDeploymentOperationSpec,
      callback) as Promise<Models.WatchExtensionsV1beta1NamespacedDeploymentResponse>;
  }

  /**
   * watch individual changes to a list of Ingress
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchExtensionsV1beta1NamespacedIngressListResponse>
   */
  watchExtensionsV1beta1NamespacedIngressList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchExtensionsV1beta1NamespacedIngressListOptionalParams): Promise<Models.WatchExtensionsV1beta1NamespacedIngressListResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchExtensionsV1beta1NamespacedIngressList(namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchExtensionsV1beta1NamespacedIngressList(namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchExtensionsV1beta1NamespacedIngressListOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchExtensionsV1beta1NamespacedIngressList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchExtensionsV1beta1NamespacedIngressListOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchExtensionsV1beta1NamespacedIngressListResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      watchExtensionsV1beta1NamespacedIngressListOperationSpec,
      callback) as Promise<Models.WatchExtensionsV1beta1NamespacedIngressListResponse>;
  }

  /**
   * watch changes to an object of kind Ingress
   * @param name name of the Ingress
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchExtensionsV1beta1NamespacedIngressResponse>
   */
  watchExtensionsV1beta1NamespacedIngress(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchExtensionsV1beta1NamespacedIngressOptionalParams): Promise<Models.WatchExtensionsV1beta1NamespacedIngressResponse>;
  /**
   * @param name name of the Ingress
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchExtensionsV1beta1NamespacedIngress(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param name name of the Ingress
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchExtensionsV1beta1NamespacedIngress(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchExtensionsV1beta1NamespacedIngressOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchExtensionsV1beta1NamespacedIngress(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchExtensionsV1beta1NamespacedIngressOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchExtensionsV1beta1NamespacedIngressResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      watchExtensionsV1beta1NamespacedIngressOperationSpec,
      callback) as Promise<Models.WatchExtensionsV1beta1NamespacedIngressResponse>;
  }

  /**
   * watch individual changes to a list of NetworkPolicy
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchExtensionsV1beta1NamespacedNetworkPolicyListResponse>
   */
  watchExtensionsV1beta1NamespacedNetworkPolicyList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchExtensionsV1beta1NamespacedNetworkPolicyListOptionalParams): Promise<Models.WatchExtensionsV1beta1NamespacedNetworkPolicyListResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchExtensionsV1beta1NamespacedNetworkPolicyList(namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchExtensionsV1beta1NamespacedNetworkPolicyList(namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchExtensionsV1beta1NamespacedNetworkPolicyListOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchExtensionsV1beta1NamespacedNetworkPolicyList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchExtensionsV1beta1NamespacedNetworkPolicyListOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchExtensionsV1beta1NamespacedNetworkPolicyListResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      watchExtensionsV1beta1NamespacedNetworkPolicyListOperationSpec,
      callback) as Promise<Models.WatchExtensionsV1beta1NamespacedNetworkPolicyListResponse>;
  }

  /**
   * watch changes to an object of kind NetworkPolicy
   * @param name name of the NetworkPolicy
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchExtensionsV1beta1NamespacedNetworkPolicyResponse>
   */
  watchExtensionsV1beta1NamespacedNetworkPolicy(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchExtensionsV1beta1NamespacedNetworkPolicyOptionalParams): Promise<Models.WatchExtensionsV1beta1NamespacedNetworkPolicyResponse>;
  /**
   * @param name name of the NetworkPolicy
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchExtensionsV1beta1NamespacedNetworkPolicy(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param name name of the NetworkPolicy
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchExtensionsV1beta1NamespacedNetworkPolicy(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchExtensionsV1beta1NamespacedNetworkPolicyOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchExtensionsV1beta1NamespacedNetworkPolicy(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchExtensionsV1beta1NamespacedNetworkPolicyOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchExtensionsV1beta1NamespacedNetworkPolicyResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      watchExtensionsV1beta1NamespacedNetworkPolicyOperationSpec,
      callback) as Promise<Models.WatchExtensionsV1beta1NamespacedNetworkPolicyResponse>;
  }

  /**
   * watch individual changes to a list of ReplicaSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchExtensionsV1beta1NamespacedReplicaSetListResponse>
   */
  watchExtensionsV1beta1NamespacedReplicaSetList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchExtensionsV1beta1NamespacedReplicaSetListOptionalParams): Promise<Models.WatchExtensionsV1beta1NamespacedReplicaSetListResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchExtensionsV1beta1NamespacedReplicaSetList(namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchExtensionsV1beta1NamespacedReplicaSetList(namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchExtensionsV1beta1NamespacedReplicaSetListOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchExtensionsV1beta1NamespacedReplicaSetList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchExtensionsV1beta1NamespacedReplicaSetListOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchExtensionsV1beta1NamespacedReplicaSetListResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      watchExtensionsV1beta1NamespacedReplicaSetListOperationSpec,
      callback) as Promise<Models.WatchExtensionsV1beta1NamespacedReplicaSetListResponse>;
  }

  /**
   * watch changes to an object of kind ReplicaSet
   * @param name name of the ReplicaSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchExtensionsV1beta1NamespacedReplicaSetResponse>
   */
  watchExtensionsV1beta1NamespacedReplicaSet(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchExtensionsV1beta1NamespacedReplicaSetOptionalParams): Promise<Models.WatchExtensionsV1beta1NamespacedReplicaSetResponse>;
  /**
   * @param name name of the ReplicaSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchExtensionsV1beta1NamespacedReplicaSet(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param name name of the ReplicaSet
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchExtensionsV1beta1NamespacedReplicaSet(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchExtensionsV1beta1NamespacedReplicaSetOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchExtensionsV1beta1NamespacedReplicaSet(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchExtensionsV1beta1NamespacedReplicaSetOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchExtensionsV1beta1NamespacedReplicaSetResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      watchExtensionsV1beta1NamespacedReplicaSetOperationSpec,
      callback) as Promise<Models.WatchExtensionsV1beta1NamespacedReplicaSetResponse>;
  }

  /**
   * watch individual changes to a list of NetworkPolicy
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchExtensionsV1beta1NetworkPolicyListForAllNamespacesResponse>
   */
  watchExtensionsV1beta1NetworkPolicyListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchExtensionsV1beta1NetworkPolicyListForAllNamespacesOptionalParams): Promise<Models.WatchExtensionsV1beta1NetworkPolicyListForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  watchExtensionsV1beta1NetworkPolicyListForAllNamespaces(callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  watchExtensionsV1beta1NetworkPolicyListForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesWatchExtensionsV1beta1NetworkPolicyListForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchExtensionsV1beta1NetworkPolicyListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchExtensionsV1beta1NetworkPolicyListForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchExtensionsV1beta1NetworkPolicyListForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      watchExtensionsV1beta1NetworkPolicyListForAllNamespacesOperationSpec,
      callback) as Promise<Models.WatchExtensionsV1beta1NetworkPolicyListForAllNamespacesResponse>;
  }

  /**
   * watch individual changes to a list of PodSecurityPolicy
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchExtensionsV1beta1PodSecurityPolicyListResponse>
   */
  watchExtensionsV1beta1PodSecurityPolicyList(options?: Models.OpenShiftAPIwithKubernetesWatchExtensionsV1beta1PodSecurityPolicyListOptionalParams): Promise<Models.WatchExtensionsV1beta1PodSecurityPolicyListResponse>;
  /**
   * @param callback The callback
   */
  watchExtensionsV1beta1PodSecurityPolicyList(callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  watchExtensionsV1beta1PodSecurityPolicyList(options: Models.OpenShiftAPIwithKubernetesWatchExtensionsV1beta1PodSecurityPolicyListOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchExtensionsV1beta1PodSecurityPolicyList(options?: Models.OpenShiftAPIwithKubernetesWatchExtensionsV1beta1PodSecurityPolicyListOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchExtensionsV1beta1PodSecurityPolicyListResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      watchExtensionsV1beta1PodSecurityPolicyListOperationSpec,
      callback) as Promise<Models.WatchExtensionsV1beta1PodSecurityPolicyListResponse>;
  }

  /**
   * watch changes to an object of kind PodSecurityPolicy
   * @param name name of the PodSecurityPolicy
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchExtensionsV1beta1PodSecurityPolicyResponse>
   */
  watchExtensionsV1beta1PodSecurityPolicy(name: string, options?: Models.OpenShiftAPIwithKubernetesWatchExtensionsV1beta1PodSecurityPolicyOptionalParams): Promise<Models.WatchExtensionsV1beta1PodSecurityPolicyResponse>;
  /**
   * @param name name of the PodSecurityPolicy
   * @param callback The callback
   */
  watchExtensionsV1beta1PodSecurityPolicy(name: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param name name of the PodSecurityPolicy
   * @param options The optional parameters
   * @param callback The callback
   */
  watchExtensionsV1beta1PodSecurityPolicy(name: string, options: Models.OpenShiftAPIwithKubernetesWatchExtensionsV1beta1PodSecurityPolicyOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchExtensionsV1beta1PodSecurityPolicy(name: string, options?: Models.OpenShiftAPIwithKubernetesWatchExtensionsV1beta1PodSecurityPolicyOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchExtensionsV1beta1PodSecurityPolicyResponse> {
    return this.sendOperationRequest(
      {
        name,
        options
      },
      watchExtensionsV1beta1PodSecurityPolicyOperationSpec,
      callback) as Promise<Models.WatchExtensionsV1beta1PodSecurityPolicyResponse>;
  }

  /**
   * watch individual changes to a list of ReplicaSet
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchExtensionsV1beta1ReplicaSetListForAllNamespacesResponse>
   */
  watchExtensionsV1beta1ReplicaSetListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchExtensionsV1beta1ReplicaSetListForAllNamespacesOptionalParams): Promise<Models.WatchExtensionsV1beta1ReplicaSetListForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  watchExtensionsV1beta1ReplicaSetListForAllNamespaces(callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  watchExtensionsV1beta1ReplicaSetListForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesWatchExtensionsV1beta1ReplicaSetListForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchExtensionsV1beta1ReplicaSetListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchExtensionsV1beta1ReplicaSetListForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchExtensionsV1beta1ReplicaSetListForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      watchExtensionsV1beta1ReplicaSetListForAllNamespacesOperationSpec,
      callback) as Promise<Models.WatchExtensionsV1beta1ReplicaSetListForAllNamespacesResponse>;
  }

  /**
   * get information of a group
   * @param [options] The optional parameters
   * @returns Promise<Models.GetImageOpenshiftIoAPIGroupResponse>
   */
  getImageOpenshiftIoAPIGroup(options?: msRest.RequestOptionsBase): Promise<Models.GetImageOpenshiftIoAPIGroupResponse>;
  /**
   * @param callback The callback
   */
  getImageOpenshiftIoAPIGroup(callback: msRest.ServiceCallback<Models.V1APIGroup>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getImageOpenshiftIoAPIGroup(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.V1APIGroup>): void;
  getImageOpenshiftIoAPIGroup(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.V1APIGroup>, callback?: msRest.ServiceCallback<Models.V1APIGroup>): Promise<Models.GetImageOpenshiftIoAPIGroupResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getImageOpenshiftIoAPIGroupOperationSpec,
      callback) as Promise<Models.GetImageOpenshiftIoAPIGroupResponse>;
  }

  /**
   * get available resources
   * @param [options] The optional parameters
   * @returns Promise<Models.GetImageOpenshiftIoV1APIResourcesResponse>
   */
  getImageOpenshiftIoV1APIResources(options?: msRest.RequestOptionsBase): Promise<Models.GetImageOpenshiftIoV1APIResourcesResponse>;
  /**
   * @param callback The callback
   */
  getImageOpenshiftIoV1APIResources(callback: msRest.ServiceCallback<Models.V1APIResourceList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getImageOpenshiftIoV1APIResources(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.V1APIResourceList>): void;
  getImageOpenshiftIoV1APIResources(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.V1APIResourceList>, callback?: msRest.ServiceCallback<Models.V1APIResourceList>): Promise<Models.GetImageOpenshiftIoV1APIResourcesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getImageOpenshiftIoV1APIResourcesOperationSpec,
      callback) as Promise<Models.GetImageOpenshiftIoV1APIResourcesResponse>;
  }

  /**
   * list or watch objects of kind Image
   * @param [options] The optional parameters
   * @returns Promise<Models.ListImageOpenshiftIoV1ImageResponse>
   */
  listImageOpenshiftIoV1Image(options?: Models.OpenShiftAPIwithKubernetesListImageOpenshiftIoV1ImageOptionalParams): Promise<Models.ListImageOpenshiftIoV1ImageResponse>;
  /**
   * @param callback The callback
   */
  listImageOpenshiftIoV1Image(callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1ImageList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listImageOpenshiftIoV1Image(options: Models.OpenShiftAPIwithKubernetesListImageOpenshiftIoV1ImageOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1ImageList>): void;
  listImageOpenshiftIoV1Image(options?: Models.OpenShiftAPIwithKubernetesListImageOpenshiftIoV1ImageOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1ImageList>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1ImageList>): Promise<Models.ListImageOpenshiftIoV1ImageResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listImageOpenshiftIoV1ImageOperationSpec,
      callback) as Promise<Models.ListImageOpenshiftIoV1ImageResponse>;
  }

  /**
   * create an Image
   * @param body
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateImageOpenshiftIoV1ImageResponse>
   */
  createImageOpenshiftIoV1Image(body: Models.Comgithubopenshiftapiimagev1Image, options?: Models.OpenShiftAPIwithKubernetesCreateImageOpenshiftIoV1ImageOptionalParams): Promise<Models.CreateImageOpenshiftIoV1ImageResponse>;
  /**
   * @param body
   * @param callback The callback
   */
  createImageOpenshiftIoV1Image(body: Models.Comgithubopenshiftapiimagev1Image, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1Image>): void;
  /**
   * @param body
   * @param options The optional parameters
   * @param callback The callback
   */
  createImageOpenshiftIoV1Image(body: Models.Comgithubopenshiftapiimagev1Image, options: Models.OpenShiftAPIwithKubernetesCreateImageOpenshiftIoV1ImageOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1Image>): void;
  createImageOpenshiftIoV1Image(body: Models.Comgithubopenshiftapiimagev1Image, options?: Models.OpenShiftAPIwithKubernetesCreateImageOpenshiftIoV1ImageOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1Image>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1Image>): Promise<Models.CreateImageOpenshiftIoV1ImageResponse> {
    return this.sendOperationRequest(
      {
        body,
        options
      },
      createImageOpenshiftIoV1ImageOperationSpec,
      callback) as Promise<Models.CreateImageOpenshiftIoV1ImageResponse>;
  }

  /**
   * delete collection of Image
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteImageOpenshiftIoV1CollectionImageResponse>
   */
  deleteImageOpenshiftIoV1CollectionImage(options?: Models.OpenShiftAPIwithKubernetesDeleteImageOpenshiftIoV1CollectionImageOptionalParams): Promise<Models.DeleteImageOpenshiftIoV1CollectionImageResponse>;
  /**
   * @param callback The callback
   */
  deleteImageOpenshiftIoV1CollectionImage(callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteImageOpenshiftIoV1CollectionImage(options: Models.OpenShiftAPIwithKubernetesDeleteImageOpenshiftIoV1CollectionImageOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteImageOpenshiftIoV1CollectionImage(options?: Models.OpenShiftAPIwithKubernetesDeleteImageOpenshiftIoV1CollectionImageOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteImageOpenshiftIoV1CollectionImageResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      deleteImageOpenshiftIoV1CollectionImageOperationSpec,
      callback) as Promise<Models.DeleteImageOpenshiftIoV1CollectionImageResponse>;
  }

  /**
   * read the specified Image
   * @param name name of the Image
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadImageOpenshiftIoV1ImageResponse>
   */
  readImageOpenshiftIoV1Image(name: string, options?: Models.OpenShiftAPIwithKubernetesReadImageOpenshiftIoV1ImageOptionalParams): Promise<Models.ReadImageOpenshiftIoV1ImageResponse>;
  /**
   * @param name name of the Image
   * @param callback The callback
   */
  readImageOpenshiftIoV1Image(name: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1Image>): void;
  /**
   * @param name name of the Image
   * @param options The optional parameters
   * @param callback The callback
   */
  readImageOpenshiftIoV1Image(name: string, options: Models.OpenShiftAPIwithKubernetesReadImageOpenshiftIoV1ImageOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1Image>): void;
  readImageOpenshiftIoV1Image(name: string, options?: Models.OpenShiftAPIwithKubernetesReadImageOpenshiftIoV1ImageOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1Image>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1Image>): Promise<Models.ReadImageOpenshiftIoV1ImageResponse> {
    return this.sendOperationRequest(
      {
        name,
        options
      },
      readImageOpenshiftIoV1ImageOperationSpec,
      callback) as Promise<Models.ReadImageOpenshiftIoV1ImageResponse>;
  }

  /**
   * replace the specified Image
   * @param body
   * @param name name of the Image
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceImageOpenshiftIoV1ImageResponse>
   */
  replaceImageOpenshiftIoV1Image(body: Models.Comgithubopenshiftapiimagev1Image, name: string, options?: Models.OpenShiftAPIwithKubernetesReplaceImageOpenshiftIoV1ImageOptionalParams): Promise<Models.ReplaceImageOpenshiftIoV1ImageResponse>;
  /**
   * @param body
   * @param name name of the Image
   * @param callback The callback
   */
  replaceImageOpenshiftIoV1Image(body: Models.Comgithubopenshiftapiimagev1Image, name: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1Image>): void;
  /**
   * @param body
   * @param name name of the Image
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceImageOpenshiftIoV1Image(body: Models.Comgithubopenshiftapiimagev1Image, name: string, options: Models.OpenShiftAPIwithKubernetesReplaceImageOpenshiftIoV1ImageOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1Image>): void;
  replaceImageOpenshiftIoV1Image(body: Models.Comgithubopenshiftapiimagev1Image, name: string, options?: Models.OpenShiftAPIwithKubernetesReplaceImageOpenshiftIoV1ImageOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1Image>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1Image>): Promise<Models.ReplaceImageOpenshiftIoV1ImageResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      replaceImageOpenshiftIoV1ImageOperationSpec,
      callback) as Promise<Models.ReplaceImageOpenshiftIoV1ImageResponse>;
  }

  /**
   * delete an Image
   * @param body
   * @param name name of the Image
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteImageOpenshiftIoV1ImageResponse>
   */
  deleteImageOpenshiftIoV1Image(body: Models.V1DeleteOptions, name: string, options?: Models.OpenShiftAPIwithKubernetesDeleteImageOpenshiftIoV1ImageOptionalParams): Promise<Models.DeleteImageOpenshiftIoV1ImageResponse>;
  /**
   * @param body
   * @param name name of the Image
   * @param callback The callback
   */
  deleteImageOpenshiftIoV1Image(body: Models.V1DeleteOptions, name: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param name name of the Image
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteImageOpenshiftIoV1Image(body: Models.V1DeleteOptions, name: string, options: Models.OpenShiftAPIwithKubernetesDeleteImageOpenshiftIoV1ImageOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteImageOpenshiftIoV1Image(body: Models.V1DeleteOptions, name: string, options?: Models.OpenShiftAPIwithKubernetesDeleteImageOpenshiftIoV1ImageOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteImageOpenshiftIoV1ImageResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      deleteImageOpenshiftIoV1ImageOperationSpec,
      callback) as Promise<Models.DeleteImageOpenshiftIoV1ImageResponse>;
  }

  /**
   * partially update the specified Image
   * @param body
   * @param name name of the Image
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchImageOpenshiftIoV1ImageResponse>
   */
  patchImageOpenshiftIoV1Image(body: any, name: string, options?: Models.OpenShiftAPIwithKubernetesPatchImageOpenshiftIoV1ImageOptionalParams): Promise<Models.PatchImageOpenshiftIoV1ImageResponse>;
  /**
   * @param body
   * @param name name of the Image
   * @param callback The callback
   */
  patchImageOpenshiftIoV1Image(body: any, name: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1Image>): void;
  /**
   * @param body
   * @param name name of the Image
   * @param options The optional parameters
   * @param callback The callback
   */
  patchImageOpenshiftIoV1Image(body: any, name: string, options: Models.OpenShiftAPIwithKubernetesPatchImageOpenshiftIoV1ImageOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1Image>): void;
  patchImageOpenshiftIoV1Image(body: any, name: string, options?: Models.OpenShiftAPIwithKubernetesPatchImageOpenshiftIoV1ImageOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1Image>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1Image>): Promise<Models.PatchImageOpenshiftIoV1ImageResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      patchImageOpenshiftIoV1ImageOperationSpec,
      callback) as Promise<Models.PatchImageOpenshiftIoV1ImageResponse>;
  }

  /**
   * create an ImageSignature
   * @param body
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateImageOpenshiftIoV1ImageSignatureResponse>
   */
  createImageOpenshiftIoV1ImageSignature(body: Models.Comgithubopenshiftapiimagev1ImageSignature, options?: Models.OpenShiftAPIwithKubernetesCreateImageOpenshiftIoV1ImageSignatureOptionalParams): Promise<Models.CreateImageOpenshiftIoV1ImageSignatureResponse>;
  /**
   * @param body
   * @param callback The callback
   */
  createImageOpenshiftIoV1ImageSignature(body: Models.Comgithubopenshiftapiimagev1ImageSignature, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1ImageSignature>): void;
  /**
   * @param body
   * @param options The optional parameters
   * @param callback The callback
   */
  createImageOpenshiftIoV1ImageSignature(body: Models.Comgithubopenshiftapiimagev1ImageSignature, options: Models.OpenShiftAPIwithKubernetesCreateImageOpenshiftIoV1ImageSignatureOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1ImageSignature>): void;
  createImageOpenshiftIoV1ImageSignature(body: Models.Comgithubopenshiftapiimagev1ImageSignature, options?: Models.OpenShiftAPIwithKubernetesCreateImageOpenshiftIoV1ImageSignatureOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1ImageSignature>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1ImageSignature>): Promise<Models.CreateImageOpenshiftIoV1ImageSignatureResponse> {
    return this.sendOperationRequest(
      {
        body,
        options
      },
      createImageOpenshiftIoV1ImageSignatureOperationSpec,
      callback) as Promise<Models.CreateImageOpenshiftIoV1ImageSignatureResponse>;
  }

  /**
   * delete an ImageSignature
   * @param body
   * @param name name of the ImageSignature
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteImageOpenshiftIoV1ImageSignatureResponse>
   */
  deleteImageOpenshiftIoV1ImageSignature(body: Models.V1DeleteOptions, name: string, options?: Models.OpenShiftAPIwithKubernetesDeleteImageOpenshiftIoV1ImageSignatureOptionalParams): Promise<Models.DeleteImageOpenshiftIoV1ImageSignatureResponse>;
  /**
   * @param body
   * @param name name of the ImageSignature
   * @param callback The callback
   */
  deleteImageOpenshiftIoV1ImageSignature(body: Models.V1DeleteOptions, name: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param name name of the ImageSignature
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteImageOpenshiftIoV1ImageSignature(body: Models.V1DeleteOptions, name: string, options: Models.OpenShiftAPIwithKubernetesDeleteImageOpenshiftIoV1ImageSignatureOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteImageOpenshiftIoV1ImageSignature(body: Models.V1DeleteOptions, name: string, options?: Models.OpenShiftAPIwithKubernetesDeleteImageOpenshiftIoV1ImageSignatureOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteImageOpenshiftIoV1ImageSignatureResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      deleteImageOpenshiftIoV1ImageSignatureOperationSpec,
      callback) as Promise<Models.DeleteImageOpenshiftIoV1ImageSignatureResponse>;
  }

  /**
   * list or watch objects of kind ImageStream
   * @param [options] The optional parameters
   * @returns Promise<Models.ListImageOpenshiftIoV1ImageStreamForAllNamespacesResponse>
   */
  listImageOpenshiftIoV1ImageStreamForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListImageOpenshiftIoV1ImageStreamForAllNamespacesOptionalParams): Promise<Models.ListImageOpenshiftIoV1ImageStreamForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  listImageOpenshiftIoV1ImageStreamForAllNamespaces(callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1ImageStreamList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listImageOpenshiftIoV1ImageStreamForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesListImageOpenshiftIoV1ImageStreamForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1ImageStreamList>): void;
  listImageOpenshiftIoV1ImageStreamForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListImageOpenshiftIoV1ImageStreamForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1ImageStreamList>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1ImageStreamList>): Promise<Models.ListImageOpenshiftIoV1ImageStreamForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listImageOpenshiftIoV1ImageStreamForAllNamespacesOperationSpec,
      callback) as Promise<Models.ListImageOpenshiftIoV1ImageStreamForAllNamespacesResponse>;
  }

  /**
   * list objects of kind ImageStreamTag
   * @param [options] The optional parameters
   * @returns Promise<Models.ListImageOpenshiftIoV1ImageStreamTagForAllNamespacesResponse>
   */
  listImageOpenshiftIoV1ImageStreamTagForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListImageOpenshiftIoV1ImageStreamTagForAllNamespacesOptionalParams): Promise<Models.ListImageOpenshiftIoV1ImageStreamTagForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  listImageOpenshiftIoV1ImageStreamTagForAllNamespaces(callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1ImageStreamTagList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listImageOpenshiftIoV1ImageStreamTagForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesListImageOpenshiftIoV1ImageStreamTagForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1ImageStreamTagList>): void;
  listImageOpenshiftIoV1ImageStreamTagForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListImageOpenshiftIoV1ImageStreamTagForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1ImageStreamTagList>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1ImageStreamTagList>): Promise<Models.ListImageOpenshiftIoV1ImageStreamTagForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listImageOpenshiftIoV1ImageStreamTagForAllNamespacesOperationSpec,
      callback) as Promise<Models.ListImageOpenshiftIoV1ImageStreamTagForAllNamespacesResponse>;
  }

  /**
   * read the specified ImageStreamImage
   * @param name name of the ImageStreamImage
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadImageOpenshiftIoV1NamespacedImageStreamImageResponse>
   */
  readImageOpenshiftIoV1NamespacedImageStreamImage(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadImageOpenshiftIoV1NamespacedImageStreamImageOptionalParams): Promise<Models.ReadImageOpenshiftIoV1NamespacedImageStreamImageResponse>;
  /**
   * @param name name of the ImageStreamImage
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readImageOpenshiftIoV1NamespacedImageStreamImage(name: string, namespace: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1ImageStreamImage>): void;
  /**
   * @param name name of the ImageStreamImage
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readImageOpenshiftIoV1NamespacedImageStreamImage(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadImageOpenshiftIoV1NamespacedImageStreamImageOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1ImageStreamImage>): void;
  readImageOpenshiftIoV1NamespacedImageStreamImage(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadImageOpenshiftIoV1NamespacedImageStreamImageOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1ImageStreamImage>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1ImageStreamImage>): Promise<Models.ReadImageOpenshiftIoV1NamespacedImageStreamImageResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readImageOpenshiftIoV1NamespacedImageStreamImageOperationSpec,
      callback) as Promise<Models.ReadImageOpenshiftIoV1NamespacedImageStreamImageResponse>;
  }

  /**
   * create an ImageStreamImport
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateImageOpenshiftIoV1NamespacedImageStreamImportResponse>
   */
  createImageOpenshiftIoV1NamespacedImageStreamImport(body: Models.Comgithubopenshiftapiimagev1ImageStreamImport, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateImageOpenshiftIoV1NamespacedImageStreamImportOptionalParams): Promise<Models.CreateImageOpenshiftIoV1NamespacedImageStreamImportResponse>;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  createImageOpenshiftIoV1NamespacedImageStreamImport(body: Models.Comgithubopenshiftapiimagev1ImageStreamImport, namespace: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1ImageStreamImport>): void;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  createImageOpenshiftIoV1NamespacedImageStreamImport(body: Models.Comgithubopenshiftapiimagev1ImageStreamImport, namespace: string, options: Models.OpenShiftAPIwithKubernetesCreateImageOpenshiftIoV1NamespacedImageStreamImportOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1ImageStreamImport>): void;
  createImageOpenshiftIoV1NamespacedImageStreamImport(body: Models.Comgithubopenshiftapiimagev1ImageStreamImport, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateImageOpenshiftIoV1NamespacedImageStreamImportOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1ImageStreamImport>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1ImageStreamImport>): Promise<Models.CreateImageOpenshiftIoV1NamespacedImageStreamImportResponse> {
    return this.sendOperationRequest(
      {
        body,
        namespace,
        options
      },
      createImageOpenshiftIoV1NamespacedImageStreamImportOperationSpec,
      callback) as Promise<Models.CreateImageOpenshiftIoV1NamespacedImageStreamImportResponse>;
  }

  /**
   * create an ImageStreamMapping
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateImageOpenshiftIoV1NamespacedImageStreamMappingResponse>
   */
  createImageOpenshiftIoV1NamespacedImageStreamMapping(body: Models.Comgithubopenshiftapiimagev1ImageStreamMapping, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateImageOpenshiftIoV1NamespacedImageStreamMappingOptionalParams): Promise<Models.CreateImageOpenshiftIoV1NamespacedImageStreamMappingResponse>;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  createImageOpenshiftIoV1NamespacedImageStreamMapping(body: Models.Comgithubopenshiftapiimagev1ImageStreamMapping, namespace: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1ImageStreamMapping>): void;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  createImageOpenshiftIoV1NamespacedImageStreamMapping(body: Models.Comgithubopenshiftapiimagev1ImageStreamMapping, namespace: string, options: Models.OpenShiftAPIwithKubernetesCreateImageOpenshiftIoV1NamespacedImageStreamMappingOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1ImageStreamMapping>): void;
  createImageOpenshiftIoV1NamespacedImageStreamMapping(body: Models.Comgithubopenshiftapiimagev1ImageStreamMapping, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateImageOpenshiftIoV1NamespacedImageStreamMappingOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1ImageStreamMapping>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1ImageStreamMapping>): Promise<Models.CreateImageOpenshiftIoV1NamespacedImageStreamMappingResponse> {
    return this.sendOperationRequest(
      {
        body,
        namespace,
        options
      },
      createImageOpenshiftIoV1NamespacedImageStreamMappingOperationSpec,
      callback) as Promise<Models.CreateImageOpenshiftIoV1NamespacedImageStreamMappingResponse>;
  }

  /**
   * list or watch objects of kind ImageStream
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ListImageOpenshiftIoV1NamespacedImageStreamResponse>
   */
  listImageOpenshiftIoV1NamespacedImageStream(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListImageOpenshiftIoV1NamespacedImageStreamOptionalParams): Promise<Models.ListImageOpenshiftIoV1NamespacedImageStreamResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  listImageOpenshiftIoV1NamespacedImageStream(namespace: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1ImageStreamList>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  listImageOpenshiftIoV1NamespacedImageStream(namespace: string, options: Models.OpenShiftAPIwithKubernetesListImageOpenshiftIoV1NamespacedImageStreamOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1ImageStreamList>): void;
  listImageOpenshiftIoV1NamespacedImageStream(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListImageOpenshiftIoV1NamespacedImageStreamOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1ImageStreamList>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1ImageStreamList>): Promise<Models.ListImageOpenshiftIoV1NamespacedImageStreamResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      listImageOpenshiftIoV1NamespacedImageStreamOperationSpec,
      callback) as Promise<Models.ListImageOpenshiftIoV1NamespacedImageStreamResponse>;
  }

  /**
   * create an ImageStream
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateImageOpenshiftIoV1NamespacedImageStreamResponse>
   */
  createImageOpenshiftIoV1NamespacedImageStream(body: Models.Comgithubopenshiftapiimagev1ImageStream, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateImageOpenshiftIoV1NamespacedImageStreamOptionalParams): Promise<Models.CreateImageOpenshiftIoV1NamespacedImageStreamResponse>;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  createImageOpenshiftIoV1NamespacedImageStream(body: Models.Comgithubopenshiftapiimagev1ImageStream, namespace: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1ImageStream>): void;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  createImageOpenshiftIoV1NamespacedImageStream(body: Models.Comgithubopenshiftapiimagev1ImageStream, namespace: string, options: Models.OpenShiftAPIwithKubernetesCreateImageOpenshiftIoV1NamespacedImageStreamOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1ImageStream>): void;
  createImageOpenshiftIoV1NamespacedImageStream(body: Models.Comgithubopenshiftapiimagev1ImageStream, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateImageOpenshiftIoV1NamespacedImageStreamOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1ImageStream>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1ImageStream>): Promise<Models.CreateImageOpenshiftIoV1NamespacedImageStreamResponse> {
    return this.sendOperationRequest(
      {
        body,
        namespace,
        options
      },
      createImageOpenshiftIoV1NamespacedImageStreamOperationSpec,
      callback) as Promise<Models.CreateImageOpenshiftIoV1NamespacedImageStreamResponse>;
  }

  /**
   * delete collection of ImageStream
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteImageOpenshiftIoV1CollectionNamespacedImageStreamResponse>
   */
  deleteImageOpenshiftIoV1CollectionNamespacedImageStream(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteImageOpenshiftIoV1CollectionNamespacedImageStreamOptionalParams): Promise<Models.DeleteImageOpenshiftIoV1CollectionNamespacedImageStreamResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteImageOpenshiftIoV1CollectionNamespacedImageStream(namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteImageOpenshiftIoV1CollectionNamespacedImageStream(namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteImageOpenshiftIoV1CollectionNamespacedImageStreamOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteImageOpenshiftIoV1CollectionNamespacedImageStream(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteImageOpenshiftIoV1CollectionNamespacedImageStreamOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteImageOpenshiftIoV1CollectionNamespacedImageStreamResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      deleteImageOpenshiftIoV1CollectionNamespacedImageStreamOperationSpec,
      callback) as Promise<Models.DeleteImageOpenshiftIoV1CollectionNamespacedImageStreamResponse>;
  }

  /**
   * read the specified ImageStream
   * @param name name of the ImageStream
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadImageOpenshiftIoV1NamespacedImageStreamResponse>
   */
  readImageOpenshiftIoV1NamespacedImageStream(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadImageOpenshiftIoV1NamespacedImageStreamOptionalParams): Promise<Models.ReadImageOpenshiftIoV1NamespacedImageStreamResponse>;
  /**
   * @param name name of the ImageStream
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readImageOpenshiftIoV1NamespacedImageStream(name: string, namespace: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1ImageStream>): void;
  /**
   * @param name name of the ImageStream
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readImageOpenshiftIoV1NamespacedImageStream(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadImageOpenshiftIoV1NamespacedImageStreamOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1ImageStream>): void;
  readImageOpenshiftIoV1NamespacedImageStream(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadImageOpenshiftIoV1NamespacedImageStreamOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1ImageStream>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1ImageStream>): Promise<Models.ReadImageOpenshiftIoV1NamespacedImageStreamResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readImageOpenshiftIoV1NamespacedImageStreamOperationSpec,
      callback) as Promise<Models.ReadImageOpenshiftIoV1NamespacedImageStreamResponse>;
  }

  /**
   * replace the specified ImageStream
   * @param body
   * @param name name of the ImageStream
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceImageOpenshiftIoV1NamespacedImageStreamResponse>
   */
  replaceImageOpenshiftIoV1NamespacedImageStream(body: Models.Comgithubopenshiftapiimagev1ImageStream, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceImageOpenshiftIoV1NamespacedImageStreamOptionalParams): Promise<Models.ReplaceImageOpenshiftIoV1NamespacedImageStreamResponse>;
  /**
   * @param body
   * @param name name of the ImageStream
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replaceImageOpenshiftIoV1NamespacedImageStream(body: Models.Comgithubopenshiftapiimagev1ImageStream, name: string, namespace: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1ImageStream>): void;
  /**
   * @param body
   * @param name name of the ImageStream
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceImageOpenshiftIoV1NamespacedImageStream(body: Models.Comgithubopenshiftapiimagev1ImageStream, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplaceImageOpenshiftIoV1NamespacedImageStreamOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1ImageStream>): void;
  replaceImageOpenshiftIoV1NamespacedImageStream(body: Models.Comgithubopenshiftapiimagev1ImageStream, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceImageOpenshiftIoV1NamespacedImageStreamOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1ImageStream>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1ImageStream>): Promise<Models.ReplaceImageOpenshiftIoV1NamespacedImageStreamResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replaceImageOpenshiftIoV1NamespacedImageStreamOperationSpec,
      callback) as Promise<Models.ReplaceImageOpenshiftIoV1NamespacedImageStreamResponse>;
  }

  /**
   * delete an ImageStream
   * @param body
   * @param name name of the ImageStream
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteImageOpenshiftIoV1NamespacedImageStreamResponse>
   */
  deleteImageOpenshiftIoV1NamespacedImageStream(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteImageOpenshiftIoV1NamespacedImageStreamOptionalParams): Promise<Models.DeleteImageOpenshiftIoV1NamespacedImageStreamResponse>;
  /**
   * @param body
   * @param name name of the ImageStream
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteImageOpenshiftIoV1NamespacedImageStream(body: Models.V1DeleteOptions, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param name name of the ImageStream
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteImageOpenshiftIoV1NamespacedImageStream(body: Models.V1DeleteOptions, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteImageOpenshiftIoV1NamespacedImageStreamOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteImageOpenshiftIoV1NamespacedImageStream(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteImageOpenshiftIoV1NamespacedImageStreamOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteImageOpenshiftIoV1NamespacedImageStreamResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      deleteImageOpenshiftIoV1NamespacedImageStreamOperationSpec,
      callback) as Promise<Models.DeleteImageOpenshiftIoV1NamespacedImageStreamResponse>;
  }

  /**
   * partially update the specified ImageStream
   * @param body
   * @param name name of the ImageStream
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchImageOpenshiftIoV1NamespacedImageStreamResponse>
   */
  patchImageOpenshiftIoV1NamespacedImageStream(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchImageOpenshiftIoV1NamespacedImageStreamOptionalParams): Promise<Models.PatchImageOpenshiftIoV1NamespacedImageStreamResponse>;
  /**
   * @param body
   * @param name name of the ImageStream
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  patchImageOpenshiftIoV1NamespacedImageStream(body: any, name: string, namespace: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1ImageStream>): void;
  /**
   * @param body
   * @param name name of the ImageStream
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  patchImageOpenshiftIoV1NamespacedImageStream(body: any, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesPatchImageOpenshiftIoV1NamespacedImageStreamOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1ImageStream>): void;
  patchImageOpenshiftIoV1NamespacedImageStream(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchImageOpenshiftIoV1NamespacedImageStreamOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1ImageStream>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1ImageStream>): Promise<Models.PatchImageOpenshiftIoV1NamespacedImageStreamResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      patchImageOpenshiftIoV1NamespacedImageStreamOperationSpec,
      callback) as Promise<Models.PatchImageOpenshiftIoV1NamespacedImageStreamResponse>;
  }

  /**
   * read layers of the specified ImageStream
   * @param name name of the ImageStreamLayers
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadImageOpenshiftIoV1NamespacedImageStreamLayersResponse>
   */
  readImageOpenshiftIoV1NamespacedImageStreamLayers(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadImageOpenshiftIoV1NamespacedImageStreamLayersOptionalParams): Promise<Models.ReadImageOpenshiftIoV1NamespacedImageStreamLayersResponse>;
  /**
   * @param name name of the ImageStreamLayers
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readImageOpenshiftIoV1NamespacedImageStreamLayers(name: string, namespace: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1ImageStreamLayers>): void;
  /**
   * @param name name of the ImageStreamLayers
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readImageOpenshiftIoV1NamespacedImageStreamLayers(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadImageOpenshiftIoV1NamespacedImageStreamLayersOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1ImageStreamLayers>): void;
  readImageOpenshiftIoV1NamespacedImageStreamLayers(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadImageOpenshiftIoV1NamespacedImageStreamLayersOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1ImageStreamLayers>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1ImageStreamLayers>): Promise<Models.ReadImageOpenshiftIoV1NamespacedImageStreamLayersResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readImageOpenshiftIoV1NamespacedImageStreamLayersOperationSpec,
      callback) as Promise<Models.ReadImageOpenshiftIoV1NamespacedImageStreamLayersResponse>;
  }

  /**
   * read secrets of the specified ImageStream
   * @param name name of the SecretList
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadImageOpenshiftIoV1NamespacedImageStreamSecretsResponse>
   */
  readImageOpenshiftIoV1NamespacedImageStreamSecrets(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadImageOpenshiftIoV1NamespacedImageStreamSecretsOptionalParams): Promise<Models.ReadImageOpenshiftIoV1NamespacedImageStreamSecretsResponse>;
  /**
   * @param name name of the SecretList
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readImageOpenshiftIoV1NamespacedImageStreamSecrets(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1SecretList>): void;
  /**
   * @param name name of the SecretList
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readImageOpenshiftIoV1NamespacedImageStreamSecrets(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadImageOpenshiftIoV1NamespacedImageStreamSecretsOptionalParams, callback: msRest.ServiceCallback<Models.V1SecretList>): void;
  readImageOpenshiftIoV1NamespacedImageStreamSecrets(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadImageOpenshiftIoV1NamespacedImageStreamSecretsOptionalParams | msRest.ServiceCallback<Models.V1SecretList>, callback?: msRest.ServiceCallback<Models.V1SecretList>): Promise<Models.ReadImageOpenshiftIoV1NamespacedImageStreamSecretsResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readImageOpenshiftIoV1NamespacedImageStreamSecretsOperationSpec,
      callback) as Promise<Models.ReadImageOpenshiftIoV1NamespacedImageStreamSecretsResponse>;
  }

  /**
   * read status of the specified ImageStream
   * @param name name of the ImageStream
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadImageOpenshiftIoV1NamespacedImageStreamStatusResponse>
   */
  readImageOpenshiftIoV1NamespacedImageStreamStatus(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadImageOpenshiftIoV1NamespacedImageStreamStatusOptionalParams): Promise<Models.ReadImageOpenshiftIoV1NamespacedImageStreamStatusResponse>;
  /**
   * @param name name of the ImageStream
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readImageOpenshiftIoV1NamespacedImageStreamStatus(name: string, namespace: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1ImageStream>): void;
  /**
   * @param name name of the ImageStream
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readImageOpenshiftIoV1NamespacedImageStreamStatus(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadImageOpenshiftIoV1NamespacedImageStreamStatusOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1ImageStream>): void;
  readImageOpenshiftIoV1NamespacedImageStreamStatus(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadImageOpenshiftIoV1NamespacedImageStreamStatusOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1ImageStream>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1ImageStream>): Promise<Models.ReadImageOpenshiftIoV1NamespacedImageStreamStatusResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readImageOpenshiftIoV1NamespacedImageStreamStatusOperationSpec,
      callback) as Promise<Models.ReadImageOpenshiftIoV1NamespacedImageStreamStatusResponse>;
  }

  /**
   * replace status of the specified ImageStream
   * @param body
   * @param name name of the ImageStream
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceImageOpenshiftIoV1NamespacedImageStreamStatusResponse>
   */
  replaceImageOpenshiftIoV1NamespacedImageStreamStatus(body: Models.Comgithubopenshiftapiimagev1ImageStream, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceImageOpenshiftIoV1NamespacedImageStreamStatusOptionalParams): Promise<Models.ReplaceImageOpenshiftIoV1NamespacedImageStreamStatusResponse>;
  /**
   * @param body
   * @param name name of the ImageStream
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replaceImageOpenshiftIoV1NamespacedImageStreamStatus(body: Models.Comgithubopenshiftapiimagev1ImageStream, name: string, namespace: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1ImageStream>): void;
  /**
   * @param body
   * @param name name of the ImageStream
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceImageOpenshiftIoV1NamespacedImageStreamStatus(body: Models.Comgithubopenshiftapiimagev1ImageStream, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplaceImageOpenshiftIoV1NamespacedImageStreamStatusOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1ImageStream>): void;
  replaceImageOpenshiftIoV1NamespacedImageStreamStatus(body: Models.Comgithubopenshiftapiimagev1ImageStream, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceImageOpenshiftIoV1NamespacedImageStreamStatusOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1ImageStream>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1ImageStream>): Promise<Models.ReplaceImageOpenshiftIoV1NamespacedImageStreamStatusResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replaceImageOpenshiftIoV1NamespacedImageStreamStatusOperationSpec,
      callback) as Promise<Models.ReplaceImageOpenshiftIoV1NamespacedImageStreamStatusResponse>;
  }

  /**
   * partially update status of the specified ImageStream
   * @param body
   * @param name name of the ImageStream
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchImageOpenshiftIoV1NamespacedImageStreamStatusResponse>
   */
  patchImageOpenshiftIoV1NamespacedImageStreamStatus(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchImageOpenshiftIoV1NamespacedImageStreamStatusOptionalParams): Promise<Models.PatchImageOpenshiftIoV1NamespacedImageStreamStatusResponse>;
  /**
   * @param body
   * @param name name of the ImageStream
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  patchImageOpenshiftIoV1NamespacedImageStreamStatus(body: any, name: string, namespace: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1ImageStream>): void;
  /**
   * @param body
   * @param name name of the ImageStream
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  patchImageOpenshiftIoV1NamespacedImageStreamStatus(body: any, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesPatchImageOpenshiftIoV1NamespacedImageStreamStatusOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1ImageStream>): void;
  patchImageOpenshiftIoV1NamespacedImageStreamStatus(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchImageOpenshiftIoV1NamespacedImageStreamStatusOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1ImageStream>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1ImageStream>): Promise<Models.PatchImageOpenshiftIoV1NamespacedImageStreamStatusResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      patchImageOpenshiftIoV1NamespacedImageStreamStatusOperationSpec,
      callback) as Promise<Models.PatchImageOpenshiftIoV1NamespacedImageStreamStatusResponse>;
  }

  /**
   * list objects of kind ImageStreamTag
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ListImageOpenshiftIoV1NamespacedImageStreamTagResponse>
   */
  listImageOpenshiftIoV1NamespacedImageStreamTag(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListImageOpenshiftIoV1NamespacedImageStreamTagOptionalParams): Promise<Models.ListImageOpenshiftIoV1NamespacedImageStreamTagResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  listImageOpenshiftIoV1NamespacedImageStreamTag(namespace: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1ImageStreamTagList>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  listImageOpenshiftIoV1NamespacedImageStreamTag(namespace: string, options: Models.OpenShiftAPIwithKubernetesListImageOpenshiftIoV1NamespacedImageStreamTagOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1ImageStreamTagList>): void;
  listImageOpenshiftIoV1NamespacedImageStreamTag(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListImageOpenshiftIoV1NamespacedImageStreamTagOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1ImageStreamTagList>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1ImageStreamTagList>): Promise<Models.ListImageOpenshiftIoV1NamespacedImageStreamTagResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      listImageOpenshiftIoV1NamespacedImageStreamTagOperationSpec,
      callback) as Promise<Models.ListImageOpenshiftIoV1NamespacedImageStreamTagResponse>;
  }

  /**
   * create an ImageStreamTag
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateImageOpenshiftIoV1NamespacedImageStreamTagResponse>
   */
  createImageOpenshiftIoV1NamespacedImageStreamTag(body: Models.Comgithubopenshiftapiimagev1ImageStreamTag, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateImageOpenshiftIoV1NamespacedImageStreamTagOptionalParams): Promise<Models.CreateImageOpenshiftIoV1NamespacedImageStreamTagResponse>;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  createImageOpenshiftIoV1NamespacedImageStreamTag(body: Models.Comgithubopenshiftapiimagev1ImageStreamTag, namespace: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1ImageStreamTag>): void;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  createImageOpenshiftIoV1NamespacedImageStreamTag(body: Models.Comgithubopenshiftapiimagev1ImageStreamTag, namespace: string, options: Models.OpenShiftAPIwithKubernetesCreateImageOpenshiftIoV1NamespacedImageStreamTagOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1ImageStreamTag>): void;
  createImageOpenshiftIoV1NamespacedImageStreamTag(body: Models.Comgithubopenshiftapiimagev1ImageStreamTag, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateImageOpenshiftIoV1NamespacedImageStreamTagOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1ImageStreamTag>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1ImageStreamTag>): Promise<Models.CreateImageOpenshiftIoV1NamespacedImageStreamTagResponse> {
    return this.sendOperationRequest(
      {
        body,
        namespace,
        options
      },
      createImageOpenshiftIoV1NamespacedImageStreamTagOperationSpec,
      callback) as Promise<Models.CreateImageOpenshiftIoV1NamespacedImageStreamTagResponse>;
  }

  /**
   * read the specified ImageStreamTag
   * @param name name of the ImageStreamTag
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadImageOpenshiftIoV1NamespacedImageStreamTagResponse>
   */
  readImageOpenshiftIoV1NamespacedImageStreamTag(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadImageOpenshiftIoV1NamespacedImageStreamTagOptionalParams): Promise<Models.ReadImageOpenshiftIoV1NamespacedImageStreamTagResponse>;
  /**
   * @param name name of the ImageStreamTag
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readImageOpenshiftIoV1NamespacedImageStreamTag(name: string, namespace: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1ImageStreamTag>): void;
  /**
   * @param name name of the ImageStreamTag
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readImageOpenshiftIoV1NamespacedImageStreamTag(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadImageOpenshiftIoV1NamespacedImageStreamTagOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1ImageStreamTag>): void;
  readImageOpenshiftIoV1NamespacedImageStreamTag(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadImageOpenshiftIoV1NamespacedImageStreamTagOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1ImageStreamTag>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1ImageStreamTag>): Promise<Models.ReadImageOpenshiftIoV1NamespacedImageStreamTagResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readImageOpenshiftIoV1NamespacedImageStreamTagOperationSpec,
      callback) as Promise<Models.ReadImageOpenshiftIoV1NamespacedImageStreamTagResponse>;
  }

  /**
   * replace the specified ImageStreamTag
   * @param body
   * @param name name of the ImageStreamTag
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceImageOpenshiftIoV1NamespacedImageStreamTagResponse>
   */
  replaceImageOpenshiftIoV1NamespacedImageStreamTag(body: Models.Comgithubopenshiftapiimagev1ImageStreamTag, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceImageOpenshiftIoV1NamespacedImageStreamTagOptionalParams): Promise<Models.ReplaceImageOpenshiftIoV1NamespacedImageStreamTagResponse>;
  /**
   * @param body
   * @param name name of the ImageStreamTag
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replaceImageOpenshiftIoV1NamespacedImageStreamTag(body: Models.Comgithubopenshiftapiimagev1ImageStreamTag, name: string, namespace: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1ImageStreamTag>): void;
  /**
   * @param body
   * @param name name of the ImageStreamTag
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceImageOpenshiftIoV1NamespacedImageStreamTag(body: Models.Comgithubopenshiftapiimagev1ImageStreamTag, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplaceImageOpenshiftIoV1NamespacedImageStreamTagOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1ImageStreamTag>): void;
  replaceImageOpenshiftIoV1NamespacedImageStreamTag(body: Models.Comgithubopenshiftapiimagev1ImageStreamTag, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceImageOpenshiftIoV1NamespacedImageStreamTagOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1ImageStreamTag>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1ImageStreamTag>): Promise<Models.ReplaceImageOpenshiftIoV1NamespacedImageStreamTagResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replaceImageOpenshiftIoV1NamespacedImageStreamTagOperationSpec,
      callback) as Promise<Models.ReplaceImageOpenshiftIoV1NamespacedImageStreamTagResponse>;
  }

  /**
   * delete an ImageStreamTag
   * @param body
   * @param name name of the ImageStreamTag
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteImageOpenshiftIoV1NamespacedImageStreamTagResponse>
   */
  deleteImageOpenshiftIoV1NamespacedImageStreamTag(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteImageOpenshiftIoV1NamespacedImageStreamTagOptionalParams): Promise<Models.DeleteImageOpenshiftIoV1NamespacedImageStreamTagResponse>;
  /**
   * @param body
   * @param name name of the ImageStreamTag
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteImageOpenshiftIoV1NamespacedImageStreamTag(body: Models.V1DeleteOptions, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param name name of the ImageStreamTag
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteImageOpenshiftIoV1NamespacedImageStreamTag(body: Models.V1DeleteOptions, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteImageOpenshiftIoV1NamespacedImageStreamTagOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteImageOpenshiftIoV1NamespacedImageStreamTag(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteImageOpenshiftIoV1NamespacedImageStreamTagOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteImageOpenshiftIoV1NamespacedImageStreamTagResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      deleteImageOpenshiftIoV1NamespacedImageStreamTagOperationSpec,
      callback) as Promise<Models.DeleteImageOpenshiftIoV1NamespacedImageStreamTagResponse>;
  }

  /**
   * partially update the specified ImageStreamTag
   * @param body
   * @param name name of the ImageStreamTag
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchImageOpenshiftIoV1NamespacedImageStreamTagResponse>
   */
  patchImageOpenshiftIoV1NamespacedImageStreamTag(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchImageOpenshiftIoV1NamespacedImageStreamTagOptionalParams): Promise<Models.PatchImageOpenshiftIoV1NamespacedImageStreamTagResponse>;
  /**
   * @param body
   * @param name name of the ImageStreamTag
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  patchImageOpenshiftIoV1NamespacedImageStreamTag(body: any, name: string, namespace: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1ImageStreamTag>): void;
  /**
   * @param body
   * @param name name of the ImageStreamTag
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  patchImageOpenshiftIoV1NamespacedImageStreamTag(body: any, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesPatchImageOpenshiftIoV1NamespacedImageStreamTagOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1ImageStreamTag>): void;
  patchImageOpenshiftIoV1NamespacedImageStreamTag(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchImageOpenshiftIoV1NamespacedImageStreamTagOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1ImageStreamTag>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiimagev1ImageStreamTag>): Promise<Models.PatchImageOpenshiftIoV1NamespacedImageStreamTagResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      patchImageOpenshiftIoV1NamespacedImageStreamTagOperationSpec,
      callback) as Promise<Models.PatchImageOpenshiftIoV1NamespacedImageStreamTagResponse>;
  }

  /**
   * watch individual changes to a list of Image
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchImageOpenshiftIoV1ImageListResponse>
   */
  watchImageOpenshiftIoV1ImageList(options?: Models.OpenShiftAPIwithKubernetesWatchImageOpenshiftIoV1ImageListOptionalParams): Promise<Models.WatchImageOpenshiftIoV1ImageListResponse>;
  /**
   * @param callback The callback
   */
  watchImageOpenshiftIoV1ImageList(callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  watchImageOpenshiftIoV1ImageList(options: Models.OpenShiftAPIwithKubernetesWatchImageOpenshiftIoV1ImageListOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchImageOpenshiftIoV1ImageList(options?: Models.OpenShiftAPIwithKubernetesWatchImageOpenshiftIoV1ImageListOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchImageOpenshiftIoV1ImageListResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      watchImageOpenshiftIoV1ImageListOperationSpec,
      callback) as Promise<Models.WatchImageOpenshiftIoV1ImageListResponse>;
  }

  /**
   * watch changes to an object of kind Image
   * @param name name of the Image
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchImageOpenshiftIoV1ImageResponse>
   */
  watchImageOpenshiftIoV1Image(name: string, options?: Models.OpenShiftAPIwithKubernetesWatchImageOpenshiftIoV1ImageOptionalParams): Promise<Models.WatchImageOpenshiftIoV1ImageResponse>;
  /**
   * @param name name of the Image
   * @param callback The callback
   */
  watchImageOpenshiftIoV1Image(name: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param name name of the Image
   * @param options The optional parameters
   * @param callback The callback
   */
  watchImageOpenshiftIoV1Image(name: string, options: Models.OpenShiftAPIwithKubernetesWatchImageOpenshiftIoV1ImageOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchImageOpenshiftIoV1Image(name: string, options?: Models.OpenShiftAPIwithKubernetesWatchImageOpenshiftIoV1ImageOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchImageOpenshiftIoV1ImageResponse> {
    return this.sendOperationRequest(
      {
        name,
        options
      },
      watchImageOpenshiftIoV1ImageOperationSpec,
      callback) as Promise<Models.WatchImageOpenshiftIoV1ImageResponse>;
  }

  /**
   * watch individual changes to a list of ImageStream
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchImageOpenshiftIoV1ImageStreamListForAllNamespacesResponse>
   */
  watchImageOpenshiftIoV1ImageStreamListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchImageOpenshiftIoV1ImageStreamListForAllNamespacesOptionalParams): Promise<Models.WatchImageOpenshiftIoV1ImageStreamListForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  watchImageOpenshiftIoV1ImageStreamListForAllNamespaces(callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  watchImageOpenshiftIoV1ImageStreamListForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesWatchImageOpenshiftIoV1ImageStreamListForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchImageOpenshiftIoV1ImageStreamListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchImageOpenshiftIoV1ImageStreamListForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchImageOpenshiftIoV1ImageStreamListForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      watchImageOpenshiftIoV1ImageStreamListForAllNamespacesOperationSpec,
      callback) as Promise<Models.WatchImageOpenshiftIoV1ImageStreamListForAllNamespacesResponse>;
  }

  /**
   * watch individual changes to a list of ImageStream
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchImageOpenshiftIoV1NamespacedImageStreamListResponse>
   */
  watchImageOpenshiftIoV1NamespacedImageStreamList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchImageOpenshiftIoV1NamespacedImageStreamListOptionalParams): Promise<Models.WatchImageOpenshiftIoV1NamespacedImageStreamListResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchImageOpenshiftIoV1NamespacedImageStreamList(namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchImageOpenshiftIoV1NamespacedImageStreamList(namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchImageOpenshiftIoV1NamespacedImageStreamListOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchImageOpenshiftIoV1NamespacedImageStreamList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchImageOpenshiftIoV1NamespacedImageStreamListOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchImageOpenshiftIoV1NamespacedImageStreamListResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      watchImageOpenshiftIoV1NamespacedImageStreamListOperationSpec,
      callback) as Promise<Models.WatchImageOpenshiftIoV1NamespacedImageStreamListResponse>;
  }

  /**
   * watch changes to an object of kind ImageStream
   * @param name name of the ImageStream
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchImageOpenshiftIoV1NamespacedImageStreamResponse>
   */
  watchImageOpenshiftIoV1NamespacedImageStream(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchImageOpenshiftIoV1NamespacedImageStreamOptionalParams): Promise<Models.WatchImageOpenshiftIoV1NamespacedImageStreamResponse>;
  /**
   * @param name name of the ImageStream
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchImageOpenshiftIoV1NamespacedImageStream(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param name name of the ImageStream
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchImageOpenshiftIoV1NamespacedImageStream(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchImageOpenshiftIoV1NamespacedImageStreamOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchImageOpenshiftIoV1NamespacedImageStream(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchImageOpenshiftIoV1NamespacedImageStreamOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchImageOpenshiftIoV1NamespacedImageStreamResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      watchImageOpenshiftIoV1NamespacedImageStreamOperationSpec,
      callback) as Promise<Models.WatchImageOpenshiftIoV1NamespacedImageStreamResponse>;
  }

  /**
   * get information of a group
   * @param [options] The optional parameters
   * @returns Promise<Models.GetNetworkOpenshiftIoAPIGroupResponse>
   */
  getNetworkOpenshiftIoAPIGroup(options?: msRest.RequestOptionsBase): Promise<Models.GetNetworkOpenshiftIoAPIGroupResponse>;
  /**
   * @param callback The callback
   */
  getNetworkOpenshiftIoAPIGroup(callback: msRest.ServiceCallback<Models.V1APIGroup>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getNetworkOpenshiftIoAPIGroup(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.V1APIGroup>): void;
  getNetworkOpenshiftIoAPIGroup(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.V1APIGroup>, callback?: msRest.ServiceCallback<Models.V1APIGroup>): Promise<Models.GetNetworkOpenshiftIoAPIGroupResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getNetworkOpenshiftIoAPIGroupOperationSpec,
      callback) as Promise<Models.GetNetworkOpenshiftIoAPIGroupResponse>;
  }

  /**
   * get available resources
   * @param [options] The optional parameters
   * @returns Promise<Models.GetNetworkOpenshiftIoV1APIResourcesResponse>
   */
  getNetworkOpenshiftIoV1APIResources(options?: msRest.RequestOptionsBase): Promise<Models.GetNetworkOpenshiftIoV1APIResourcesResponse>;
  /**
   * @param callback The callback
   */
  getNetworkOpenshiftIoV1APIResources(callback: msRest.ServiceCallback<Models.V1APIResourceList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getNetworkOpenshiftIoV1APIResources(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.V1APIResourceList>): void;
  getNetworkOpenshiftIoV1APIResources(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.V1APIResourceList>, callback?: msRest.ServiceCallback<Models.V1APIResourceList>): Promise<Models.GetNetworkOpenshiftIoV1APIResourcesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getNetworkOpenshiftIoV1APIResourcesOperationSpec,
      callback) as Promise<Models.GetNetworkOpenshiftIoV1APIResourcesResponse>;
  }

  /**
   * list or watch objects of kind ClusterNetwork
   * @param [options] The optional parameters
   * @returns Promise<Models.ListNetworkOpenshiftIoV1ClusterNetworkResponse>
   */
  listNetworkOpenshiftIoV1ClusterNetwork(options?: Models.OpenShiftAPIwithKubernetesListNetworkOpenshiftIoV1ClusterNetworkOptionalParams): Promise<Models.ListNetworkOpenshiftIoV1ClusterNetworkResponse>;
  /**
   * @param callback The callback
   */
  listNetworkOpenshiftIoV1ClusterNetwork(callback: msRest.ServiceCallback<Models.Comgithubopenshiftapinetworkv1ClusterNetworkList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listNetworkOpenshiftIoV1ClusterNetwork(options: Models.OpenShiftAPIwithKubernetesListNetworkOpenshiftIoV1ClusterNetworkOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapinetworkv1ClusterNetworkList>): void;
  listNetworkOpenshiftIoV1ClusterNetwork(options?: Models.OpenShiftAPIwithKubernetesListNetworkOpenshiftIoV1ClusterNetworkOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapinetworkv1ClusterNetworkList>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapinetworkv1ClusterNetworkList>): Promise<Models.ListNetworkOpenshiftIoV1ClusterNetworkResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listNetworkOpenshiftIoV1ClusterNetworkOperationSpec,
      callback) as Promise<Models.ListNetworkOpenshiftIoV1ClusterNetworkResponse>;
  }

  /**
   * create a ClusterNetwork
   * @param body
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateNetworkOpenshiftIoV1ClusterNetworkResponse>
   */
  createNetworkOpenshiftIoV1ClusterNetwork(body: Models.Comgithubopenshiftapinetworkv1ClusterNetwork, options?: Models.OpenShiftAPIwithKubernetesCreateNetworkOpenshiftIoV1ClusterNetworkOptionalParams): Promise<Models.CreateNetworkOpenshiftIoV1ClusterNetworkResponse>;
  /**
   * @param body
   * @param callback The callback
   */
  createNetworkOpenshiftIoV1ClusterNetwork(body: Models.Comgithubopenshiftapinetworkv1ClusterNetwork, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapinetworkv1ClusterNetwork>): void;
  /**
   * @param body
   * @param options The optional parameters
   * @param callback The callback
   */
  createNetworkOpenshiftIoV1ClusterNetwork(body: Models.Comgithubopenshiftapinetworkv1ClusterNetwork, options: Models.OpenShiftAPIwithKubernetesCreateNetworkOpenshiftIoV1ClusterNetworkOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapinetworkv1ClusterNetwork>): void;
  createNetworkOpenshiftIoV1ClusterNetwork(body: Models.Comgithubopenshiftapinetworkv1ClusterNetwork, options?: Models.OpenShiftAPIwithKubernetesCreateNetworkOpenshiftIoV1ClusterNetworkOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapinetworkv1ClusterNetwork>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapinetworkv1ClusterNetwork>): Promise<Models.CreateNetworkOpenshiftIoV1ClusterNetworkResponse> {
    return this.sendOperationRequest(
      {
        body,
        options
      },
      createNetworkOpenshiftIoV1ClusterNetworkOperationSpec,
      callback) as Promise<Models.CreateNetworkOpenshiftIoV1ClusterNetworkResponse>;
  }

  /**
   * delete collection of ClusterNetwork
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteNetworkOpenshiftIoV1CollectionClusterNetworkResponse>
   */
  deleteNetworkOpenshiftIoV1CollectionClusterNetwork(options?: Models.OpenShiftAPIwithKubernetesDeleteNetworkOpenshiftIoV1CollectionClusterNetworkOptionalParams): Promise<Models.DeleteNetworkOpenshiftIoV1CollectionClusterNetworkResponse>;
  /**
   * @param callback The callback
   */
  deleteNetworkOpenshiftIoV1CollectionClusterNetwork(callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteNetworkOpenshiftIoV1CollectionClusterNetwork(options: Models.OpenShiftAPIwithKubernetesDeleteNetworkOpenshiftIoV1CollectionClusterNetworkOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteNetworkOpenshiftIoV1CollectionClusterNetwork(options?: Models.OpenShiftAPIwithKubernetesDeleteNetworkOpenshiftIoV1CollectionClusterNetworkOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteNetworkOpenshiftIoV1CollectionClusterNetworkResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      deleteNetworkOpenshiftIoV1CollectionClusterNetworkOperationSpec,
      callback) as Promise<Models.DeleteNetworkOpenshiftIoV1CollectionClusterNetworkResponse>;
  }

  /**
   * read the specified ClusterNetwork
   * @param name name of the ClusterNetwork
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadNetworkOpenshiftIoV1ClusterNetworkResponse>
   */
  readNetworkOpenshiftIoV1ClusterNetwork(name: string, options?: Models.OpenShiftAPIwithKubernetesReadNetworkOpenshiftIoV1ClusterNetworkOptionalParams): Promise<Models.ReadNetworkOpenshiftIoV1ClusterNetworkResponse>;
  /**
   * @param name name of the ClusterNetwork
   * @param callback The callback
   */
  readNetworkOpenshiftIoV1ClusterNetwork(name: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapinetworkv1ClusterNetwork>): void;
  /**
   * @param name name of the ClusterNetwork
   * @param options The optional parameters
   * @param callback The callback
   */
  readNetworkOpenshiftIoV1ClusterNetwork(name: string, options: Models.OpenShiftAPIwithKubernetesReadNetworkOpenshiftIoV1ClusterNetworkOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapinetworkv1ClusterNetwork>): void;
  readNetworkOpenshiftIoV1ClusterNetwork(name: string, options?: Models.OpenShiftAPIwithKubernetesReadNetworkOpenshiftIoV1ClusterNetworkOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapinetworkv1ClusterNetwork>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapinetworkv1ClusterNetwork>): Promise<Models.ReadNetworkOpenshiftIoV1ClusterNetworkResponse> {
    return this.sendOperationRequest(
      {
        name,
        options
      },
      readNetworkOpenshiftIoV1ClusterNetworkOperationSpec,
      callback) as Promise<Models.ReadNetworkOpenshiftIoV1ClusterNetworkResponse>;
  }

  /**
   * replace the specified ClusterNetwork
   * @param body
   * @param name name of the ClusterNetwork
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceNetworkOpenshiftIoV1ClusterNetworkResponse>
   */
  replaceNetworkOpenshiftIoV1ClusterNetwork(body: Models.Comgithubopenshiftapinetworkv1ClusterNetwork, name: string, options?: Models.OpenShiftAPIwithKubernetesReplaceNetworkOpenshiftIoV1ClusterNetworkOptionalParams): Promise<Models.ReplaceNetworkOpenshiftIoV1ClusterNetworkResponse>;
  /**
   * @param body
   * @param name name of the ClusterNetwork
   * @param callback The callback
   */
  replaceNetworkOpenshiftIoV1ClusterNetwork(body: Models.Comgithubopenshiftapinetworkv1ClusterNetwork, name: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapinetworkv1ClusterNetwork>): void;
  /**
   * @param body
   * @param name name of the ClusterNetwork
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceNetworkOpenshiftIoV1ClusterNetwork(body: Models.Comgithubopenshiftapinetworkv1ClusterNetwork, name: string, options: Models.OpenShiftAPIwithKubernetesReplaceNetworkOpenshiftIoV1ClusterNetworkOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapinetworkv1ClusterNetwork>): void;
  replaceNetworkOpenshiftIoV1ClusterNetwork(body: Models.Comgithubopenshiftapinetworkv1ClusterNetwork, name: string, options?: Models.OpenShiftAPIwithKubernetesReplaceNetworkOpenshiftIoV1ClusterNetworkOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapinetworkv1ClusterNetwork>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapinetworkv1ClusterNetwork>): Promise<Models.ReplaceNetworkOpenshiftIoV1ClusterNetworkResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      replaceNetworkOpenshiftIoV1ClusterNetworkOperationSpec,
      callback) as Promise<Models.ReplaceNetworkOpenshiftIoV1ClusterNetworkResponse>;
  }

  /**
   * delete a ClusterNetwork
   * @param body
   * @param name name of the ClusterNetwork
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteNetworkOpenshiftIoV1ClusterNetworkResponse>
   */
  deleteNetworkOpenshiftIoV1ClusterNetwork(body: Models.V1DeleteOptions, name: string, options?: Models.OpenShiftAPIwithKubernetesDeleteNetworkOpenshiftIoV1ClusterNetworkOptionalParams): Promise<Models.DeleteNetworkOpenshiftIoV1ClusterNetworkResponse>;
  /**
   * @param body
   * @param name name of the ClusterNetwork
   * @param callback The callback
   */
  deleteNetworkOpenshiftIoV1ClusterNetwork(body: Models.V1DeleteOptions, name: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param name name of the ClusterNetwork
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteNetworkOpenshiftIoV1ClusterNetwork(body: Models.V1DeleteOptions, name: string, options: Models.OpenShiftAPIwithKubernetesDeleteNetworkOpenshiftIoV1ClusterNetworkOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteNetworkOpenshiftIoV1ClusterNetwork(body: Models.V1DeleteOptions, name: string, options?: Models.OpenShiftAPIwithKubernetesDeleteNetworkOpenshiftIoV1ClusterNetworkOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteNetworkOpenshiftIoV1ClusterNetworkResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      deleteNetworkOpenshiftIoV1ClusterNetworkOperationSpec,
      callback) as Promise<Models.DeleteNetworkOpenshiftIoV1ClusterNetworkResponse>;
  }

  /**
   * partially update the specified ClusterNetwork
   * @param body
   * @param name name of the ClusterNetwork
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchNetworkOpenshiftIoV1ClusterNetworkResponse>
   */
  patchNetworkOpenshiftIoV1ClusterNetwork(body: any, name: string, options?: Models.OpenShiftAPIwithKubernetesPatchNetworkOpenshiftIoV1ClusterNetworkOptionalParams): Promise<Models.PatchNetworkOpenshiftIoV1ClusterNetworkResponse>;
  /**
   * @param body
   * @param name name of the ClusterNetwork
   * @param callback The callback
   */
  patchNetworkOpenshiftIoV1ClusterNetwork(body: any, name: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapinetworkv1ClusterNetwork>): void;
  /**
   * @param body
   * @param name name of the ClusterNetwork
   * @param options The optional parameters
   * @param callback The callback
   */
  patchNetworkOpenshiftIoV1ClusterNetwork(body: any, name: string, options: Models.OpenShiftAPIwithKubernetesPatchNetworkOpenshiftIoV1ClusterNetworkOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapinetworkv1ClusterNetwork>): void;
  patchNetworkOpenshiftIoV1ClusterNetwork(body: any, name: string, options?: Models.OpenShiftAPIwithKubernetesPatchNetworkOpenshiftIoV1ClusterNetworkOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapinetworkv1ClusterNetwork>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapinetworkv1ClusterNetwork>): Promise<Models.PatchNetworkOpenshiftIoV1ClusterNetworkResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      patchNetworkOpenshiftIoV1ClusterNetworkOperationSpec,
      callback) as Promise<Models.PatchNetworkOpenshiftIoV1ClusterNetworkResponse>;
  }

  /**
   * list or watch objects of kind EgressNetworkPolicy
   * @param [options] The optional parameters
   * @returns Promise<Models.ListNetworkOpenshiftIoV1EgressNetworkPolicyForAllNamespacesResponse>
   */
  listNetworkOpenshiftIoV1EgressNetworkPolicyForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListNetworkOpenshiftIoV1EgressNetworkPolicyForAllNamespacesOptionalParams): Promise<Models.ListNetworkOpenshiftIoV1EgressNetworkPolicyForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  listNetworkOpenshiftIoV1EgressNetworkPolicyForAllNamespaces(callback: msRest.ServiceCallback<Models.Comgithubopenshiftapinetworkv1EgressNetworkPolicyList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listNetworkOpenshiftIoV1EgressNetworkPolicyForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesListNetworkOpenshiftIoV1EgressNetworkPolicyForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapinetworkv1EgressNetworkPolicyList>): void;
  listNetworkOpenshiftIoV1EgressNetworkPolicyForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListNetworkOpenshiftIoV1EgressNetworkPolicyForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapinetworkv1EgressNetworkPolicyList>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapinetworkv1EgressNetworkPolicyList>): Promise<Models.ListNetworkOpenshiftIoV1EgressNetworkPolicyForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listNetworkOpenshiftIoV1EgressNetworkPolicyForAllNamespacesOperationSpec,
      callback) as Promise<Models.ListNetworkOpenshiftIoV1EgressNetworkPolicyForAllNamespacesResponse>;
  }

  /**
   * list or watch objects of kind HostSubnet
   * @param [options] The optional parameters
   * @returns Promise<Models.ListNetworkOpenshiftIoV1HostSubnetResponse>
   */
  listNetworkOpenshiftIoV1HostSubnet(options?: Models.OpenShiftAPIwithKubernetesListNetworkOpenshiftIoV1HostSubnetOptionalParams): Promise<Models.ListNetworkOpenshiftIoV1HostSubnetResponse>;
  /**
   * @param callback The callback
   */
  listNetworkOpenshiftIoV1HostSubnet(callback: msRest.ServiceCallback<Models.Comgithubopenshiftapinetworkv1HostSubnetList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listNetworkOpenshiftIoV1HostSubnet(options: Models.OpenShiftAPIwithKubernetesListNetworkOpenshiftIoV1HostSubnetOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapinetworkv1HostSubnetList>): void;
  listNetworkOpenshiftIoV1HostSubnet(options?: Models.OpenShiftAPIwithKubernetesListNetworkOpenshiftIoV1HostSubnetOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapinetworkv1HostSubnetList>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapinetworkv1HostSubnetList>): Promise<Models.ListNetworkOpenshiftIoV1HostSubnetResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listNetworkOpenshiftIoV1HostSubnetOperationSpec,
      callback) as Promise<Models.ListNetworkOpenshiftIoV1HostSubnetResponse>;
  }

  /**
   * create a HostSubnet
   * @param body
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateNetworkOpenshiftIoV1HostSubnetResponse>
   */
  createNetworkOpenshiftIoV1HostSubnet(body: Models.Comgithubopenshiftapinetworkv1HostSubnet, options?: Models.OpenShiftAPIwithKubernetesCreateNetworkOpenshiftIoV1HostSubnetOptionalParams): Promise<Models.CreateNetworkOpenshiftIoV1HostSubnetResponse>;
  /**
   * @param body
   * @param callback The callback
   */
  createNetworkOpenshiftIoV1HostSubnet(body: Models.Comgithubopenshiftapinetworkv1HostSubnet, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapinetworkv1HostSubnet>): void;
  /**
   * @param body
   * @param options The optional parameters
   * @param callback The callback
   */
  createNetworkOpenshiftIoV1HostSubnet(body: Models.Comgithubopenshiftapinetworkv1HostSubnet, options: Models.OpenShiftAPIwithKubernetesCreateNetworkOpenshiftIoV1HostSubnetOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapinetworkv1HostSubnet>): void;
  createNetworkOpenshiftIoV1HostSubnet(body: Models.Comgithubopenshiftapinetworkv1HostSubnet, options?: Models.OpenShiftAPIwithKubernetesCreateNetworkOpenshiftIoV1HostSubnetOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapinetworkv1HostSubnet>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapinetworkv1HostSubnet>): Promise<Models.CreateNetworkOpenshiftIoV1HostSubnetResponse> {
    return this.sendOperationRequest(
      {
        body,
        options
      },
      createNetworkOpenshiftIoV1HostSubnetOperationSpec,
      callback) as Promise<Models.CreateNetworkOpenshiftIoV1HostSubnetResponse>;
  }

  /**
   * delete collection of HostSubnet
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteNetworkOpenshiftIoV1CollectionHostSubnetResponse>
   */
  deleteNetworkOpenshiftIoV1CollectionHostSubnet(options?: Models.OpenShiftAPIwithKubernetesDeleteNetworkOpenshiftIoV1CollectionHostSubnetOptionalParams): Promise<Models.DeleteNetworkOpenshiftIoV1CollectionHostSubnetResponse>;
  /**
   * @param callback The callback
   */
  deleteNetworkOpenshiftIoV1CollectionHostSubnet(callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteNetworkOpenshiftIoV1CollectionHostSubnet(options: Models.OpenShiftAPIwithKubernetesDeleteNetworkOpenshiftIoV1CollectionHostSubnetOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteNetworkOpenshiftIoV1CollectionHostSubnet(options?: Models.OpenShiftAPIwithKubernetesDeleteNetworkOpenshiftIoV1CollectionHostSubnetOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteNetworkOpenshiftIoV1CollectionHostSubnetResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      deleteNetworkOpenshiftIoV1CollectionHostSubnetOperationSpec,
      callback) as Promise<Models.DeleteNetworkOpenshiftIoV1CollectionHostSubnetResponse>;
  }

  /**
   * read the specified HostSubnet
   * @param name name of the HostSubnet
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadNetworkOpenshiftIoV1HostSubnetResponse>
   */
  readNetworkOpenshiftIoV1HostSubnet(name: string, options?: Models.OpenShiftAPIwithKubernetesReadNetworkOpenshiftIoV1HostSubnetOptionalParams): Promise<Models.ReadNetworkOpenshiftIoV1HostSubnetResponse>;
  /**
   * @param name name of the HostSubnet
   * @param callback The callback
   */
  readNetworkOpenshiftIoV1HostSubnet(name: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapinetworkv1HostSubnet>): void;
  /**
   * @param name name of the HostSubnet
   * @param options The optional parameters
   * @param callback The callback
   */
  readNetworkOpenshiftIoV1HostSubnet(name: string, options: Models.OpenShiftAPIwithKubernetesReadNetworkOpenshiftIoV1HostSubnetOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapinetworkv1HostSubnet>): void;
  readNetworkOpenshiftIoV1HostSubnet(name: string, options?: Models.OpenShiftAPIwithKubernetesReadNetworkOpenshiftIoV1HostSubnetOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapinetworkv1HostSubnet>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapinetworkv1HostSubnet>): Promise<Models.ReadNetworkOpenshiftIoV1HostSubnetResponse> {
    return this.sendOperationRequest(
      {
        name,
        options
      },
      readNetworkOpenshiftIoV1HostSubnetOperationSpec,
      callback) as Promise<Models.ReadNetworkOpenshiftIoV1HostSubnetResponse>;
  }

  /**
   * replace the specified HostSubnet
   * @param body
   * @param name name of the HostSubnet
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceNetworkOpenshiftIoV1HostSubnetResponse>
   */
  replaceNetworkOpenshiftIoV1HostSubnet(body: Models.Comgithubopenshiftapinetworkv1HostSubnet, name: string, options?: Models.OpenShiftAPIwithKubernetesReplaceNetworkOpenshiftIoV1HostSubnetOptionalParams): Promise<Models.ReplaceNetworkOpenshiftIoV1HostSubnetResponse>;
  /**
   * @param body
   * @param name name of the HostSubnet
   * @param callback The callback
   */
  replaceNetworkOpenshiftIoV1HostSubnet(body: Models.Comgithubopenshiftapinetworkv1HostSubnet, name: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapinetworkv1HostSubnet>): void;
  /**
   * @param body
   * @param name name of the HostSubnet
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceNetworkOpenshiftIoV1HostSubnet(body: Models.Comgithubopenshiftapinetworkv1HostSubnet, name: string, options: Models.OpenShiftAPIwithKubernetesReplaceNetworkOpenshiftIoV1HostSubnetOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapinetworkv1HostSubnet>): void;
  replaceNetworkOpenshiftIoV1HostSubnet(body: Models.Comgithubopenshiftapinetworkv1HostSubnet, name: string, options?: Models.OpenShiftAPIwithKubernetesReplaceNetworkOpenshiftIoV1HostSubnetOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapinetworkv1HostSubnet>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapinetworkv1HostSubnet>): Promise<Models.ReplaceNetworkOpenshiftIoV1HostSubnetResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      replaceNetworkOpenshiftIoV1HostSubnetOperationSpec,
      callback) as Promise<Models.ReplaceNetworkOpenshiftIoV1HostSubnetResponse>;
  }

  /**
   * delete a HostSubnet
   * @param body
   * @param name name of the HostSubnet
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteNetworkOpenshiftIoV1HostSubnetResponse>
   */
  deleteNetworkOpenshiftIoV1HostSubnet(body: Models.V1DeleteOptions, name: string, options?: Models.OpenShiftAPIwithKubernetesDeleteNetworkOpenshiftIoV1HostSubnetOptionalParams): Promise<Models.DeleteNetworkOpenshiftIoV1HostSubnetResponse>;
  /**
   * @param body
   * @param name name of the HostSubnet
   * @param callback The callback
   */
  deleteNetworkOpenshiftIoV1HostSubnet(body: Models.V1DeleteOptions, name: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param name name of the HostSubnet
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteNetworkOpenshiftIoV1HostSubnet(body: Models.V1DeleteOptions, name: string, options: Models.OpenShiftAPIwithKubernetesDeleteNetworkOpenshiftIoV1HostSubnetOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteNetworkOpenshiftIoV1HostSubnet(body: Models.V1DeleteOptions, name: string, options?: Models.OpenShiftAPIwithKubernetesDeleteNetworkOpenshiftIoV1HostSubnetOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteNetworkOpenshiftIoV1HostSubnetResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      deleteNetworkOpenshiftIoV1HostSubnetOperationSpec,
      callback) as Promise<Models.DeleteNetworkOpenshiftIoV1HostSubnetResponse>;
  }

  /**
   * partially update the specified HostSubnet
   * @param body
   * @param name name of the HostSubnet
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchNetworkOpenshiftIoV1HostSubnetResponse>
   */
  patchNetworkOpenshiftIoV1HostSubnet(body: any, name: string, options?: Models.OpenShiftAPIwithKubernetesPatchNetworkOpenshiftIoV1HostSubnetOptionalParams): Promise<Models.PatchNetworkOpenshiftIoV1HostSubnetResponse>;
  /**
   * @param body
   * @param name name of the HostSubnet
   * @param callback The callback
   */
  patchNetworkOpenshiftIoV1HostSubnet(body: any, name: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapinetworkv1HostSubnet>): void;
  /**
   * @param body
   * @param name name of the HostSubnet
   * @param options The optional parameters
   * @param callback The callback
   */
  patchNetworkOpenshiftIoV1HostSubnet(body: any, name: string, options: Models.OpenShiftAPIwithKubernetesPatchNetworkOpenshiftIoV1HostSubnetOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapinetworkv1HostSubnet>): void;
  patchNetworkOpenshiftIoV1HostSubnet(body: any, name: string, options?: Models.OpenShiftAPIwithKubernetesPatchNetworkOpenshiftIoV1HostSubnetOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapinetworkv1HostSubnet>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapinetworkv1HostSubnet>): Promise<Models.PatchNetworkOpenshiftIoV1HostSubnetResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      patchNetworkOpenshiftIoV1HostSubnetOperationSpec,
      callback) as Promise<Models.PatchNetworkOpenshiftIoV1HostSubnetResponse>;
  }

  /**
   * list or watch objects of kind EgressNetworkPolicy
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ListNetworkOpenshiftIoV1NamespacedEgressNetworkPolicyResponse>
   */
  listNetworkOpenshiftIoV1NamespacedEgressNetworkPolicy(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListNetworkOpenshiftIoV1NamespacedEgressNetworkPolicyOptionalParams): Promise<Models.ListNetworkOpenshiftIoV1NamespacedEgressNetworkPolicyResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  listNetworkOpenshiftIoV1NamespacedEgressNetworkPolicy(namespace: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapinetworkv1EgressNetworkPolicyList>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  listNetworkOpenshiftIoV1NamespacedEgressNetworkPolicy(namespace: string, options: Models.OpenShiftAPIwithKubernetesListNetworkOpenshiftIoV1NamespacedEgressNetworkPolicyOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapinetworkv1EgressNetworkPolicyList>): void;
  listNetworkOpenshiftIoV1NamespacedEgressNetworkPolicy(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListNetworkOpenshiftIoV1NamespacedEgressNetworkPolicyOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapinetworkv1EgressNetworkPolicyList>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapinetworkv1EgressNetworkPolicyList>): Promise<Models.ListNetworkOpenshiftIoV1NamespacedEgressNetworkPolicyResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      listNetworkOpenshiftIoV1NamespacedEgressNetworkPolicyOperationSpec,
      callback) as Promise<Models.ListNetworkOpenshiftIoV1NamespacedEgressNetworkPolicyResponse>;
  }

  /**
   * create an EgressNetworkPolicy
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateNetworkOpenshiftIoV1NamespacedEgressNetworkPolicyResponse>
   */
  createNetworkOpenshiftIoV1NamespacedEgressNetworkPolicy(body: Models.Comgithubopenshiftapinetworkv1EgressNetworkPolicy, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateNetworkOpenshiftIoV1NamespacedEgressNetworkPolicyOptionalParams): Promise<Models.CreateNetworkOpenshiftIoV1NamespacedEgressNetworkPolicyResponse>;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  createNetworkOpenshiftIoV1NamespacedEgressNetworkPolicy(body: Models.Comgithubopenshiftapinetworkv1EgressNetworkPolicy, namespace: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapinetworkv1EgressNetworkPolicy>): void;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  createNetworkOpenshiftIoV1NamespacedEgressNetworkPolicy(body: Models.Comgithubopenshiftapinetworkv1EgressNetworkPolicy, namespace: string, options: Models.OpenShiftAPIwithKubernetesCreateNetworkOpenshiftIoV1NamespacedEgressNetworkPolicyOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapinetworkv1EgressNetworkPolicy>): void;
  createNetworkOpenshiftIoV1NamespacedEgressNetworkPolicy(body: Models.Comgithubopenshiftapinetworkv1EgressNetworkPolicy, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateNetworkOpenshiftIoV1NamespacedEgressNetworkPolicyOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapinetworkv1EgressNetworkPolicy>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapinetworkv1EgressNetworkPolicy>): Promise<Models.CreateNetworkOpenshiftIoV1NamespacedEgressNetworkPolicyResponse> {
    return this.sendOperationRequest(
      {
        body,
        namespace,
        options
      },
      createNetworkOpenshiftIoV1NamespacedEgressNetworkPolicyOperationSpec,
      callback) as Promise<Models.CreateNetworkOpenshiftIoV1NamespacedEgressNetworkPolicyResponse>;
  }

  /**
   * delete collection of EgressNetworkPolicy
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns
   * Promise<Models.DeleteNetworkOpenshiftIoV1CollectionNamespacedEgressNetworkPolicyResponse>
   */
  deleteNetworkOpenshiftIoV1CollectionNamespacedEgressNetworkPolicy(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteNetworkOpenshiftIoV1CollectionNamespacedEgressNetworkPolicyOptionalParams): Promise<Models.DeleteNetworkOpenshiftIoV1CollectionNamespacedEgressNetworkPolicyResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteNetworkOpenshiftIoV1CollectionNamespacedEgressNetworkPolicy(namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteNetworkOpenshiftIoV1CollectionNamespacedEgressNetworkPolicy(namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteNetworkOpenshiftIoV1CollectionNamespacedEgressNetworkPolicyOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteNetworkOpenshiftIoV1CollectionNamespacedEgressNetworkPolicy(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteNetworkOpenshiftIoV1CollectionNamespacedEgressNetworkPolicyOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteNetworkOpenshiftIoV1CollectionNamespacedEgressNetworkPolicyResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      deleteNetworkOpenshiftIoV1CollectionNamespacedEgressNetworkPolicyOperationSpec,
      callback) as Promise<Models.DeleteNetworkOpenshiftIoV1CollectionNamespacedEgressNetworkPolicyResponse>;
  }

  /**
   * read the specified EgressNetworkPolicy
   * @param name name of the EgressNetworkPolicy
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadNetworkOpenshiftIoV1NamespacedEgressNetworkPolicyResponse>
   */
  readNetworkOpenshiftIoV1NamespacedEgressNetworkPolicy(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadNetworkOpenshiftIoV1NamespacedEgressNetworkPolicyOptionalParams): Promise<Models.ReadNetworkOpenshiftIoV1NamespacedEgressNetworkPolicyResponse>;
  /**
   * @param name name of the EgressNetworkPolicy
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readNetworkOpenshiftIoV1NamespacedEgressNetworkPolicy(name: string, namespace: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapinetworkv1EgressNetworkPolicy>): void;
  /**
   * @param name name of the EgressNetworkPolicy
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readNetworkOpenshiftIoV1NamespacedEgressNetworkPolicy(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadNetworkOpenshiftIoV1NamespacedEgressNetworkPolicyOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapinetworkv1EgressNetworkPolicy>): void;
  readNetworkOpenshiftIoV1NamespacedEgressNetworkPolicy(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadNetworkOpenshiftIoV1NamespacedEgressNetworkPolicyOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapinetworkv1EgressNetworkPolicy>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapinetworkv1EgressNetworkPolicy>): Promise<Models.ReadNetworkOpenshiftIoV1NamespacedEgressNetworkPolicyResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readNetworkOpenshiftIoV1NamespacedEgressNetworkPolicyOperationSpec,
      callback) as Promise<Models.ReadNetworkOpenshiftIoV1NamespacedEgressNetworkPolicyResponse>;
  }

  /**
   * replace the specified EgressNetworkPolicy
   * @param body
   * @param name name of the EgressNetworkPolicy
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceNetworkOpenshiftIoV1NamespacedEgressNetworkPolicyResponse>
   */
  replaceNetworkOpenshiftIoV1NamespacedEgressNetworkPolicy(body: Models.Comgithubopenshiftapinetworkv1EgressNetworkPolicy, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceNetworkOpenshiftIoV1NamespacedEgressNetworkPolicyOptionalParams): Promise<Models.ReplaceNetworkOpenshiftIoV1NamespacedEgressNetworkPolicyResponse>;
  /**
   * @param body
   * @param name name of the EgressNetworkPolicy
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replaceNetworkOpenshiftIoV1NamespacedEgressNetworkPolicy(body: Models.Comgithubopenshiftapinetworkv1EgressNetworkPolicy, name: string, namespace: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapinetworkv1EgressNetworkPolicy>): void;
  /**
   * @param body
   * @param name name of the EgressNetworkPolicy
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceNetworkOpenshiftIoV1NamespacedEgressNetworkPolicy(body: Models.Comgithubopenshiftapinetworkv1EgressNetworkPolicy, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplaceNetworkOpenshiftIoV1NamespacedEgressNetworkPolicyOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapinetworkv1EgressNetworkPolicy>): void;
  replaceNetworkOpenshiftIoV1NamespacedEgressNetworkPolicy(body: Models.Comgithubopenshiftapinetworkv1EgressNetworkPolicy, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceNetworkOpenshiftIoV1NamespacedEgressNetworkPolicyOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapinetworkv1EgressNetworkPolicy>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapinetworkv1EgressNetworkPolicy>): Promise<Models.ReplaceNetworkOpenshiftIoV1NamespacedEgressNetworkPolicyResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replaceNetworkOpenshiftIoV1NamespacedEgressNetworkPolicyOperationSpec,
      callback) as Promise<Models.ReplaceNetworkOpenshiftIoV1NamespacedEgressNetworkPolicyResponse>;
  }

  /**
   * delete an EgressNetworkPolicy
   * @param body
   * @param name name of the EgressNetworkPolicy
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteNetworkOpenshiftIoV1NamespacedEgressNetworkPolicyResponse>
   */
  deleteNetworkOpenshiftIoV1NamespacedEgressNetworkPolicy(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteNetworkOpenshiftIoV1NamespacedEgressNetworkPolicyOptionalParams): Promise<Models.DeleteNetworkOpenshiftIoV1NamespacedEgressNetworkPolicyResponse>;
  /**
   * @param body
   * @param name name of the EgressNetworkPolicy
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteNetworkOpenshiftIoV1NamespacedEgressNetworkPolicy(body: Models.V1DeleteOptions, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param name name of the EgressNetworkPolicy
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteNetworkOpenshiftIoV1NamespacedEgressNetworkPolicy(body: Models.V1DeleteOptions, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteNetworkOpenshiftIoV1NamespacedEgressNetworkPolicyOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteNetworkOpenshiftIoV1NamespacedEgressNetworkPolicy(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteNetworkOpenshiftIoV1NamespacedEgressNetworkPolicyOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteNetworkOpenshiftIoV1NamespacedEgressNetworkPolicyResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      deleteNetworkOpenshiftIoV1NamespacedEgressNetworkPolicyOperationSpec,
      callback) as Promise<Models.DeleteNetworkOpenshiftIoV1NamespacedEgressNetworkPolicyResponse>;
  }

  /**
   * partially update the specified EgressNetworkPolicy
   * @param body
   * @param name name of the EgressNetworkPolicy
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchNetworkOpenshiftIoV1NamespacedEgressNetworkPolicyResponse>
   */
  patchNetworkOpenshiftIoV1NamespacedEgressNetworkPolicy(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchNetworkOpenshiftIoV1NamespacedEgressNetworkPolicyOptionalParams): Promise<Models.PatchNetworkOpenshiftIoV1NamespacedEgressNetworkPolicyResponse>;
  /**
   * @param body
   * @param name name of the EgressNetworkPolicy
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  patchNetworkOpenshiftIoV1NamespacedEgressNetworkPolicy(body: any, name: string, namespace: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapinetworkv1EgressNetworkPolicy>): void;
  /**
   * @param body
   * @param name name of the EgressNetworkPolicy
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  patchNetworkOpenshiftIoV1NamespacedEgressNetworkPolicy(body: any, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesPatchNetworkOpenshiftIoV1NamespacedEgressNetworkPolicyOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapinetworkv1EgressNetworkPolicy>): void;
  patchNetworkOpenshiftIoV1NamespacedEgressNetworkPolicy(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchNetworkOpenshiftIoV1NamespacedEgressNetworkPolicyOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapinetworkv1EgressNetworkPolicy>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapinetworkv1EgressNetworkPolicy>): Promise<Models.PatchNetworkOpenshiftIoV1NamespacedEgressNetworkPolicyResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      patchNetworkOpenshiftIoV1NamespacedEgressNetworkPolicyOperationSpec,
      callback) as Promise<Models.PatchNetworkOpenshiftIoV1NamespacedEgressNetworkPolicyResponse>;
  }

  /**
   * list or watch objects of kind NetNamespace
   * @param [options] The optional parameters
   * @returns Promise<Models.ListNetworkOpenshiftIoV1NetNamespaceResponse>
   */
  listNetworkOpenshiftIoV1NetNamespace(options?: Models.OpenShiftAPIwithKubernetesListNetworkOpenshiftIoV1NetNamespaceOptionalParams): Promise<Models.ListNetworkOpenshiftIoV1NetNamespaceResponse>;
  /**
   * @param callback The callback
   */
  listNetworkOpenshiftIoV1NetNamespace(callback: msRest.ServiceCallback<Models.Comgithubopenshiftapinetworkv1NetNamespaceList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listNetworkOpenshiftIoV1NetNamespace(options: Models.OpenShiftAPIwithKubernetesListNetworkOpenshiftIoV1NetNamespaceOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapinetworkv1NetNamespaceList>): void;
  listNetworkOpenshiftIoV1NetNamespace(options?: Models.OpenShiftAPIwithKubernetesListNetworkOpenshiftIoV1NetNamespaceOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapinetworkv1NetNamespaceList>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapinetworkv1NetNamespaceList>): Promise<Models.ListNetworkOpenshiftIoV1NetNamespaceResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listNetworkOpenshiftIoV1NetNamespaceOperationSpec,
      callback) as Promise<Models.ListNetworkOpenshiftIoV1NetNamespaceResponse>;
  }

  /**
   * create a NetNamespace
   * @param body
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateNetworkOpenshiftIoV1NetNamespaceResponse>
   */
  createNetworkOpenshiftIoV1NetNamespace(body: Models.Comgithubopenshiftapinetworkv1NetNamespace, options?: Models.OpenShiftAPIwithKubernetesCreateNetworkOpenshiftIoV1NetNamespaceOptionalParams): Promise<Models.CreateNetworkOpenshiftIoV1NetNamespaceResponse>;
  /**
   * @param body
   * @param callback The callback
   */
  createNetworkOpenshiftIoV1NetNamespace(body: Models.Comgithubopenshiftapinetworkv1NetNamespace, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapinetworkv1NetNamespace>): void;
  /**
   * @param body
   * @param options The optional parameters
   * @param callback The callback
   */
  createNetworkOpenshiftIoV1NetNamespace(body: Models.Comgithubopenshiftapinetworkv1NetNamespace, options: Models.OpenShiftAPIwithKubernetesCreateNetworkOpenshiftIoV1NetNamespaceOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapinetworkv1NetNamespace>): void;
  createNetworkOpenshiftIoV1NetNamespace(body: Models.Comgithubopenshiftapinetworkv1NetNamespace, options?: Models.OpenShiftAPIwithKubernetesCreateNetworkOpenshiftIoV1NetNamespaceOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapinetworkv1NetNamespace>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapinetworkv1NetNamespace>): Promise<Models.CreateNetworkOpenshiftIoV1NetNamespaceResponse> {
    return this.sendOperationRequest(
      {
        body,
        options
      },
      createNetworkOpenshiftIoV1NetNamespaceOperationSpec,
      callback) as Promise<Models.CreateNetworkOpenshiftIoV1NetNamespaceResponse>;
  }

  /**
   * delete collection of NetNamespace
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteNetworkOpenshiftIoV1CollectionNetNamespaceResponse>
   */
  deleteNetworkOpenshiftIoV1CollectionNetNamespace(options?: Models.OpenShiftAPIwithKubernetesDeleteNetworkOpenshiftIoV1CollectionNetNamespaceOptionalParams): Promise<Models.DeleteNetworkOpenshiftIoV1CollectionNetNamespaceResponse>;
  /**
   * @param callback The callback
   */
  deleteNetworkOpenshiftIoV1CollectionNetNamespace(callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteNetworkOpenshiftIoV1CollectionNetNamespace(options: Models.OpenShiftAPIwithKubernetesDeleteNetworkOpenshiftIoV1CollectionNetNamespaceOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteNetworkOpenshiftIoV1CollectionNetNamespace(options?: Models.OpenShiftAPIwithKubernetesDeleteNetworkOpenshiftIoV1CollectionNetNamespaceOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteNetworkOpenshiftIoV1CollectionNetNamespaceResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      deleteNetworkOpenshiftIoV1CollectionNetNamespaceOperationSpec,
      callback) as Promise<Models.DeleteNetworkOpenshiftIoV1CollectionNetNamespaceResponse>;
  }

  /**
   * read the specified NetNamespace
   * @param name name of the NetNamespace
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadNetworkOpenshiftIoV1NetNamespaceResponse>
   */
  readNetworkOpenshiftIoV1NetNamespace(name: string, options?: Models.OpenShiftAPIwithKubernetesReadNetworkOpenshiftIoV1NetNamespaceOptionalParams): Promise<Models.ReadNetworkOpenshiftIoV1NetNamespaceResponse>;
  /**
   * @param name name of the NetNamespace
   * @param callback The callback
   */
  readNetworkOpenshiftIoV1NetNamespace(name: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapinetworkv1NetNamespace>): void;
  /**
   * @param name name of the NetNamespace
   * @param options The optional parameters
   * @param callback The callback
   */
  readNetworkOpenshiftIoV1NetNamespace(name: string, options: Models.OpenShiftAPIwithKubernetesReadNetworkOpenshiftIoV1NetNamespaceOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapinetworkv1NetNamespace>): void;
  readNetworkOpenshiftIoV1NetNamespace(name: string, options?: Models.OpenShiftAPIwithKubernetesReadNetworkOpenshiftIoV1NetNamespaceOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapinetworkv1NetNamespace>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapinetworkv1NetNamespace>): Promise<Models.ReadNetworkOpenshiftIoV1NetNamespaceResponse> {
    return this.sendOperationRequest(
      {
        name,
        options
      },
      readNetworkOpenshiftIoV1NetNamespaceOperationSpec,
      callback) as Promise<Models.ReadNetworkOpenshiftIoV1NetNamespaceResponse>;
  }

  /**
   * replace the specified NetNamespace
   * @param body
   * @param name name of the NetNamespace
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceNetworkOpenshiftIoV1NetNamespaceResponse>
   */
  replaceNetworkOpenshiftIoV1NetNamespace(body: Models.Comgithubopenshiftapinetworkv1NetNamespace, name: string, options?: Models.OpenShiftAPIwithKubernetesReplaceNetworkOpenshiftIoV1NetNamespaceOptionalParams): Promise<Models.ReplaceNetworkOpenshiftIoV1NetNamespaceResponse>;
  /**
   * @param body
   * @param name name of the NetNamespace
   * @param callback The callback
   */
  replaceNetworkOpenshiftIoV1NetNamespace(body: Models.Comgithubopenshiftapinetworkv1NetNamespace, name: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapinetworkv1NetNamespace>): void;
  /**
   * @param body
   * @param name name of the NetNamespace
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceNetworkOpenshiftIoV1NetNamespace(body: Models.Comgithubopenshiftapinetworkv1NetNamespace, name: string, options: Models.OpenShiftAPIwithKubernetesReplaceNetworkOpenshiftIoV1NetNamespaceOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapinetworkv1NetNamespace>): void;
  replaceNetworkOpenshiftIoV1NetNamespace(body: Models.Comgithubopenshiftapinetworkv1NetNamespace, name: string, options?: Models.OpenShiftAPIwithKubernetesReplaceNetworkOpenshiftIoV1NetNamespaceOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapinetworkv1NetNamespace>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapinetworkv1NetNamespace>): Promise<Models.ReplaceNetworkOpenshiftIoV1NetNamespaceResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      replaceNetworkOpenshiftIoV1NetNamespaceOperationSpec,
      callback) as Promise<Models.ReplaceNetworkOpenshiftIoV1NetNamespaceResponse>;
  }

  /**
   * delete a NetNamespace
   * @param body
   * @param name name of the NetNamespace
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteNetworkOpenshiftIoV1NetNamespaceResponse>
   */
  deleteNetworkOpenshiftIoV1NetNamespace(body: Models.V1DeleteOptions, name: string, options?: Models.OpenShiftAPIwithKubernetesDeleteNetworkOpenshiftIoV1NetNamespaceOptionalParams): Promise<Models.DeleteNetworkOpenshiftIoV1NetNamespaceResponse>;
  /**
   * @param body
   * @param name name of the NetNamespace
   * @param callback The callback
   */
  deleteNetworkOpenshiftIoV1NetNamespace(body: Models.V1DeleteOptions, name: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param name name of the NetNamespace
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteNetworkOpenshiftIoV1NetNamespace(body: Models.V1DeleteOptions, name: string, options: Models.OpenShiftAPIwithKubernetesDeleteNetworkOpenshiftIoV1NetNamespaceOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteNetworkOpenshiftIoV1NetNamespace(body: Models.V1DeleteOptions, name: string, options?: Models.OpenShiftAPIwithKubernetesDeleteNetworkOpenshiftIoV1NetNamespaceOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteNetworkOpenshiftIoV1NetNamespaceResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      deleteNetworkOpenshiftIoV1NetNamespaceOperationSpec,
      callback) as Promise<Models.DeleteNetworkOpenshiftIoV1NetNamespaceResponse>;
  }

  /**
   * partially update the specified NetNamespace
   * @param body
   * @param name name of the NetNamespace
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchNetworkOpenshiftIoV1NetNamespaceResponse>
   */
  patchNetworkOpenshiftIoV1NetNamespace(body: any, name: string, options?: Models.OpenShiftAPIwithKubernetesPatchNetworkOpenshiftIoV1NetNamespaceOptionalParams): Promise<Models.PatchNetworkOpenshiftIoV1NetNamespaceResponse>;
  /**
   * @param body
   * @param name name of the NetNamespace
   * @param callback The callback
   */
  patchNetworkOpenshiftIoV1NetNamespace(body: any, name: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapinetworkv1NetNamespace>): void;
  /**
   * @param body
   * @param name name of the NetNamespace
   * @param options The optional parameters
   * @param callback The callback
   */
  patchNetworkOpenshiftIoV1NetNamespace(body: any, name: string, options: Models.OpenShiftAPIwithKubernetesPatchNetworkOpenshiftIoV1NetNamespaceOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapinetworkv1NetNamespace>): void;
  patchNetworkOpenshiftIoV1NetNamespace(body: any, name: string, options?: Models.OpenShiftAPIwithKubernetesPatchNetworkOpenshiftIoV1NetNamespaceOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapinetworkv1NetNamespace>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapinetworkv1NetNamespace>): Promise<Models.PatchNetworkOpenshiftIoV1NetNamespaceResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      patchNetworkOpenshiftIoV1NetNamespaceOperationSpec,
      callback) as Promise<Models.PatchNetworkOpenshiftIoV1NetNamespaceResponse>;
  }

  /**
   * watch individual changes to a list of ClusterNetwork
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchNetworkOpenshiftIoV1ClusterNetworkListResponse>
   */
  watchNetworkOpenshiftIoV1ClusterNetworkList(options?: Models.OpenShiftAPIwithKubernetesWatchNetworkOpenshiftIoV1ClusterNetworkListOptionalParams): Promise<Models.WatchNetworkOpenshiftIoV1ClusterNetworkListResponse>;
  /**
   * @param callback The callback
   */
  watchNetworkOpenshiftIoV1ClusterNetworkList(callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  watchNetworkOpenshiftIoV1ClusterNetworkList(options: Models.OpenShiftAPIwithKubernetesWatchNetworkOpenshiftIoV1ClusterNetworkListOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchNetworkOpenshiftIoV1ClusterNetworkList(options?: Models.OpenShiftAPIwithKubernetesWatchNetworkOpenshiftIoV1ClusterNetworkListOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchNetworkOpenshiftIoV1ClusterNetworkListResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      watchNetworkOpenshiftIoV1ClusterNetworkListOperationSpec,
      callback) as Promise<Models.WatchNetworkOpenshiftIoV1ClusterNetworkListResponse>;
  }

  /**
   * watch changes to an object of kind ClusterNetwork
   * @param name name of the ClusterNetwork
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchNetworkOpenshiftIoV1ClusterNetworkResponse>
   */
  watchNetworkOpenshiftIoV1ClusterNetwork(name: string, options?: Models.OpenShiftAPIwithKubernetesWatchNetworkOpenshiftIoV1ClusterNetworkOptionalParams): Promise<Models.WatchNetworkOpenshiftIoV1ClusterNetworkResponse>;
  /**
   * @param name name of the ClusterNetwork
   * @param callback The callback
   */
  watchNetworkOpenshiftIoV1ClusterNetwork(name: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param name name of the ClusterNetwork
   * @param options The optional parameters
   * @param callback The callback
   */
  watchNetworkOpenshiftIoV1ClusterNetwork(name: string, options: Models.OpenShiftAPIwithKubernetesWatchNetworkOpenshiftIoV1ClusterNetworkOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchNetworkOpenshiftIoV1ClusterNetwork(name: string, options?: Models.OpenShiftAPIwithKubernetesWatchNetworkOpenshiftIoV1ClusterNetworkOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchNetworkOpenshiftIoV1ClusterNetworkResponse> {
    return this.sendOperationRequest(
      {
        name,
        options
      },
      watchNetworkOpenshiftIoV1ClusterNetworkOperationSpec,
      callback) as Promise<Models.WatchNetworkOpenshiftIoV1ClusterNetworkResponse>;
  }

  /**
   * watch individual changes to a list of EgressNetworkPolicy
   * @param [options] The optional parameters
   * @returns
   * Promise<Models.WatchNetworkOpenshiftIoV1EgressNetworkPolicyListForAllNamespacesResponse>
   */
  watchNetworkOpenshiftIoV1EgressNetworkPolicyListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchNetworkOpenshiftIoV1EgressNetworkPolicyListForAllNamespacesOptionalParams): Promise<Models.WatchNetworkOpenshiftIoV1EgressNetworkPolicyListForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  watchNetworkOpenshiftIoV1EgressNetworkPolicyListForAllNamespaces(callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  watchNetworkOpenshiftIoV1EgressNetworkPolicyListForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesWatchNetworkOpenshiftIoV1EgressNetworkPolicyListForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchNetworkOpenshiftIoV1EgressNetworkPolicyListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchNetworkOpenshiftIoV1EgressNetworkPolicyListForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchNetworkOpenshiftIoV1EgressNetworkPolicyListForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      watchNetworkOpenshiftIoV1EgressNetworkPolicyListForAllNamespacesOperationSpec,
      callback) as Promise<Models.WatchNetworkOpenshiftIoV1EgressNetworkPolicyListForAllNamespacesResponse>;
  }

  /**
   * watch individual changes to a list of HostSubnet
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchNetworkOpenshiftIoV1HostSubnetListResponse>
   */
  watchNetworkOpenshiftIoV1HostSubnetList(options?: Models.OpenShiftAPIwithKubernetesWatchNetworkOpenshiftIoV1HostSubnetListOptionalParams): Promise<Models.WatchNetworkOpenshiftIoV1HostSubnetListResponse>;
  /**
   * @param callback The callback
   */
  watchNetworkOpenshiftIoV1HostSubnetList(callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  watchNetworkOpenshiftIoV1HostSubnetList(options: Models.OpenShiftAPIwithKubernetesWatchNetworkOpenshiftIoV1HostSubnetListOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchNetworkOpenshiftIoV1HostSubnetList(options?: Models.OpenShiftAPIwithKubernetesWatchNetworkOpenshiftIoV1HostSubnetListOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchNetworkOpenshiftIoV1HostSubnetListResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      watchNetworkOpenshiftIoV1HostSubnetListOperationSpec,
      callback) as Promise<Models.WatchNetworkOpenshiftIoV1HostSubnetListResponse>;
  }

  /**
   * watch changes to an object of kind HostSubnet
   * @param name name of the HostSubnet
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchNetworkOpenshiftIoV1HostSubnetResponse>
   */
  watchNetworkOpenshiftIoV1HostSubnet(name: string, options?: Models.OpenShiftAPIwithKubernetesWatchNetworkOpenshiftIoV1HostSubnetOptionalParams): Promise<Models.WatchNetworkOpenshiftIoV1HostSubnetResponse>;
  /**
   * @param name name of the HostSubnet
   * @param callback The callback
   */
  watchNetworkOpenshiftIoV1HostSubnet(name: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param name name of the HostSubnet
   * @param options The optional parameters
   * @param callback The callback
   */
  watchNetworkOpenshiftIoV1HostSubnet(name: string, options: Models.OpenShiftAPIwithKubernetesWatchNetworkOpenshiftIoV1HostSubnetOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchNetworkOpenshiftIoV1HostSubnet(name: string, options?: Models.OpenShiftAPIwithKubernetesWatchNetworkOpenshiftIoV1HostSubnetOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchNetworkOpenshiftIoV1HostSubnetResponse> {
    return this.sendOperationRequest(
      {
        name,
        options
      },
      watchNetworkOpenshiftIoV1HostSubnetOperationSpec,
      callback) as Promise<Models.WatchNetworkOpenshiftIoV1HostSubnetResponse>;
  }

  /**
   * watch individual changes to a list of EgressNetworkPolicy
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchNetworkOpenshiftIoV1NamespacedEgressNetworkPolicyListResponse>
   */
  watchNetworkOpenshiftIoV1NamespacedEgressNetworkPolicyList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchNetworkOpenshiftIoV1NamespacedEgressNetworkPolicyListOptionalParams): Promise<Models.WatchNetworkOpenshiftIoV1NamespacedEgressNetworkPolicyListResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchNetworkOpenshiftIoV1NamespacedEgressNetworkPolicyList(namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchNetworkOpenshiftIoV1NamespacedEgressNetworkPolicyList(namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchNetworkOpenshiftIoV1NamespacedEgressNetworkPolicyListOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchNetworkOpenshiftIoV1NamespacedEgressNetworkPolicyList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchNetworkOpenshiftIoV1NamespacedEgressNetworkPolicyListOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchNetworkOpenshiftIoV1NamespacedEgressNetworkPolicyListResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      watchNetworkOpenshiftIoV1NamespacedEgressNetworkPolicyListOperationSpec,
      callback) as Promise<Models.WatchNetworkOpenshiftIoV1NamespacedEgressNetworkPolicyListResponse>;
  }

  /**
   * watch changes to an object of kind EgressNetworkPolicy
   * @param name name of the EgressNetworkPolicy
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchNetworkOpenshiftIoV1NamespacedEgressNetworkPolicyResponse>
   */
  watchNetworkOpenshiftIoV1NamespacedEgressNetworkPolicy(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchNetworkOpenshiftIoV1NamespacedEgressNetworkPolicyOptionalParams): Promise<Models.WatchNetworkOpenshiftIoV1NamespacedEgressNetworkPolicyResponse>;
  /**
   * @param name name of the EgressNetworkPolicy
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchNetworkOpenshiftIoV1NamespacedEgressNetworkPolicy(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param name name of the EgressNetworkPolicy
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchNetworkOpenshiftIoV1NamespacedEgressNetworkPolicy(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchNetworkOpenshiftIoV1NamespacedEgressNetworkPolicyOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchNetworkOpenshiftIoV1NamespacedEgressNetworkPolicy(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchNetworkOpenshiftIoV1NamespacedEgressNetworkPolicyOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchNetworkOpenshiftIoV1NamespacedEgressNetworkPolicyResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      watchNetworkOpenshiftIoV1NamespacedEgressNetworkPolicyOperationSpec,
      callback) as Promise<Models.WatchNetworkOpenshiftIoV1NamespacedEgressNetworkPolicyResponse>;
  }

  /**
   * watch individual changes to a list of NetNamespace
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchNetworkOpenshiftIoV1NetNamespaceListResponse>
   */
  watchNetworkOpenshiftIoV1NetNamespaceList(options?: Models.OpenShiftAPIwithKubernetesWatchNetworkOpenshiftIoV1NetNamespaceListOptionalParams): Promise<Models.WatchNetworkOpenshiftIoV1NetNamespaceListResponse>;
  /**
   * @param callback The callback
   */
  watchNetworkOpenshiftIoV1NetNamespaceList(callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  watchNetworkOpenshiftIoV1NetNamespaceList(options: Models.OpenShiftAPIwithKubernetesWatchNetworkOpenshiftIoV1NetNamespaceListOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchNetworkOpenshiftIoV1NetNamespaceList(options?: Models.OpenShiftAPIwithKubernetesWatchNetworkOpenshiftIoV1NetNamespaceListOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchNetworkOpenshiftIoV1NetNamespaceListResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      watchNetworkOpenshiftIoV1NetNamespaceListOperationSpec,
      callback) as Promise<Models.WatchNetworkOpenshiftIoV1NetNamespaceListResponse>;
  }

  /**
   * watch changes to an object of kind NetNamespace
   * @param name name of the NetNamespace
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchNetworkOpenshiftIoV1NetNamespaceResponse>
   */
  watchNetworkOpenshiftIoV1NetNamespace(name: string, options?: Models.OpenShiftAPIwithKubernetesWatchNetworkOpenshiftIoV1NetNamespaceOptionalParams): Promise<Models.WatchNetworkOpenshiftIoV1NetNamespaceResponse>;
  /**
   * @param name name of the NetNamespace
   * @param callback The callback
   */
  watchNetworkOpenshiftIoV1NetNamespace(name: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param name name of the NetNamespace
   * @param options The optional parameters
   * @param callback The callback
   */
  watchNetworkOpenshiftIoV1NetNamespace(name: string, options: Models.OpenShiftAPIwithKubernetesWatchNetworkOpenshiftIoV1NetNamespaceOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchNetworkOpenshiftIoV1NetNamespace(name: string, options?: Models.OpenShiftAPIwithKubernetesWatchNetworkOpenshiftIoV1NetNamespaceOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchNetworkOpenshiftIoV1NetNamespaceResponse> {
    return this.sendOperationRequest(
      {
        name,
        options
      },
      watchNetworkOpenshiftIoV1NetNamespaceOperationSpec,
      callback) as Promise<Models.WatchNetworkOpenshiftIoV1NetNamespaceResponse>;
  }

  /**
   * get information of a group
   * @param [options] The optional parameters
   * @returns Promise<Models.GetNetworkingAPIGroupResponse>
   */
  getNetworkingAPIGroup(options?: msRest.RequestOptionsBase): Promise<Models.GetNetworkingAPIGroupResponse>;
  /**
   * @param callback The callback
   */
  getNetworkingAPIGroup(callback: msRest.ServiceCallback<Models.V1APIGroup>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getNetworkingAPIGroup(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.V1APIGroup>): void;
  getNetworkingAPIGroup(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.V1APIGroup>, callback?: msRest.ServiceCallback<Models.V1APIGroup>): Promise<Models.GetNetworkingAPIGroupResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getNetworkingAPIGroupOperationSpec,
      callback) as Promise<Models.GetNetworkingAPIGroupResponse>;
  }

  /**
   * get available resources
   * @param [options] The optional parameters
   * @returns Promise<Models.GetNetworkingV1APIResourcesResponse>
   */
  getNetworkingV1APIResources(options?: msRest.RequestOptionsBase): Promise<Models.GetNetworkingV1APIResourcesResponse>;
  /**
   * @param callback The callback
   */
  getNetworkingV1APIResources(callback: msRest.ServiceCallback<Models.V1APIResourceList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getNetworkingV1APIResources(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.V1APIResourceList>): void;
  getNetworkingV1APIResources(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.V1APIResourceList>, callback?: msRest.ServiceCallback<Models.V1APIResourceList>): Promise<Models.GetNetworkingV1APIResourcesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getNetworkingV1APIResourcesOperationSpec,
      callback) as Promise<Models.GetNetworkingV1APIResourcesResponse>;
  }

  /**
   * list or watch objects of kind NetworkPolicy
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ListNetworkingV1NamespacedNetworkPolicyResponse>
   */
  listNetworkingV1NamespacedNetworkPolicy(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListNetworkingV1NamespacedNetworkPolicyOptionalParams): Promise<Models.ListNetworkingV1NamespacedNetworkPolicyResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  listNetworkingV1NamespacedNetworkPolicy(namespace: string, callback: msRest.ServiceCallback<Models.V1NetworkPolicyList>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  listNetworkingV1NamespacedNetworkPolicy(namespace: string, options: Models.OpenShiftAPIwithKubernetesListNetworkingV1NamespacedNetworkPolicyOptionalParams, callback: msRest.ServiceCallback<Models.V1NetworkPolicyList>): void;
  listNetworkingV1NamespacedNetworkPolicy(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListNetworkingV1NamespacedNetworkPolicyOptionalParams | msRest.ServiceCallback<Models.V1NetworkPolicyList>, callback?: msRest.ServiceCallback<Models.V1NetworkPolicyList>): Promise<Models.ListNetworkingV1NamespacedNetworkPolicyResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      listNetworkingV1NamespacedNetworkPolicyOperationSpec,
      callback) as Promise<Models.ListNetworkingV1NamespacedNetworkPolicyResponse>;
  }

  /**
   * create a NetworkPolicy
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateNetworkingV1NamespacedNetworkPolicyResponse>
   */
  createNetworkingV1NamespacedNetworkPolicy(body: Models.V1NetworkPolicy, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateNetworkingV1NamespacedNetworkPolicyOptionalParams): Promise<Models.CreateNetworkingV1NamespacedNetworkPolicyResponse>;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  createNetworkingV1NamespacedNetworkPolicy(body: Models.V1NetworkPolicy, namespace: string, callback: msRest.ServiceCallback<Models.V1NetworkPolicy>): void;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  createNetworkingV1NamespacedNetworkPolicy(body: Models.V1NetworkPolicy, namespace: string, options: Models.OpenShiftAPIwithKubernetesCreateNetworkingV1NamespacedNetworkPolicyOptionalParams, callback: msRest.ServiceCallback<Models.V1NetworkPolicy>): void;
  createNetworkingV1NamespacedNetworkPolicy(body: Models.V1NetworkPolicy, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateNetworkingV1NamespacedNetworkPolicyOptionalParams | msRest.ServiceCallback<Models.V1NetworkPolicy>, callback?: msRest.ServiceCallback<Models.V1NetworkPolicy>): Promise<Models.CreateNetworkingV1NamespacedNetworkPolicyResponse> {
    return this.sendOperationRequest(
      {
        body,
        namespace,
        options
      },
      createNetworkingV1NamespacedNetworkPolicyOperationSpec,
      callback) as Promise<Models.CreateNetworkingV1NamespacedNetworkPolicyResponse>;
  }

  /**
   * delete collection of NetworkPolicy
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteNetworkingV1CollectionNamespacedNetworkPolicyResponse>
   */
  deleteNetworkingV1CollectionNamespacedNetworkPolicy(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteNetworkingV1CollectionNamespacedNetworkPolicyOptionalParams): Promise<Models.DeleteNetworkingV1CollectionNamespacedNetworkPolicyResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteNetworkingV1CollectionNamespacedNetworkPolicy(namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteNetworkingV1CollectionNamespacedNetworkPolicy(namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteNetworkingV1CollectionNamespacedNetworkPolicyOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteNetworkingV1CollectionNamespacedNetworkPolicy(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteNetworkingV1CollectionNamespacedNetworkPolicyOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteNetworkingV1CollectionNamespacedNetworkPolicyResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      deleteNetworkingV1CollectionNamespacedNetworkPolicyOperationSpec,
      callback) as Promise<Models.DeleteNetworkingV1CollectionNamespacedNetworkPolicyResponse>;
  }

  /**
   * read the specified NetworkPolicy
   * @param name name of the NetworkPolicy
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadNetworkingV1NamespacedNetworkPolicyResponse>
   */
  readNetworkingV1NamespacedNetworkPolicy(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadNetworkingV1NamespacedNetworkPolicyOptionalParams): Promise<Models.ReadNetworkingV1NamespacedNetworkPolicyResponse>;
  /**
   * @param name name of the NetworkPolicy
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readNetworkingV1NamespacedNetworkPolicy(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1NetworkPolicy>): void;
  /**
   * @param name name of the NetworkPolicy
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readNetworkingV1NamespacedNetworkPolicy(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadNetworkingV1NamespacedNetworkPolicyOptionalParams, callback: msRest.ServiceCallback<Models.V1NetworkPolicy>): void;
  readNetworkingV1NamespacedNetworkPolicy(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadNetworkingV1NamespacedNetworkPolicyOptionalParams | msRest.ServiceCallback<Models.V1NetworkPolicy>, callback?: msRest.ServiceCallback<Models.V1NetworkPolicy>): Promise<Models.ReadNetworkingV1NamespacedNetworkPolicyResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readNetworkingV1NamespacedNetworkPolicyOperationSpec,
      callback) as Promise<Models.ReadNetworkingV1NamespacedNetworkPolicyResponse>;
  }

  /**
   * replace the specified NetworkPolicy
   * @param body
   * @param name name of the NetworkPolicy
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceNetworkingV1NamespacedNetworkPolicyResponse>
   */
  replaceNetworkingV1NamespacedNetworkPolicy(body: Models.V1NetworkPolicy, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceNetworkingV1NamespacedNetworkPolicyOptionalParams): Promise<Models.ReplaceNetworkingV1NamespacedNetworkPolicyResponse>;
  /**
   * @param body
   * @param name name of the NetworkPolicy
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replaceNetworkingV1NamespacedNetworkPolicy(body: Models.V1NetworkPolicy, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1NetworkPolicy>): void;
  /**
   * @param body
   * @param name name of the NetworkPolicy
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceNetworkingV1NamespacedNetworkPolicy(body: Models.V1NetworkPolicy, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplaceNetworkingV1NamespacedNetworkPolicyOptionalParams, callback: msRest.ServiceCallback<Models.V1NetworkPolicy>): void;
  replaceNetworkingV1NamespacedNetworkPolicy(body: Models.V1NetworkPolicy, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceNetworkingV1NamespacedNetworkPolicyOptionalParams | msRest.ServiceCallback<Models.V1NetworkPolicy>, callback?: msRest.ServiceCallback<Models.V1NetworkPolicy>): Promise<Models.ReplaceNetworkingV1NamespacedNetworkPolicyResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replaceNetworkingV1NamespacedNetworkPolicyOperationSpec,
      callback) as Promise<Models.ReplaceNetworkingV1NamespacedNetworkPolicyResponse>;
  }

  /**
   * delete a NetworkPolicy
   * @param body
   * @param name name of the NetworkPolicy
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteNetworkingV1NamespacedNetworkPolicyResponse>
   */
  deleteNetworkingV1NamespacedNetworkPolicy(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteNetworkingV1NamespacedNetworkPolicyOptionalParams): Promise<Models.DeleteNetworkingV1NamespacedNetworkPolicyResponse>;
  /**
   * @param body
   * @param name name of the NetworkPolicy
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteNetworkingV1NamespacedNetworkPolicy(body: Models.V1DeleteOptions, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param name name of the NetworkPolicy
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteNetworkingV1NamespacedNetworkPolicy(body: Models.V1DeleteOptions, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteNetworkingV1NamespacedNetworkPolicyOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteNetworkingV1NamespacedNetworkPolicy(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteNetworkingV1NamespacedNetworkPolicyOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteNetworkingV1NamespacedNetworkPolicyResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      deleteNetworkingV1NamespacedNetworkPolicyOperationSpec,
      callback) as Promise<Models.DeleteNetworkingV1NamespacedNetworkPolicyResponse>;
  }

  /**
   * partially update the specified NetworkPolicy
   * @param body
   * @param name name of the NetworkPolicy
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchNetworkingV1NamespacedNetworkPolicyResponse>
   */
  patchNetworkingV1NamespacedNetworkPolicy(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchNetworkingV1NamespacedNetworkPolicyOptionalParams): Promise<Models.PatchNetworkingV1NamespacedNetworkPolicyResponse>;
  /**
   * @param body
   * @param name name of the NetworkPolicy
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  patchNetworkingV1NamespacedNetworkPolicy(body: any, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1NetworkPolicy>): void;
  /**
   * @param body
   * @param name name of the NetworkPolicy
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  patchNetworkingV1NamespacedNetworkPolicy(body: any, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesPatchNetworkingV1NamespacedNetworkPolicyOptionalParams, callback: msRest.ServiceCallback<Models.V1NetworkPolicy>): void;
  patchNetworkingV1NamespacedNetworkPolicy(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchNetworkingV1NamespacedNetworkPolicyOptionalParams | msRest.ServiceCallback<Models.V1NetworkPolicy>, callback?: msRest.ServiceCallback<Models.V1NetworkPolicy>): Promise<Models.PatchNetworkingV1NamespacedNetworkPolicyResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      patchNetworkingV1NamespacedNetworkPolicyOperationSpec,
      callback) as Promise<Models.PatchNetworkingV1NamespacedNetworkPolicyResponse>;
  }

  /**
   * list or watch objects of kind NetworkPolicy
   * @param [options] The optional parameters
   * @returns Promise<Models.ListNetworkingV1NetworkPolicyForAllNamespacesResponse>
   */
  listNetworkingV1NetworkPolicyForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListNetworkingV1NetworkPolicyForAllNamespacesOptionalParams): Promise<Models.ListNetworkingV1NetworkPolicyForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  listNetworkingV1NetworkPolicyForAllNamespaces(callback: msRest.ServiceCallback<Models.V1NetworkPolicyList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listNetworkingV1NetworkPolicyForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesListNetworkingV1NetworkPolicyForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1NetworkPolicyList>): void;
  listNetworkingV1NetworkPolicyForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListNetworkingV1NetworkPolicyForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1NetworkPolicyList>, callback?: msRest.ServiceCallback<Models.V1NetworkPolicyList>): Promise<Models.ListNetworkingV1NetworkPolicyForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listNetworkingV1NetworkPolicyForAllNamespacesOperationSpec,
      callback) as Promise<Models.ListNetworkingV1NetworkPolicyForAllNamespacesResponse>;
  }

  /**
   * watch individual changes to a list of NetworkPolicy
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchNetworkingV1NamespacedNetworkPolicyListResponse>
   */
  watchNetworkingV1NamespacedNetworkPolicyList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchNetworkingV1NamespacedNetworkPolicyListOptionalParams): Promise<Models.WatchNetworkingV1NamespacedNetworkPolicyListResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchNetworkingV1NamespacedNetworkPolicyList(namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchNetworkingV1NamespacedNetworkPolicyList(namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchNetworkingV1NamespacedNetworkPolicyListOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchNetworkingV1NamespacedNetworkPolicyList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchNetworkingV1NamespacedNetworkPolicyListOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchNetworkingV1NamespacedNetworkPolicyListResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      watchNetworkingV1NamespacedNetworkPolicyListOperationSpec,
      callback) as Promise<Models.WatchNetworkingV1NamespacedNetworkPolicyListResponse>;
  }

  /**
   * watch changes to an object of kind NetworkPolicy
   * @param name name of the NetworkPolicy
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchNetworkingV1NamespacedNetworkPolicyResponse>
   */
  watchNetworkingV1NamespacedNetworkPolicy(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchNetworkingV1NamespacedNetworkPolicyOptionalParams): Promise<Models.WatchNetworkingV1NamespacedNetworkPolicyResponse>;
  /**
   * @param name name of the NetworkPolicy
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchNetworkingV1NamespacedNetworkPolicy(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param name name of the NetworkPolicy
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchNetworkingV1NamespacedNetworkPolicy(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchNetworkingV1NamespacedNetworkPolicyOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchNetworkingV1NamespacedNetworkPolicy(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchNetworkingV1NamespacedNetworkPolicyOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchNetworkingV1NamespacedNetworkPolicyResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      watchNetworkingV1NamespacedNetworkPolicyOperationSpec,
      callback) as Promise<Models.WatchNetworkingV1NamespacedNetworkPolicyResponse>;
  }

  /**
   * watch individual changes to a list of NetworkPolicy
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchNetworkingV1NetworkPolicyListForAllNamespacesResponse>
   */
  watchNetworkingV1NetworkPolicyListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchNetworkingV1NetworkPolicyListForAllNamespacesOptionalParams): Promise<Models.WatchNetworkingV1NetworkPolicyListForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  watchNetworkingV1NetworkPolicyListForAllNamespaces(callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  watchNetworkingV1NetworkPolicyListForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesWatchNetworkingV1NetworkPolicyListForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchNetworkingV1NetworkPolicyListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchNetworkingV1NetworkPolicyListForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchNetworkingV1NetworkPolicyListForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      watchNetworkingV1NetworkPolicyListForAllNamespacesOperationSpec,
      callback) as Promise<Models.WatchNetworkingV1NetworkPolicyListForAllNamespacesResponse>;
  }

  /**
   * get information of a group
   * @param [options] The optional parameters
   * @returns Promise<Models.GetOauthOpenshiftIoAPIGroupResponse>
   */
  getOauthOpenshiftIoAPIGroup(options?: msRest.RequestOptionsBase): Promise<Models.GetOauthOpenshiftIoAPIGroupResponse>;
  /**
   * @param callback The callback
   */
  getOauthOpenshiftIoAPIGroup(callback: msRest.ServiceCallback<Models.V1APIGroup>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getOauthOpenshiftIoAPIGroup(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.V1APIGroup>): void;
  getOauthOpenshiftIoAPIGroup(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.V1APIGroup>, callback?: msRest.ServiceCallback<Models.V1APIGroup>): Promise<Models.GetOauthOpenshiftIoAPIGroupResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getOauthOpenshiftIoAPIGroupOperationSpec,
      callback) as Promise<Models.GetOauthOpenshiftIoAPIGroupResponse>;
  }

  /**
   * get available resources
   * @param [options] The optional parameters
   * @returns Promise<Models.GetOauthOpenshiftIoV1APIResourcesResponse>
   */
  getOauthOpenshiftIoV1APIResources(options?: msRest.RequestOptionsBase): Promise<Models.GetOauthOpenshiftIoV1APIResourcesResponse>;
  /**
   * @param callback The callback
   */
  getOauthOpenshiftIoV1APIResources(callback: msRest.ServiceCallback<Models.V1APIResourceList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getOauthOpenshiftIoV1APIResources(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.V1APIResourceList>): void;
  getOauthOpenshiftIoV1APIResources(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.V1APIResourceList>, callback?: msRest.ServiceCallback<Models.V1APIResourceList>): Promise<Models.GetOauthOpenshiftIoV1APIResourcesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getOauthOpenshiftIoV1APIResourcesOperationSpec,
      callback) as Promise<Models.GetOauthOpenshiftIoV1APIResourcesResponse>;
  }

  /**
   * list or watch objects of kind OAuthAccessToken
   * @param [options] The optional parameters
   * @returns Promise<Models.ListOauthOpenshiftIoV1OAuthAccessTokenResponse>
   */
  listOauthOpenshiftIoV1OAuthAccessToken(options?: Models.OpenShiftAPIwithKubernetesListOauthOpenshiftIoV1OAuthAccessTokenOptionalParams): Promise<Models.ListOauthOpenshiftIoV1OAuthAccessTokenResponse>;
  /**
   * @param callback The callback
   */
  listOauthOpenshiftIoV1OAuthAccessToken(callback: msRest.ServiceCallback<Models.Comgithubopenshiftapioauthv1OAuthAccessTokenList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listOauthOpenshiftIoV1OAuthAccessToken(options: Models.OpenShiftAPIwithKubernetesListOauthOpenshiftIoV1OAuthAccessTokenOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapioauthv1OAuthAccessTokenList>): void;
  listOauthOpenshiftIoV1OAuthAccessToken(options?: Models.OpenShiftAPIwithKubernetesListOauthOpenshiftIoV1OAuthAccessTokenOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapioauthv1OAuthAccessTokenList>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapioauthv1OAuthAccessTokenList>): Promise<Models.ListOauthOpenshiftIoV1OAuthAccessTokenResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listOauthOpenshiftIoV1OAuthAccessTokenOperationSpec,
      callback) as Promise<Models.ListOauthOpenshiftIoV1OAuthAccessTokenResponse>;
  }

  /**
   * create an OAuthAccessToken
   * @param body
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateOauthOpenshiftIoV1OAuthAccessTokenResponse>
   */
  createOauthOpenshiftIoV1OAuthAccessToken(body: Models.Comgithubopenshiftapioauthv1OAuthAccessToken, options?: Models.OpenShiftAPIwithKubernetesCreateOauthOpenshiftIoV1OAuthAccessTokenOptionalParams): Promise<Models.CreateOauthOpenshiftIoV1OAuthAccessTokenResponse>;
  /**
   * @param body
   * @param callback The callback
   */
  createOauthOpenshiftIoV1OAuthAccessToken(body: Models.Comgithubopenshiftapioauthv1OAuthAccessToken, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapioauthv1OAuthAccessToken>): void;
  /**
   * @param body
   * @param options The optional parameters
   * @param callback The callback
   */
  createOauthOpenshiftIoV1OAuthAccessToken(body: Models.Comgithubopenshiftapioauthv1OAuthAccessToken, options: Models.OpenShiftAPIwithKubernetesCreateOauthOpenshiftIoV1OAuthAccessTokenOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapioauthv1OAuthAccessToken>): void;
  createOauthOpenshiftIoV1OAuthAccessToken(body: Models.Comgithubopenshiftapioauthv1OAuthAccessToken, options?: Models.OpenShiftAPIwithKubernetesCreateOauthOpenshiftIoV1OAuthAccessTokenOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapioauthv1OAuthAccessToken>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapioauthv1OAuthAccessToken>): Promise<Models.CreateOauthOpenshiftIoV1OAuthAccessTokenResponse> {
    return this.sendOperationRequest(
      {
        body,
        options
      },
      createOauthOpenshiftIoV1OAuthAccessTokenOperationSpec,
      callback) as Promise<Models.CreateOauthOpenshiftIoV1OAuthAccessTokenResponse>;
  }

  /**
   * delete collection of OAuthAccessToken
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteOauthOpenshiftIoV1CollectionOAuthAccessTokenResponse>
   */
  deleteOauthOpenshiftIoV1CollectionOAuthAccessToken(options?: Models.OpenShiftAPIwithKubernetesDeleteOauthOpenshiftIoV1CollectionOAuthAccessTokenOptionalParams): Promise<Models.DeleteOauthOpenshiftIoV1CollectionOAuthAccessTokenResponse>;
  /**
   * @param callback The callback
   */
  deleteOauthOpenshiftIoV1CollectionOAuthAccessToken(callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteOauthOpenshiftIoV1CollectionOAuthAccessToken(options: Models.OpenShiftAPIwithKubernetesDeleteOauthOpenshiftIoV1CollectionOAuthAccessTokenOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteOauthOpenshiftIoV1CollectionOAuthAccessToken(options?: Models.OpenShiftAPIwithKubernetesDeleteOauthOpenshiftIoV1CollectionOAuthAccessTokenOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteOauthOpenshiftIoV1CollectionOAuthAccessTokenResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      deleteOauthOpenshiftIoV1CollectionOAuthAccessTokenOperationSpec,
      callback) as Promise<Models.DeleteOauthOpenshiftIoV1CollectionOAuthAccessTokenResponse>;
  }

  /**
   * read the specified OAuthAccessToken
   * @param name name of the OAuthAccessToken
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadOauthOpenshiftIoV1OAuthAccessTokenResponse>
   */
  readOauthOpenshiftIoV1OAuthAccessToken(name: string, options?: Models.OpenShiftAPIwithKubernetesReadOauthOpenshiftIoV1OAuthAccessTokenOptionalParams): Promise<Models.ReadOauthOpenshiftIoV1OAuthAccessTokenResponse>;
  /**
   * @param name name of the OAuthAccessToken
   * @param callback The callback
   */
  readOauthOpenshiftIoV1OAuthAccessToken(name: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapioauthv1OAuthAccessToken>): void;
  /**
   * @param name name of the OAuthAccessToken
   * @param options The optional parameters
   * @param callback The callback
   */
  readOauthOpenshiftIoV1OAuthAccessToken(name: string, options: Models.OpenShiftAPIwithKubernetesReadOauthOpenshiftIoV1OAuthAccessTokenOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapioauthv1OAuthAccessToken>): void;
  readOauthOpenshiftIoV1OAuthAccessToken(name: string, options?: Models.OpenShiftAPIwithKubernetesReadOauthOpenshiftIoV1OAuthAccessTokenOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapioauthv1OAuthAccessToken>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapioauthv1OAuthAccessToken>): Promise<Models.ReadOauthOpenshiftIoV1OAuthAccessTokenResponse> {
    return this.sendOperationRequest(
      {
        name,
        options
      },
      readOauthOpenshiftIoV1OAuthAccessTokenOperationSpec,
      callback) as Promise<Models.ReadOauthOpenshiftIoV1OAuthAccessTokenResponse>;
  }

  /**
   * replace the specified OAuthAccessToken
   * @param body
   * @param name name of the OAuthAccessToken
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceOauthOpenshiftIoV1OAuthAccessTokenResponse>
   */
  replaceOauthOpenshiftIoV1OAuthAccessToken(body: Models.Comgithubopenshiftapioauthv1OAuthAccessToken, name: string, options?: Models.OpenShiftAPIwithKubernetesReplaceOauthOpenshiftIoV1OAuthAccessTokenOptionalParams): Promise<Models.ReplaceOauthOpenshiftIoV1OAuthAccessTokenResponse>;
  /**
   * @param body
   * @param name name of the OAuthAccessToken
   * @param callback The callback
   */
  replaceOauthOpenshiftIoV1OAuthAccessToken(body: Models.Comgithubopenshiftapioauthv1OAuthAccessToken, name: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapioauthv1OAuthAccessToken>): void;
  /**
   * @param body
   * @param name name of the OAuthAccessToken
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceOauthOpenshiftIoV1OAuthAccessToken(body: Models.Comgithubopenshiftapioauthv1OAuthAccessToken, name: string, options: Models.OpenShiftAPIwithKubernetesReplaceOauthOpenshiftIoV1OAuthAccessTokenOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapioauthv1OAuthAccessToken>): void;
  replaceOauthOpenshiftIoV1OAuthAccessToken(body: Models.Comgithubopenshiftapioauthv1OAuthAccessToken, name: string, options?: Models.OpenShiftAPIwithKubernetesReplaceOauthOpenshiftIoV1OAuthAccessTokenOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapioauthv1OAuthAccessToken>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapioauthv1OAuthAccessToken>): Promise<Models.ReplaceOauthOpenshiftIoV1OAuthAccessTokenResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      replaceOauthOpenshiftIoV1OAuthAccessTokenOperationSpec,
      callback) as Promise<Models.ReplaceOauthOpenshiftIoV1OAuthAccessTokenResponse>;
  }

  /**
   * delete an OAuthAccessToken
   * @param body
   * @param name name of the OAuthAccessToken
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteOauthOpenshiftIoV1OAuthAccessTokenResponse>
   */
  deleteOauthOpenshiftIoV1OAuthAccessToken(body: Models.V1DeleteOptions, name: string, options?: Models.OpenShiftAPIwithKubernetesDeleteOauthOpenshiftIoV1OAuthAccessTokenOptionalParams): Promise<Models.DeleteOauthOpenshiftIoV1OAuthAccessTokenResponse>;
  /**
   * @param body
   * @param name name of the OAuthAccessToken
   * @param callback The callback
   */
  deleteOauthOpenshiftIoV1OAuthAccessToken(body: Models.V1DeleteOptions, name: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param name name of the OAuthAccessToken
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteOauthOpenshiftIoV1OAuthAccessToken(body: Models.V1DeleteOptions, name: string, options: Models.OpenShiftAPIwithKubernetesDeleteOauthOpenshiftIoV1OAuthAccessTokenOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteOauthOpenshiftIoV1OAuthAccessToken(body: Models.V1DeleteOptions, name: string, options?: Models.OpenShiftAPIwithKubernetesDeleteOauthOpenshiftIoV1OAuthAccessTokenOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteOauthOpenshiftIoV1OAuthAccessTokenResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      deleteOauthOpenshiftIoV1OAuthAccessTokenOperationSpec,
      callback) as Promise<Models.DeleteOauthOpenshiftIoV1OAuthAccessTokenResponse>;
  }

  /**
   * partially update the specified OAuthAccessToken
   * @param body
   * @param name name of the OAuthAccessToken
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchOauthOpenshiftIoV1OAuthAccessTokenResponse>
   */
  patchOauthOpenshiftIoV1OAuthAccessToken(body: any, name: string, options?: Models.OpenShiftAPIwithKubernetesPatchOauthOpenshiftIoV1OAuthAccessTokenOptionalParams): Promise<Models.PatchOauthOpenshiftIoV1OAuthAccessTokenResponse>;
  /**
   * @param body
   * @param name name of the OAuthAccessToken
   * @param callback The callback
   */
  patchOauthOpenshiftIoV1OAuthAccessToken(body: any, name: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapioauthv1OAuthAccessToken>): void;
  /**
   * @param body
   * @param name name of the OAuthAccessToken
   * @param options The optional parameters
   * @param callback The callback
   */
  patchOauthOpenshiftIoV1OAuthAccessToken(body: any, name: string, options: Models.OpenShiftAPIwithKubernetesPatchOauthOpenshiftIoV1OAuthAccessTokenOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapioauthv1OAuthAccessToken>): void;
  patchOauthOpenshiftIoV1OAuthAccessToken(body: any, name: string, options?: Models.OpenShiftAPIwithKubernetesPatchOauthOpenshiftIoV1OAuthAccessTokenOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapioauthv1OAuthAccessToken>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapioauthv1OAuthAccessToken>): Promise<Models.PatchOauthOpenshiftIoV1OAuthAccessTokenResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      patchOauthOpenshiftIoV1OAuthAccessTokenOperationSpec,
      callback) as Promise<Models.PatchOauthOpenshiftIoV1OAuthAccessTokenResponse>;
  }

  /**
   * list or watch objects of kind OAuthAuthorizeToken
   * @param [options] The optional parameters
   * @returns Promise<Models.ListOauthOpenshiftIoV1OAuthAuthorizeTokenResponse>
   */
  listOauthOpenshiftIoV1OAuthAuthorizeToken(options?: Models.OpenShiftAPIwithKubernetesListOauthOpenshiftIoV1OAuthAuthorizeTokenOptionalParams): Promise<Models.ListOauthOpenshiftIoV1OAuthAuthorizeTokenResponse>;
  /**
   * @param callback The callback
   */
  listOauthOpenshiftIoV1OAuthAuthorizeToken(callback: msRest.ServiceCallback<Models.Comgithubopenshiftapioauthv1OAuthAuthorizeTokenList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listOauthOpenshiftIoV1OAuthAuthorizeToken(options: Models.OpenShiftAPIwithKubernetesListOauthOpenshiftIoV1OAuthAuthorizeTokenOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapioauthv1OAuthAuthorizeTokenList>): void;
  listOauthOpenshiftIoV1OAuthAuthorizeToken(options?: Models.OpenShiftAPIwithKubernetesListOauthOpenshiftIoV1OAuthAuthorizeTokenOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapioauthv1OAuthAuthorizeTokenList>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapioauthv1OAuthAuthorizeTokenList>): Promise<Models.ListOauthOpenshiftIoV1OAuthAuthorizeTokenResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listOauthOpenshiftIoV1OAuthAuthorizeTokenOperationSpec,
      callback) as Promise<Models.ListOauthOpenshiftIoV1OAuthAuthorizeTokenResponse>;
  }

  /**
   * create an OAuthAuthorizeToken
   * @param body
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateOauthOpenshiftIoV1OAuthAuthorizeTokenResponse>
   */
  createOauthOpenshiftIoV1OAuthAuthorizeToken(body: Models.Comgithubopenshiftapioauthv1OAuthAuthorizeToken, options?: Models.OpenShiftAPIwithKubernetesCreateOauthOpenshiftIoV1OAuthAuthorizeTokenOptionalParams): Promise<Models.CreateOauthOpenshiftIoV1OAuthAuthorizeTokenResponse>;
  /**
   * @param body
   * @param callback The callback
   */
  createOauthOpenshiftIoV1OAuthAuthorizeToken(body: Models.Comgithubopenshiftapioauthv1OAuthAuthorizeToken, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapioauthv1OAuthAuthorizeToken>): void;
  /**
   * @param body
   * @param options The optional parameters
   * @param callback The callback
   */
  createOauthOpenshiftIoV1OAuthAuthorizeToken(body: Models.Comgithubopenshiftapioauthv1OAuthAuthorizeToken, options: Models.OpenShiftAPIwithKubernetesCreateOauthOpenshiftIoV1OAuthAuthorizeTokenOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapioauthv1OAuthAuthorizeToken>): void;
  createOauthOpenshiftIoV1OAuthAuthorizeToken(body: Models.Comgithubopenshiftapioauthv1OAuthAuthorizeToken, options?: Models.OpenShiftAPIwithKubernetesCreateOauthOpenshiftIoV1OAuthAuthorizeTokenOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapioauthv1OAuthAuthorizeToken>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapioauthv1OAuthAuthorizeToken>): Promise<Models.CreateOauthOpenshiftIoV1OAuthAuthorizeTokenResponse> {
    return this.sendOperationRequest(
      {
        body,
        options
      },
      createOauthOpenshiftIoV1OAuthAuthorizeTokenOperationSpec,
      callback) as Promise<Models.CreateOauthOpenshiftIoV1OAuthAuthorizeTokenResponse>;
  }

  /**
   * delete collection of OAuthAuthorizeToken
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteOauthOpenshiftIoV1CollectionOAuthAuthorizeTokenResponse>
   */
  deleteOauthOpenshiftIoV1CollectionOAuthAuthorizeToken(options?: Models.OpenShiftAPIwithKubernetesDeleteOauthOpenshiftIoV1CollectionOAuthAuthorizeTokenOptionalParams): Promise<Models.DeleteOauthOpenshiftIoV1CollectionOAuthAuthorizeTokenResponse>;
  /**
   * @param callback The callback
   */
  deleteOauthOpenshiftIoV1CollectionOAuthAuthorizeToken(callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteOauthOpenshiftIoV1CollectionOAuthAuthorizeToken(options: Models.OpenShiftAPIwithKubernetesDeleteOauthOpenshiftIoV1CollectionOAuthAuthorizeTokenOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteOauthOpenshiftIoV1CollectionOAuthAuthorizeToken(options?: Models.OpenShiftAPIwithKubernetesDeleteOauthOpenshiftIoV1CollectionOAuthAuthorizeTokenOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteOauthOpenshiftIoV1CollectionOAuthAuthorizeTokenResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      deleteOauthOpenshiftIoV1CollectionOAuthAuthorizeTokenOperationSpec,
      callback) as Promise<Models.DeleteOauthOpenshiftIoV1CollectionOAuthAuthorizeTokenResponse>;
  }

  /**
   * read the specified OAuthAuthorizeToken
   * @param name name of the OAuthAuthorizeToken
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadOauthOpenshiftIoV1OAuthAuthorizeTokenResponse>
   */
  readOauthOpenshiftIoV1OAuthAuthorizeToken(name: string, options?: Models.OpenShiftAPIwithKubernetesReadOauthOpenshiftIoV1OAuthAuthorizeTokenOptionalParams): Promise<Models.ReadOauthOpenshiftIoV1OAuthAuthorizeTokenResponse>;
  /**
   * @param name name of the OAuthAuthorizeToken
   * @param callback The callback
   */
  readOauthOpenshiftIoV1OAuthAuthorizeToken(name: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapioauthv1OAuthAuthorizeToken>): void;
  /**
   * @param name name of the OAuthAuthorizeToken
   * @param options The optional parameters
   * @param callback The callback
   */
  readOauthOpenshiftIoV1OAuthAuthorizeToken(name: string, options: Models.OpenShiftAPIwithKubernetesReadOauthOpenshiftIoV1OAuthAuthorizeTokenOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapioauthv1OAuthAuthorizeToken>): void;
  readOauthOpenshiftIoV1OAuthAuthorizeToken(name: string, options?: Models.OpenShiftAPIwithKubernetesReadOauthOpenshiftIoV1OAuthAuthorizeTokenOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapioauthv1OAuthAuthorizeToken>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapioauthv1OAuthAuthorizeToken>): Promise<Models.ReadOauthOpenshiftIoV1OAuthAuthorizeTokenResponse> {
    return this.sendOperationRequest(
      {
        name,
        options
      },
      readOauthOpenshiftIoV1OAuthAuthorizeTokenOperationSpec,
      callback) as Promise<Models.ReadOauthOpenshiftIoV1OAuthAuthorizeTokenResponse>;
  }

  /**
   * replace the specified OAuthAuthorizeToken
   * @param body
   * @param name name of the OAuthAuthorizeToken
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceOauthOpenshiftIoV1OAuthAuthorizeTokenResponse>
   */
  replaceOauthOpenshiftIoV1OAuthAuthorizeToken(body: Models.Comgithubopenshiftapioauthv1OAuthAuthorizeToken, name: string, options?: Models.OpenShiftAPIwithKubernetesReplaceOauthOpenshiftIoV1OAuthAuthorizeTokenOptionalParams): Promise<Models.ReplaceOauthOpenshiftIoV1OAuthAuthorizeTokenResponse>;
  /**
   * @param body
   * @param name name of the OAuthAuthorizeToken
   * @param callback The callback
   */
  replaceOauthOpenshiftIoV1OAuthAuthorizeToken(body: Models.Comgithubopenshiftapioauthv1OAuthAuthorizeToken, name: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapioauthv1OAuthAuthorizeToken>): void;
  /**
   * @param body
   * @param name name of the OAuthAuthorizeToken
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceOauthOpenshiftIoV1OAuthAuthorizeToken(body: Models.Comgithubopenshiftapioauthv1OAuthAuthorizeToken, name: string, options: Models.OpenShiftAPIwithKubernetesReplaceOauthOpenshiftIoV1OAuthAuthorizeTokenOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapioauthv1OAuthAuthorizeToken>): void;
  replaceOauthOpenshiftIoV1OAuthAuthorizeToken(body: Models.Comgithubopenshiftapioauthv1OAuthAuthorizeToken, name: string, options?: Models.OpenShiftAPIwithKubernetesReplaceOauthOpenshiftIoV1OAuthAuthorizeTokenOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapioauthv1OAuthAuthorizeToken>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapioauthv1OAuthAuthorizeToken>): Promise<Models.ReplaceOauthOpenshiftIoV1OAuthAuthorizeTokenResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      replaceOauthOpenshiftIoV1OAuthAuthorizeTokenOperationSpec,
      callback) as Promise<Models.ReplaceOauthOpenshiftIoV1OAuthAuthorizeTokenResponse>;
  }

  /**
   * delete an OAuthAuthorizeToken
   * @param body
   * @param name name of the OAuthAuthorizeToken
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteOauthOpenshiftIoV1OAuthAuthorizeTokenResponse>
   */
  deleteOauthOpenshiftIoV1OAuthAuthorizeToken(body: Models.V1DeleteOptions, name: string, options?: Models.OpenShiftAPIwithKubernetesDeleteOauthOpenshiftIoV1OAuthAuthorizeTokenOptionalParams): Promise<Models.DeleteOauthOpenshiftIoV1OAuthAuthorizeTokenResponse>;
  /**
   * @param body
   * @param name name of the OAuthAuthorizeToken
   * @param callback The callback
   */
  deleteOauthOpenshiftIoV1OAuthAuthorizeToken(body: Models.V1DeleteOptions, name: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param name name of the OAuthAuthorizeToken
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteOauthOpenshiftIoV1OAuthAuthorizeToken(body: Models.V1DeleteOptions, name: string, options: Models.OpenShiftAPIwithKubernetesDeleteOauthOpenshiftIoV1OAuthAuthorizeTokenOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteOauthOpenshiftIoV1OAuthAuthorizeToken(body: Models.V1DeleteOptions, name: string, options?: Models.OpenShiftAPIwithKubernetesDeleteOauthOpenshiftIoV1OAuthAuthorizeTokenOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteOauthOpenshiftIoV1OAuthAuthorizeTokenResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      deleteOauthOpenshiftIoV1OAuthAuthorizeTokenOperationSpec,
      callback) as Promise<Models.DeleteOauthOpenshiftIoV1OAuthAuthorizeTokenResponse>;
  }

  /**
   * partially update the specified OAuthAuthorizeToken
   * @param body
   * @param name name of the OAuthAuthorizeToken
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchOauthOpenshiftIoV1OAuthAuthorizeTokenResponse>
   */
  patchOauthOpenshiftIoV1OAuthAuthorizeToken(body: any, name: string, options?: Models.OpenShiftAPIwithKubernetesPatchOauthOpenshiftIoV1OAuthAuthorizeTokenOptionalParams): Promise<Models.PatchOauthOpenshiftIoV1OAuthAuthorizeTokenResponse>;
  /**
   * @param body
   * @param name name of the OAuthAuthorizeToken
   * @param callback The callback
   */
  patchOauthOpenshiftIoV1OAuthAuthorizeToken(body: any, name: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapioauthv1OAuthAuthorizeToken>): void;
  /**
   * @param body
   * @param name name of the OAuthAuthorizeToken
   * @param options The optional parameters
   * @param callback The callback
   */
  patchOauthOpenshiftIoV1OAuthAuthorizeToken(body: any, name: string, options: Models.OpenShiftAPIwithKubernetesPatchOauthOpenshiftIoV1OAuthAuthorizeTokenOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapioauthv1OAuthAuthorizeToken>): void;
  patchOauthOpenshiftIoV1OAuthAuthorizeToken(body: any, name: string, options?: Models.OpenShiftAPIwithKubernetesPatchOauthOpenshiftIoV1OAuthAuthorizeTokenOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapioauthv1OAuthAuthorizeToken>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapioauthv1OAuthAuthorizeToken>): Promise<Models.PatchOauthOpenshiftIoV1OAuthAuthorizeTokenResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      patchOauthOpenshiftIoV1OAuthAuthorizeTokenOperationSpec,
      callback) as Promise<Models.PatchOauthOpenshiftIoV1OAuthAuthorizeTokenResponse>;
  }

  /**
   * list or watch objects of kind OAuthClientAuthorization
   * @param [options] The optional parameters
   * @returns Promise<Models.ListOauthOpenshiftIoV1OAuthClientAuthorizationResponse>
   */
  listOauthOpenshiftIoV1OAuthClientAuthorization(options?: Models.OpenShiftAPIwithKubernetesListOauthOpenshiftIoV1OAuthClientAuthorizationOptionalParams): Promise<Models.ListOauthOpenshiftIoV1OAuthClientAuthorizationResponse>;
  /**
   * @param callback The callback
   */
  listOauthOpenshiftIoV1OAuthClientAuthorization(callback: msRest.ServiceCallback<Models.Comgithubopenshiftapioauthv1OAuthClientAuthorizationList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listOauthOpenshiftIoV1OAuthClientAuthorization(options: Models.OpenShiftAPIwithKubernetesListOauthOpenshiftIoV1OAuthClientAuthorizationOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapioauthv1OAuthClientAuthorizationList>): void;
  listOauthOpenshiftIoV1OAuthClientAuthorization(options?: Models.OpenShiftAPIwithKubernetesListOauthOpenshiftIoV1OAuthClientAuthorizationOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapioauthv1OAuthClientAuthorizationList>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapioauthv1OAuthClientAuthorizationList>): Promise<Models.ListOauthOpenshiftIoV1OAuthClientAuthorizationResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listOauthOpenshiftIoV1OAuthClientAuthorizationOperationSpec,
      callback) as Promise<Models.ListOauthOpenshiftIoV1OAuthClientAuthorizationResponse>;
  }

  /**
   * create an OAuthClientAuthorization
   * @param body
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateOauthOpenshiftIoV1OAuthClientAuthorizationResponse>
   */
  createOauthOpenshiftIoV1OAuthClientAuthorization(body: Models.Comgithubopenshiftapioauthv1OAuthClientAuthorization, options?: Models.OpenShiftAPIwithKubernetesCreateOauthOpenshiftIoV1OAuthClientAuthorizationOptionalParams): Promise<Models.CreateOauthOpenshiftIoV1OAuthClientAuthorizationResponse>;
  /**
   * @param body
   * @param callback The callback
   */
  createOauthOpenshiftIoV1OAuthClientAuthorization(body: Models.Comgithubopenshiftapioauthv1OAuthClientAuthorization, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapioauthv1OAuthClientAuthorization>): void;
  /**
   * @param body
   * @param options The optional parameters
   * @param callback The callback
   */
  createOauthOpenshiftIoV1OAuthClientAuthorization(body: Models.Comgithubopenshiftapioauthv1OAuthClientAuthorization, options: Models.OpenShiftAPIwithKubernetesCreateOauthOpenshiftIoV1OAuthClientAuthorizationOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapioauthv1OAuthClientAuthorization>): void;
  createOauthOpenshiftIoV1OAuthClientAuthorization(body: Models.Comgithubopenshiftapioauthv1OAuthClientAuthorization, options?: Models.OpenShiftAPIwithKubernetesCreateOauthOpenshiftIoV1OAuthClientAuthorizationOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapioauthv1OAuthClientAuthorization>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapioauthv1OAuthClientAuthorization>): Promise<Models.CreateOauthOpenshiftIoV1OAuthClientAuthorizationResponse> {
    return this.sendOperationRequest(
      {
        body,
        options
      },
      createOauthOpenshiftIoV1OAuthClientAuthorizationOperationSpec,
      callback) as Promise<Models.CreateOauthOpenshiftIoV1OAuthClientAuthorizationResponse>;
  }

  /**
   * delete collection of OAuthClientAuthorization
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteOauthOpenshiftIoV1CollectionOAuthClientAuthorizationResponse>
   */
  deleteOauthOpenshiftIoV1CollectionOAuthClientAuthorization(options?: Models.OpenShiftAPIwithKubernetesDeleteOauthOpenshiftIoV1CollectionOAuthClientAuthorizationOptionalParams): Promise<Models.DeleteOauthOpenshiftIoV1CollectionOAuthClientAuthorizationResponse>;
  /**
   * @param callback The callback
   */
  deleteOauthOpenshiftIoV1CollectionOAuthClientAuthorization(callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteOauthOpenshiftIoV1CollectionOAuthClientAuthorization(options: Models.OpenShiftAPIwithKubernetesDeleteOauthOpenshiftIoV1CollectionOAuthClientAuthorizationOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteOauthOpenshiftIoV1CollectionOAuthClientAuthorization(options?: Models.OpenShiftAPIwithKubernetesDeleteOauthOpenshiftIoV1CollectionOAuthClientAuthorizationOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteOauthOpenshiftIoV1CollectionOAuthClientAuthorizationResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      deleteOauthOpenshiftIoV1CollectionOAuthClientAuthorizationOperationSpec,
      callback) as Promise<Models.DeleteOauthOpenshiftIoV1CollectionOAuthClientAuthorizationResponse>;
  }

  /**
   * read the specified OAuthClientAuthorization
   * @param name name of the OAuthClientAuthorization
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadOauthOpenshiftIoV1OAuthClientAuthorizationResponse>
   */
  readOauthOpenshiftIoV1OAuthClientAuthorization(name: string, options?: Models.OpenShiftAPIwithKubernetesReadOauthOpenshiftIoV1OAuthClientAuthorizationOptionalParams): Promise<Models.ReadOauthOpenshiftIoV1OAuthClientAuthorizationResponse>;
  /**
   * @param name name of the OAuthClientAuthorization
   * @param callback The callback
   */
  readOauthOpenshiftIoV1OAuthClientAuthorization(name: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapioauthv1OAuthClientAuthorization>): void;
  /**
   * @param name name of the OAuthClientAuthorization
   * @param options The optional parameters
   * @param callback The callback
   */
  readOauthOpenshiftIoV1OAuthClientAuthorization(name: string, options: Models.OpenShiftAPIwithKubernetesReadOauthOpenshiftIoV1OAuthClientAuthorizationOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapioauthv1OAuthClientAuthorization>): void;
  readOauthOpenshiftIoV1OAuthClientAuthorization(name: string, options?: Models.OpenShiftAPIwithKubernetesReadOauthOpenshiftIoV1OAuthClientAuthorizationOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapioauthv1OAuthClientAuthorization>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapioauthv1OAuthClientAuthorization>): Promise<Models.ReadOauthOpenshiftIoV1OAuthClientAuthorizationResponse> {
    return this.sendOperationRequest(
      {
        name,
        options
      },
      readOauthOpenshiftIoV1OAuthClientAuthorizationOperationSpec,
      callback) as Promise<Models.ReadOauthOpenshiftIoV1OAuthClientAuthorizationResponse>;
  }

  /**
   * replace the specified OAuthClientAuthorization
   * @param body
   * @param name name of the OAuthClientAuthorization
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceOauthOpenshiftIoV1OAuthClientAuthorizationResponse>
   */
  replaceOauthOpenshiftIoV1OAuthClientAuthorization(body: Models.Comgithubopenshiftapioauthv1OAuthClientAuthorization, name: string, options?: Models.OpenShiftAPIwithKubernetesReplaceOauthOpenshiftIoV1OAuthClientAuthorizationOptionalParams): Promise<Models.ReplaceOauthOpenshiftIoV1OAuthClientAuthorizationResponse>;
  /**
   * @param body
   * @param name name of the OAuthClientAuthorization
   * @param callback The callback
   */
  replaceOauthOpenshiftIoV1OAuthClientAuthorization(body: Models.Comgithubopenshiftapioauthv1OAuthClientAuthorization, name: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapioauthv1OAuthClientAuthorization>): void;
  /**
   * @param body
   * @param name name of the OAuthClientAuthorization
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceOauthOpenshiftIoV1OAuthClientAuthorization(body: Models.Comgithubopenshiftapioauthv1OAuthClientAuthorization, name: string, options: Models.OpenShiftAPIwithKubernetesReplaceOauthOpenshiftIoV1OAuthClientAuthorizationOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapioauthv1OAuthClientAuthorization>): void;
  replaceOauthOpenshiftIoV1OAuthClientAuthorization(body: Models.Comgithubopenshiftapioauthv1OAuthClientAuthorization, name: string, options?: Models.OpenShiftAPIwithKubernetesReplaceOauthOpenshiftIoV1OAuthClientAuthorizationOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapioauthv1OAuthClientAuthorization>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapioauthv1OAuthClientAuthorization>): Promise<Models.ReplaceOauthOpenshiftIoV1OAuthClientAuthorizationResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      replaceOauthOpenshiftIoV1OAuthClientAuthorizationOperationSpec,
      callback) as Promise<Models.ReplaceOauthOpenshiftIoV1OAuthClientAuthorizationResponse>;
  }

  /**
   * delete an OAuthClientAuthorization
   * @param body
   * @param name name of the OAuthClientAuthorization
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteOauthOpenshiftIoV1OAuthClientAuthorizationResponse>
   */
  deleteOauthOpenshiftIoV1OAuthClientAuthorization(body: Models.V1DeleteOptions, name: string, options?: Models.OpenShiftAPIwithKubernetesDeleteOauthOpenshiftIoV1OAuthClientAuthorizationOptionalParams): Promise<Models.DeleteOauthOpenshiftIoV1OAuthClientAuthorizationResponse>;
  /**
   * @param body
   * @param name name of the OAuthClientAuthorization
   * @param callback The callback
   */
  deleteOauthOpenshiftIoV1OAuthClientAuthorization(body: Models.V1DeleteOptions, name: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param name name of the OAuthClientAuthorization
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteOauthOpenshiftIoV1OAuthClientAuthorization(body: Models.V1DeleteOptions, name: string, options: Models.OpenShiftAPIwithKubernetesDeleteOauthOpenshiftIoV1OAuthClientAuthorizationOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteOauthOpenshiftIoV1OAuthClientAuthorization(body: Models.V1DeleteOptions, name: string, options?: Models.OpenShiftAPIwithKubernetesDeleteOauthOpenshiftIoV1OAuthClientAuthorizationOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteOauthOpenshiftIoV1OAuthClientAuthorizationResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      deleteOauthOpenshiftIoV1OAuthClientAuthorizationOperationSpec,
      callback) as Promise<Models.DeleteOauthOpenshiftIoV1OAuthClientAuthorizationResponse>;
  }

  /**
   * partially update the specified OAuthClientAuthorization
   * @param body
   * @param name name of the OAuthClientAuthorization
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchOauthOpenshiftIoV1OAuthClientAuthorizationResponse>
   */
  patchOauthOpenshiftIoV1OAuthClientAuthorization(body: any, name: string, options?: Models.OpenShiftAPIwithKubernetesPatchOauthOpenshiftIoV1OAuthClientAuthorizationOptionalParams): Promise<Models.PatchOauthOpenshiftIoV1OAuthClientAuthorizationResponse>;
  /**
   * @param body
   * @param name name of the OAuthClientAuthorization
   * @param callback The callback
   */
  patchOauthOpenshiftIoV1OAuthClientAuthorization(body: any, name: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapioauthv1OAuthClientAuthorization>): void;
  /**
   * @param body
   * @param name name of the OAuthClientAuthorization
   * @param options The optional parameters
   * @param callback The callback
   */
  patchOauthOpenshiftIoV1OAuthClientAuthorization(body: any, name: string, options: Models.OpenShiftAPIwithKubernetesPatchOauthOpenshiftIoV1OAuthClientAuthorizationOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapioauthv1OAuthClientAuthorization>): void;
  patchOauthOpenshiftIoV1OAuthClientAuthorization(body: any, name: string, options?: Models.OpenShiftAPIwithKubernetesPatchOauthOpenshiftIoV1OAuthClientAuthorizationOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapioauthv1OAuthClientAuthorization>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapioauthv1OAuthClientAuthorization>): Promise<Models.PatchOauthOpenshiftIoV1OAuthClientAuthorizationResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      patchOauthOpenshiftIoV1OAuthClientAuthorizationOperationSpec,
      callback) as Promise<Models.PatchOauthOpenshiftIoV1OAuthClientAuthorizationResponse>;
  }

  /**
   * list or watch objects of kind OAuthClient
   * @param [options] The optional parameters
   * @returns Promise<Models.ListOauthOpenshiftIoV1OAuthClientResponse>
   */
  listOauthOpenshiftIoV1OAuthClient(options?: Models.OpenShiftAPIwithKubernetesListOauthOpenshiftIoV1OAuthClientOptionalParams): Promise<Models.ListOauthOpenshiftIoV1OAuthClientResponse>;
  /**
   * @param callback The callback
   */
  listOauthOpenshiftIoV1OAuthClient(callback: msRest.ServiceCallback<Models.Comgithubopenshiftapioauthv1OAuthClientList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listOauthOpenshiftIoV1OAuthClient(options: Models.OpenShiftAPIwithKubernetesListOauthOpenshiftIoV1OAuthClientOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapioauthv1OAuthClientList>): void;
  listOauthOpenshiftIoV1OAuthClient(options?: Models.OpenShiftAPIwithKubernetesListOauthOpenshiftIoV1OAuthClientOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapioauthv1OAuthClientList>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapioauthv1OAuthClientList>): Promise<Models.ListOauthOpenshiftIoV1OAuthClientResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listOauthOpenshiftIoV1OAuthClientOperationSpec,
      callback) as Promise<Models.ListOauthOpenshiftIoV1OAuthClientResponse>;
  }

  /**
   * create an OAuthClient
   * @param body
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateOauthOpenshiftIoV1OAuthClientResponse>
   */
  createOauthOpenshiftIoV1OAuthClient(body: Models.Comgithubopenshiftapioauthv1OAuthClient, options?: Models.OpenShiftAPIwithKubernetesCreateOauthOpenshiftIoV1OAuthClientOptionalParams): Promise<Models.CreateOauthOpenshiftIoV1OAuthClientResponse>;
  /**
   * @param body
   * @param callback The callback
   */
  createOauthOpenshiftIoV1OAuthClient(body: Models.Comgithubopenshiftapioauthv1OAuthClient, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapioauthv1OAuthClient>): void;
  /**
   * @param body
   * @param options The optional parameters
   * @param callback The callback
   */
  createOauthOpenshiftIoV1OAuthClient(body: Models.Comgithubopenshiftapioauthv1OAuthClient, options: Models.OpenShiftAPIwithKubernetesCreateOauthOpenshiftIoV1OAuthClientOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapioauthv1OAuthClient>): void;
  createOauthOpenshiftIoV1OAuthClient(body: Models.Comgithubopenshiftapioauthv1OAuthClient, options?: Models.OpenShiftAPIwithKubernetesCreateOauthOpenshiftIoV1OAuthClientOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapioauthv1OAuthClient>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapioauthv1OAuthClient>): Promise<Models.CreateOauthOpenshiftIoV1OAuthClientResponse> {
    return this.sendOperationRequest(
      {
        body,
        options
      },
      createOauthOpenshiftIoV1OAuthClientOperationSpec,
      callback) as Promise<Models.CreateOauthOpenshiftIoV1OAuthClientResponse>;
  }

  /**
   * delete collection of OAuthClient
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteOauthOpenshiftIoV1CollectionOAuthClientResponse>
   */
  deleteOauthOpenshiftIoV1CollectionOAuthClient(options?: Models.OpenShiftAPIwithKubernetesDeleteOauthOpenshiftIoV1CollectionOAuthClientOptionalParams): Promise<Models.DeleteOauthOpenshiftIoV1CollectionOAuthClientResponse>;
  /**
   * @param callback The callback
   */
  deleteOauthOpenshiftIoV1CollectionOAuthClient(callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteOauthOpenshiftIoV1CollectionOAuthClient(options: Models.OpenShiftAPIwithKubernetesDeleteOauthOpenshiftIoV1CollectionOAuthClientOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteOauthOpenshiftIoV1CollectionOAuthClient(options?: Models.OpenShiftAPIwithKubernetesDeleteOauthOpenshiftIoV1CollectionOAuthClientOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteOauthOpenshiftIoV1CollectionOAuthClientResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      deleteOauthOpenshiftIoV1CollectionOAuthClientOperationSpec,
      callback) as Promise<Models.DeleteOauthOpenshiftIoV1CollectionOAuthClientResponse>;
  }

  /**
   * read the specified OAuthClient
   * @param name name of the OAuthClient
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadOauthOpenshiftIoV1OAuthClientResponse>
   */
  readOauthOpenshiftIoV1OAuthClient(name: string, options?: Models.OpenShiftAPIwithKubernetesReadOauthOpenshiftIoV1OAuthClientOptionalParams): Promise<Models.ReadOauthOpenshiftIoV1OAuthClientResponse>;
  /**
   * @param name name of the OAuthClient
   * @param callback The callback
   */
  readOauthOpenshiftIoV1OAuthClient(name: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapioauthv1OAuthClient>): void;
  /**
   * @param name name of the OAuthClient
   * @param options The optional parameters
   * @param callback The callback
   */
  readOauthOpenshiftIoV1OAuthClient(name: string, options: Models.OpenShiftAPIwithKubernetesReadOauthOpenshiftIoV1OAuthClientOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapioauthv1OAuthClient>): void;
  readOauthOpenshiftIoV1OAuthClient(name: string, options?: Models.OpenShiftAPIwithKubernetesReadOauthOpenshiftIoV1OAuthClientOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapioauthv1OAuthClient>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapioauthv1OAuthClient>): Promise<Models.ReadOauthOpenshiftIoV1OAuthClientResponse> {
    return this.sendOperationRequest(
      {
        name,
        options
      },
      readOauthOpenshiftIoV1OAuthClientOperationSpec,
      callback) as Promise<Models.ReadOauthOpenshiftIoV1OAuthClientResponse>;
  }

  /**
   * replace the specified OAuthClient
   * @param body
   * @param name name of the OAuthClient
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceOauthOpenshiftIoV1OAuthClientResponse>
   */
  replaceOauthOpenshiftIoV1OAuthClient(body: Models.Comgithubopenshiftapioauthv1OAuthClient, name: string, options?: Models.OpenShiftAPIwithKubernetesReplaceOauthOpenshiftIoV1OAuthClientOptionalParams): Promise<Models.ReplaceOauthOpenshiftIoV1OAuthClientResponse>;
  /**
   * @param body
   * @param name name of the OAuthClient
   * @param callback The callback
   */
  replaceOauthOpenshiftIoV1OAuthClient(body: Models.Comgithubopenshiftapioauthv1OAuthClient, name: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapioauthv1OAuthClient>): void;
  /**
   * @param body
   * @param name name of the OAuthClient
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceOauthOpenshiftIoV1OAuthClient(body: Models.Comgithubopenshiftapioauthv1OAuthClient, name: string, options: Models.OpenShiftAPIwithKubernetesReplaceOauthOpenshiftIoV1OAuthClientOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapioauthv1OAuthClient>): void;
  replaceOauthOpenshiftIoV1OAuthClient(body: Models.Comgithubopenshiftapioauthv1OAuthClient, name: string, options?: Models.OpenShiftAPIwithKubernetesReplaceOauthOpenshiftIoV1OAuthClientOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapioauthv1OAuthClient>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapioauthv1OAuthClient>): Promise<Models.ReplaceOauthOpenshiftIoV1OAuthClientResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      replaceOauthOpenshiftIoV1OAuthClientOperationSpec,
      callback) as Promise<Models.ReplaceOauthOpenshiftIoV1OAuthClientResponse>;
  }

  /**
   * delete an OAuthClient
   * @param body
   * @param name name of the OAuthClient
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteOauthOpenshiftIoV1OAuthClientResponse>
   */
  deleteOauthOpenshiftIoV1OAuthClient(body: Models.V1DeleteOptions, name: string, options?: Models.OpenShiftAPIwithKubernetesDeleteOauthOpenshiftIoV1OAuthClientOptionalParams): Promise<Models.DeleteOauthOpenshiftIoV1OAuthClientResponse>;
  /**
   * @param body
   * @param name name of the OAuthClient
   * @param callback The callback
   */
  deleteOauthOpenshiftIoV1OAuthClient(body: Models.V1DeleteOptions, name: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param name name of the OAuthClient
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteOauthOpenshiftIoV1OAuthClient(body: Models.V1DeleteOptions, name: string, options: Models.OpenShiftAPIwithKubernetesDeleteOauthOpenshiftIoV1OAuthClientOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteOauthOpenshiftIoV1OAuthClient(body: Models.V1DeleteOptions, name: string, options?: Models.OpenShiftAPIwithKubernetesDeleteOauthOpenshiftIoV1OAuthClientOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteOauthOpenshiftIoV1OAuthClientResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      deleteOauthOpenshiftIoV1OAuthClientOperationSpec,
      callback) as Promise<Models.DeleteOauthOpenshiftIoV1OAuthClientResponse>;
  }

  /**
   * partially update the specified OAuthClient
   * @param body
   * @param name name of the OAuthClient
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchOauthOpenshiftIoV1OAuthClientResponse>
   */
  patchOauthOpenshiftIoV1OAuthClient(body: any, name: string, options?: Models.OpenShiftAPIwithKubernetesPatchOauthOpenshiftIoV1OAuthClientOptionalParams): Promise<Models.PatchOauthOpenshiftIoV1OAuthClientResponse>;
  /**
   * @param body
   * @param name name of the OAuthClient
   * @param callback The callback
   */
  patchOauthOpenshiftIoV1OAuthClient(body: any, name: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapioauthv1OAuthClient>): void;
  /**
   * @param body
   * @param name name of the OAuthClient
   * @param options The optional parameters
   * @param callback The callback
   */
  patchOauthOpenshiftIoV1OAuthClient(body: any, name: string, options: Models.OpenShiftAPIwithKubernetesPatchOauthOpenshiftIoV1OAuthClientOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapioauthv1OAuthClient>): void;
  patchOauthOpenshiftIoV1OAuthClient(body: any, name: string, options?: Models.OpenShiftAPIwithKubernetesPatchOauthOpenshiftIoV1OAuthClientOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapioauthv1OAuthClient>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapioauthv1OAuthClient>): Promise<Models.PatchOauthOpenshiftIoV1OAuthClientResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      patchOauthOpenshiftIoV1OAuthClientOperationSpec,
      callback) as Promise<Models.PatchOauthOpenshiftIoV1OAuthClientResponse>;
  }

  /**
   * watch individual changes to a list of OAuthAccessToken
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchOauthOpenshiftIoV1OAuthAccessTokenListResponse>
   */
  watchOauthOpenshiftIoV1OAuthAccessTokenList(options?: Models.OpenShiftAPIwithKubernetesWatchOauthOpenshiftIoV1OAuthAccessTokenListOptionalParams): Promise<Models.WatchOauthOpenshiftIoV1OAuthAccessTokenListResponse>;
  /**
   * @param callback The callback
   */
  watchOauthOpenshiftIoV1OAuthAccessTokenList(callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  watchOauthOpenshiftIoV1OAuthAccessTokenList(options: Models.OpenShiftAPIwithKubernetesWatchOauthOpenshiftIoV1OAuthAccessTokenListOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchOauthOpenshiftIoV1OAuthAccessTokenList(options?: Models.OpenShiftAPIwithKubernetesWatchOauthOpenshiftIoV1OAuthAccessTokenListOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchOauthOpenshiftIoV1OAuthAccessTokenListResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      watchOauthOpenshiftIoV1OAuthAccessTokenListOperationSpec,
      callback) as Promise<Models.WatchOauthOpenshiftIoV1OAuthAccessTokenListResponse>;
  }

  /**
   * watch changes to an object of kind OAuthAccessToken
   * @param name name of the OAuthAccessToken
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchOauthOpenshiftIoV1OAuthAccessTokenResponse>
   */
  watchOauthOpenshiftIoV1OAuthAccessToken(name: string, options?: Models.OpenShiftAPIwithKubernetesWatchOauthOpenshiftIoV1OAuthAccessTokenOptionalParams): Promise<Models.WatchOauthOpenshiftIoV1OAuthAccessTokenResponse>;
  /**
   * @param name name of the OAuthAccessToken
   * @param callback The callback
   */
  watchOauthOpenshiftIoV1OAuthAccessToken(name: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param name name of the OAuthAccessToken
   * @param options The optional parameters
   * @param callback The callback
   */
  watchOauthOpenshiftIoV1OAuthAccessToken(name: string, options: Models.OpenShiftAPIwithKubernetesWatchOauthOpenshiftIoV1OAuthAccessTokenOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchOauthOpenshiftIoV1OAuthAccessToken(name: string, options?: Models.OpenShiftAPIwithKubernetesWatchOauthOpenshiftIoV1OAuthAccessTokenOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchOauthOpenshiftIoV1OAuthAccessTokenResponse> {
    return this.sendOperationRequest(
      {
        name,
        options
      },
      watchOauthOpenshiftIoV1OAuthAccessTokenOperationSpec,
      callback) as Promise<Models.WatchOauthOpenshiftIoV1OAuthAccessTokenResponse>;
  }

  /**
   * watch individual changes to a list of OAuthAuthorizeToken
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchOauthOpenshiftIoV1OAuthAuthorizeTokenListResponse>
   */
  watchOauthOpenshiftIoV1OAuthAuthorizeTokenList(options?: Models.OpenShiftAPIwithKubernetesWatchOauthOpenshiftIoV1OAuthAuthorizeTokenListOptionalParams): Promise<Models.WatchOauthOpenshiftIoV1OAuthAuthorizeTokenListResponse>;
  /**
   * @param callback The callback
   */
  watchOauthOpenshiftIoV1OAuthAuthorizeTokenList(callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  watchOauthOpenshiftIoV1OAuthAuthorizeTokenList(options: Models.OpenShiftAPIwithKubernetesWatchOauthOpenshiftIoV1OAuthAuthorizeTokenListOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchOauthOpenshiftIoV1OAuthAuthorizeTokenList(options?: Models.OpenShiftAPIwithKubernetesWatchOauthOpenshiftIoV1OAuthAuthorizeTokenListOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchOauthOpenshiftIoV1OAuthAuthorizeTokenListResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      watchOauthOpenshiftIoV1OAuthAuthorizeTokenListOperationSpec,
      callback) as Promise<Models.WatchOauthOpenshiftIoV1OAuthAuthorizeTokenListResponse>;
  }

  /**
   * watch changes to an object of kind OAuthAuthorizeToken
   * @param name name of the OAuthAuthorizeToken
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchOauthOpenshiftIoV1OAuthAuthorizeTokenResponse>
   */
  watchOauthOpenshiftIoV1OAuthAuthorizeToken(name: string, options?: Models.OpenShiftAPIwithKubernetesWatchOauthOpenshiftIoV1OAuthAuthorizeTokenOptionalParams): Promise<Models.WatchOauthOpenshiftIoV1OAuthAuthorizeTokenResponse>;
  /**
   * @param name name of the OAuthAuthorizeToken
   * @param callback The callback
   */
  watchOauthOpenshiftIoV1OAuthAuthorizeToken(name: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param name name of the OAuthAuthorizeToken
   * @param options The optional parameters
   * @param callback The callback
   */
  watchOauthOpenshiftIoV1OAuthAuthorizeToken(name: string, options: Models.OpenShiftAPIwithKubernetesWatchOauthOpenshiftIoV1OAuthAuthorizeTokenOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchOauthOpenshiftIoV1OAuthAuthorizeToken(name: string, options?: Models.OpenShiftAPIwithKubernetesWatchOauthOpenshiftIoV1OAuthAuthorizeTokenOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchOauthOpenshiftIoV1OAuthAuthorizeTokenResponse> {
    return this.sendOperationRequest(
      {
        name,
        options
      },
      watchOauthOpenshiftIoV1OAuthAuthorizeTokenOperationSpec,
      callback) as Promise<Models.WatchOauthOpenshiftIoV1OAuthAuthorizeTokenResponse>;
  }

  /**
   * watch individual changes to a list of OAuthClientAuthorization
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchOauthOpenshiftIoV1OAuthClientAuthorizationListResponse>
   */
  watchOauthOpenshiftIoV1OAuthClientAuthorizationList(options?: Models.OpenShiftAPIwithKubernetesWatchOauthOpenshiftIoV1OAuthClientAuthorizationListOptionalParams): Promise<Models.WatchOauthOpenshiftIoV1OAuthClientAuthorizationListResponse>;
  /**
   * @param callback The callback
   */
  watchOauthOpenshiftIoV1OAuthClientAuthorizationList(callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  watchOauthOpenshiftIoV1OAuthClientAuthorizationList(options: Models.OpenShiftAPIwithKubernetesWatchOauthOpenshiftIoV1OAuthClientAuthorizationListOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchOauthOpenshiftIoV1OAuthClientAuthorizationList(options?: Models.OpenShiftAPIwithKubernetesWatchOauthOpenshiftIoV1OAuthClientAuthorizationListOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchOauthOpenshiftIoV1OAuthClientAuthorizationListResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      watchOauthOpenshiftIoV1OAuthClientAuthorizationListOperationSpec,
      callback) as Promise<Models.WatchOauthOpenshiftIoV1OAuthClientAuthorizationListResponse>;
  }

  /**
   * watch changes to an object of kind OAuthClientAuthorization
   * @param name name of the OAuthClientAuthorization
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchOauthOpenshiftIoV1OAuthClientAuthorizationResponse>
   */
  watchOauthOpenshiftIoV1OAuthClientAuthorization(name: string, options?: Models.OpenShiftAPIwithKubernetesWatchOauthOpenshiftIoV1OAuthClientAuthorizationOptionalParams): Promise<Models.WatchOauthOpenshiftIoV1OAuthClientAuthorizationResponse>;
  /**
   * @param name name of the OAuthClientAuthorization
   * @param callback The callback
   */
  watchOauthOpenshiftIoV1OAuthClientAuthorization(name: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param name name of the OAuthClientAuthorization
   * @param options The optional parameters
   * @param callback The callback
   */
  watchOauthOpenshiftIoV1OAuthClientAuthorization(name: string, options: Models.OpenShiftAPIwithKubernetesWatchOauthOpenshiftIoV1OAuthClientAuthorizationOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchOauthOpenshiftIoV1OAuthClientAuthorization(name: string, options?: Models.OpenShiftAPIwithKubernetesWatchOauthOpenshiftIoV1OAuthClientAuthorizationOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchOauthOpenshiftIoV1OAuthClientAuthorizationResponse> {
    return this.sendOperationRequest(
      {
        name,
        options
      },
      watchOauthOpenshiftIoV1OAuthClientAuthorizationOperationSpec,
      callback) as Promise<Models.WatchOauthOpenshiftIoV1OAuthClientAuthorizationResponse>;
  }

  /**
   * watch individual changes to a list of OAuthClient
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchOauthOpenshiftIoV1OAuthClientListResponse>
   */
  watchOauthOpenshiftIoV1OAuthClientList(options?: Models.OpenShiftAPIwithKubernetesWatchOauthOpenshiftIoV1OAuthClientListOptionalParams): Promise<Models.WatchOauthOpenshiftIoV1OAuthClientListResponse>;
  /**
   * @param callback The callback
   */
  watchOauthOpenshiftIoV1OAuthClientList(callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  watchOauthOpenshiftIoV1OAuthClientList(options: Models.OpenShiftAPIwithKubernetesWatchOauthOpenshiftIoV1OAuthClientListOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchOauthOpenshiftIoV1OAuthClientList(options?: Models.OpenShiftAPIwithKubernetesWatchOauthOpenshiftIoV1OAuthClientListOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchOauthOpenshiftIoV1OAuthClientListResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      watchOauthOpenshiftIoV1OAuthClientListOperationSpec,
      callback) as Promise<Models.WatchOauthOpenshiftIoV1OAuthClientListResponse>;
  }

  /**
   * watch changes to an object of kind OAuthClient
   * @param name name of the OAuthClient
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchOauthOpenshiftIoV1OAuthClientResponse>
   */
  watchOauthOpenshiftIoV1OAuthClient(name: string, options?: Models.OpenShiftAPIwithKubernetesWatchOauthOpenshiftIoV1OAuthClientOptionalParams): Promise<Models.WatchOauthOpenshiftIoV1OAuthClientResponse>;
  /**
   * @param name name of the OAuthClient
   * @param callback The callback
   */
  watchOauthOpenshiftIoV1OAuthClient(name: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param name name of the OAuthClient
   * @param options The optional parameters
   * @param callback The callback
   */
  watchOauthOpenshiftIoV1OAuthClient(name: string, options: Models.OpenShiftAPIwithKubernetesWatchOauthOpenshiftIoV1OAuthClientOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchOauthOpenshiftIoV1OAuthClient(name: string, options?: Models.OpenShiftAPIwithKubernetesWatchOauthOpenshiftIoV1OAuthClientOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchOauthOpenshiftIoV1OAuthClientResponse> {
    return this.sendOperationRequest(
      {
        name,
        options
      },
      watchOauthOpenshiftIoV1OAuthClientOperationSpec,
      callback) as Promise<Models.WatchOauthOpenshiftIoV1OAuthClientResponse>;
  }

  /**
   * get information of a group
   * @param [options] The optional parameters
   * @returns Promise<Models.GetPolicyAPIGroupResponse>
   */
  getPolicyAPIGroup(options?: msRest.RequestOptionsBase): Promise<Models.GetPolicyAPIGroupResponse>;
  /**
   * @param callback The callback
   */
  getPolicyAPIGroup(callback: msRest.ServiceCallback<Models.V1APIGroup>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getPolicyAPIGroup(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.V1APIGroup>): void;
  getPolicyAPIGroup(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.V1APIGroup>, callback?: msRest.ServiceCallback<Models.V1APIGroup>): Promise<Models.GetPolicyAPIGroupResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getPolicyAPIGroupOperationSpec,
      callback) as Promise<Models.GetPolicyAPIGroupResponse>;
  }

  /**
   * get available resources
   * @param [options] The optional parameters
   * @returns Promise<Models.GetPolicyV1beta1APIResourcesResponse>
   */
  getPolicyV1beta1APIResources(options?: msRest.RequestOptionsBase): Promise<Models.GetPolicyV1beta1APIResourcesResponse>;
  /**
   * @param callback The callback
   */
  getPolicyV1beta1APIResources(callback: msRest.ServiceCallback<Models.V1APIResourceList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getPolicyV1beta1APIResources(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.V1APIResourceList>): void;
  getPolicyV1beta1APIResources(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.V1APIResourceList>, callback?: msRest.ServiceCallback<Models.V1APIResourceList>): Promise<Models.GetPolicyV1beta1APIResourcesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getPolicyV1beta1APIResourcesOperationSpec,
      callback) as Promise<Models.GetPolicyV1beta1APIResourcesResponse>;
  }

  /**
   * list or watch objects of kind PodDisruptionBudget
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ListPolicyV1beta1NamespacedPodDisruptionBudgetResponse>
   */
  listPolicyV1beta1NamespacedPodDisruptionBudget(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListPolicyV1beta1NamespacedPodDisruptionBudgetOptionalParams): Promise<Models.ListPolicyV1beta1NamespacedPodDisruptionBudgetResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  listPolicyV1beta1NamespacedPodDisruptionBudget(namespace: string, callback: msRest.ServiceCallback<Models.V1beta1PodDisruptionBudgetList>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  listPolicyV1beta1NamespacedPodDisruptionBudget(namespace: string, options: Models.OpenShiftAPIwithKubernetesListPolicyV1beta1NamespacedPodDisruptionBudgetOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1PodDisruptionBudgetList>): void;
  listPolicyV1beta1NamespacedPodDisruptionBudget(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListPolicyV1beta1NamespacedPodDisruptionBudgetOptionalParams | msRest.ServiceCallback<Models.V1beta1PodDisruptionBudgetList>, callback?: msRest.ServiceCallback<Models.V1beta1PodDisruptionBudgetList>): Promise<Models.ListPolicyV1beta1NamespacedPodDisruptionBudgetResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      listPolicyV1beta1NamespacedPodDisruptionBudgetOperationSpec,
      callback) as Promise<Models.ListPolicyV1beta1NamespacedPodDisruptionBudgetResponse>;
  }

  /**
   * create a PodDisruptionBudget
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.CreatePolicyV1beta1NamespacedPodDisruptionBudgetResponse>
   */
  createPolicyV1beta1NamespacedPodDisruptionBudget(body: Models.V1beta1PodDisruptionBudget, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreatePolicyV1beta1NamespacedPodDisruptionBudgetOptionalParams): Promise<Models.CreatePolicyV1beta1NamespacedPodDisruptionBudgetResponse>;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  createPolicyV1beta1NamespacedPodDisruptionBudget(body: Models.V1beta1PodDisruptionBudget, namespace: string, callback: msRest.ServiceCallback<Models.V1beta1PodDisruptionBudget>): void;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  createPolicyV1beta1NamespacedPodDisruptionBudget(body: Models.V1beta1PodDisruptionBudget, namespace: string, options: Models.OpenShiftAPIwithKubernetesCreatePolicyV1beta1NamespacedPodDisruptionBudgetOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1PodDisruptionBudget>): void;
  createPolicyV1beta1NamespacedPodDisruptionBudget(body: Models.V1beta1PodDisruptionBudget, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreatePolicyV1beta1NamespacedPodDisruptionBudgetOptionalParams | msRest.ServiceCallback<Models.V1beta1PodDisruptionBudget>, callback?: msRest.ServiceCallback<Models.V1beta1PodDisruptionBudget>): Promise<Models.CreatePolicyV1beta1NamespacedPodDisruptionBudgetResponse> {
    return this.sendOperationRequest(
      {
        body,
        namespace,
        options
      },
      createPolicyV1beta1NamespacedPodDisruptionBudgetOperationSpec,
      callback) as Promise<Models.CreatePolicyV1beta1NamespacedPodDisruptionBudgetResponse>;
  }

  /**
   * delete collection of PodDisruptionBudget
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeletePolicyV1beta1CollectionNamespacedPodDisruptionBudgetResponse>
   */
  deletePolicyV1beta1CollectionNamespacedPodDisruptionBudget(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeletePolicyV1beta1CollectionNamespacedPodDisruptionBudgetOptionalParams): Promise<Models.DeletePolicyV1beta1CollectionNamespacedPodDisruptionBudgetResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deletePolicyV1beta1CollectionNamespacedPodDisruptionBudget(namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deletePolicyV1beta1CollectionNamespacedPodDisruptionBudget(namespace: string, options: Models.OpenShiftAPIwithKubernetesDeletePolicyV1beta1CollectionNamespacedPodDisruptionBudgetOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deletePolicyV1beta1CollectionNamespacedPodDisruptionBudget(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeletePolicyV1beta1CollectionNamespacedPodDisruptionBudgetOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeletePolicyV1beta1CollectionNamespacedPodDisruptionBudgetResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      deletePolicyV1beta1CollectionNamespacedPodDisruptionBudgetOperationSpec,
      callback) as Promise<Models.DeletePolicyV1beta1CollectionNamespacedPodDisruptionBudgetResponse>;
  }

  /**
   * read the specified PodDisruptionBudget
   * @param name name of the PodDisruptionBudget
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadPolicyV1beta1NamespacedPodDisruptionBudgetResponse>
   */
  readPolicyV1beta1NamespacedPodDisruptionBudget(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadPolicyV1beta1NamespacedPodDisruptionBudgetOptionalParams): Promise<Models.ReadPolicyV1beta1NamespacedPodDisruptionBudgetResponse>;
  /**
   * @param name name of the PodDisruptionBudget
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readPolicyV1beta1NamespacedPodDisruptionBudget(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1beta1PodDisruptionBudget>): void;
  /**
   * @param name name of the PodDisruptionBudget
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readPolicyV1beta1NamespacedPodDisruptionBudget(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadPolicyV1beta1NamespacedPodDisruptionBudgetOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1PodDisruptionBudget>): void;
  readPolicyV1beta1NamespacedPodDisruptionBudget(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadPolicyV1beta1NamespacedPodDisruptionBudgetOptionalParams | msRest.ServiceCallback<Models.V1beta1PodDisruptionBudget>, callback?: msRest.ServiceCallback<Models.V1beta1PodDisruptionBudget>): Promise<Models.ReadPolicyV1beta1NamespacedPodDisruptionBudgetResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readPolicyV1beta1NamespacedPodDisruptionBudgetOperationSpec,
      callback) as Promise<Models.ReadPolicyV1beta1NamespacedPodDisruptionBudgetResponse>;
  }

  /**
   * replace the specified PodDisruptionBudget
   * @param body
   * @param name name of the PodDisruptionBudget
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplacePolicyV1beta1NamespacedPodDisruptionBudgetResponse>
   */
  replacePolicyV1beta1NamespacedPodDisruptionBudget(body: Models.V1beta1PodDisruptionBudget, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplacePolicyV1beta1NamespacedPodDisruptionBudgetOptionalParams): Promise<Models.ReplacePolicyV1beta1NamespacedPodDisruptionBudgetResponse>;
  /**
   * @param body
   * @param name name of the PodDisruptionBudget
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replacePolicyV1beta1NamespacedPodDisruptionBudget(body: Models.V1beta1PodDisruptionBudget, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1beta1PodDisruptionBudget>): void;
  /**
   * @param body
   * @param name name of the PodDisruptionBudget
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replacePolicyV1beta1NamespacedPodDisruptionBudget(body: Models.V1beta1PodDisruptionBudget, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplacePolicyV1beta1NamespacedPodDisruptionBudgetOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1PodDisruptionBudget>): void;
  replacePolicyV1beta1NamespacedPodDisruptionBudget(body: Models.V1beta1PodDisruptionBudget, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplacePolicyV1beta1NamespacedPodDisruptionBudgetOptionalParams | msRest.ServiceCallback<Models.V1beta1PodDisruptionBudget>, callback?: msRest.ServiceCallback<Models.V1beta1PodDisruptionBudget>): Promise<Models.ReplacePolicyV1beta1NamespacedPodDisruptionBudgetResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replacePolicyV1beta1NamespacedPodDisruptionBudgetOperationSpec,
      callback) as Promise<Models.ReplacePolicyV1beta1NamespacedPodDisruptionBudgetResponse>;
  }

  /**
   * delete a PodDisruptionBudget
   * @param body
   * @param name name of the PodDisruptionBudget
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeletePolicyV1beta1NamespacedPodDisruptionBudgetResponse>
   */
  deletePolicyV1beta1NamespacedPodDisruptionBudget(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeletePolicyV1beta1NamespacedPodDisruptionBudgetOptionalParams): Promise<Models.DeletePolicyV1beta1NamespacedPodDisruptionBudgetResponse>;
  /**
   * @param body
   * @param name name of the PodDisruptionBudget
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deletePolicyV1beta1NamespacedPodDisruptionBudget(body: Models.V1DeleteOptions, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param name name of the PodDisruptionBudget
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deletePolicyV1beta1NamespacedPodDisruptionBudget(body: Models.V1DeleteOptions, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesDeletePolicyV1beta1NamespacedPodDisruptionBudgetOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deletePolicyV1beta1NamespacedPodDisruptionBudget(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeletePolicyV1beta1NamespacedPodDisruptionBudgetOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeletePolicyV1beta1NamespacedPodDisruptionBudgetResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      deletePolicyV1beta1NamespacedPodDisruptionBudgetOperationSpec,
      callback) as Promise<Models.DeletePolicyV1beta1NamespacedPodDisruptionBudgetResponse>;
  }

  /**
   * partially update the specified PodDisruptionBudget
   * @param body
   * @param name name of the PodDisruptionBudget
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchPolicyV1beta1NamespacedPodDisruptionBudgetResponse>
   */
  patchPolicyV1beta1NamespacedPodDisruptionBudget(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchPolicyV1beta1NamespacedPodDisruptionBudgetOptionalParams): Promise<Models.PatchPolicyV1beta1NamespacedPodDisruptionBudgetResponse>;
  /**
   * @param body
   * @param name name of the PodDisruptionBudget
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  patchPolicyV1beta1NamespacedPodDisruptionBudget(body: any, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1beta1PodDisruptionBudget>): void;
  /**
   * @param body
   * @param name name of the PodDisruptionBudget
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  patchPolicyV1beta1NamespacedPodDisruptionBudget(body: any, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesPatchPolicyV1beta1NamespacedPodDisruptionBudgetOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1PodDisruptionBudget>): void;
  patchPolicyV1beta1NamespacedPodDisruptionBudget(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchPolicyV1beta1NamespacedPodDisruptionBudgetOptionalParams | msRest.ServiceCallback<Models.V1beta1PodDisruptionBudget>, callback?: msRest.ServiceCallback<Models.V1beta1PodDisruptionBudget>): Promise<Models.PatchPolicyV1beta1NamespacedPodDisruptionBudgetResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      patchPolicyV1beta1NamespacedPodDisruptionBudgetOperationSpec,
      callback) as Promise<Models.PatchPolicyV1beta1NamespacedPodDisruptionBudgetResponse>;
  }

  /**
   * read status of the specified PodDisruptionBudget
   * @param name name of the PodDisruptionBudget
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadPolicyV1beta1NamespacedPodDisruptionBudgetStatusResponse>
   */
  readPolicyV1beta1NamespacedPodDisruptionBudgetStatus(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadPolicyV1beta1NamespacedPodDisruptionBudgetStatusOptionalParams): Promise<Models.ReadPolicyV1beta1NamespacedPodDisruptionBudgetStatusResponse>;
  /**
   * @param name name of the PodDisruptionBudget
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readPolicyV1beta1NamespacedPodDisruptionBudgetStatus(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1beta1PodDisruptionBudget>): void;
  /**
   * @param name name of the PodDisruptionBudget
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readPolicyV1beta1NamespacedPodDisruptionBudgetStatus(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadPolicyV1beta1NamespacedPodDisruptionBudgetStatusOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1PodDisruptionBudget>): void;
  readPolicyV1beta1NamespacedPodDisruptionBudgetStatus(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadPolicyV1beta1NamespacedPodDisruptionBudgetStatusOptionalParams | msRest.ServiceCallback<Models.V1beta1PodDisruptionBudget>, callback?: msRest.ServiceCallback<Models.V1beta1PodDisruptionBudget>): Promise<Models.ReadPolicyV1beta1NamespacedPodDisruptionBudgetStatusResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readPolicyV1beta1NamespacedPodDisruptionBudgetStatusOperationSpec,
      callback) as Promise<Models.ReadPolicyV1beta1NamespacedPodDisruptionBudgetStatusResponse>;
  }

  /**
   * replace status of the specified PodDisruptionBudget
   * @param body
   * @param name name of the PodDisruptionBudget
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplacePolicyV1beta1NamespacedPodDisruptionBudgetStatusResponse>
   */
  replacePolicyV1beta1NamespacedPodDisruptionBudgetStatus(body: Models.V1beta1PodDisruptionBudget, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplacePolicyV1beta1NamespacedPodDisruptionBudgetStatusOptionalParams): Promise<Models.ReplacePolicyV1beta1NamespacedPodDisruptionBudgetStatusResponse>;
  /**
   * @param body
   * @param name name of the PodDisruptionBudget
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replacePolicyV1beta1NamespacedPodDisruptionBudgetStatus(body: Models.V1beta1PodDisruptionBudget, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1beta1PodDisruptionBudget>): void;
  /**
   * @param body
   * @param name name of the PodDisruptionBudget
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replacePolicyV1beta1NamespacedPodDisruptionBudgetStatus(body: Models.V1beta1PodDisruptionBudget, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplacePolicyV1beta1NamespacedPodDisruptionBudgetStatusOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1PodDisruptionBudget>): void;
  replacePolicyV1beta1NamespacedPodDisruptionBudgetStatus(body: Models.V1beta1PodDisruptionBudget, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplacePolicyV1beta1NamespacedPodDisruptionBudgetStatusOptionalParams | msRest.ServiceCallback<Models.V1beta1PodDisruptionBudget>, callback?: msRest.ServiceCallback<Models.V1beta1PodDisruptionBudget>): Promise<Models.ReplacePolicyV1beta1NamespacedPodDisruptionBudgetStatusResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replacePolicyV1beta1NamespacedPodDisruptionBudgetStatusOperationSpec,
      callback) as Promise<Models.ReplacePolicyV1beta1NamespacedPodDisruptionBudgetStatusResponse>;
  }

  /**
   * partially update status of the specified PodDisruptionBudget
   * @param body
   * @param name name of the PodDisruptionBudget
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchPolicyV1beta1NamespacedPodDisruptionBudgetStatusResponse>
   */
  patchPolicyV1beta1NamespacedPodDisruptionBudgetStatus(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchPolicyV1beta1NamespacedPodDisruptionBudgetStatusOptionalParams): Promise<Models.PatchPolicyV1beta1NamespacedPodDisruptionBudgetStatusResponse>;
  /**
   * @param body
   * @param name name of the PodDisruptionBudget
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  patchPolicyV1beta1NamespacedPodDisruptionBudgetStatus(body: any, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1beta1PodDisruptionBudget>): void;
  /**
   * @param body
   * @param name name of the PodDisruptionBudget
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  patchPolicyV1beta1NamespacedPodDisruptionBudgetStatus(body: any, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesPatchPolicyV1beta1NamespacedPodDisruptionBudgetStatusOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1PodDisruptionBudget>): void;
  patchPolicyV1beta1NamespacedPodDisruptionBudgetStatus(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchPolicyV1beta1NamespacedPodDisruptionBudgetStatusOptionalParams | msRest.ServiceCallback<Models.V1beta1PodDisruptionBudget>, callback?: msRest.ServiceCallback<Models.V1beta1PodDisruptionBudget>): Promise<Models.PatchPolicyV1beta1NamespacedPodDisruptionBudgetStatusResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      patchPolicyV1beta1NamespacedPodDisruptionBudgetStatusOperationSpec,
      callback) as Promise<Models.PatchPolicyV1beta1NamespacedPodDisruptionBudgetStatusResponse>;
  }

  /**
   * list or watch objects of kind PodDisruptionBudget
   * @param [options] The optional parameters
   * @returns Promise<Models.ListPolicyV1beta1PodDisruptionBudgetForAllNamespacesResponse>
   */
  listPolicyV1beta1PodDisruptionBudgetForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListPolicyV1beta1PodDisruptionBudgetForAllNamespacesOptionalParams): Promise<Models.ListPolicyV1beta1PodDisruptionBudgetForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  listPolicyV1beta1PodDisruptionBudgetForAllNamespaces(callback: msRest.ServiceCallback<Models.V1beta1PodDisruptionBudgetList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listPolicyV1beta1PodDisruptionBudgetForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesListPolicyV1beta1PodDisruptionBudgetForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1PodDisruptionBudgetList>): void;
  listPolicyV1beta1PodDisruptionBudgetForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListPolicyV1beta1PodDisruptionBudgetForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1beta1PodDisruptionBudgetList>, callback?: msRest.ServiceCallback<Models.V1beta1PodDisruptionBudgetList>): Promise<Models.ListPolicyV1beta1PodDisruptionBudgetForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listPolicyV1beta1PodDisruptionBudgetForAllNamespacesOperationSpec,
      callback) as Promise<Models.ListPolicyV1beta1PodDisruptionBudgetForAllNamespacesResponse>;
  }

  /**
   * list or watch objects of kind PodSecurityPolicy
   * @param [options] The optional parameters
   * @returns Promise<Models.ListPolicyV1beta1PodSecurityPolicyResponse>
   */
  listPolicyV1beta1PodSecurityPolicy(options?: Models.OpenShiftAPIwithKubernetesListPolicyV1beta1PodSecurityPolicyOptionalParams): Promise<Models.ListPolicyV1beta1PodSecurityPolicyResponse>;
  /**
   * @param callback The callback
   */
  listPolicyV1beta1PodSecurityPolicy(callback: msRest.ServiceCallback<Models.V1beta1PodSecurityPolicyList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listPolicyV1beta1PodSecurityPolicy(options: Models.OpenShiftAPIwithKubernetesListPolicyV1beta1PodSecurityPolicyOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1PodSecurityPolicyList>): void;
  listPolicyV1beta1PodSecurityPolicy(options?: Models.OpenShiftAPIwithKubernetesListPolicyV1beta1PodSecurityPolicyOptionalParams | msRest.ServiceCallback<Models.V1beta1PodSecurityPolicyList>, callback?: msRest.ServiceCallback<Models.V1beta1PodSecurityPolicyList>): Promise<Models.ListPolicyV1beta1PodSecurityPolicyResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listPolicyV1beta1PodSecurityPolicyOperationSpec,
      callback) as Promise<Models.ListPolicyV1beta1PodSecurityPolicyResponse>;
  }

  /**
   * create a PodSecurityPolicy
   * @param body
   * @param [options] The optional parameters
   * @returns Promise<Models.CreatePolicyV1beta1PodSecurityPolicyResponse>
   */
  createPolicyV1beta1PodSecurityPolicy(body: Models.V1beta1PodSecurityPolicy, options?: Models.OpenShiftAPIwithKubernetesCreatePolicyV1beta1PodSecurityPolicyOptionalParams): Promise<Models.CreatePolicyV1beta1PodSecurityPolicyResponse>;
  /**
   * @param body
   * @param callback The callback
   */
  createPolicyV1beta1PodSecurityPolicy(body: Models.V1beta1PodSecurityPolicy, callback: msRest.ServiceCallback<Models.V1beta1PodSecurityPolicy>): void;
  /**
   * @param body
   * @param options The optional parameters
   * @param callback The callback
   */
  createPolicyV1beta1PodSecurityPolicy(body: Models.V1beta1PodSecurityPolicy, options: Models.OpenShiftAPIwithKubernetesCreatePolicyV1beta1PodSecurityPolicyOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1PodSecurityPolicy>): void;
  createPolicyV1beta1PodSecurityPolicy(body: Models.V1beta1PodSecurityPolicy, options?: Models.OpenShiftAPIwithKubernetesCreatePolicyV1beta1PodSecurityPolicyOptionalParams | msRest.ServiceCallback<Models.V1beta1PodSecurityPolicy>, callback?: msRest.ServiceCallback<Models.V1beta1PodSecurityPolicy>): Promise<Models.CreatePolicyV1beta1PodSecurityPolicyResponse> {
    return this.sendOperationRequest(
      {
        body,
        options
      },
      createPolicyV1beta1PodSecurityPolicyOperationSpec,
      callback) as Promise<Models.CreatePolicyV1beta1PodSecurityPolicyResponse>;
  }

  /**
   * delete collection of PodSecurityPolicy
   * @param [options] The optional parameters
   * @returns Promise<Models.DeletePolicyV1beta1CollectionPodSecurityPolicyResponse>
   */
  deletePolicyV1beta1CollectionPodSecurityPolicy(options?: Models.OpenShiftAPIwithKubernetesDeletePolicyV1beta1CollectionPodSecurityPolicyOptionalParams): Promise<Models.DeletePolicyV1beta1CollectionPodSecurityPolicyResponse>;
  /**
   * @param callback The callback
   */
  deletePolicyV1beta1CollectionPodSecurityPolicy(callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  deletePolicyV1beta1CollectionPodSecurityPolicy(options: Models.OpenShiftAPIwithKubernetesDeletePolicyV1beta1CollectionPodSecurityPolicyOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deletePolicyV1beta1CollectionPodSecurityPolicy(options?: Models.OpenShiftAPIwithKubernetesDeletePolicyV1beta1CollectionPodSecurityPolicyOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeletePolicyV1beta1CollectionPodSecurityPolicyResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      deletePolicyV1beta1CollectionPodSecurityPolicyOperationSpec,
      callback) as Promise<Models.DeletePolicyV1beta1CollectionPodSecurityPolicyResponse>;
  }

  /**
   * read the specified PodSecurityPolicy
   * @param name name of the PodSecurityPolicy
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadPolicyV1beta1PodSecurityPolicyResponse>
   */
  readPolicyV1beta1PodSecurityPolicy(name: string, options?: Models.OpenShiftAPIwithKubernetesReadPolicyV1beta1PodSecurityPolicyOptionalParams): Promise<Models.ReadPolicyV1beta1PodSecurityPolicyResponse>;
  /**
   * @param name name of the PodSecurityPolicy
   * @param callback The callback
   */
  readPolicyV1beta1PodSecurityPolicy(name: string, callback: msRest.ServiceCallback<Models.V1beta1PodSecurityPolicy>): void;
  /**
   * @param name name of the PodSecurityPolicy
   * @param options The optional parameters
   * @param callback The callback
   */
  readPolicyV1beta1PodSecurityPolicy(name: string, options: Models.OpenShiftAPIwithKubernetesReadPolicyV1beta1PodSecurityPolicyOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1PodSecurityPolicy>): void;
  readPolicyV1beta1PodSecurityPolicy(name: string, options?: Models.OpenShiftAPIwithKubernetesReadPolicyV1beta1PodSecurityPolicyOptionalParams | msRest.ServiceCallback<Models.V1beta1PodSecurityPolicy>, callback?: msRest.ServiceCallback<Models.V1beta1PodSecurityPolicy>): Promise<Models.ReadPolicyV1beta1PodSecurityPolicyResponse> {
    return this.sendOperationRequest(
      {
        name,
        options
      },
      readPolicyV1beta1PodSecurityPolicyOperationSpec,
      callback) as Promise<Models.ReadPolicyV1beta1PodSecurityPolicyResponse>;
  }

  /**
   * replace the specified PodSecurityPolicy
   * @param body
   * @param name name of the PodSecurityPolicy
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplacePolicyV1beta1PodSecurityPolicyResponse>
   */
  replacePolicyV1beta1PodSecurityPolicy(body: Models.V1beta1PodSecurityPolicy, name: string, options?: Models.OpenShiftAPIwithKubernetesReplacePolicyV1beta1PodSecurityPolicyOptionalParams): Promise<Models.ReplacePolicyV1beta1PodSecurityPolicyResponse>;
  /**
   * @param body
   * @param name name of the PodSecurityPolicy
   * @param callback The callback
   */
  replacePolicyV1beta1PodSecurityPolicy(body: Models.V1beta1PodSecurityPolicy, name: string, callback: msRest.ServiceCallback<Models.V1beta1PodSecurityPolicy>): void;
  /**
   * @param body
   * @param name name of the PodSecurityPolicy
   * @param options The optional parameters
   * @param callback The callback
   */
  replacePolicyV1beta1PodSecurityPolicy(body: Models.V1beta1PodSecurityPolicy, name: string, options: Models.OpenShiftAPIwithKubernetesReplacePolicyV1beta1PodSecurityPolicyOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1PodSecurityPolicy>): void;
  replacePolicyV1beta1PodSecurityPolicy(body: Models.V1beta1PodSecurityPolicy, name: string, options?: Models.OpenShiftAPIwithKubernetesReplacePolicyV1beta1PodSecurityPolicyOptionalParams | msRest.ServiceCallback<Models.V1beta1PodSecurityPolicy>, callback?: msRest.ServiceCallback<Models.V1beta1PodSecurityPolicy>): Promise<Models.ReplacePolicyV1beta1PodSecurityPolicyResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      replacePolicyV1beta1PodSecurityPolicyOperationSpec,
      callback) as Promise<Models.ReplacePolicyV1beta1PodSecurityPolicyResponse>;
  }

  /**
   * delete a PodSecurityPolicy
   * @param body
   * @param name name of the PodSecurityPolicy
   * @param [options] The optional parameters
   * @returns Promise<Models.DeletePolicyV1beta1PodSecurityPolicyResponse>
   */
  deletePolicyV1beta1PodSecurityPolicy(body: Models.V1DeleteOptions, name: string, options?: Models.OpenShiftAPIwithKubernetesDeletePolicyV1beta1PodSecurityPolicyOptionalParams): Promise<Models.DeletePolicyV1beta1PodSecurityPolicyResponse>;
  /**
   * @param body
   * @param name name of the PodSecurityPolicy
   * @param callback The callback
   */
  deletePolicyV1beta1PodSecurityPolicy(body: Models.V1DeleteOptions, name: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param name name of the PodSecurityPolicy
   * @param options The optional parameters
   * @param callback The callback
   */
  deletePolicyV1beta1PodSecurityPolicy(body: Models.V1DeleteOptions, name: string, options: Models.OpenShiftAPIwithKubernetesDeletePolicyV1beta1PodSecurityPolicyOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deletePolicyV1beta1PodSecurityPolicy(body: Models.V1DeleteOptions, name: string, options?: Models.OpenShiftAPIwithKubernetesDeletePolicyV1beta1PodSecurityPolicyOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeletePolicyV1beta1PodSecurityPolicyResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      deletePolicyV1beta1PodSecurityPolicyOperationSpec,
      callback) as Promise<Models.DeletePolicyV1beta1PodSecurityPolicyResponse>;
  }

  /**
   * partially update the specified PodSecurityPolicy
   * @param body
   * @param name name of the PodSecurityPolicy
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchPolicyV1beta1PodSecurityPolicyResponse>
   */
  patchPolicyV1beta1PodSecurityPolicy(body: any, name: string, options?: Models.OpenShiftAPIwithKubernetesPatchPolicyV1beta1PodSecurityPolicyOptionalParams): Promise<Models.PatchPolicyV1beta1PodSecurityPolicyResponse>;
  /**
   * @param body
   * @param name name of the PodSecurityPolicy
   * @param callback The callback
   */
  patchPolicyV1beta1PodSecurityPolicy(body: any, name: string, callback: msRest.ServiceCallback<Models.V1beta1PodSecurityPolicy>): void;
  /**
   * @param body
   * @param name name of the PodSecurityPolicy
   * @param options The optional parameters
   * @param callback The callback
   */
  patchPolicyV1beta1PodSecurityPolicy(body: any, name: string, options: Models.OpenShiftAPIwithKubernetesPatchPolicyV1beta1PodSecurityPolicyOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1PodSecurityPolicy>): void;
  patchPolicyV1beta1PodSecurityPolicy(body: any, name: string, options?: Models.OpenShiftAPIwithKubernetesPatchPolicyV1beta1PodSecurityPolicyOptionalParams | msRest.ServiceCallback<Models.V1beta1PodSecurityPolicy>, callback?: msRest.ServiceCallback<Models.V1beta1PodSecurityPolicy>): Promise<Models.PatchPolicyV1beta1PodSecurityPolicyResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      patchPolicyV1beta1PodSecurityPolicyOperationSpec,
      callback) as Promise<Models.PatchPolicyV1beta1PodSecurityPolicyResponse>;
  }

  /**
   * watch individual changes to a list of PodDisruptionBudget
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchPolicyV1beta1NamespacedPodDisruptionBudgetListResponse>
   */
  watchPolicyV1beta1NamespacedPodDisruptionBudgetList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchPolicyV1beta1NamespacedPodDisruptionBudgetListOptionalParams): Promise<Models.WatchPolicyV1beta1NamespacedPodDisruptionBudgetListResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchPolicyV1beta1NamespacedPodDisruptionBudgetList(namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchPolicyV1beta1NamespacedPodDisruptionBudgetList(namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchPolicyV1beta1NamespacedPodDisruptionBudgetListOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchPolicyV1beta1NamespacedPodDisruptionBudgetList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchPolicyV1beta1NamespacedPodDisruptionBudgetListOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchPolicyV1beta1NamespacedPodDisruptionBudgetListResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      watchPolicyV1beta1NamespacedPodDisruptionBudgetListOperationSpec,
      callback) as Promise<Models.WatchPolicyV1beta1NamespacedPodDisruptionBudgetListResponse>;
  }

  /**
   * watch changes to an object of kind PodDisruptionBudget
   * @param name name of the PodDisruptionBudget
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchPolicyV1beta1NamespacedPodDisruptionBudgetResponse>
   */
  watchPolicyV1beta1NamespacedPodDisruptionBudget(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchPolicyV1beta1NamespacedPodDisruptionBudgetOptionalParams): Promise<Models.WatchPolicyV1beta1NamespacedPodDisruptionBudgetResponse>;
  /**
   * @param name name of the PodDisruptionBudget
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchPolicyV1beta1NamespacedPodDisruptionBudget(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param name name of the PodDisruptionBudget
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchPolicyV1beta1NamespacedPodDisruptionBudget(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchPolicyV1beta1NamespacedPodDisruptionBudgetOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchPolicyV1beta1NamespacedPodDisruptionBudget(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchPolicyV1beta1NamespacedPodDisruptionBudgetOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchPolicyV1beta1NamespacedPodDisruptionBudgetResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      watchPolicyV1beta1NamespacedPodDisruptionBudgetOperationSpec,
      callback) as Promise<Models.WatchPolicyV1beta1NamespacedPodDisruptionBudgetResponse>;
  }

  /**
   * watch individual changes to a list of PodDisruptionBudget
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesResponse>
   */
  watchPolicyV1beta1PodDisruptionBudgetListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesOptionalParams): Promise<Models.WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  watchPolicyV1beta1PodDisruptionBudgetListForAllNamespaces(callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  watchPolicyV1beta1PodDisruptionBudgetListForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesWatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchPolicyV1beta1PodDisruptionBudgetListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      watchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesOperationSpec,
      callback) as Promise<Models.WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesResponse>;
  }

  /**
   * watch individual changes to a list of PodSecurityPolicy
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchPolicyV1beta1PodSecurityPolicyListResponse>
   */
  watchPolicyV1beta1PodSecurityPolicyList(options?: Models.OpenShiftAPIwithKubernetesWatchPolicyV1beta1PodSecurityPolicyListOptionalParams): Promise<Models.WatchPolicyV1beta1PodSecurityPolicyListResponse>;
  /**
   * @param callback The callback
   */
  watchPolicyV1beta1PodSecurityPolicyList(callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  watchPolicyV1beta1PodSecurityPolicyList(options: Models.OpenShiftAPIwithKubernetesWatchPolicyV1beta1PodSecurityPolicyListOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchPolicyV1beta1PodSecurityPolicyList(options?: Models.OpenShiftAPIwithKubernetesWatchPolicyV1beta1PodSecurityPolicyListOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchPolicyV1beta1PodSecurityPolicyListResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      watchPolicyV1beta1PodSecurityPolicyListOperationSpec,
      callback) as Promise<Models.WatchPolicyV1beta1PodSecurityPolicyListResponse>;
  }

  /**
   * watch changes to an object of kind PodSecurityPolicy
   * @param name name of the PodSecurityPolicy
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchPolicyV1beta1PodSecurityPolicyResponse>
   */
  watchPolicyV1beta1PodSecurityPolicy(name: string, options?: Models.OpenShiftAPIwithKubernetesWatchPolicyV1beta1PodSecurityPolicyOptionalParams): Promise<Models.WatchPolicyV1beta1PodSecurityPolicyResponse>;
  /**
   * @param name name of the PodSecurityPolicy
   * @param callback The callback
   */
  watchPolicyV1beta1PodSecurityPolicy(name: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param name name of the PodSecurityPolicy
   * @param options The optional parameters
   * @param callback The callback
   */
  watchPolicyV1beta1PodSecurityPolicy(name: string, options: Models.OpenShiftAPIwithKubernetesWatchPolicyV1beta1PodSecurityPolicyOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchPolicyV1beta1PodSecurityPolicy(name: string, options?: Models.OpenShiftAPIwithKubernetesWatchPolicyV1beta1PodSecurityPolicyOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchPolicyV1beta1PodSecurityPolicyResponse> {
    return this.sendOperationRequest(
      {
        name,
        options
      },
      watchPolicyV1beta1PodSecurityPolicyOperationSpec,
      callback) as Promise<Models.WatchPolicyV1beta1PodSecurityPolicyResponse>;
  }

  /**
   * get information of a group
   * @param [options] The optional parameters
   * @returns Promise<Models.GetProjectOpenshiftIoAPIGroupResponse>
   */
  getProjectOpenshiftIoAPIGroup(options?: msRest.RequestOptionsBase): Promise<Models.GetProjectOpenshiftIoAPIGroupResponse>;
  /**
   * @param callback The callback
   */
  getProjectOpenshiftIoAPIGroup(callback: msRest.ServiceCallback<Models.V1APIGroup>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getProjectOpenshiftIoAPIGroup(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.V1APIGroup>): void;
  getProjectOpenshiftIoAPIGroup(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.V1APIGroup>, callback?: msRest.ServiceCallback<Models.V1APIGroup>): Promise<Models.GetProjectOpenshiftIoAPIGroupResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getProjectOpenshiftIoAPIGroupOperationSpec,
      callback) as Promise<Models.GetProjectOpenshiftIoAPIGroupResponse>;
  }

  /**
   * get available resources
   * @param [options] The optional parameters
   * @returns Promise<Models.GetProjectOpenshiftIoV1APIResourcesResponse>
   */
  getProjectOpenshiftIoV1APIResources(options?: msRest.RequestOptionsBase): Promise<Models.GetProjectOpenshiftIoV1APIResourcesResponse>;
  /**
   * @param callback The callback
   */
  getProjectOpenshiftIoV1APIResources(callback: msRest.ServiceCallback<Models.V1APIResourceList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getProjectOpenshiftIoV1APIResources(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.V1APIResourceList>): void;
  getProjectOpenshiftIoV1APIResources(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.V1APIResourceList>, callback?: msRest.ServiceCallback<Models.V1APIResourceList>): Promise<Models.GetProjectOpenshiftIoV1APIResourcesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getProjectOpenshiftIoV1APIResourcesOperationSpec,
      callback) as Promise<Models.GetProjectOpenshiftIoV1APIResourcesResponse>;
  }

  /**
   * list objects of kind ProjectRequest
   * @param [options] The optional parameters
   * @returns Promise<Models.ListProjectOpenshiftIoV1ProjectRequestResponse>
   */
  listProjectOpenshiftIoV1ProjectRequest(options?: Models.OpenShiftAPIwithKubernetesListProjectOpenshiftIoV1ProjectRequestOptionalParams): Promise<Models.ListProjectOpenshiftIoV1ProjectRequestResponse>;
  /**
   * @param callback The callback
   */
  listProjectOpenshiftIoV1ProjectRequest(callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listProjectOpenshiftIoV1ProjectRequest(options: Models.OpenShiftAPIwithKubernetesListProjectOpenshiftIoV1ProjectRequestOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  listProjectOpenshiftIoV1ProjectRequest(options?: Models.OpenShiftAPIwithKubernetesListProjectOpenshiftIoV1ProjectRequestOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.ListProjectOpenshiftIoV1ProjectRequestResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listProjectOpenshiftIoV1ProjectRequestOperationSpec,
      callback) as Promise<Models.ListProjectOpenshiftIoV1ProjectRequestResponse>;
  }

  /**
   * create a ProjectRequest
   * @param body
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateProjectOpenshiftIoV1ProjectRequestResponse>
   */
  createProjectOpenshiftIoV1ProjectRequest(body: Models.Comgithubopenshiftapiprojectv1ProjectRequest, options?: Models.OpenShiftAPIwithKubernetesCreateProjectOpenshiftIoV1ProjectRequestOptionalParams): Promise<Models.CreateProjectOpenshiftIoV1ProjectRequestResponse>;
  /**
   * @param body
   * @param callback The callback
   */
  createProjectOpenshiftIoV1ProjectRequest(body: Models.Comgithubopenshiftapiprojectv1ProjectRequest, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiprojectv1ProjectRequest>): void;
  /**
   * @param body
   * @param options The optional parameters
   * @param callback The callback
   */
  createProjectOpenshiftIoV1ProjectRequest(body: Models.Comgithubopenshiftapiprojectv1ProjectRequest, options: Models.OpenShiftAPIwithKubernetesCreateProjectOpenshiftIoV1ProjectRequestOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiprojectv1ProjectRequest>): void;
  createProjectOpenshiftIoV1ProjectRequest(body: Models.Comgithubopenshiftapiprojectv1ProjectRequest, options?: Models.OpenShiftAPIwithKubernetesCreateProjectOpenshiftIoV1ProjectRequestOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiprojectv1ProjectRequest>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiprojectv1ProjectRequest>): Promise<Models.CreateProjectOpenshiftIoV1ProjectRequestResponse> {
    return this.sendOperationRequest(
      {
        body,
        options
      },
      createProjectOpenshiftIoV1ProjectRequestOperationSpec,
      callback) as Promise<Models.CreateProjectOpenshiftIoV1ProjectRequestResponse>;
  }

  /**
   * list or watch objects of kind Project
   * @param [options] The optional parameters
   * @returns Promise<Models.ListProjectOpenshiftIoV1ProjectResponse>
   */
  listProjectOpenshiftIoV1Project(options?: Models.OpenShiftAPIwithKubernetesListProjectOpenshiftIoV1ProjectOptionalParams): Promise<Models.ListProjectOpenshiftIoV1ProjectResponse>;
  /**
   * @param callback The callback
   */
  listProjectOpenshiftIoV1Project(callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiprojectv1ProjectList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listProjectOpenshiftIoV1Project(options: Models.OpenShiftAPIwithKubernetesListProjectOpenshiftIoV1ProjectOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiprojectv1ProjectList>): void;
  listProjectOpenshiftIoV1Project(options?: Models.OpenShiftAPIwithKubernetesListProjectOpenshiftIoV1ProjectOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiprojectv1ProjectList>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiprojectv1ProjectList>): Promise<Models.ListProjectOpenshiftIoV1ProjectResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listProjectOpenshiftIoV1ProjectOperationSpec,
      callback) as Promise<Models.ListProjectOpenshiftIoV1ProjectResponse>;
  }

  /**
   * create a Project
   * @param body
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateProjectOpenshiftIoV1ProjectResponse>
   */
  createProjectOpenshiftIoV1Project(body: Models.Comgithubopenshiftapiprojectv1Project, options?: Models.OpenShiftAPIwithKubernetesCreateProjectOpenshiftIoV1ProjectOptionalParams): Promise<Models.CreateProjectOpenshiftIoV1ProjectResponse>;
  /**
   * @param body
   * @param callback The callback
   */
  createProjectOpenshiftIoV1Project(body: Models.Comgithubopenshiftapiprojectv1Project, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiprojectv1Project>): void;
  /**
   * @param body
   * @param options The optional parameters
   * @param callback The callback
   */
  createProjectOpenshiftIoV1Project(body: Models.Comgithubopenshiftapiprojectv1Project, options: Models.OpenShiftAPIwithKubernetesCreateProjectOpenshiftIoV1ProjectOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiprojectv1Project>): void;
  createProjectOpenshiftIoV1Project(body: Models.Comgithubopenshiftapiprojectv1Project, options?: Models.OpenShiftAPIwithKubernetesCreateProjectOpenshiftIoV1ProjectOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiprojectv1Project>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiprojectv1Project>): Promise<Models.CreateProjectOpenshiftIoV1ProjectResponse> {
    return this.sendOperationRequest(
      {
        body,
        options
      },
      createProjectOpenshiftIoV1ProjectOperationSpec,
      callback) as Promise<Models.CreateProjectOpenshiftIoV1ProjectResponse>;
  }

  /**
   * read the specified Project
   * @param name name of the Project
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadProjectOpenshiftIoV1ProjectResponse>
   */
  readProjectOpenshiftIoV1Project(name: string, options?: Models.OpenShiftAPIwithKubernetesReadProjectOpenshiftIoV1ProjectOptionalParams): Promise<Models.ReadProjectOpenshiftIoV1ProjectResponse>;
  /**
   * @param name name of the Project
   * @param callback The callback
   */
  readProjectOpenshiftIoV1Project(name: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiprojectv1Project>): void;
  /**
   * @param name name of the Project
   * @param options The optional parameters
   * @param callback The callback
   */
  readProjectOpenshiftIoV1Project(name: string, options: Models.OpenShiftAPIwithKubernetesReadProjectOpenshiftIoV1ProjectOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiprojectv1Project>): void;
  readProjectOpenshiftIoV1Project(name: string, options?: Models.OpenShiftAPIwithKubernetesReadProjectOpenshiftIoV1ProjectOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiprojectv1Project>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiprojectv1Project>): Promise<Models.ReadProjectOpenshiftIoV1ProjectResponse> {
    return this.sendOperationRequest(
      {
        name,
        options
      },
      readProjectOpenshiftIoV1ProjectOperationSpec,
      callback) as Promise<Models.ReadProjectOpenshiftIoV1ProjectResponse>;
  }

  /**
   * replace the specified Project
   * @param body
   * @param name name of the Project
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceProjectOpenshiftIoV1ProjectResponse>
   */
  replaceProjectOpenshiftIoV1Project(body: Models.Comgithubopenshiftapiprojectv1Project, name: string, options?: Models.OpenShiftAPIwithKubernetesReplaceProjectOpenshiftIoV1ProjectOptionalParams): Promise<Models.ReplaceProjectOpenshiftIoV1ProjectResponse>;
  /**
   * @param body
   * @param name name of the Project
   * @param callback The callback
   */
  replaceProjectOpenshiftIoV1Project(body: Models.Comgithubopenshiftapiprojectv1Project, name: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiprojectv1Project>): void;
  /**
   * @param body
   * @param name name of the Project
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceProjectOpenshiftIoV1Project(body: Models.Comgithubopenshiftapiprojectv1Project, name: string, options: Models.OpenShiftAPIwithKubernetesReplaceProjectOpenshiftIoV1ProjectOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiprojectv1Project>): void;
  replaceProjectOpenshiftIoV1Project(body: Models.Comgithubopenshiftapiprojectv1Project, name: string, options?: Models.OpenShiftAPIwithKubernetesReplaceProjectOpenshiftIoV1ProjectOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiprojectv1Project>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiprojectv1Project>): Promise<Models.ReplaceProjectOpenshiftIoV1ProjectResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      replaceProjectOpenshiftIoV1ProjectOperationSpec,
      callback) as Promise<Models.ReplaceProjectOpenshiftIoV1ProjectResponse>;
  }

  /**
   * delete a Project
   * @param body
   * @param name name of the Project
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteProjectOpenshiftIoV1ProjectResponse>
   */
  deleteProjectOpenshiftIoV1Project(body: Models.V1DeleteOptions, name: string, options?: Models.OpenShiftAPIwithKubernetesDeleteProjectOpenshiftIoV1ProjectOptionalParams): Promise<Models.DeleteProjectOpenshiftIoV1ProjectResponse>;
  /**
   * @param body
   * @param name name of the Project
   * @param callback The callback
   */
  deleteProjectOpenshiftIoV1Project(body: Models.V1DeleteOptions, name: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param name name of the Project
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteProjectOpenshiftIoV1Project(body: Models.V1DeleteOptions, name: string, options: Models.OpenShiftAPIwithKubernetesDeleteProjectOpenshiftIoV1ProjectOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteProjectOpenshiftIoV1Project(body: Models.V1DeleteOptions, name: string, options?: Models.OpenShiftAPIwithKubernetesDeleteProjectOpenshiftIoV1ProjectOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteProjectOpenshiftIoV1ProjectResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      deleteProjectOpenshiftIoV1ProjectOperationSpec,
      callback) as Promise<Models.DeleteProjectOpenshiftIoV1ProjectResponse>;
  }

  /**
   * partially update the specified Project
   * @param body
   * @param name name of the Project
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchProjectOpenshiftIoV1ProjectResponse>
   */
  patchProjectOpenshiftIoV1Project(body: any, name: string, options?: Models.OpenShiftAPIwithKubernetesPatchProjectOpenshiftIoV1ProjectOptionalParams): Promise<Models.PatchProjectOpenshiftIoV1ProjectResponse>;
  /**
   * @param body
   * @param name name of the Project
   * @param callback The callback
   */
  patchProjectOpenshiftIoV1Project(body: any, name: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiprojectv1Project>): void;
  /**
   * @param body
   * @param name name of the Project
   * @param options The optional parameters
   * @param callback The callback
   */
  patchProjectOpenshiftIoV1Project(body: any, name: string, options: Models.OpenShiftAPIwithKubernetesPatchProjectOpenshiftIoV1ProjectOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiprojectv1Project>): void;
  patchProjectOpenshiftIoV1Project(body: any, name: string, options?: Models.OpenShiftAPIwithKubernetesPatchProjectOpenshiftIoV1ProjectOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiprojectv1Project>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiprojectv1Project>): Promise<Models.PatchProjectOpenshiftIoV1ProjectResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      patchProjectOpenshiftIoV1ProjectOperationSpec,
      callback) as Promise<Models.PatchProjectOpenshiftIoV1ProjectResponse>;
  }

  /**
   * watch individual changes to a list of Project
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchProjectOpenshiftIoV1ProjectListResponse>
   */
  watchProjectOpenshiftIoV1ProjectList(options?: Models.OpenShiftAPIwithKubernetesWatchProjectOpenshiftIoV1ProjectListOptionalParams): Promise<Models.WatchProjectOpenshiftIoV1ProjectListResponse>;
  /**
   * @param callback The callback
   */
  watchProjectOpenshiftIoV1ProjectList(callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  watchProjectOpenshiftIoV1ProjectList(options: Models.OpenShiftAPIwithKubernetesWatchProjectOpenshiftIoV1ProjectListOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchProjectOpenshiftIoV1ProjectList(options?: Models.OpenShiftAPIwithKubernetesWatchProjectOpenshiftIoV1ProjectListOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchProjectOpenshiftIoV1ProjectListResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      watchProjectOpenshiftIoV1ProjectListOperationSpec,
      callback) as Promise<Models.WatchProjectOpenshiftIoV1ProjectListResponse>;
  }

  /**
   * watch changes to an object of kind Project
   * @param name name of the Project
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchProjectOpenshiftIoV1ProjectResponse>
   */
  watchProjectOpenshiftIoV1Project(name: string, options?: Models.OpenShiftAPIwithKubernetesWatchProjectOpenshiftIoV1ProjectOptionalParams): Promise<Models.WatchProjectOpenshiftIoV1ProjectResponse>;
  /**
   * @param name name of the Project
   * @param callback The callback
   */
  watchProjectOpenshiftIoV1Project(name: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param name name of the Project
   * @param options The optional parameters
   * @param callback The callback
   */
  watchProjectOpenshiftIoV1Project(name: string, options: Models.OpenShiftAPIwithKubernetesWatchProjectOpenshiftIoV1ProjectOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchProjectOpenshiftIoV1Project(name: string, options?: Models.OpenShiftAPIwithKubernetesWatchProjectOpenshiftIoV1ProjectOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchProjectOpenshiftIoV1ProjectResponse> {
    return this.sendOperationRequest(
      {
        name,
        options
      },
      watchProjectOpenshiftIoV1ProjectOperationSpec,
      callback) as Promise<Models.WatchProjectOpenshiftIoV1ProjectResponse>;
  }

  /**
   * get information of a group
   * @param [options] The optional parameters
   * @returns Promise<Models.GetQuotaOpenshiftIoAPIGroupResponse>
   */
  getQuotaOpenshiftIoAPIGroup(options?: msRest.RequestOptionsBase): Promise<Models.GetQuotaOpenshiftIoAPIGroupResponse>;
  /**
   * @param callback The callback
   */
  getQuotaOpenshiftIoAPIGroup(callback: msRest.ServiceCallback<Models.V1APIGroup>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getQuotaOpenshiftIoAPIGroup(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.V1APIGroup>): void;
  getQuotaOpenshiftIoAPIGroup(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.V1APIGroup>, callback?: msRest.ServiceCallback<Models.V1APIGroup>): Promise<Models.GetQuotaOpenshiftIoAPIGroupResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getQuotaOpenshiftIoAPIGroupOperationSpec,
      callback) as Promise<Models.GetQuotaOpenshiftIoAPIGroupResponse>;
  }

  /**
   * get available resources
   * @param [options] The optional parameters
   * @returns Promise<Models.GetQuotaOpenshiftIoV1APIResourcesResponse>
   */
  getQuotaOpenshiftIoV1APIResources(options?: msRest.RequestOptionsBase): Promise<Models.GetQuotaOpenshiftIoV1APIResourcesResponse>;
  /**
   * @param callback The callback
   */
  getQuotaOpenshiftIoV1APIResources(callback: msRest.ServiceCallback<Models.V1APIResourceList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getQuotaOpenshiftIoV1APIResources(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.V1APIResourceList>): void;
  getQuotaOpenshiftIoV1APIResources(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.V1APIResourceList>, callback?: msRest.ServiceCallback<Models.V1APIResourceList>): Promise<Models.GetQuotaOpenshiftIoV1APIResourcesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getQuotaOpenshiftIoV1APIResourcesOperationSpec,
      callback) as Promise<Models.GetQuotaOpenshiftIoV1APIResourcesResponse>;
  }

  /**
   * list objects of kind AppliedClusterResourceQuota
   * @param [options] The optional parameters
   * @returns
   * Promise<Models.ListQuotaOpenshiftIoV1AppliedClusterResourceQuotaForAllNamespacesResponse>
   */
  listQuotaOpenshiftIoV1AppliedClusterResourceQuotaForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListQuotaOpenshiftIoV1AppliedClusterResourceQuotaForAllNamespacesOptionalParams): Promise<Models.ListQuotaOpenshiftIoV1AppliedClusterResourceQuotaForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  listQuotaOpenshiftIoV1AppliedClusterResourceQuotaForAllNamespaces(callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiquotav1AppliedClusterResourceQuotaList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listQuotaOpenshiftIoV1AppliedClusterResourceQuotaForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesListQuotaOpenshiftIoV1AppliedClusterResourceQuotaForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiquotav1AppliedClusterResourceQuotaList>): void;
  listQuotaOpenshiftIoV1AppliedClusterResourceQuotaForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListQuotaOpenshiftIoV1AppliedClusterResourceQuotaForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiquotav1AppliedClusterResourceQuotaList>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiquotav1AppliedClusterResourceQuotaList>): Promise<Models.ListQuotaOpenshiftIoV1AppliedClusterResourceQuotaForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listQuotaOpenshiftIoV1AppliedClusterResourceQuotaForAllNamespacesOperationSpec,
      callback) as Promise<Models.ListQuotaOpenshiftIoV1AppliedClusterResourceQuotaForAllNamespacesResponse>;
  }

  /**
   * list or watch objects of kind ClusterResourceQuota
   * @param [options] The optional parameters
   * @returns Promise<Models.ListQuotaOpenshiftIoV1ClusterResourceQuotaResponse>
   */
  listQuotaOpenshiftIoV1ClusterResourceQuota(options?: Models.OpenShiftAPIwithKubernetesListQuotaOpenshiftIoV1ClusterResourceQuotaOptionalParams): Promise<Models.ListQuotaOpenshiftIoV1ClusterResourceQuotaResponse>;
  /**
   * @param callback The callback
   */
  listQuotaOpenshiftIoV1ClusterResourceQuota(callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiquotav1ClusterResourceQuotaList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listQuotaOpenshiftIoV1ClusterResourceQuota(options: Models.OpenShiftAPIwithKubernetesListQuotaOpenshiftIoV1ClusterResourceQuotaOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiquotav1ClusterResourceQuotaList>): void;
  listQuotaOpenshiftIoV1ClusterResourceQuota(options?: Models.OpenShiftAPIwithKubernetesListQuotaOpenshiftIoV1ClusterResourceQuotaOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiquotav1ClusterResourceQuotaList>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiquotav1ClusterResourceQuotaList>): Promise<Models.ListQuotaOpenshiftIoV1ClusterResourceQuotaResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listQuotaOpenshiftIoV1ClusterResourceQuotaOperationSpec,
      callback) as Promise<Models.ListQuotaOpenshiftIoV1ClusterResourceQuotaResponse>;
  }

  /**
   * create a ClusterResourceQuota
   * @param body
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateQuotaOpenshiftIoV1ClusterResourceQuotaResponse>
   */
  createQuotaOpenshiftIoV1ClusterResourceQuota(body: Models.Comgithubopenshiftapiquotav1ClusterResourceQuota, options?: Models.OpenShiftAPIwithKubernetesCreateQuotaOpenshiftIoV1ClusterResourceQuotaOptionalParams): Promise<Models.CreateQuotaOpenshiftIoV1ClusterResourceQuotaResponse>;
  /**
   * @param body
   * @param callback The callback
   */
  createQuotaOpenshiftIoV1ClusterResourceQuota(body: Models.Comgithubopenshiftapiquotav1ClusterResourceQuota, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiquotav1ClusterResourceQuota>): void;
  /**
   * @param body
   * @param options The optional parameters
   * @param callback The callback
   */
  createQuotaOpenshiftIoV1ClusterResourceQuota(body: Models.Comgithubopenshiftapiquotav1ClusterResourceQuota, options: Models.OpenShiftAPIwithKubernetesCreateQuotaOpenshiftIoV1ClusterResourceQuotaOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiquotav1ClusterResourceQuota>): void;
  createQuotaOpenshiftIoV1ClusterResourceQuota(body: Models.Comgithubopenshiftapiquotav1ClusterResourceQuota, options?: Models.OpenShiftAPIwithKubernetesCreateQuotaOpenshiftIoV1ClusterResourceQuotaOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiquotav1ClusterResourceQuota>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiquotav1ClusterResourceQuota>): Promise<Models.CreateQuotaOpenshiftIoV1ClusterResourceQuotaResponse> {
    return this.sendOperationRequest(
      {
        body,
        options
      },
      createQuotaOpenshiftIoV1ClusterResourceQuotaOperationSpec,
      callback) as Promise<Models.CreateQuotaOpenshiftIoV1ClusterResourceQuotaResponse>;
  }

  /**
   * delete collection of ClusterResourceQuota
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteQuotaOpenshiftIoV1CollectionClusterResourceQuotaResponse>
   */
  deleteQuotaOpenshiftIoV1CollectionClusterResourceQuota(options?: Models.OpenShiftAPIwithKubernetesDeleteQuotaOpenshiftIoV1CollectionClusterResourceQuotaOptionalParams): Promise<Models.DeleteQuotaOpenshiftIoV1CollectionClusterResourceQuotaResponse>;
  /**
   * @param callback The callback
   */
  deleteQuotaOpenshiftIoV1CollectionClusterResourceQuota(callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteQuotaOpenshiftIoV1CollectionClusterResourceQuota(options: Models.OpenShiftAPIwithKubernetesDeleteQuotaOpenshiftIoV1CollectionClusterResourceQuotaOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteQuotaOpenshiftIoV1CollectionClusterResourceQuota(options?: Models.OpenShiftAPIwithKubernetesDeleteQuotaOpenshiftIoV1CollectionClusterResourceQuotaOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteQuotaOpenshiftIoV1CollectionClusterResourceQuotaResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      deleteQuotaOpenshiftIoV1CollectionClusterResourceQuotaOperationSpec,
      callback) as Promise<Models.DeleteQuotaOpenshiftIoV1CollectionClusterResourceQuotaResponse>;
  }

  /**
   * read the specified ClusterResourceQuota
   * @param name name of the ClusterResourceQuota
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadQuotaOpenshiftIoV1ClusterResourceQuotaResponse>
   */
  readQuotaOpenshiftIoV1ClusterResourceQuota(name: string, options?: Models.OpenShiftAPIwithKubernetesReadQuotaOpenshiftIoV1ClusterResourceQuotaOptionalParams): Promise<Models.ReadQuotaOpenshiftIoV1ClusterResourceQuotaResponse>;
  /**
   * @param name name of the ClusterResourceQuota
   * @param callback The callback
   */
  readQuotaOpenshiftIoV1ClusterResourceQuota(name: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiquotav1ClusterResourceQuota>): void;
  /**
   * @param name name of the ClusterResourceQuota
   * @param options The optional parameters
   * @param callback The callback
   */
  readQuotaOpenshiftIoV1ClusterResourceQuota(name: string, options: Models.OpenShiftAPIwithKubernetesReadQuotaOpenshiftIoV1ClusterResourceQuotaOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiquotav1ClusterResourceQuota>): void;
  readQuotaOpenshiftIoV1ClusterResourceQuota(name: string, options?: Models.OpenShiftAPIwithKubernetesReadQuotaOpenshiftIoV1ClusterResourceQuotaOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiquotav1ClusterResourceQuota>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiquotav1ClusterResourceQuota>): Promise<Models.ReadQuotaOpenshiftIoV1ClusterResourceQuotaResponse> {
    return this.sendOperationRequest(
      {
        name,
        options
      },
      readQuotaOpenshiftIoV1ClusterResourceQuotaOperationSpec,
      callback) as Promise<Models.ReadQuotaOpenshiftIoV1ClusterResourceQuotaResponse>;
  }

  /**
   * replace the specified ClusterResourceQuota
   * @param body
   * @param name name of the ClusterResourceQuota
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceQuotaOpenshiftIoV1ClusterResourceQuotaResponse>
   */
  replaceQuotaOpenshiftIoV1ClusterResourceQuota(body: Models.Comgithubopenshiftapiquotav1ClusterResourceQuota, name: string, options?: Models.OpenShiftAPIwithKubernetesReplaceQuotaOpenshiftIoV1ClusterResourceQuotaOptionalParams): Promise<Models.ReplaceQuotaOpenshiftIoV1ClusterResourceQuotaResponse>;
  /**
   * @param body
   * @param name name of the ClusterResourceQuota
   * @param callback The callback
   */
  replaceQuotaOpenshiftIoV1ClusterResourceQuota(body: Models.Comgithubopenshiftapiquotav1ClusterResourceQuota, name: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiquotav1ClusterResourceQuota>): void;
  /**
   * @param body
   * @param name name of the ClusterResourceQuota
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceQuotaOpenshiftIoV1ClusterResourceQuota(body: Models.Comgithubopenshiftapiquotav1ClusterResourceQuota, name: string, options: Models.OpenShiftAPIwithKubernetesReplaceQuotaOpenshiftIoV1ClusterResourceQuotaOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiquotav1ClusterResourceQuota>): void;
  replaceQuotaOpenshiftIoV1ClusterResourceQuota(body: Models.Comgithubopenshiftapiquotav1ClusterResourceQuota, name: string, options?: Models.OpenShiftAPIwithKubernetesReplaceQuotaOpenshiftIoV1ClusterResourceQuotaOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiquotav1ClusterResourceQuota>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiquotav1ClusterResourceQuota>): Promise<Models.ReplaceQuotaOpenshiftIoV1ClusterResourceQuotaResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      replaceQuotaOpenshiftIoV1ClusterResourceQuotaOperationSpec,
      callback) as Promise<Models.ReplaceQuotaOpenshiftIoV1ClusterResourceQuotaResponse>;
  }

  /**
   * delete a ClusterResourceQuota
   * @param body
   * @param name name of the ClusterResourceQuota
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteQuotaOpenshiftIoV1ClusterResourceQuotaResponse>
   */
  deleteQuotaOpenshiftIoV1ClusterResourceQuota(body: Models.V1DeleteOptions, name: string, options?: Models.OpenShiftAPIwithKubernetesDeleteQuotaOpenshiftIoV1ClusterResourceQuotaOptionalParams): Promise<Models.DeleteQuotaOpenshiftIoV1ClusterResourceQuotaResponse>;
  /**
   * @param body
   * @param name name of the ClusterResourceQuota
   * @param callback The callback
   */
  deleteQuotaOpenshiftIoV1ClusterResourceQuota(body: Models.V1DeleteOptions, name: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param name name of the ClusterResourceQuota
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteQuotaOpenshiftIoV1ClusterResourceQuota(body: Models.V1DeleteOptions, name: string, options: Models.OpenShiftAPIwithKubernetesDeleteQuotaOpenshiftIoV1ClusterResourceQuotaOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteQuotaOpenshiftIoV1ClusterResourceQuota(body: Models.V1DeleteOptions, name: string, options?: Models.OpenShiftAPIwithKubernetesDeleteQuotaOpenshiftIoV1ClusterResourceQuotaOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteQuotaOpenshiftIoV1ClusterResourceQuotaResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      deleteQuotaOpenshiftIoV1ClusterResourceQuotaOperationSpec,
      callback) as Promise<Models.DeleteQuotaOpenshiftIoV1ClusterResourceQuotaResponse>;
  }

  /**
   * partially update the specified ClusterResourceQuota
   * @param body
   * @param name name of the ClusterResourceQuota
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchQuotaOpenshiftIoV1ClusterResourceQuotaResponse>
   */
  patchQuotaOpenshiftIoV1ClusterResourceQuota(body: any, name: string, options?: Models.OpenShiftAPIwithKubernetesPatchQuotaOpenshiftIoV1ClusterResourceQuotaOptionalParams): Promise<Models.PatchQuotaOpenshiftIoV1ClusterResourceQuotaResponse>;
  /**
   * @param body
   * @param name name of the ClusterResourceQuota
   * @param callback The callback
   */
  patchQuotaOpenshiftIoV1ClusterResourceQuota(body: any, name: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiquotav1ClusterResourceQuota>): void;
  /**
   * @param body
   * @param name name of the ClusterResourceQuota
   * @param options The optional parameters
   * @param callback The callback
   */
  patchQuotaOpenshiftIoV1ClusterResourceQuota(body: any, name: string, options: Models.OpenShiftAPIwithKubernetesPatchQuotaOpenshiftIoV1ClusterResourceQuotaOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiquotav1ClusterResourceQuota>): void;
  patchQuotaOpenshiftIoV1ClusterResourceQuota(body: any, name: string, options?: Models.OpenShiftAPIwithKubernetesPatchQuotaOpenshiftIoV1ClusterResourceQuotaOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiquotav1ClusterResourceQuota>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiquotav1ClusterResourceQuota>): Promise<Models.PatchQuotaOpenshiftIoV1ClusterResourceQuotaResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      patchQuotaOpenshiftIoV1ClusterResourceQuotaOperationSpec,
      callback) as Promise<Models.PatchQuotaOpenshiftIoV1ClusterResourceQuotaResponse>;
  }

  /**
   * read status of the specified ClusterResourceQuota
   * @param name name of the ClusterResourceQuota
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadQuotaOpenshiftIoV1ClusterResourceQuotaStatusResponse>
   */
  readQuotaOpenshiftIoV1ClusterResourceQuotaStatus(name: string, options?: Models.OpenShiftAPIwithKubernetesReadQuotaOpenshiftIoV1ClusterResourceQuotaStatusOptionalParams): Promise<Models.ReadQuotaOpenshiftIoV1ClusterResourceQuotaStatusResponse>;
  /**
   * @param name name of the ClusterResourceQuota
   * @param callback The callback
   */
  readQuotaOpenshiftIoV1ClusterResourceQuotaStatus(name: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiquotav1ClusterResourceQuota>): void;
  /**
   * @param name name of the ClusterResourceQuota
   * @param options The optional parameters
   * @param callback The callback
   */
  readQuotaOpenshiftIoV1ClusterResourceQuotaStatus(name: string, options: Models.OpenShiftAPIwithKubernetesReadQuotaOpenshiftIoV1ClusterResourceQuotaStatusOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiquotav1ClusterResourceQuota>): void;
  readQuotaOpenshiftIoV1ClusterResourceQuotaStatus(name: string, options?: Models.OpenShiftAPIwithKubernetesReadQuotaOpenshiftIoV1ClusterResourceQuotaStatusOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiquotav1ClusterResourceQuota>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiquotav1ClusterResourceQuota>): Promise<Models.ReadQuotaOpenshiftIoV1ClusterResourceQuotaStatusResponse> {
    return this.sendOperationRequest(
      {
        name,
        options
      },
      readQuotaOpenshiftIoV1ClusterResourceQuotaStatusOperationSpec,
      callback) as Promise<Models.ReadQuotaOpenshiftIoV1ClusterResourceQuotaStatusResponse>;
  }

  /**
   * replace status of the specified ClusterResourceQuota
   * @param body
   * @param name name of the ClusterResourceQuota
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceQuotaOpenshiftIoV1ClusterResourceQuotaStatusResponse>
   */
  replaceQuotaOpenshiftIoV1ClusterResourceQuotaStatus(body: Models.Comgithubopenshiftapiquotav1ClusterResourceQuota, name: string, options?: Models.OpenShiftAPIwithKubernetesReplaceQuotaOpenshiftIoV1ClusterResourceQuotaStatusOptionalParams): Promise<Models.ReplaceQuotaOpenshiftIoV1ClusterResourceQuotaStatusResponse>;
  /**
   * @param body
   * @param name name of the ClusterResourceQuota
   * @param callback The callback
   */
  replaceQuotaOpenshiftIoV1ClusterResourceQuotaStatus(body: Models.Comgithubopenshiftapiquotav1ClusterResourceQuota, name: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiquotav1ClusterResourceQuota>): void;
  /**
   * @param body
   * @param name name of the ClusterResourceQuota
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceQuotaOpenshiftIoV1ClusterResourceQuotaStatus(body: Models.Comgithubopenshiftapiquotav1ClusterResourceQuota, name: string, options: Models.OpenShiftAPIwithKubernetesReplaceQuotaOpenshiftIoV1ClusterResourceQuotaStatusOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiquotav1ClusterResourceQuota>): void;
  replaceQuotaOpenshiftIoV1ClusterResourceQuotaStatus(body: Models.Comgithubopenshiftapiquotav1ClusterResourceQuota, name: string, options?: Models.OpenShiftAPIwithKubernetesReplaceQuotaOpenshiftIoV1ClusterResourceQuotaStatusOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiquotav1ClusterResourceQuota>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiquotav1ClusterResourceQuota>): Promise<Models.ReplaceQuotaOpenshiftIoV1ClusterResourceQuotaStatusResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      replaceQuotaOpenshiftIoV1ClusterResourceQuotaStatusOperationSpec,
      callback) as Promise<Models.ReplaceQuotaOpenshiftIoV1ClusterResourceQuotaStatusResponse>;
  }

  /**
   * partially update status of the specified ClusterResourceQuota
   * @param body
   * @param name name of the ClusterResourceQuota
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchQuotaOpenshiftIoV1ClusterResourceQuotaStatusResponse>
   */
  patchQuotaOpenshiftIoV1ClusterResourceQuotaStatus(body: any, name: string, options?: Models.OpenShiftAPIwithKubernetesPatchQuotaOpenshiftIoV1ClusterResourceQuotaStatusOptionalParams): Promise<Models.PatchQuotaOpenshiftIoV1ClusterResourceQuotaStatusResponse>;
  /**
   * @param body
   * @param name name of the ClusterResourceQuota
   * @param callback The callback
   */
  patchQuotaOpenshiftIoV1ClusterResourceQuotaStatus(body: any, name: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiquotav1ClusterResourceQuota>): void;
  /**
   * @param body
   * @param name name of the ClusterResourceQuota
   * @param options The optional parameters
   * @param callback The callback
   */
  patchQuotaOpenshiftIoV1ClusterResourceQuotaStatus(body: any, name: string, options: Models.OpenShiftAPIwithKubernetesPatchQuotaOpenshiftIoV1ClusterResourceQuotaStatusOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiquotav1ClusterResourceQuota>): void;
  patchQuotaOpenshiftIoV1ClusterResourceQuotaStatus(body: any, name: string, options?: Models.OpenShiftAPIwithKubernetesPatchQuotaOpenshiftIoV1ClusterResourceQuotaStatusOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiquotav1ClusterResourceQuota>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiquotav1ClusterResourceQuota>): Promise<Models.PatchQuotaOpenshiftIoV1ClusterResourceQuotaStatusResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      patchQuotaOpenshiftIoV1ClusterResourceQuotaStatusOperationSpec,
      callback) as Promise<Models.PatchQuotaOpenshiftIoV1ClusterResourceQuotaStatusResponse>;
  }

  /**
   * list objects of kind AppliedClusterResourceQuota
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ListQuotaOpenshiftIoV1NamespacedAppliedClusterResourceQuotaResponse>
   */
  listQuotaOpenshiftIoV1NamespacedAppliedClusterResourceQuota(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListQuotaOpenshiftIoV1NamespacedAppliedClusterResourceQuotaOptionalParams): Promise<Models.ListQuotaOpenshiftIoV1NamespacedAppliedClusterResourceQuotaResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  listQuotaOpenshiftIoV1NamespacedAppliedClusterResourceQuota(namespace: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiquotav1AppliedClusterResourceQuotaList>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  listQuotaOpenshiftIoV1NamespacedAppliedClusterResourceQuota(namespace: string, options: Models.OpenShiftAPIwithKubernetesListQuotaOpenshiftIoV1NamespacedAppliedClusterResourceQuotaOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiquotav1AppliedClusterResourceQuotaList>): void;
  listQuotaOpenshiftIoV1NamespacedAppliedClusterResourceQuota(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListQuotaOpenshiftIoV1NamespacedAppliedClusterResourceQuotaOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiquotav1AppliedClusterResourceQuotaList>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiquotav1AppliedClusterResourceQuotaList>): Promise<Models.ListQuotaOpenshiftIoV1NamespacedAppliedClusterResourceQuotaResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      listQuotaOpenshiftIoV1NamespacedAppliedClusterResourceQuotaOperationSpec,
      callback) as Promise<Models.ListQuotaOpenshiftIoV1NamespacedAppliedClusterResourceQuotaResponse>;
  }

  /**
   * read the specified AppliedClusterResourceQuota
   * @param name name of the AppliedClusterResourceQuota
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadQuotaOpenshiftIoV1NamespacedAppliedClusterResourceQuotaResponse>
   */
  readQuotaOpenshiftIoV1NamespacedAppliedClusterResourceQuota(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadQuotaOpenshiftIoV1NamespacedAppliedClusterResourceQuotaOptionalParams): Promise<Models.ReadQuotaOpenshiftIoV1NamespacedAppliedClusterResourceQuotaResponse>;
  /**
   * @param name name of the AppliedClusterResourceQuota
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readQuotaOpenshiftIoV1NamespacedAppliedClusterResourceQuota(name: string, namespace: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiquotav1AppliedClusterResourceQuota>): void;
  /**
   * @param name name of the AppliedClusterResourceQuota
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readQuotaOpenshiftIoV1NamespacedAppliedClusterResourceQuota(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadQuotaOpenshiftIoV1NamespacedAppliedClusterResourceQuotaOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiquotav1AppliedClusterResourceQuota>): void;
  readQuotaOpenshiftIoV1NamespacedAppliedClusterResourceQuota(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadQuotaOpenshiftIoV1NamespacedAppliedClusterResourceQuotaOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiquotav1AppliedClusterResourceQuota>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiquotav1AppliedClusterResourceQuota>): Promise<Models.ReadQuotaOpenshiftIoV1NamespacedAppliedClusterResourceQuotaResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readQuotaOpenshiftIoV1NamespacedAppliedClusterResourceQuotaOperationSpec,
      callback) as Promise<Models.ReadQuotaOpenshiftIoV1NamespacedAppliedClusterResourceQuotaResponse>;
  }

  /**
   * watch individual changes to a list of ClusterResourceQuota
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchQuotaOpenshiftIoV1ClusterResourceQuotaListResponse>
   */
  watchQuotaOpenshiftIoV1ClusterResourceQuotaList(options?: Models.OpenShiftAPIwithKubernetesWatchQuotaOpenshiftIoV1ClusterResourceQuotaListOptionalParams): Promise<Models.WatchQuotaOpenshiftIoV1ClusterResourceQuotaListResponse>;
  /**
   * @param callback The callback
   */
  watchQuotaOpenshiftIoV1ClusterResourceQuotaList(callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  watchQuotaOpenshiftIoV1ClusterResourceQuotaList(options: Models.OpenShiftAPIwithKubernetesWatchQuotaOpenshiftIoV1ClusterResourceQuotaListOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchQuotaOpenshiftIoV1ClusterResourceQuotaList(options?: Models.OpenShiftAPIwithKubernetesWatchQuotaOpenshiftIoV1ClusterResourceQuotaListOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchQuotaOpenshiftIoV1ClusterResourceQuotaListResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      watchQuotaOpenshiftIoV1ClusterResourceQuotaListOperationSpec,
      callback) as Promise<Models.WatchQuotaOpenshiftIoV1ClusterResourceQuotaListResponse>;
  }

  /**
   * watch changes to an object of kind ClusterResourceQuota
   * @param name name of the ClusterResourceQuota
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchQuotaOpenshiftIoV1ClusterResourceQuotaResponse>
   */
  watchQuotaOpenshiftIoV1ClusterResourceQuota(name: string, options?: Models.OpenShiftAPIwithKubernetesWatchQuotaOpenshiftIoV1ClusterResourceQuotaOptionalParams): Promise<Models.WatchQuotaOpenshiftIoV1ClusterResourceQuotaResponse>;
  /**
   * @param name name of the ClusterResourceQuota
   * @param callback The callback
   */
  watchQuotaOpenshiftIoV1ClusterResourceQuota(name: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param name name of the ClusterResourceQuota
   * @param options The optional parameters
   * @param callback The callback
   */
  watchQuotaOpenshiftIoV1ClusterResourceQuota(name: string, options: Models.OpenShiftAPIwithKubernetesWatchQuotaOpenshiftIoV1ClusterResourceQuotaOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchQuotaOpenshiftIoV1ClusterResourceQuota(name: string, options?: Models.OpenShiftAPIwithKubernetesWatchQuotaOpenshiftIoV1ClusterResourceQuotaOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchQuotaOpenshiftIoV1ClusterResourceQuotaResponse> {
    return this.sendOperationRequest(
      {
        name,
        options
      },
      watchQuotaOpenshiftIoV1ClusterResourceQuotaOperationSpec,
      callback) as Promise<Models.WatchQuotaOpenshiftIoV1ClusterResourceQuotaResponse>;
  }

  /**
   * get information of a group
   * @param [options] The optional parameters
   * @returns Promise<Models.GetRbacAuthorizationAPIGroupResponse>
   */
  getRbacAuthorizationAPIGroup(options?: msRest.RequestOptionsBase): Promise<Models.GetRbacAuthorizationAPIGroupResponse>;
  /**
   * @param callback The callback
   */
  getRbacAuthorizationAPIGroup(callback: msRest.ServiceCallback<Models.V1APIGroup>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getRbacAuthorizationAPIGroup(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.V1APIGroup>): void;
  getRbacAuthorizationAPIGroup(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.V1APIGroup>, callback?: msRest.ServiceCallback<Models.V1APIGroup>): Promise<Models.GetRbacAuthorizationAPIGroupResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getRbacAuthorizationAPIGroupOperationSpec,
      callback) as Promise<Models.GetRbacAuthorizationAPIGroupResponse>;
  }

  /**
   * get available resources
   * @param [options] The optional parameters
   * @returns Promise<Models.GetRbacAuthorizationV1APIResourcesResponse>
   */
  getRbacAuthorizationV1APIResources(options?: msRest.RequestOptionsBase): Promise<Models.GetRbacAuthorizationV1APIResourcesResponse>;
  /**
   * @param callback The callback
   */
  getRbacAuthorizationV1APIResources(callback: msRest.ServiceCallback<Models.V1APIResourceList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getRbacAuthorizationV1APIResources(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.V1APIResourceList>): void;
  getRbacAuthorizationV1APIResources(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.V1APIResourceList>, callback?: msRest.ServiceCallback<Models.V1APIResourceList>): Promise<Models.GetRbacAuthorizationV1APIResourcesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getRbacAuthorizationV1APIResourcesOperationSpec,
      callback) as Promise<Models.GetRbacAuthorizationV1APIResourcesResponse>;
  }

  /**
   * list or watch objects of kind ClusterRoleBinding
   * @param [options] The optional parameters
   * @returns Promise<Models.ListRbacAuthorizationV1ClusterRoleBindingResponse>
   */
  listRbacAuthorizationV1ClusterRoleBinding(options?: Models.OpenShiftAPIwithKubernetesListRbacAuthorizationV1ClusterRoleBindingOptionalParams): Promise<Models.ListRbacAuthorizationV1ClusterRoleBindingResponse>;
  /**
   * @param callback The callback
   */
  listRbacAuthorizationV1ClusterRoleBinding(callback: msRest.ServiceCallback<Models.V1ClusterRoleBindingList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listRbacAuthorizationV1ClusterRoleBinding(options: Models.OpenShiftAPIwithKubernetesListRbacAuthorizationV1ClusterRoleBindingOptionalParams, callback: msRest.ServiceCallback<Models.V1ClusterRoleBindingList>): void;
  listRbacAuthorizationV1ClusterRoleBinding(options?: Models.OpenShiftAPIwithKubernetesListRbacAuthorizationV1ClusterRoleBindingOptionalParams | msRest.ServiceCallback<Models.V1ClusterRoleBindingList>, callback?: msRest.ServiceCallback<Models.V1ClusterRoleBindingList>): Promise<Models.ListRbacAuthorizationV1ClusterRoleBindingResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listRbacAuthorizationV1ClusterRoleBindingOperationSpec,
      callback) as Promise<Models.ListRbacAuthorizationV1ClusterRoleBindingResponse>;
  }

  /**
   * create a ClusterRoleBinding
   * @param body
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateRbacAuthorizationV1ClusterRoleBindingResponse>
   */
  createRbacAuthorizationV1ClusterRoleBinding(body: Models.V1ClusterRoleBinding, options?: Models.OpenShiftAPIwithKubernetesCreateRbacAuthorizationV1ClusterRoleBindingOptionalParams): Promise<Models.CreateRbacAuthorizationV1ClusterRoleBindingResponse>;
  /**
   * @param body
   * @param callback The callback
   */
  createRbacAuthorizationV1ClusterRoleBinding(body: Models.V1ClusterRoleBinding, callback: msRest.ServiceCallback<Models.V1ClusterRoleBinding>): void;
  /**
   * @param body
   * @param options The optional parameters
   * @param callback The callback
   */
  createRbacAuthorizationV1ClusterRoleBinding(body: Models.V1ClusterRoleBinding, options: Models.OpenShiftAPIwithKubernetesCreateRbacAuthorizationV1ClusterRoleBindingOptionalParams, callback: msRest.ServiceCallback<Models.V1ClusterRoleBinding>): void;
  createRbacAuthorizationV1ClusterRoleBinding(body: Models.V1ClusterRoleBinding, options?: Models.OpenShiftAPIwithKubernetesCreateRbacAuthorizationV1ClusterRoleBindingOptionalParams | msRest.ServiceCallback<Models.V1ClusterRoleBinding>, callback?: msRest.ServiceCallback<Models.V1ClusterRoleBinding>): Promise<Models.CreateRbacAuthorizationV1ClusterRoleBindingResponse> {
    return this.sendOperationRequest(
      {
        body,
        options
      },
      createRbacAuthorizationV1ClusterRoleBindingOperationSpec,
      callback) as Promise<Models.CreateRbacAuthorizationV1ClusterRoleBindingResponse>;
  }

  /**
   * delete collection of ClusterRoleBinding
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteRbacAuthorizationV1CollectionClusterRoleBindingResponse>
   */
  deleteRbacAuthorizationV1CollectionClusterRoleBinding(options?: Models.OpenShiftAPIwithKubernetesDeleteRbacAuthorizationV1CollectionClusterRoleBindingOptionalParams): Promise<Models.DeleteRbacAuthorizationV1CollectionClusterRoleBindingResponse>;
  /**
   * @param callback The callback
   */
  deleteRbacAuthorizationV1CollectionClusterRoleBinding(callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteRbacAuthorizationV1CollectionClusterRoleBinding(options: Models.OpenShiftAPIwithKubernetesDeleteRbacAuthorizationV1CollectionClusterRoleBindingOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteRbacAuthorizationV1CollectionClusterRoleBinding(options?: Models.OpenShiftAPIwithKubernetesDeleteRbacAuthorizationV1CollectionClusterRoleBindingOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteRbacAuthorizationV1CollectionClusterRoleBindingResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      deleteRbacAuthorizationV1CollectionClusterRoleBindingOperationSpec,
      callback) as Promise<Models.DeleteRbacAuthorizationV1CollectionClusterRoleBindingResponse>;
  }

  /**
   * read the specified ClusterRoleBinding
   * @param name name of the ClusterRoleBinding
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadRbacAuthorizationV1ClusterRoleBindingResponse>
   */
  readRbacAuthorizationV1ClusterRoleBinding(name: string, options?: Models.OpenShiftAPIwithKubernetesReadRbacAuthorizationV1ClusterRoleBindingOptionalParams): Promise<Models.ReadRbacAuthorizationV1ClusterRoleBindingResponse>;
  /**
   * @param name name of the ClusterRoleBinding
   * @param callback The callback
   */
  readRbacAuthorizationV1ClusterRoleBinding(name: string, callback: msRest.ServiceCallback<Models.V1ClusterRoleBinding>): void;
  /**
   * @param name name of the ClusterRoleBinding
   * @param options The optional parameters
   * @param callback The callback
   */
  readRbacAuthorizationV1ClusterRoleBinding(name: string, options: Models.OpenShiftAPIwithKubernetesReadRbacAuthorizationV1ClusterRoleBindingOptionalParams, callback: msRest.ServiceCallback<Models.V1ClusterRoleBinding>): void;
  readRbacAuthorizationV1ClusterRoleBinding(name: string, options?: Models.OpenShiftAPIwithKubernetesReadRbacAuthorizationV1ClusterRoleBindingOptionalParams | msRest.ServiceCallback<Models.V1ClusterRoleBinding>, callback?: msRest.ServiceCallback<Models.V1ClusterRoleBinding>): Promise<Models.ReadRbacAuthorizationV1ClusterRoleBindingResponse> {
    return this.sendOperationRequest(
      {
        name,
        options
      },
      readRbacAuthorizationV1ClusterRoleBindingOperationSpec,
      callback) as Promise<Models.ReadRbacAuthorizationV1ClusterRoleBindingResponse>;
  }

  /**
   * replace the specified ClusterRoleBinding
   * @param body
   * @param name name of the ClusterRoleBinding
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceRbacAuthorizationV1ClusterRoleBindingResponse>
   */
  replaceRbacAuthorizationV1ClusterRoleBinding(body: Models.V1ClusterRoleBinding, name: string, options?: Models.OpenShiftAPIwithKubernetesReplaceRbacAuthorizationV1ClusterRoleBindingOptionalParams): Promise<Models.ReplaceRbacAuthorizationV1ClusterRoleBindingResponse>;
  /**
   * @param body
   * @param name name of the ClusterRoleBinding
   * @param callback The callback
   */
  replaceRbacAuthorizationV1ClusterRoleBinding(body: Models.V1ClusterRoleBinding, name: string, callback: msRest.ServiceCallback<Models.V1ClusterRoleBinding>): void;
  /**
   * @param body
   * @param name name of the ClusterRoleBinding
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceRbacAuthorizationV1ClusterRoleBinding(body: Models.V1ClusterRoleBinding, name: string, options: Models.OpenShiftAPIwithKubernetesReplaceRbacAuthorizationV1ClusterRoleBindingOptionalParams, callback: msRest.ServiceCallback<Models.V1ClusterRoleBinding>): void;
  replaceRbacAuthorizationV1ClusterRoleBinding(body: Models.V1ClusterRoleBinding, name: string, options?: Models.OpenShiftAPIwithKubernetesReplaceRbacAuthorizationV1ClusterRoleBindingOptionalParams | msRest.ServiceCallback<Models.V1ClusterRoleBinding>, callback?: msRest.ServiceCallback<Models.V1ClusterRoleBinding>): Promise<Models.ReplaceRbacAuthorizationV1ClusterRoleBindingResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      replaceRbacAuthorizationV1ClusterRoleBindingOperationSpec,
      callback) as Promise<Models.ReplaceRbacAuthorizationV1ClusterRoleBindingResponse>;
  }

  /**
   * delete a ClusterRoleBinding
   * @param body
   * @param name name of the ClusterRoleBinding
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteRbacAuthorizationV1ClusterRoleBindingResponse>
   */
  deleteRbacAuthorizationV1ClusterRoleBinding(body: Models.V1DeleteOptions, name: string, options?: Models.OpenShiftAPIwithKubernetesDeleteRbacAuthorizationV1ClusterRoleBindingOptionalParams): Promise<Models.DeleteRbacAuthorizationV1ClusterRoleBindingResponse>;
  /**
   * @param body
   * @param name name of the ClusterRoleBinding
   * @param callback The callback
   */
  deleteRbacAuthorizationV1ClusterRoleBinding(body: Models.V1DeleteOptions, name: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param name name of the ClusterRoleBinding
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteRbacAuthorizationV1ClusterRoleBinding(body: Models.V1DeleteOptions, name: string, options: Models.OpenShiftAPIwithKubernetesDeleteRbacAuthorizationV1ClusterRoleBindingOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteRbacAuthorizationV1ClusterRoleBinding(body: Models.V1DeleteOptions, name: string, options?: Models.OpenShiftAPIwithKubernetesDeleteRbacAuthorizationV1ClusterRoleBindingOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteRbacAuthorizationV1ClusterRoleBindingResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      deleteRbacAuthorizationV1ClusterRoleBindingOperationSpec,
      callback) as Promise<Models.DeleteRbacAuthorizationV1ClusterRoleBindingResponse>;
  }

  /**
   * partially update the specified ClusterRoleBinding
   * @param body
   * @param name name of the ClusterRoleBinding
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchRbacAuthorizationV1ClusterRoleBindingResponse>
   */
  patchRbacAuthorizationV1ClusterRoleBinding(body: any, name: string, options?: Models.OpenShiftAPIwithKubernetesPatchRbacAuthorizationV1ClusterRoleBindingOptionalParams): Promise<Models.PatchRbacAuthorizationV1ClusterRoleBindingResponse>;
  /**
   * @param body
   * @param name name of the ClusterRoleBinding
   * @param callback The callback
   */
  patchRbacAuthorizationV1ClusterRoleBinding(body: any, name: string, callback: msRest.ServiceCallback<Models.V1ClusterRoleBinding>): void;
  /**
   * @param body
   * @param name name of the ClusterRoleBinding
   * @param options The optional parameters
   * @param callback The callback
   */
  patchRbacAuthorizationV1ClusterRoleBinding(body: any, name: string, options: Models.OpenShiftAPIwithKubernetesPatchRbacAuthorizationV1ClusterRoleBindingOptionalParams, callback: msRest.ServiceCallback<Models.V1ClusterRoleBinding>): void;
  patchRbacAuthorizationV1ClusterRoleBinding(body: any, name: string, options?: Models.OpenShiftAPIwithKubernetesPatchRbacAuthorizationV1ClusterRoleBindingOptionalParams | msRest.ServiceCallback<Models.V1ClusterRoleBinding>, callback?: msRest.ServiceCallback<Models.V1ClusterRoleBinding>): Promise<Models.PatchRbacAuthorizationV1ClusterRoleBindingResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      patchRbacAuthorizationV1ClusterRoleBindingOperationSpec,
      callback) as Promise<Models.PatchRbacAuthorizationV1ClusterRoleBindingResponse>;
  }

  /**
   * list or watch objects of kind ClusterRole
   * @param [options] The optional parameters
   * @returns Promise<Models.ListRbacAuthorizationV1ClusterRoleResponse>
   */
  listRbacAuthorizationV1ClusterRole(options?: Models.OpenShiftAPIwithKubernetesListRbacAuthorizationV1ClusterRoleOptionalParams): Promise<Models.ListRbacAuthorizationV1ClusterRoleResponse>;
  /**
   * @param callback The callback
   */
  listRbacAuthorizationV1ClusterRole(callback: msRest.ServiceCallback<Models.V1ClusterRoleList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listRbacAuthorizationV1ClusterRole(options: Models.OpenShiftAPIwithKubernetesListRbacAuthorizationV1ClusterRoleOptionalParams, callback: msRest.ServiceCallback<Models.V1ClusterRoleList>): void;
  listRbacAuthorizationV1ClusterRole(options?: Models.OpenShiftAPIwithKubernetesListRbacAuthorizationV1ClusterRoleOptionalParams | msRest.ServiceCallback<Models.V1ClusterRoleList>, callback?: msRest.ServiceCallback<Models.V1ClusterRoleList>): Promise<Models.ListRbacAuthorizationV1ClusterRoleResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listRbacAuthorizationV1ClusterRoleOperationSpec,
      callback) as Promise<Models.ListRbacAuthorizationV1ClusterRoleResponse>;
  }

  /**
   * create a ClusterRole
   * @param body
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateRbacAuthorizationV1ClusterRoleResponse>
   */
  createRbacAuthorizationV1ClusterRole(body: Models.V1ClusterRole, options?: Models.OpenShiftAPIwithKubernetesCreateRbacAuthorizationV1ClusterRoleOptionalParams): Promise<Models.CreateRbacAuthorizationV1ClusterRoleResponse>;
  /**
   * @param body
   * @param callback The callback
   */
  createRbacAuthorizationV1ClusterRole(body: Models.V1ClusterRole, callback: msRest.ServiceCallback<Models.V1ClusterRole>): void;
  /**
   * @param body
   * @param options The optional parameters
   * @param callback The callback
   */
  createRbacAuthorizationV1ClusterRole(body: Models.V1ClusterRole, options: Models.OpenShiftAPIwithKubernetesCreateRbacAuthorizationV1ClusterRoleOptionalParams, callback: msRest.ServiceCallback<Models.V1ClusterRole>): void;
  createRbacAuthorizationV1ClusterRole(body: Models.V1ClusterRole, options?: Models.OpenShiftAPIwithKubernetesCreateRbacAuthorizationV1ClusterRoleOptionalParams | msRest.ServiceCallback<Models.V1ClusterRole>, callback?: msRest.ServiceCallback<Models.V1ClusterRole>): Promise<Models.CreateRbacAuthorizationV1ClusterRoleResponse> {
    return this.sendOperationRequest(
      {
        body,
        options
      },
      createRbacAuthorizationV1ClusterRoleOperationSpec,
      callback) as Promise<Models.CreateRbacAuthorizationV1ClusterRoleResponse>;
  }

  /**
   * delete collection of ClusterRole
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteRbacAuthorizationV1CollectionClusterRoleResponse>
   */
  deleteRbacAuthorizationV1CollectionClusterRole(options?: Models.OpenShiftAPIwithKubernetesDeleteRbacAuthorizationV1CollectionClusterRoleOptionalParams): Promise<Models.DeleteRbacAuthorizationV1CollectionClusterRoleResponse>;
  /**
   * @param callback The callback
   */
  deleteRbacAuthorizationV1CollectionClusterRole(callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteRbacAuthorizationV1CollectionClusterRole(options: Models.OpenShiftAPIwithKubernetesDeleteRbacAuthorizationV1CollectionClusterRoleOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteRbacAuthorizationV1CollectionClusterRole(options?: Models.OpenShiftAPIwithKubernetesDeleteRbacAuthorizationV1CollectionClusterRoleOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteRbacAuthorizationV1CollectionClusterRoleResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      deleteRbacAuthorizationV1CollectionClusterRoleOperationSpec,
      callback) as Promise<Models.DeleteRbacAuthorizationV1CollectionClusterRoleResponse>;
  }

  /**
   * read the specified ClusterRole
   * @param name name of the ClusterRole
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadRbacAuthorizationV1ClusterRoleResponse>
   */
  readRbacAuthorizationV1ClusterRole(name: string, options?: Models.OpenShiftAPIwithKubernetesReadRbacAuthorizationV1ClusterRoleOptionalParams): Promise<Models.ReadRbacAuthorizationV1ClusterRoleResponse>;
  /**
   * @param name name of the ClusterRole
   * @param callback The callback
   */
  readRbacAuthorizationV1ClusterRole(name: string, callback: msRest.ServiceCallback<Models.V1ClusterRole>): void;
  /**
   * @param name name of the ClusterRole
   * @param options The optional parameters
   * @param callback The callback
   */
  readRbacAuthorizationV1ClusterRole(name: string, options: Models.OpenShiftAPIwithKubernetesReadRbacAuthorizationV1ClusterRoleOptionalParams, callback: msRest.ServiceCallback<Models.V1ClusterRole>): void;
  readRbacAuthorizationV1ClusterRole(name: string, options?: Models.OpenShiftAPIwithKubernetesReadRbacAuthorizationV1ClusterRoleOptionalParams | msRest.ServiceCallback<Models.V1ClusterRole>, callback?: msRest.ServiceCallback<Models.V1ClusterRole>): Promise<Models.ReadRbacAuthorizationV1ClusterRoleResponse> {
    return this.sendOperationRequest(
      {
        name,
        options
      },
      readRbacAuthorizationV1ClusterRoleOperationSpec,
      callback) as Promise<Models.ReadRbacAuthorizationV1ClusterRoleResponse>;
  }

  /**
   * replace the specified ClusterRole
   * @param body
   * @param name name of the ClusterRole
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceRbacAuthorizationV1ClusterRoleResponse>
   */
  replaceRbacAuthorizationV1ClusterRole(body: Models.V1ClusterRole, name: string, options?: Models.OpenShiftAPIwithKubernetesReplaceRbacAuthorizationV1ClusterRoleOptionalParams): Promise<Models.ReplaceRbacAuthorizationV1ClusterRoleResponse>;
  /**
   * @param body
   * @param name name of the ClusterRole
   * @param callback The callback
   */
  replaceRbacAuthorizationV1ClusterRole(body: Models.V1ClusterRole, name: string, callback: msRest.ServiceCallback<Models.V1ClusterRole>): void;
  /**
   * @param body
   * @param name name of the ClusterRole
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceRbacAuthorizationV1ClusterRole(body: Models.V1ClusterRole, name: string, options: Models.OpenShiftAPIwithKubernetesReplaceRbacAuthorizationV1ClusterRoleOptionalParams, callback: msRest.ServiceCallback<Models.V1ClusterRole>): void;
  replaceRbacAuthorizationV1ClusterRole(body: Models.V1ClusterRole, name: string, options?: Models.OpenShiftAPIwithKubernetesReplaceRbacAuthorizationV1ClusterRoleOptionalParams | msRest.ServiceCallback<Models.V1ClusterRole>, callback?: msRest.ServiceCallback<Models.V1ClusterRole>): Promise<Models.ReplaceRbacAuthorizationV1ClusterRoleResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      replaceRbacAuthorizationV1ClusterRoleOperationSpec,
      callback) as Promise<Models.ReplaceRbacAuthorizationV1ClusterRoleResponse>;
  }

  /**
   * delete a ClusterRole
   * @param body
   * @param name name of the ClusterRole
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteRbacAuthorizationV1ClusterRoleResponse>
   */
  deleteRbacAuthorizationV1ClusterRole(body: Models.V1DeleteOptions, name: string, options?: Models.OpenShiftAPIwithKubernetesDeleteRbacAuthorizationV1ClusterRoleOptionalParams): Promise<Models.DeleteRbacAuthorizationV1ClusterRoleResponse>;
  /**
   * @param body
   * @param name name of the ClusterRole
   * @param callback The callback
   */
  deleteRbacAuthorizationV1ClusterRole(body: Models.V1DeleteOptions, name: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param name name of the ClusterRole
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteRbacAuthorizationV1ClusterRole(body: Models.V1DeleteOptions, name: string, options: Models.OpenShiftAPIwithKubernetesDeleteRbacAuthorizationV1ClusterRoleOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteRbacAuthorizationV1ClusterRole(body: Models.V1DeleteOptions, name: string, options?: Models.OpenShiftAPIwithKubernetesDeleteRbacAuthorizationV1ClusterRoleOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteRbacAuthorizationV1ClusterRoleResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      deleteRbacAuthorizationV1ClusterRoleOperationSpec,
      callback) as Promise<Models.DeleteRbacAuthorizationV1ClusterRoleResponse>;
  }

  /**
   * partially update the specified ClusterRole
   * @param body
   * @param name name of the ClusterRole
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchRbacAuthorizationV1ClusterRoleResponse>
   */
  patchRbacAuthorizationV1ClusterRole(body: any, name: string, options?: Models.OpenShiftAPIwithKubernetesPatchRbacAuthorizationV1ClusterRoleOptionalParams): Promise<Models.PatchRbacAuthorizationV1ClusterRoleResponse>;
  /**
   * @param body
   * @param name name of the ClusterRole
   * @param callback The callback
   */
  patchRbacAuthorizationV1ClusterRole(body: any, name: string, callback: msRest.ServiceCallback<Models.V1ClusterRole>): void;
  /**
   * @param body
   * @param name name of the ClusterRole
   * @param options The optional parameters
   * @param callback The callback
   */
  patchRbacAuthorizationV1ClusterRole(body: any, name: string, options: Models.OpenShiftAPIwithKubernetesPatchRbacAuthorizationV1ClusterRoleOptionalParams, callback: msRest.ServiceCallback<Models.V1ClusterRole>): void;
  patchRbacAuthorizationV1ClusterRole(body: any, name: string, options?: Models.OpenShiftAPIwithKubernetesPatchRbacAuthorizationV1ClusterRoleOptionalParams | msRest.ServiceCallback<Models.V1ClusterRole>, callback?: msRest.ServiceCallback<Models.V1ClusterRole>): Promise<Models.PatchRbacAuthorizationV1ClusterRoleResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      patchRbacAuthorizationV1ClusterRoleOperationSpec,
      callback) as Promise<Models.PatchRbacAuthorizationV1ClusterRoleResponse>;
  }

  /**
   * list or watch objects of kind RoleBinding
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ListRbacAuthorizationV1NamespacedRoleBindingResponse>
   */
  listRbacAuthorizationV1NamespacedRoleBinding(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListRbacAuthorizationV1NamespacedRoleBindingOptionalParams): Promise<Models.ListRbacAuthorizationV1NamespacedRoleBindingResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  listRbacAuthorizationV1NamespacedRoleBinding(namespace: string, callback: msRest.ServiceCallback<Models.V1RoleBindingList>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  listRbacAuthorizationV1NamespacedRoleBinding(namespace: string, options: Models.OpenShiftAPIwithKubernetesListRbacAuthorizationV1NamespacedRoleBindingOptionalParams, callback: msRest.ServiceCallback<Models.V1RoleBindingList>): void;
  listRbacAuthorizationV1NamespacedRoleBinding(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListRbacAuthorizationV1NamespacedRoleBindingOptionalParams | msRest.ServiceCallback<Models.V1RoleBindingList>, callback?: msRest.ServiceCallback<Models.V1RoleBindingList>): Promise<Models.ListRbacAuthorizationV1NamespacedRoleBindingResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      listRbacAuthorizationV1NamespacedRoleBindingOperationSpec,
      callback) as Promise<Models.ListRbacAuthorizationV1NamespacedRoleBindingResponse>;
  }

  /**
   * create a RoleBinding
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateRbacAuthorizationV1NamespacedRoleBindingResponse>
   */
  createRbacAuthorizationV1NamespacedRoleBinding(body: Models.V1RoleBinding, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateRbacAuthorizationV1NamespacedRoleBindingOptionalParams): Promise<Models.CreateRbacAuthorizationV1NamespacedRoleBindingResponse>;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  createRbacAuthorizationV1NamespacedRoleBinding(body: Models.V1RoleBinding, namespace: string, callback: msRest.ServiceCallback<Models.V1RoleBinding>): void;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  createRbacAuthorizationV1NamespacedRoleBinding(body: Models.V1RoleBinding, namespace: string, options: Models.OpenShiftAPIwithKubernetesCreateRbacAuthorizationV1NamespacedRoleBindingOptionalParams, callback: msRest.ServiceCallback<Models.V1RoleBinding>): void;
  createRbacAuthorizationV1NamespacedRoleBinding(body: Models.V1RoleBinding, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateRbacAuthorizationV1NamespacedRoleBindingOptionalParams | msRest.ServiceCallback<Models.V1RoleBinding>, callback?: msRest.ServiceCallback<Models.V1RoleBinding>): Promise<Models.CreateRbacAuthorizationV1NamespacedRoleBindingResponse> {
    return this.sendOperationRequest(
      {
        body,
        namespace,
        options
      },
      createRbacAuthorizationV1NamespacedRoleBindingOperationSpec,
      callback) as Promise<Models.CreateRbacAuthorizationV1NamespacedRoleBindingResponse>;
  }

  /**
   * delete collection of RoleBinding
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteRbacAuthorizationV1CollectionNamespacedRoleBindingResponse>
   */
  deleteRbacAuthorizationV1CollectionNamespacedRoleBinding(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteRbacAuthorizationV1CollectionNamespacedRoleBindingOptionalParams): Promise<Models.DeleteRbacAuthorizationV1CollectionNamespacedRoleBindingResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteRbacAuthorizationV1CollectionNamespacedRoleBinding(namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteRbacAuthorizationV1CollectionNamespacedRoleBinding(namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteRbacAuthorizationV1CollectionNamespacedRoleBindingOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteRbacAuthorizationV1CollectionNamespacedRoleBinding(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteRbacAuthorizationV1CollectionNamespacedRoleBindingOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteRbacAuthorizationV1CollectionNamespacedRoleBindingResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      deleteRbacAuthorizationV1CollectionNamespacedRoleBindingOperationSpec,
      callback) as Promise<Models.DeleteRbacAuthorizationV1CollectionNamespacedRoleBindingResponse>;
  }

  /**
   * read the specified RoleBinding
   * @param name name of the RoleBinding
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadRbacAuthorizationV1NamespacedRoleBindingResponse>
   */
  readRbacAuthorizationV1NamespacedRoleBinding(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadRbacAuthorizationV1NamespacedRoleBindingOptionalParams): Promise<Models.ReadRbacAuthorizationV1NamespacedRoleBindingResponse>;
  /**
   * @param name name of the RoleBinding
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readRbacAuthorizationV1NamespacedRoleBinding(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1RoleBinding>): void;
  /**
   * @param name name of the RoleBinding
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readRbacAuthorizationV1NamespacedRoleBinding(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadRbacAuthorizationV1NamespacedRoleBindingOptionalParams, callback: msRest.ServiceCallback<Models.V1RoleBinding>): void;
  readRbacAuthorizationV1NamespacedRoleBinding(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadRbacAuthorizationV1NamespacedRoleBindingOptionalParams | msRest.ServiceCallback<Models.V1RoleBinding>, callback?: msRest.ServiceCallback<Models.V1RoleBinding>): Promise<Models.ReadRbacAuthorizationV1NamespacedRoleBindingResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readRbacAuthorizationV1NamespacedRoleBindingOperationSpec,
      callback) as Promise<Models.ReadRbacAuthorizationV1NamespacedRoleBindingResponse>;
  }

  /**
   * replace the specified RoleBinding
   * @param body
   * @param name name of the RoleBinding
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceRbacAuthorizationV1NamespacedRoleBindingResponse>
   */
  replaceRbacAuthorizationV1NamespacedRoleBinding(body: Models.V1RoleBinding, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceRbacAuthorizationV1NamespacedRoleBindingOptionalParams): Promise<Models.ReplaceRbacAuthorizationV1NamespacedRoleBindingResponse>;
  /**
   * @param body
   * @param name name of the RoleBinding
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replaceRbacAuthorizationV1NamespacedRoleBinding(body: Models.V1RoleBinding, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1RoleBinding>): void;
  /**
   * @param body
   * @param name name of the RoleBinding
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceRbacAuthorizationV1NamespacedRoleBinding(body: Models.V1RoleBinding, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplaceRbacAuthorizationV1NamespacedRoleBindingOptionalParams, callback: msRest.ServiceCallback<Models.V1RoleBinding>): void;
  replaceRbacAuthorizationV1NamespacedRoleBinding(body: Models.V1RoleBinding, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceRbacAuthorizationV1NamespacedRoleBindingOptionalParams | msRest.ServiceCallback<Models.V1RoleBinding>, callback?: msRest.ServiceCallback<Models.V1RoleBinding>): Promise<Models.ReplaceRbacAuthorizationV1NamespacedRoleBindingResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replaceRbacAuthorizationV1NamespacedRoleBindingOperationSpec,
      callback) as Promise<Models.ReplaceRbacAuthorizationV1NamespacedRoleBindingResponse>;
  }

  /**
   * delete a RoleBinding
   * @param body
   * @param name name of the RoleBinding
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteRbacAuthorizationV1NamespacedRoleBindingResponse>
   */
  deleteRbacAuthorizationV1NamespacedRoleBinding(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteRbacAuthorizationV1NamespacedRoleBindingOptionalParams): Promise<Models.DeleteRbacAuthorizationV1NamespacedRoleBindingResponse>;
  /**
   * @param body
   * @param name name of the RoleBinding
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteRbacAuthorizationV1NamespacedRoleBinding(body: Models.V1DeleteOptions, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param name name of the RoleBinding
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteRbacAuthorizationV1NamespacedRoleBinding(body: Models.V1DeleteOptions, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteRbacAuthorizationV1NamespacedRoleBindingOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteRbacAuthorizationV1NamespacedRoleBinding(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteRbacAuthorizationV1NamespacedRoleBindingOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteRbacAuthorizationV1NamespacedRoleBindingResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      deleteRbacAuthorizationV1NamespacedRoleBindingOperationSpec,
      callback) as Promise<Models.DeleteRbacAuthorizationV1NamespacedRoleBindingResponse>;
  }

  /**
   * partially update the specified RoleBinding
   * @param body
   * @param name name of the RoleBinding
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchRbacAuthorizationV1NamespacedRoleBindingResponse>
   */
  patchRbacAuthorizationV1NamespacedRoleBinding(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchRbacAuthorizationV1NamespacedRoleBindingOptionalParams): Promise<Models.PatchRbacAuthorizationV1NamespacedRoleBindingResponse>;
  /**
   * @param body
   * @param name name of the RoleBinding
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  patchRbacAuthorizationV1NamespacedRoleBinding(body: any, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1RoleBinding>): void;
  /**
   * @param body
   * @param name name of the RoleBinding
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  patchRbacAuthorizationV1NamespacedRoleBinding(body: any, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesPatchRbacAuthorizationV1NamespacedRoleBindingOptionalParams, callback: msRest.ServiceCallback<Models.V1RoleBinding>): void;
  patchRbacAuthorizationV1NamespacedRoleBinding(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchRbacAuthorizationV1NamespacedRoleBindingOptionalParams | msRest.ServiceCallback<Models.V1RoleBinding>, callback?: msRest.ServiceCallback<Models.V1RoleBinding>): Promise<Models.PatchRbacAuthorizationV1NamespacedRoleBindingResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      patchRbacAuthorizationV1NamespacedRoleBindingOperationSpec,
      callback) as Promise<Models.PatchRbacAuthorizationV1NamespacedRoleBindingResponse>;
  }

  /**
   * list or watch objects of kind Role
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ListRbacAuthorizationV1NamespacedRoleResponse>
   */
  listRbacAuthorizationV1NamespacedRole(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListRbacAuthorizationV1NamespacedRoleOptionalParams): Promise<Models.ListRbacAuthorizationV1NamespacedRoleResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  listRbacAuthorizationV1NamespacedRole(namespace: string, callback: msRest.ServiceCallback<Models.V1RoleList>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  listRbacAuthorizationV1NamespacedRole(namespace: string, options: Models.OpenShiftAPIwithKubernetesListRbacAuthorizationV1NamespacedRoleOptionalParams, callback: msRest.ServiceCallback<Models.V1RoleList>): void;
  listRbacAuthorizationV1NamespacedRole(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListRbacAuthorizationV1NamespacedRoleOptionalParams | msRest.ServiceCallback<Models.V1RoleList>, callback?: msRest.ServiceCallback<Models.V1RoleList>): Promise<Models.ListRbacAuthorizationV1NamespacedRoleResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      listRbacAuthorizationV1NamespacedRoleOperationSpec,
      callback) as Promise<Models.ListRbacAuthorizationV1NamespacedRoleResponse>;
  }

  /**
   * create a Role
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateRbacAuthorizationV1NamespacedRoleResponse>
   */
  createRbacAuthorizationV1NamespacedRole(body: Models.V1Role, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateRbacAuthorizationV1NamespacedRoleOptionalParams): Promise<Models.CreateRbacAuthorizationV1NamespacedRoleResponse>;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  createRbacAuthorizationV1NamespacedRole(body: Models.V1Role, namespace: string, callback: msRest.ServiceCallback<Models.V1Role>): void;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  createRbacAuthorizationV1NamespacedRole(body: Models.V1Role, namespace: string, options: Models.OpenShiftAPIwithKubernetesCreateRbacAuthorizationV1NamespacedRoleOptionalParams, callback: msRest.ServiceCallback<Models.V1Role>): void;
  createRbacAuthorizationV1NamespacedRole(body: Models.V1Role, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateRbacAuthorizationV1NamespacedRoleOptionalParams | msRest.ServiceCallback<Models.V1Role>, callback?: msRest.ServiceCallback<Models.V1Role>): Promise<Models.CreateRbacAuthorizationV1NamespacedRoleResponse> {
    return this.sendOperationRequest(
      {
        body,
        namespace,
        options
      },
      createRbacAuthorizationV1NamespacedRoleOperationSpec,
      callback) as Promise<Models.CreateRbacAuthorizationV1NamespacedRoleResponse>;
  }

  /**
   * delete collection of Role
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteRbacAuthorizationV1CollectionNamespacedRoleResponse>
   */
  deleteRbacAuthorizationV1CollectionNamespacedRole(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteRbacAuthorizationV1CollectionNamespacedRoleOptionalParams): Promise<Models.DeleteRbacAuthorizationV1CollectionNamespacedRoleResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteRbacAuthorizationV1CollectionNamespacedRole(namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteRbacAuthorizationV1CollectionNamespacedRole(namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteRbacAuthorizationV1CollectionNamespacedRoleOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteRbacAuthorizationV1CollectionNamespacedRole(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteRbacAuthorizationV1CollectionNamespacedRoleOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteRbacAuthorizationV1CollectionNamespacedRoleResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      deleteRbacAuthorizationV1CollectionNamespacedRoleOperationSpec,
      callback) as Promise<Models.DeleteRbacAuthorizationV1CollectionNamespacedRoleResponse>;
  }

  /**
   * read the specified Role
   * @param name name of the Role
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadRbacAuthorizationV1NamespacedRoleResponse>
   */
  readRbacAuthorizationV1NamespacedRole(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadRbacAuthorizationV1NamespacedRoleOptionalParams): Promise<Models.ReadRbacAuthorizationV1NamespacedRoleResponse>;
  /**
   * @param name name of the Role
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readRbacAuthorizationV1NamespacedRole(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Role>): void;
  /**
   * @param name name of the Role
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readRbacAuthorizationV1NamespacedRole(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadRbacAuthorizationV1NamespacedRoleOptionalParams, callback: msRest.ServiceCallback<Models.V1Role>): void;
  readRbacAuthorizationV1NamespacedRole(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadRbacAuthorizationV1NamespacedRoleOptionalParams | msRest.ServiceCallback<Models.V1Role>, callback?: msRest.ServiceCallback<Models.V1Role>): Promise<Models.ReadRbacAuthorizationV1NamespacedRoleResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readRbacAuthorizationV1NamespacedRoleOperationSpec,
      callback) as Promise<Models.ReadRbacAuthorizationV1NamespacedRoleResponse>;
  }

  /**
   * replace the specified Role
   * @param body
   * @param name name of the Role
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceRbacAuthorizationV1NamespacedRoleResponse>
   */
  replaceRbacAuthorizationV1NamespacedRole(body: Models.V1Role, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceRbacAuthorizationV1NamespacedRoleOptionalParams): Promise<Models.ReplaceRbacAuthorizationV1NamespacedRoleResponse>;
  /**
   * @param body
   * @param name name of the Role
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replaceRbacAuthorizationV1NamespacedRole(body: Models.V1Role, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Role>): void;
  /**
   * @param body
   * @param name name of the Role
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceRbacAuthorizationV1NamespacedRole(body: Models.V1Role, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplaceRbacAuthorizationV1NamespacedRoleOptionalParams, callback: msRest.ServiceCallback<Models.V1Role>): void;
  replaceRbacAuthorizationV1NamespacedRole(body: Models.V1Role, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceRbacAuthorizationV1NamespacedRoleOptionalParams | msRest.ServiceCallback<Models.V1Role>, callback?: msRest.ServiceCallback<Models.V1Role>): Promise<Models.ReplaceRbacAuthorizationV1NamespacedRoleResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replaceRbacAuthorizationV1NamespacedRoleOperationSpec,
      callback) as Promise<Models.ReplaceRbacAuthorizationV1NamespacedRoleResponse>;
  }

  /**
   * delete a Role
   * @param body
   * @param name name of the Role
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteRbacAuthorizationV1NamespacedRoleResponse>
   */
  deleteRbacAuthorizationV1NamespacedRole(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteRbacAuthorizationV1NamespacedRoleOptionalParams): Promise<Models.DeleteRbacAuthorizationV1NamespacedRoleResponse>;
  /**
   * @param body
   * @param name name of the Role
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteRbacAuthorizationV1NamespacedRole(body: Models.V1DeleteOptions, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param name name of the Role
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteRbacAuthorizationV1NamespacedRole(body: Models.V1DeleteOptions, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteRbacAuthorizationV1NamespacedRoleOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteRbacAuthorizationV1NamespacedRole(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteRbacAuthorizationV1NamespacedRoleOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteRbacAuthorizationV1NamespacedRoleResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      deleteRbacAuthorizationV1NamespacedRoleOperationSpec,
      callback) as Promise<Models.DeleteRbacAuthorizationV1NamespacedRoleResponse>;
  }

  /**
   * partially update the specified Role
   * @param body
   * @param name name of the Role
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchRbacAuthorizationV1NamespacedRoleResponse>
   */
  patchRbacAuthorizationV1NamespacedRole(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchRbacAuthorizationV1NamespacedRoleOptionalParams): Promise<Models.PatchRbacAuthorizationV1NamespacedRoleResponse>;
  /**
   * @param body
   * @param name name of the Role
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  patchRbacAuthorizationV1NamespacedRole(body: any, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Role>): void;
  /**
   * @param body
   * @param name name of the Role
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  patchRbacAuthorizationV1NamespacedRole(body: any, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesPatchRbacAuthorizationV1NamespacedRoleOptionalParams, callback: msRest.ServiceCallback<Models.V1Role>): void;
  patchRbacAuthorizationV1NamespacedRole(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchRbacAuthorizationV1NamespacedRoleOptionalParams | msRest.ServiceCallback<Models.V1Role>, callback?: msRest.ServiceCallback<Models.V1Role>): Promise<Models.PatchRbacAuthorizationV1NamespacedRoleResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      patchRbacAuthorizationV1NamespacedRoleOperationSpec,
      callback) as Promise<Models.PatchRbacAuthorizationV1NamespacedRoleResponse>;
  }

  /**
   * list or watch objects of kind RoleBinding
   * @param [options] The optional parameters
   * @returns Promise<Models.ListRbacAuthorizationV1RoleBindingForAllNamespacesResponse>
   */
  listRbacAuthorizationV1RoleBindingForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListRbacAuthorizationV1RoleBindingForAllNamespacesOptionalParams): Promise<Models.ListRbacAuthorizationV1RoleBindingForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  listRbacAuthorizationV1RoleBindingForAllNamespaces(callback: msRest.ServiceCallback<Models.V1RoleBindingList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listRbacAuthorizationV1RoleBindingForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesListRbacAuthorizationV1RoleBindingForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1RoleBindingList>): void;
  listRbacAuthorizationV1RoleBindingForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListRbacAuthorizationV1RoleBindingForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1RoleBindingList>, callback?: msRest.ServiceCallback<Models.V1RoleBindingList>): Promise<Models.ListRbacAuthorizationV1RoleBindingForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listRbacAuthorizationV1RoleBindingForAllNamespacesOperationSpec,
      callback) as Promise<Models.ListRbacAuthorizationV1RoleBindingForAllNamespacesResponse>;
  }

  /**
   * list or watch objects of kind Role
   * @param [options] The optional parameters
   * @returns Promise<Models.ListRbacAuthorizationV1RoleForAllNamespacesResponse>
   */
  listRbacAuthorizationV1RoleForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListRbacAuthorizationV1RoleForAllNamespacesOptionalParams): Promise<Models.ListRbacAuthorizationV1RoleForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  listRbacAuthorizationV1RoleForAllNamespaces(callback: msRest.ServiceCallback<Models.V1RoleList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listRbacAuthorizationV1RoleForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesListRbacAuthorizationV1RoleForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1RoleList>): void;
  listRbacAuthorizationV1RoleForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListRbacAuthorizationV1RoleForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1RoleList>, callback?: msRest.ServiceCallback<Models.V1RoleList>): Promise<Models.ListRbacAuthorizationV1RoleForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listRbacAuthorizationV1RoleForAllNamespacesOperationSpec,
      callback) as Promise<Models.ListRbacAuthorizationV1RoleForAllNamespacesResponse>;
  }

  /**
   * watch individual changes to a list of ClusterRoleBinding
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchRbacAuthorizationV1ClusterRoleBindingListResponse>
   */
  watchRbacAuthorizationV1ClusterRoleBindingList(options?: Models.OpenShiftAPIwithKubernetesWatchRbacAuthorizationV1ClusterRoleBindingListOptionalParams): Promise<Models.WatchRbacAuthorizationV1ClusterRoleBindingListResponse>;
  /**
   * @param callback The callback
   */
  watchRbacAuthorizationV1ClusterRoleBindingList(callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  watchRbacAuthorizationV1ClusterRoleBindingList(options: Models.OpenShiftAPIwithKubernetesWatchRbacAuthorizationV1ClusterRoleBindingListOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchRbacAuthorizationV1ClusterRoleBindingList(options?: Models.OpenShiftAPIwithKubernetesWatchRbacAuthorizationV1ClusterRoleBindingListOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchRbacAuthorizationV1ClusterRoleBindingListResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      watchRbacAuthorizationV1ClusterRoleBindingListOperationSpec,
      callback) as Promise<Models.WatchRbacAuthorizationV1ClusterRoleBindingListResponse>;
  }

  /**
   * watch changes to an object of kind ClusterRoleBinding
   * @param name name of the ClusterRoleBinding
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchRbacAuthorizationV1ClusterRoleBindingResponse>
   */
  watchRbacAuthorizationV1ClusterRoleBinding(name: string, options?: Models.OpenShiftAPIwithKubernetesWatchRbacAuthorizationV1ClusterRoleBindingOptionalParams): Promise<Models.WatchRbacAuthorizationV1ClusterRoleBindingResponse>;
  /**
   * @param name name of the ClusterRoleBinding
   * @param callback The callback
   */
  watchRbacAuthorizationV1ClusterRoleBinding(name: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param name name of the ClusterRoleBinding
   * @param options The optional parameters
   * @param callback The callback
   */
  watchRbacAuthorizationV1ClusterRoleBinding(name: string, options: Models.OpenShiftAPIwithKubernetesWatchRbacAuthorizationV1ClusterRoleBindingOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchRbacAuthorizationV1ClusterRoleBinding(name: string, options?: Models.OpenShiftAPIwithKubernetesWatchRbacAuthorizationV1ClusterRoleBindingOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchRbacAuthorizationV1ClusterRoleBindingResponse> {
    return this.sendOperationRequest(
      {
        name,
        options
      },
      watchRbacAuthorizationV1ClusterRoleBindingOperationSpec,
      callback) as Promise<Models.WatchRbacAuthorizationV1ClusterRoleBindingResponse>;
  }

  /**
   * watch individual changes to a list of ClusterRole
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchRbacAuthorizationV1ClusterRoleListResponse>
   */
  watchRbacAuthorizationV1ClusterRoleList(options?: Models.OpenShiftAPIwithKubernetesWatchRbacAuthorizationV1ClusterRoleListOptionalParams): Promise<Models.WatchRbacAuthorizationV1ClusterRoleListResponse>;
  /**
   * @param callback The callback
   */
  watchRbacAuthorizationV1ClusterRoleList(callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  watchRbacAuthorizationV1ClusterRoleList(options: Models.OpenShiftAPIwithKubernetesWatchRbacAuthorizationV1ClusterRoleListOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchRbacAuthorizationV1ClusterRoleList(options?: Models.OpenShiftAPIwithKubernetesWatchRbacAuthorizationV1ClusterRoleListOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchRbacAuthorizationV1ClusterRoleListResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      watchRbacAuthorizationV1ClusterRoleListOperationSpec,
      callback) as Promise<Models.WatchRbacAuthorizationV1ClusterRoleListResponse>;
  }

  /**
   * watch changes to an object of kind ClusterRole
   * @param name name of the ClusterRole
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchRbacAuthorizationV1ClusterRoleResponse>
   */
  watchRbacAuthorizationV1ClusterRole(name: string, options?: Models.OpenShiftAPIwithKubernetesWatchRbacAuthorizationV1ClusterRoleOptionalParams): Promise<Models.WatchRbacAuthorizationV1ClusterRoleResponse>;
  /**
   * @param name name of the ClusterRole
   * @param callback The callback
   */
  watchRbacAuthorizationV1ClusterRole(name: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param name name of the ClusterRole
   * @param options The optional parameters
   * @param callback The callback
   */
  watchRbacAuthorizationV1ClusterRole(name: string, options: Models.OpenShiftAPIwithKubernetesWatchRbacAuthorizationV1ClusterRoleOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchRbacAuthorizationV1ClusterRole(name: string, options?: Models.OpenShiftAPIwithKubernetesWatchRbacAuthorizationV1ClusterRoleOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchRbacAuthorizationV1ClusterRoleResponse> {
    return this.sendOperationRequest(
      {
        name,
        options
      },
      watchRbacAuthorizationV1ClusterRoleOperationSpec,
      callback) as Promise<Models.WatchRbacAuthorizationV1ClusterRoleResponse>;
  }

  /**
   * watch individual changes to a list of RoleBinding
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchRbacAuthorizationV1NamespacedRoleBindingListResponse>
   */
  watchRbacAuthorizationV1NamespacedRoleBindingList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchRbacAuthorizationV1NamespacedRoleBindingListOptionalParams): Promise<Models.WatchRbacAuthorizationV1NamespacedRoleBindingListResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchRbacAuthorizationV1NamespacedRoleBindingList(namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchRbacAuthorizationV1NamespacedRoleBindingList(namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchRbacAuthorizationV1NamespacedRoleBindingListOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchRbacAuthorizationV1NamespacedRoleBindingList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchRbacAuthorizationV1NamespacedRoleBindingListOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchRbacAuthorizationV1NamespacedRoleBindingListResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      watchRbacAuthorizationV1NamespacedRoleBindingListOperationSpec,
      callback) as Promise<Models.WatchRbacAuthorizationV1NamespacedRoleBindingListResponse>;
  }

  /**
   * watch changes to an object of kind RoleBinding
   * @param name name of the RoleBinding
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchRbacAuthorizationV1NamespacedRoleBindingResponse>
   */
  watchRbacAuthorizationV1NamespacedRoleBinding(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchRbacAuthorizationV1NamespacedRoleBindingOptionalParams): Promise<Models.WatchRbacAuthorizationV1NamespacedRoleBindingResponse>;
  /**
   * @param name name of the RoleBinding
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchRbacAuthorizationV1NamespacedRoleBinding(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param name name of the RoleBinding
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchRbacAuthorizationV1NamespacedRoleBinding(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchRbacAuthorizationV1NamespacedRoleBindingOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchRbacAuthorizationV1NamespacedRoleBinding(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchRbacAuthorizationV1NamespacedRoleBindingOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchRbacAuthorizationV1NamespacedRoleBindingResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      watchRbacAuthorizationV1NamespacedRoleBindingOperationSpec,
      callback) as Promise<Models.WatchRbacAuthorizationV1NamespacedRoleBindingResponse>;
  }

  /**
   * watch individual changes to a list of Role
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchRbacAuthorizationV1NamespacedRoleListResponse>
   */
  watchRbacAuthorizationV1NamespacedRoleList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchRbacAuthorizationV1NamespacedRoleListOptionalParams): Promise<Models.WatchRbacAuthorizationV1NamespacedRoleListResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchRbacAuthorizationV1NamespacedRoleList(namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchRbacAuthorizationV1NamespacedRoleList(namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchRbacAuthorizationV1NamespacedRoleListOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchRbacAuthorizationV1NamespacedRoleList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchRbacAuthorizationV1NamespacedRoleListOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchRbacAuthorizationV1NamespacedRoleListResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      watchRbacAuthorizationV1NamespacedRoleListOperationSpec,
      callback) as Promise<Models.WatchRbacAuthorizationV1NamespacedRoleListResponse>;
  }

  /**
   * watch changes to an object of kind Role
   * @param name name of the Role
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchRbacAuthorizationV1NamespacedRoleResponse>
   */
  watchRbacAuthorizationV1NamespacedRole(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchRbacAuthorizationV1NamespacedRoleOptionalParams): Promise<Models.WatchRbacAuthorizationV1NamespacedRoleResponse>;
  /**
   * @param name name of the Role
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchRbacAuthorizationV1NamespacedRole(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param name name of the Role
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchRbacAuthorizationV1NamespacedRole(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchRbacAuthorizationV1NamespacedRoleOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchRbacAuthorizationV1NamespacedRole(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchRbacAuthorizationV1NamespacedRoleOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchRbacAuthorizationV1NamespacedRoleResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      watchRbacAuthorizationV1NamespacedRoleOperationSpec,
      callback) as Promise<Models.WatchRbacAuthorizationV1NamespacedRoleResponse>;
  }

  /**
   * watch individual changes to a list of RoleBinding
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchRbacAuthorizationV1RoleBindingListForAllNamespacesResponse>
   */
  watchRbacAuthorizationV1RoleBindingListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchRbacAuthorizationV1RoleBindingListForAllNamespacesOptionalParams): Promise<Models.WatchRbacAuthorizationV1RoleBindingListForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  watchRbacAuthorizationV1RoleBindingListForAllNamespaces(callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  watchRbacAuthorizationV1RoleBindingListForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesWatchRbacAuthorizationV1RoleBindingListForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchRbacAuthorizationV1RoleBindingListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchRbacAuthorizationV1RoleBindingListForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchRbacAuthorizationV1RoleBindingListForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      watchRbacAuthorizationV1RoleBindingListForAllNamespacesOperationSpec,
      callback) as Promise<Models.WatchRbacAuthorizationV1RoleBindingListForAllNamespacesResponse>;
  }

  /**
   * watch individual changes to a list of Role
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchRbacAuthorizationV1RoleListForAllNamespacesResponse>
   */
  watchRbacAuthorizationV1RoleListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchRbacAuthorizationV1RoleListForAllNamespacesOptionalParams): Promise<Models.WatchRbacAuthorizationV1RoleListForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  watchRbacAuthorizationV1RoleListForAllNamespaces(callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  watchRbacAuthorizationV1RoleListForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesWatchRbacAuthorizationV1RoleListForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchRbacAuthorizationV1RoleListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchRbacAuthorizationV1RoleListForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchRbacAuthorizationV1RoleListForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      watchRbacAuthorizationV1RoleListForAllNamespacesOperationSpec,
      callback) as Promise<Models.WatchRbacAuthorizationV1RoleListForAllNamespacesResponse>;
  }

  /**
   * get available resources
   * @param [options] The optional parameters
   * @returns Promise<Models.GetRbacAuthorizationV1beta1APIResourcesResponse>
   */
  getRbacAuthorizationV1beta1APIResources(options?: msRest.RequestOptionsBase): Promise<Models.GetRbacAuthorizationV1beta1APIResourcesResponse>;
  /**
   * @param callback The callback
   */
  getRbacAuthorizationV1beta1APIResources(callback: msRest.ServiceCallback<Models.V1APIResourceList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getRbacAuthorizationV1beta1APIResources(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.V1APIResourceList>): void;
  getRbacAuthorizationV1beta1APIResources(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.V1APIResourceList>, callback?: msRest.ServiceCallback<Models.V1APIResourceList>): Promise<Models.GetRbacAuthorizationV1beta1APIResourcesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getRbacAuthorizationV1beta1APIResourcesOperationSpec,
      callback) as Promise<Models.GetRbacAuthorizationV1beta1APIResourcesResponse>;
  }

  /**
   * list or watch objects of kind ClusterRoleBinding
   * @param [options] The optional parameters
   * @returns Promise<Models.ListRbacAuthorizationV1beta1ClusterRoleBindingResponse>
   */
  listRbacAuthorizationV1beta1ClusterRoleBinding(options?: Models.OpenShiftAPIwithKubernetesListRbacAuthorizationV1beta1ClusterRoleBindingOptionalParams): Promise<Models.ListRbacAuthorizationV1beta1ClusterRoleBindingResponse>;
  /**
   * @param callback The callback
   */
  listRbacAuthorizationV1beta1ClusterRoleBinding(callback: msRest.ServiceCallback<Models.V1beta1ClusterRoleBindingList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listRbacAuthorizationV1beta1ClusterRoleBinding(options: Models.OpenShiftAPIwithKubernetesListRbacAuthorizationV1beta1ClusterRoleBindingOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1ClusterRoleBindingList>): void;
  listRbacAuthorizationV1beta1ClusterRoleBinding(options?: Models.OpenShiftAPIwithKubernetesListRbacAuthorizationV1beta1ClusterRoleBindingOptionalParams | msRest.ServiceCallback<Models.V1beta1ClusterRoleBindingList>, callback?: msRest.ServiceCallback<Models.V1beta1ClusterRoleBindingList>): Promise<Models.ListRbacAuthorizationV1beta1ClusterRoleBindingResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listRbacAuthorizationV1beta1ClusterRoleBindingOperationSpec,
      callback) as Promise<Models.ListRbacAuthorizationV1beta1ClusterRoleBindingResponse>;
  }

  /**
   * create a ClusterRoleBinding
   * @param body
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateRbacAuthorizationV1beta1ClusterRoleBindingResponse>
   */
  createRbacAuthorizationV1beta1ClusterRoleBinding(body: Models.V1beta1ClusterRoleBinding, options?: Models.OpenShiftAPIwithKubernetesCreateRbacAuthorizationV1beta1ClusterRoleBindingOptionalParams): Promise<Models.CreateRbacAuthorizationV1beta1ClusterRoleBindingResponse>;
  /**
   * @param body
   * @param callback The callback
   */
  createRbacAuthorizationV1beta1ClusterRoleBinding(body: Models.V1beta1ClusterRoleBinding, callback: msRest.ServiceCallback<Models.V1beta1ClusterRoleBinding>): void;
  /**
   * @param body
   * @param options The optional parameters
   * @param callback The callback
   */
  createRbacAuthorizationV1beta1ClusterRoleBinding(body: Models.V1beta1ClusterRoleBinding, options: Models.OpenShiftAPIwithKubernetesCreateRbacAuthorizationV1beta1ClusterRoleBindingOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1ClusterRoleBinding>): void;
  createRbacAuthorizationV1beta1ClusterRoleBinding(body: Models.V1beta1ClusterRoleBinding, options?: Models.OpenShiftAPIwithKubernetesCreateRbacAuthorizationV1beta1ClusterRoleBindingOptionalParams | msRest.ServiceCallback<Models.V1beta1ClusterRoleBinding>, callback?: msRest.ServiceCallback<Models.V1beta1ClusterRoleBinding>): Promise<Models.CreateRbacAuthorizationV1beta1ClusterRoleBindingResponse> {
    return this.sendOperationRequest(
      {
        body,
        options
      },
      createRbacAuthorizationV1beta1ClusterRoleBindingOperationSpec,
      callback) as Promise<Models.CreateRbacAuthorizationV1beta1ClusterRoleBindingResponse>;
  }

  /**
   * delete collection of ClusterRoleBinding
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteRbacAuthorizationV1beta1CollectionClusterRoleBindingResponse>
   */
  deleteRbacAuthorizationV1beta1CollectionClusterRoleBinding(options?: Models.OpenShiftAPIwithKubernetesDeleteRbacAuthorizationV1beta1CollectionClusterRoleBindingOptionalParams): Promise<Models.DeleteRbacAuthorizationV1beta1CollectionClusterRoleBindingResponse>;
  /**
   * @param callback The callback
   */
  deleteRbacAuthorizationV1beta1CollectionClusterRoleBinding(callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteRbacAuthorizationV1beta1CollectionClusterRoleBinding(options: Models.OpenShiftAPIwithKubernetesDeleteRbacAuthorizationV1beta1CollectionClusterRoleBindingOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteRbacAuthorizationV1beta1CollectionClusterRoleBinding(options?: Models.OpenShiftAPIwithKubernetesDeleteRbacAuthorizationV1beta1CollectionClusterRoleBindingOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteRbacAuthorizationV1beta1CollectionClusterRoleBindingResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      deleteRbacAuthorizationV1beta1CollectionClusterRoleBindingOperationSpec,
      callback) as Promise<Models.DeleteRbacAuthorizationV1beta1CollectionClusterRoleBindingResponse>;
  }

  /**
   * read the specified ClusterRoleBinding
   * @param name name of the ClusterRoleBinding
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadRbacAuthorizationV1beta1ClusterRoleBindingResponse>
   */
  readRbacAuthorizationV1beta1ClusterRoleBinding(name: string, options?: Models.OpenShiftAPIwithKubernetesReadRbacAuthorizationV1beta1ClusterRoleBindingOptionalParams): Promise<Models.ReadRbacAuthorizationV1beta1ClusterRoleBindingResponse>;
  /**
   * @param name name of the ClusterRoleBinding
   * @param callback The callback
   */
  readRbacAuthorizationV1beta1ClusterRoleBinding(name: string, callback: msRest.ServiceCallback<Models.V1beta1ClusterRoleBinding>): void;
  /**
   * @param name name of the ClusterRoleBinding
   * @param options The optional parameters
   * @param callback The callback
   */
  readRbacAuthorizationV1beta1ClusterRoleBinding(name: string, options: Models.OpenShiftAPIwithKubernetesReadRbacAuthorizationV1beta1ClusterRoleBindingOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1ClusterRoleBinding>): void;
  readRbacAuthorizationV1beta1ClusterRoleBinding(name: string, options?: Models.OpenShiftAPIwithKubernetesReadRbacAuthorizationV1beta1ClusterRoleBindingOptionalParams | msRest.ServiceCallback<Models.V1beta1ClusterRoleBinding>, callback?: msRest.ServiceCallback<Models.V1beta1ClusterRoleBinding>): Promise<Models.ReadRbacAuthorizationV1beta1ClusterRoleBindingResponse> {
    return this.sendOperationRequest(
      {
        name,
        options
      },
      readRbacAuthorizationV1beta1ClusterRoleBindingOperationSpec,
      callback) as Promise<Models.ReadRbacAuthorizationV1beta1ClusterRoleBindingResponse>;
  }

  /**
   * replace the specified ClusterRoleBinding
   * @param body
   * @param name name of the ClusterRoleBinding
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceRbacAuthorizationV1beta1ClusterRoleBindingResponse>
   */
  replaceRbacAuthorizationV1beta1ClusterRoleBinding(body: Models.V1beta1ClusterRoleBinding, name: string, options?: Models.OpenShiftAPIwithKubernetesReplaceRbacAuthorizationV1beta1ClusterRoleBindingOptionalParams): Promise<Models.ReplaceRbacAuthorizationV1beta1ClusterRoleBindingResponse>;
  /**
   * @param body
   * @param name name of the ClusterRoleBinding
   * @param callback The callback
   */
  replaceRbacAuthorizationV1beta1ClusterRoleBinding(body: Models.V1beta1ClusterRoleBinding, name: string, callback: msRest.ServiceCallback<Models.V1beta1ClusterRoleBinding>): void;
  /**
   * @param body
   * @param name name of the ClusterRoleBinding
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceRbacAuthorizationV1beta1ClusterRoleBinding(body: Models.V1beta1ClusterRoleBinding, name: string, options: Models.OpenShiftAPIwithKubernetesReplaceRbacAuthorizationV1beta1ClusterRoleBindingOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1ClusterRoleBinding>): void;
  replaceRbacAuthorizationV1beta1ClusterRoleBinding(body: Models.V1beta1ClusterRoleBinding, name: string, options?: Models.OpenShiftAPIwithKubernetesReplaceRbacAuthorizationV1beta1ClusterRoleBindingOptionalParams | msRest.ServiceCallback<Models.V1beta1ClusterRoleBinding>, callback?: msRest.ServiceCallback<Models.V1beta1ClusterRoleBinding>): Promise<Models.ReplaceRbacAuthorizationV1beta1ClusterRoleBindingResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      replaceRbacAuthorizationV1beta1ClusterRoleBindingOperationSpec,
      callback) as Promise<Models.ReplaceRbacAuthorizationV1beta1ClusterRoleBindingResponse>;
  }

  /**
   * delete a ClusterRoleBinding
   * @param body
   * @param name name of the ClusterRoleBinding
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteRbacAuthorizationV1beta1ClusterRoleBindingResponse>
   */
  deleteRbacAuthorizationV1beta1ClusterRoleBinding(body: Models.V1DeleteOptions, name: string, options?: Models.OpenShiftAPIwithKubernetesDeleteRbacAuthorizationV1beta1ClusterRoleBindingOptionalParams): Promise<Models.DeleteRbacAuthorizationV1beta1ClusterRoleBindingResponse>;
  /**
   * @param body
   * @param name name of the ClusterRoleBinding
   * @param callback The callback
   */
  deleteRbacAuthorizationV1beta1ClusterRoleBinding(body: Models.V1DeleteOptions, name: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param name name of the ClusterRoleBinding
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteRbacAuthorizationV1beta1ClusterRoleBinding(body: Models.V1DeleteOptions, name: string, options: Models.OpenShiftAPIwithKubernetesDeleteRbacAuthorizationV1beta1ClusterRoleBindingOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteRbacAuthorizationV1beta1ClusterRoleBinding(body: Models.V1DeleteOptions, name: string, options?: Models.OpenShiftAPIwithKubernetesDeleteRbacAuthorizationV1beta1ClusterRoleBindingOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteRbacAuthorizationV1beta1ClusterRoleBindingResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      deleteRbacAuthorizationV1beta1ClusterRoleBindingOperationSpec,
      callback) as Promise<Models.DeleteRbacAuthorizationV1beta1ClusterRoleBindingResponse>;
  }

  /**
   * partially update the specified ClusterRoleBinding
   * @param body
   * @param name name of the ClusterRoleBinding
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchRbacAuthorizationV1beta1ClusterRoleBindingResponse>
   */
  patchRbacAuthorizationV1beta1ClusterRoleBinding(body: any, name: string, options?: Models.OpenShiftAPIwithKubernetesPatchRbacAuthorizationV1beta1ClusterRoleBindingOptionalParams): Promise<Models.PatchRbacAuthorizationV1beta1ClusterRoleBindingResponse>;
  /**
   * @param body
   * @param name name of the ClusterRoleBinding
   * @param callback The callback
   */
  patchRbacAuthorizationV1beta1ClusterRoleBinding(body: any, name: string, callback: msRest.ServiceCallback<Models.V1beta1ClusterRoleBinding>): void;
  /**
   * @param body
   * @param name name of the ClusterRoleBinding
   * @param options The optional parameters
   * @param callback The callback
   */
  patchRbacAuthorizationV1beta1ClusterRoleBinding(body: any, name: string, options: Models.OpenShiftAPIwithKubernetesPatchRbacAuthorizationV1beta1ClusterRoleBindingOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1ClusterRoleBinding>): void;
  patchRbacAuthorizationV1beta1ClusterRoleBinding(body: any, name: string, options?: Models.OpenShiftAPIwithKubernetesPatchRbacAuthorizationV1beta1ClusterRoleBindingOptionalParams | msRest.ServiceCallback<Models.V1beta1ClusterRoleBinding>, callback?: msRest.ServiceCallback<Models.V1beta1ClusterRoleBinding>): Promise<Models.PatchRbacAuthorizationV1beta1ClusterRoleBindingResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      patchRbacAuthorizationV1beta1ClusterRoleBindingOperationSpec,
      callback) as Promise<Models.PatchRbacAuthorizationV1beta1ClusterRoleBindingResponse>;
  }

  /**
   * list or watch objects of kind ClusterRole
   * @param [options] The optional parameters
   * @returns Promise<Models.ListRbacAuthorizationV1beta1ClusterRoleResponse>
   */
  listRbacAuthorizationV1beta1ClusterRole(options?: Models.OpenShiftAPIwithKubernetesListRbacAuthorizationV1beta1ClusterRoleOptionalParams): Promise<Models.ListRbacAuthorizationV1beta1ClusterRoleResponse>;
  /**
   * @param callback The callback
   */
  listRbacAuthorizationV1beta1ClusterRole(callback: msRest.ServiceCallback<Models.V1beta1ClusterRoleList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listRbacAuthorizationV1beta1ClusterRole(options: Models.OpenShiftAPIwithKubernetesListRbacAuthorizationV1beta1ClusterRoleOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1ClusterRoleList>): void;
  listRbacAuthorizationV1beta1ClusterRole(options?: Models.OpenShiftAPIwithKubernetesListRbacAuthorizationV1beta1ClusterRoleOptionalParams | msRest.ServiceCallback<Models.V1beta1ClusterRoleList>, callback?: msRest.ServiceCallback<Models.V1beta1ClusterRoleList>): Promise<Models.ListRbacAuthorizationV1beta1ClusterRoleResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listRbacAuthorizationV1beta1ClusterRoleOperationSpec,
      callback) as Promise<Models.ListRbacAuthorizationV1beta1ClusterRoleResponse>;
  }

  /**
   * create a ClusterRole
   * @param body
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateRbacAuthorizationV1beta1ClusterRoleResponse>
   */
  createRbacAuthorizationV1beta1ClusterRole(body: Models.V1beta1ClusterRole, options?: Models.OpenShiftAPIwithKubernetesCreateRbacAuthorizationV1beta1ClusterRoleOptionalParams): Promise<Models.CreateRbacAuthorizationV1beta1ClusterRoleResponse>;
  /**
   * @param body
   * @param callback The callback
   */
  createRbacAuthorizationV1beta1ClusterRole(body: Models.V1beta1ClusterRole, callback: msRest.ServiceCallback<Models.V1beta1ClusterRole>): void;
  /**
   * @param body
   * @param options The optional parameters
   * @param callback The callback
   */
  createRbacAuthorizationV1beta1ClusterRole(body: Models.V1beta1ClusterRole, options: Models.OpenShiftAPIwithKubernetesCreateRbacAuthorizationV1beta1ClusterRoleOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1ClusterRole>): void;
  createRbacAuthorizationV1beta1ClusterRole(body: Models.V1beta1ClusterRole, options?: Models.OpenShiftAPIwithKubernetesCreateRbacAuthorizationV1beta1ClusterRoleOptionalParams | msRest.ServiceCallback<Models.V1beta1ClusterRole>, callback?: msRest.ServiceCallback<Models.V1beta1ClusterRole>): Promise<Models.CreateRbacAuthorizationV1beta1ClusterRoleResponse> {
    return this.sendOperationRequest(
      {
        body,
        options
      },
      createRbacAuthorizationV1beta1ClusterRoleOperationSpec,
      callback) as Promise<Models.CreateRbacAuthorizationV1beta1ClusterRoleResponse>;
  }

  /**
   * delete collection of ClusterRole
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteRbacAuthorizationV1beta1CollectionClusterRoleResponse>
   */
  deleteRbacAuthorizationV1beta1CollectionClusterRole(options?: Models.OpenShiftAPIwithKubernetesDeleteRbacAuthorizationV1beta1CollectionClusterRoleOptionalParams): Promise<Models.DeleteRbacAuthorizationV1beta1CollectionClusterRoleResponse>;
  /**
   * @param callback The callback
   */
  deleteRbacAuthorizationV1beta1CollectionClusterRole(callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteRbacAuthorizationV1beta1CollectionClusterRole(options: Models.OpenShiftAPIwithKubernetesDeleteRbacAuthorizationV1beta1CollectionClusterRoleOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteRbacAuthorizationV1beta1CollectionClusterRole(options?: Models.OpenShiftAPIwithKubernetesDeleteRbacAuthorizationV1beta1CollectionClusterRoleOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteRbacAuthorizationV1beta1CollectionClusterRoleResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      deleteRbacAuthorizationV1beta1CollectionClusterRoleOperationSpec,
      callback) as Promise<Models.DeleteRbacAuthorizationV1beta1CollectionClusterRoleResponse>;
  }

  /**
   * read the specified ClusterRole
   * @param name name of the ClusterRole
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadRbacAuthorizationV1beta1ClusterRoleResponse>
   */
  readRbacAuthorizationV1beta1ClusterRole(name: string, options?: Models.OpenShiftAPIwithKubernetesReadRbacAuthorizationV1beta1ClusterRoleOptionalParams): Promise<Models.ReadRbacAuthorizationV1beta1ClusterRoleResponse>;
  /**
   * @param name name of the ClusterRole
   * @param callback The callback
   */
  readRbacAuthorizationV1beta1ClusterRole(name: string, callback: msRest.ServiceCallback<Models.V1beta1ClusterRole>): void;
  /**
   * @param name name of the ClusterRole
   * @param options The optional parameters
   * @param callback The callback
   */
  readRbacAuthorizationV1beta1ClusterRole(name: string, options: Models.OpenShiftAPIwithKubernetesReadRbacAuthorizationV1beta1ClusterRoleOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1ClusterRole>): void;
  readRbacAuthorizationV1beta1ClusterRole(name: string, options?: Models.OpenShiftAPIwithKubernetesReadRbacAuthorizationV1beta1ClusterRoleOptionalParams | msRest.ServiceCallback<Models.V1beta1ClusterRole>, callback?: msRest.ServiceCallback<Models.V1beta1ClusterRole>): Promise<Models.ReadRbacAuthorizationV1beta1ClusterRoleResponse> {
    return this.sendOperationRequest(
      {
        name,
        options
      },
      readRbacAuthorizationV1beta1ClusterRoleOperationSpec,
      callback) as Promise<Models.ReadRbacAuthorizationV1beta1ClusterRoleResponse>;
  }

  /**
   * replace the specified ClusterRole
   * @param body
   * @param name name of the ClusterRole
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceRbacAuthorizationV1beta1ClusterRoleResponse>
   */
  replaceRbacAuthorizationV1beta1ClusterRole(body: Models.V1beta1ClusterRole, name: string, options?: Models.OpenShiftAPIwithKubernetesReplaceRbacAuthorizationV1beta1ClusterRoleOptionalParams): Promise<Models.ReplaceRbacAuthorizationV1beta1ClusterRoleResponse>;
  /**
   * @param body
   * @param name name of the ClusterRole
   * @param callback The callback
   */
  replaceRbacAuthorizationV1beta1ClusterRole(body: Models.V1beta1ClusterRole, name: string, callback: msRest.ServiceCallback<Models.V1beta1ClusterRole>): void;
  /**
   * @param body
   * @param name name of the ClusterRole
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceRbacAuthorizationV1beta1ClusterRole(body: Models.V1beta1ClusterRole, name: string, options: Models.OpenShiftAPIwithKubernetesReplaceRbacAuthorizationV1beta1ClusterRoleOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1ClusterRole>): void;
  replaceRbacAuthorizationV1beta1ClusterRole(body: Models.V1beta1ClusterRole, name: string, options?: Models.OpenShiftAPIwithKubernetesReplaceRbacAuthorizationV1beta1ClusterRoleOptionalParams | msRest.ServiceCallback<Models.V1beta1ClusterRole>, callback?: msRest.ServiceCallback<Models.V1beta1ClusterRole>): Promise<Models.ReplaceRbacAuthorizationV1beta1ClusterRoleResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      replaceRbacAuthorizationV1beta1ClusterRoleOperationSpec,
      callback) as Promise<Models.ReplaceRbacAuthorizationV1beta1ClusterRoleResponse>;
  }

  /**
   * delete a ClusterRole
   * @param body
   * @param name name of the ClusterRole
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteRbacAuthorizationV1beta1ClusterRoleResponse>
   */
  deleteRbacAuthorizationV1beta1ClusterRole(body: Models.V1DeleteOptions, name: string, options?: Models.OpenShiftAPIwithKubernetesDeleteRbacAuthorizationV1beta1ClusterRoleOptionalParams): Promise<Models.DeleteRbacAuthorizationV1beta1ClusterRoleResponse>;
  /**
   * @param body
   * @param name name of the ClusterRole
   * @param callback The callback
   */
  deleteRbacAuthorizationV1beta1ClusterRole(body: Models.V1DeleteOptions, name: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param name name of the ClusterRole
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteRbacAuthorizationV1beta1ClusterRole(body: Models.V1DeleteOptions, name: string, options: Models.OpenShiftAPIwithKubernetesDeleteRbacAuthorizationV1beta1ClusterRoleOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteRbacAuthorizationV1beta1ClusterRole(body: Models.V1DeleteOptions, name: string, options?: Models.OpenShiftAPIwithKubernetesDeleteRbacAuthorizationV1beta1ClusterRoleOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteRbacAuthorizationV1beta1ClusterRoleResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      deleteRbacAuthorizationV1beta1ClusterRoleOperationSpec,
      callback) as Promise<Models.DeleteRbacAuthorizationV1beta1ClusterRoleResponse>;
  }

  /**
   * partially update the specified ClusterRole
   * @param body
   * @param name name of the ClusterRole
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchRbacAuthorizationV1beta1ClusterRoleResponse>
   */
  patchRbacAuthorizationV1beta1ClusterRole(body: any, name: string, options?: Models.OpenShiftAPIwithKubernetesPatchRbacAuthorizationV1beta1ClusterRoleOptionalParams): Promise<Models.PatchRbacAuthorizationV1beta1ClusterRoleResponse>;
  /**
   * @param body
   * @param name name of the ClusterRole
   * @param callback The callback
   */
  patchRbacAuthorizationV1beta1ClusterRole(body: any, name: string, callback: msRest.ServiceCallback<Models.V1beta1ClusterRole>): void;
  /**
   * @param body
   * @param name name of the ClusterRole
   * @param options The optional parameters
   * @param callback The callback
   */
  patchRbacAuthorizationV1beta1ClusterRole(body: any, name: string, options: Models.OpenShiftAPIwithKubernetesPatchRbacAuthorizationV1beta1ClusterRoleOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1ClusterRole>): void;
  patchRbacAuthorizationV1beta1ClusterRole(body: any, name: string, options?: Models.OpenShiftAPIwithKubernetesPatchRbacAuthorizationV1beta1ClusterRoleOptionalParams | msRest.ServiceCallback<Models.V1beta1ClusterRole>, callback?: msRest.ServiceCallback<Models.V1beta1ClusterRole>): Promise<Models.PatchRbacAuthorizationV1beta1ClusterRoleResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      patchRbacAuthorizationV1beta1ClusterRoleOperationSpec,
      callback) as Promise<Models.PatchRbacAuthorizationV1beta1ClusterRoleResponse>;
  }

  /**
   * list or watch objects of kind RoleBinding
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ListRbacAuthorizationV1beta1NamespacedRoleBindingResponse>
   */
  listRbacAuthorizationV1beta1NamespacedRoleBinding(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListRbacAuthorizationV1beta1NamespacedRoleBindingOptionalParams): Promise<Models.ListRbacAuthorizationV1beta1NamespacedRoleBindingResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  listRbacAuthorizationV1beta1NamespacedRoleBinding(namespace: string, callback: msRest.ServiceCallback<Models.V1beta1RoleBindingList>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  listRbacAuthorizationV1beta1NamespacedRoleBinding(namespace: string, options: Models.OpenShiftAPIwithKubernetesListRbacAuthorizationV1beta1NamespacedRoleBindingOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1RoleBindingList>): void;
  listRbacAuthorizationV1beta1NamespacedRoleBinding(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListRbacAuthorizationV1beta1NamespacedRoleBindingOptionalParams | msRest.ServiceCallback<Models.V1beta1RoleBindingList>, callback?: msRest.ServiceCallback<Models.V1beta1RoleBindingList>): Promise<Models.ListRbacAuthorizationV1beta1NamespacedRoleBindingResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      listRbacAuthorizationV1beta1NamespacedRoleBindingOperationSpec,
      callback) as Promise<Models.ListRbacAuthorizationV1beta1NamespacedRoleBindingResponse>;
  }

  /**
   * create a RoleBinding
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateRbacAuthorizationV1beta1NamespacedRoleBindingResponse>
   */
  createRbacAuthorizationV1beta1NamespacedRoleBinding(body: Models.V1beta1RoleBinding, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateRbacAuthorizationV1beta1NamespacedRoleBindingOptionalParams): Promise<Models.CreateRbacAuthorizationV1beta1NamespacedRoleBindingResponse>;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  createRbacAuthorizationV1beta1NamespacedRoleBinding(body: Models.V1beta1RoleBinding, namespace: string, callback: msRest.ServiceCallback<Models.V1beta1RoleBinding>): void;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  createRbacAuthorizationV1beta1NamespacedRoleBinding(body: Models.V1beta1RoleBinding, namespace: string, options: Models.OpenShiftAPIwithKubernetesCreateRbacAuthorizationV1beta1NamespacedRoleBindingOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1RoleBinding>): void;
  createRbacAuthorizationV1beta1NamespacedRoleBinding(body: Models.V1beta1RoleBinding, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateRbacAuthorizationV1beta1NamespacedRoleBindingOptionalParams | msRest.ServiceCallback<Models.V1beta1RoleBinding>, callback?: msRest.ServiceCallback<Models.V1beta1RoleBinding>): Promise<Models.CreateRbacAuthorizationV1beta1NamespacedRoleBindingResponse> {
    return this.sendOperationRequest(
      {
        body,
        namespace,
        options
      },
      createRbacAuthorizationV1beta1NamespacedRoleBindingOperationSpec,
      callback) as Promise<Models.CreateRbacAuthorizationV1beta1NamespacedRoleBindingResponse>;
  }

  /**
   * delete collection of RoleBinding
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteRbacAuthorizationV1beta1CollectionNamespacedRoleBindingResponse>
   */
  deleteRbacAuthorizationV1beta1CollectionNamespacedRoleBinding(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteRbacAuthorizationV1beta1CollectionNamespacedRoleBindingOptionalParams): Promise<Models.DeleteRbacAuthorizationV1beta1CollectionNamespacedRoleBindingResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteRbacAuthorizationV1beta1CollectionNamespacedRoleBinding(namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteRbacAuthorizationV1beta1CollectionNamespacedRoleBinding(namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteRbacAuthorizationV1beta1CollectionNamespacedRoleBindingOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteRbacAuthorizationV1beta1CollectionNamespacedRoleBinding(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteRbacAuthorizationV1beta1CollectionNamespacedRoleBindingOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteRbacAuthorizationV1beta1CollectionNamespacedRoleBindingResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      deleteRbacAuthorizationV1beta1CollectionNamespacedRoleBindingOperationSpec,
      callback) as Promise<Models.DeleteRbacAuthorizationV1beta1CollectionNamespacedRoleBindingResponse>;
  }

  /**
   * read the specified RoleBinding
   * @param name name of the RoleBinding
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadRbacAuthorizationV1beta1NamespacedRoleBindingResponse>
   */
  readRbacAuthorizationV1beta1NamespacedRoleBinding(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadRbacAuthorizationV1beta1NamespacedRoleBindingOptionalParams): Promise<Models.ReadRbacAuthorizationV1beta1NamespacedRoleBindingResponse>;
  /**
   * @param name name of the RoleBinding
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readRbacAuthorizationV1beta1NamespacedRoleBinding(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1beta1RoleBinding>): void;
  /**
   * @param name name of the RoleBinding
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readRbacAuthorizationV1beta1NamespacedRoleBinding(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadRbacAuthorizationV1beta1NamespacedRoleBindingOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1RoleBinding>): void;
  readRbacAuthorizationV1beta1NamespacedRoleBinding(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadRbacAuthorizationV1beta1NamespacedRoleBindingOptionalParams | msRest.ServiceCallback<Models.V1beta1RoleBinding>, callback?: msRest.ServiceCallback<Models.V1beta1RoleBinding>): Promise<Models.ReadRbacAuthorizationV1beta1NamespacedRoleBindingResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readRbacAuthorizationV1beta1NamespacedRoleBindingOperationSpec,
      callback) as Promise<Models.ReadRbacAuthorizationV1beta1NamespacedRoleBindingResponse>;
  }

  /**
   * replace the specified RoleBinding
   * @param body
   * @param name name of the RoleBinding
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceRbacAuthorizationV1beta1NamespacedRoleBindingResponse>
   */
  replaceRbacAuthorizationV1beta1NamespacedRoleBinding(body: Models.V1beta1RoleBinding, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceRbacAuthorizationV1beta1NamespacedRoleBindingOptionalParams): Promise<Models.ReplaceRbacAuthorizationV1beta1NamespacedRoleBindingResponse>;
  /**
   * @param body
   * @param name name of the RoleBinding
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replaceRbacAuthorizationV1beta1NamespacedRoleBinding(body: Models.V1beta1RoleBinding, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1beta1RoleBinding>): void;
  /**
   * @param body
   * @param name name of the RoleBinding
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceRbacAuthorizationV1beta1NamespacedRoleBinding(body: Models.V1beta1RoleBinding, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplaceRbacAuthorizationV1beta1NamespacedRoleBindingOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1RoleBinding>): void;
  replaceRbacAuthorizationV1beta1NamespacedRoleBinding(body: Models.V1beta1RoleBinding, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceRbacAuthorizationV1beta1NamespacedRoleBindingOptionalParams | msRest.ServiceCallback<Models.V1beta1RoleBinding>, callback?: msRest.ServiceCallback<Models.V1beta1RoleBinding>): Promise<Models.ReplaceRbacAuthorizationV1beta1NamespacedRoleBindingResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replaceRbacAuthorizationV1beta1NamespacedRoleBindingOperationSpec,
      callback) as Promise<Models.ReplaceRbacAuthorizationV1beta1NamespacedRoleBindingResponse>;
  }

  /**
   * delete a RoleBinding
   * @param body
   * @param name name of the RoleBinding
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteRbacAuthorizationV1beta1NamespacedRoleBindingResponse>
   */
  deleteRbacAuthorizationV1beta1NamespacedRoleBinding(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteRbacAuthorizationV1beta1NamespacedRoleBindingOptionalParams): Promise<Models.DeleteRbacAuthorizationV1beta1NamespacedRoleBindingResponse>;
  /**
   * @param body
   * @param name name of the RoleBinding
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteRbacAuthorizationV1beta1NamespacedRoleBinding(body: Models.V1DeleteOptions, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param name name of the RoleBinding
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteRbacAuthorizationV1beta1NamespacedRoleBinding(body: Models.V1DeleteOptions, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteRbacAuthorizationV1beta1NamespacedRoleBindingOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteRbacAuthorizationV1beta1NamespacedRoleBinding(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteRbacAuthorizationV1beta1NamespacedRoleBindingOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteRbacAuthorizationV1beta1NamespacedRoleBindingResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      deleteRbacAuthorizationV1beta1NamespacedRoleBindingOperationSpec,
      callback) as Promise<Models.DeleteRbacAuthorizationV1beta1NamespacedRoleBindingResponse>;
  }

  /**
   * partially update the specified RoleBinding
   * @param body
   * @param name name of the RoleBinding
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchRbacAuthorizationV1beta1NamespacedRoleBindingResponse>
   */
  patchRbacAuthorizationV1beta1NamespacedRoleBinding(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchRbacAuthorizationV1beta1NamespacedRoleBindingOptionalParams): Promise<Models.PatchRbacAuthorizationV1beta1NamespacedRoleBindingResponse>;
  /**
   * @param body
   * @param name name of the RoleBinding
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  patchRbacAuthorizationV1beta1NamespacedRoleBinding(body: any, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1beta1RoleBinding>): void;
  /**
   * @param body
   * @param name name of the RoleBinding
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  patchRbacAuthorizationV1beta1NamespacedRoleBinding(body: any, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesPatchRbacAuthorizationV1beta1NamespacedRoleBindingOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1RoleBinding>): void;
  patchRbacAuthorizationV1beta1NamespacedRoleBinding(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchRbacAuthorizationV1beta1NamespacedRoleBindingOptionalParams | msRest.ServiceCallback<Models.V1beta1RoleBinding>, callback?: msRest.ServiceCallback<Models.V1beta1RoleBinding>): Promise<Models.PatchRbacAuthorizationV1beta1NamespacedRoleBindingResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      patchRbacAuthorizationV1beta1NamespacedRoleBindingOperationSpec,
      callback) as Promise<Models.PatchRbacAuthorizationV1beta1NamespacedRoleBindingResponse>;
  }

  /**
   * list or watch objects of kind Role
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ListRbacAuthorizationV1beta1NamespacedRoleResponse>
   */
  listRbacAuthorizationV1beta1NamespacedRole(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListRbacAuthorizationV1beta1NamespacedRoleOptionalParams): Promise<Models.ListRbacAuthorizationV1beta1NamespacedRoleResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  listRbacAuthorizationV1beta1NamespacedRole(namespace: string, callback: msRest.ServiceCallback<Models.V1beta1RoleList>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  listRbacAuthorizationV1beta1NamespacedRole(namespace: string, options: Models.OpenShiftAPIwithKubernetesListRbacAuthorizationV1beta1NamespacedRoleOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1RoleList>): void;
  listRbacAuthorizationV1beta1NamespacedRole(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListRbacAuthorizationV1beta1NamespacedRoleOptionalParams | msRest.ServiceCallback<Models.V1beta1RoleList>, callback?: msRest.ServiceCallback<Models.V1beta1RoleList>): Promise<Models.ListRbacAuthorizationV1beta1NamespacedRoleResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      listRbacAuthorizationV1beta1NamespacedRoleOperationSpec,
      callback) as Promise<Models.ListRbacAuthorizationV1beta1NamespacedRoleResponse>;
  }

  /**
   * create a Role
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateRbacAuthorizationV1beta1NamespacedRoleResponse>
   */
  createRbacAuthorizationV1beta1NamespacedRole(body: Models.V1beta1Role, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateRbacAuthorizationV1beta1NamespacedRoleOptionalParams): Promise<Models.CreateRbacAuthorizationV1beta1NamespacedRoleResponse>;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  createRbacAuthorizationV1beta1NamespacedRole(body: Models.V1beta1Role, namespace: string, callback: msRest.ServiceCallback<Models.V1beta1Role>): void;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  createRbacAuthorizationV1beta1NamespacedRole(body: Models.V1beta1Role, namespace: string, options: Models.OpenShiftAPIwithKubernetesCreateRbacAuthorizationV1beta1NamespacedRoleOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1Role>): void;
  createRbacAuthorizationV1beta1NamespacedRole(body: Models.V1beta1Role, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateRbacAuthorizationV1beta1NamespacedRoleOptionalParams | msRest.ServiceCallback<Models.V1beta1Role>, callback?: msRest.ServiceCallback<Models.V1beta1Role>): Promise<Models.CreateRbacAuthorizationV1beta1NamespacedRoleResponse> {
    return this.sendOperationRequest(
      {
        body,
        namespace,
        options
      },
      createRbacAuthorizationV1beta1NamespacedRoleOperationSpec,
      callback) as Promise<Models.CreateRbacAuthorizationV1beta1NamespacedRoleResponse>;
  }

  /**
   * delete collection of Role
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteRbacAuthorizationV1beta1CollectionNamespacedRoleResponse>
   */
  deleteRbacAuthorizationV1beta1CollectionNamespacedRole(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteRbacAuthorizationV1beta1CollectionNamespacedRoleOptionalParams): Promise<Models.DeleteRbacAuthorizationV1beta1CollectionNamespacedRoleResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteRbacAuthorizationV1beta1CollectionNamespacedRole(namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteRbacAuthorizationV1beta1CollectionNamespacedRole(namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteRbacAuthorizationV1beta1CollectionNamespacedRoleOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteRbacAuthorizationV1beta1CollectionNamespacedRole(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteRbacAuthorizationV1beta1CollectionNamespacedRoleOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteRbacAuthorizationV1beta1CollectionNamespacedRoleResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      deleteRbacAuthorizationV1beta1CollectionNamespacedRoleOperationSpec,
      callback) as Promise<Models.DeleteRbacAuthorizationV1beta1CollectionNamespacedRoleResponse>;
  }

  /**
   * read the specified Role
   * @param name name of the Role
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadRbacAuthorizationV1beta1NamespacedRoleResponse>
   */
  readRbacAuthorizationV1beta1NamespacedRole(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadRbacAuthorizationV1beta1NamespacedRoleOptionalParams): Promise<Models.ReadRbacAuthorizationV1beta1NamespacedRoleResponse>;
  /**
   * @param name name of the Role
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readRbacAuthorizationV1beta1NamespacedRole(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1beta1Role>): void;
  /**
   * @param name name of the Role
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readRbacAuthorizationV1beta1NamespacedRole(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadRbacAuthorizationV1beta1NamespacedRoleOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1Role>): void;
  readRbacAuthorizationV1beta1NamespacedRole(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadRbacAuthorizationV1beta1NamespacedRoleOptionalParams | msRest.ServiceCallback<Models.V1beta1Role>, callback?: msRest.ServiceCallback<Models.V1beta1Role>): Promise<Models.ReadRbacAuthorizationV1beta1NamespacedRoleResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readRbacAuthorizationV1beta1NamespacedRoleOperationSpec,
      callback) as Promise<Models.ReadRbacAuthorizationV1beta1NamespacedRoleResponse>;
  }

  /**
   * replace the specified Role
   * @param body
   * @param name name of the Role
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceRbacAuthorizationV1beta1NamespacedRoleResponse>
   */
  replaceRbacAuthorizationV1beta1NamespacedRole(body: Models.V1beta1Role, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceRbacAuthorizationV1beta1NamespacedRoleOptionalParams): Promise<Models.ReplaceRbacAuthorizationV1beta1NamespacedRoleResponse>;
  /**
   * @param body
   * @param name name of the Role
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replaceRbacAuthorizationV1beta1NamespacedRole(body: Models.V1beta1Role, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1beta1Role>): void;
  /**
   * @param body
   * @param name name of the Role
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceRbacAuthorizationV1beta1NamespacedRole(body: Models.V1beta1Role, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplaceRbacAuthorizationV1beta1NamespacedRoleOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1Role>): void;
  replaceRbacAuthorizationV1beta1NamespacedRole(body: Models.V1beta1Role, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceRbacAuthorizationV1beta1NamespacedRoleOptionalParams | msRest.ServiceCallback<Models.V1beta1Role>, callback?: msRest.ServiceCallback<Models.V1beta1Role>): Promise<Models.ReplaceRbacAuthorizationV1beta1NamespacedRoleResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replaceRbacAuthorizationV1beta1NamespacedRoleOperationSpec,
      callback) as Promise<Models.ReplaceRbacAuthorizationV1beta1NamespacedRoleResponse>;
  }

  /**
   * delete a Role
   * @param body
   * @param name name of the Role
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteRbacAuthorizationV1beta1NamespacedRoleResponse>
   */
  deleteRbacAuthorizationV1beta1NamespacedRole(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteRbacAuthorizationV1beta1NamespacedRoleOptionalParams): Promise<Models.DeleteRbacAuthorizationV1beta1NamespacedRoleResponse>;
  /**
   * @param body
   * @param name name of the Role
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteRbacAuthorizationV1beta1NamespacedRole(body: Models.V1DeleteOptions, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param name name of the Role
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteRbacAuthorizationV1beta1NamespacedRole(body: Models.V1DeleteOptions, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteRbacAuthorizationV1beta1NamespacedRoleOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteRbacAuthorizationV1beta1NamespacedRole(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteRbacAuthorizationV1beta1NamespacedRoleOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteRbacAuthorizationV1beta1NamespacedRoleResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      deleteRbacAuthorizationV1beta1NamespacedRoleOperationSpec,
      callback) as Promise<Models.DeleteRbacAuthorizationV1beta1NamespacedRoleResponse>;
  }

  /**
   * partially update the specified Role
   * @param body
   * @param name name of the Role
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchRbacAuthorizationV1beta1NamespacedRoleResponse>
   */
  patchRbacAuthorizationV1beta1NamespacedRole(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchRbacAuthorizationV1beta1NamespacedRoleOptionalParams): Promise<Models.PatchRbacAuthorizationV1beta1NamespacedRoleResponse>;
  /**
   * @param body
   * @param name name of the Role
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  patchRbacAuthorizationV1beta1NamespacedRole(body: any, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1beta1Role>): void;
  /**
   * @param body
   * @param name name of the Role
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  patchRbacAuthorizationV1beta1NamespacedRole(body: any, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesPatchRbacAuthorizationV1beta1NamespacedRoleOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1Role>): void;
  patchRbacAuthorizationV1beta1NamespacedRole(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchRbacAuthorizationV1beta1NamespacedRoleOptionalParams | msRest.ServiceCallback<Models.V1beta1Role>, callback?: msRest.ServiceCallback<Models.V1beta1Role>): Promise<Models.PatchRbacAuthorizationV1beta1NamespacedRoleResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      patchRbacAuthorizationV1beta1NamespacedRoleOperationSpec,
      callback) as Promise<Models.PatchRbacAuthorizationV1beta1NamespacedRoleResponse>;
  }

  /**
   * list or watch objects of kind RoleBinding
   * @param [options] The optional parameters
   * @returns Promise<Models.ListRbacAuthorizationV1beta1RoleBindingForAllNamespacesResponse>
   */
  listRbacAuthorizationV1beta1RoleBindingForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListRbacAuthorizationV1beta1RoleBindingForAllNamespacesOptionalParams): Promise<Models.ListRbacAuthorizationV1beta1RoleBindingForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  listRbacAuthorizationV1beta1RoleBindingForAllNamespaces(callback: msRest.ServiceCallback<Models.V1beta1RoleBindingList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listRbacAuthorizationV1beta1RoleBindingForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesListRbacAuthorizationV1beta1RoleBindingForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1RoleBindingList>): void;
  listRbacAuthorizationV1beta1RoleBindingForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListRbacAuthorizationV1beta1RoleBindingForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1beta1RoleBindingList>, callback?: msRest.ServiceCallback<Models.V1beta1RoleBindingList>): Promise<Models.ListRbacAuthorizationV1beta1RoleBindingForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listRbacAuthorizationV1beta1RoleBindingForAllNamespacesOperationSpec,
      callback) as Promise<Models.ListRbacAuthorizationV1beta1RoleBindingForAllNamespacesResponse>;
  }

  /**
   * list or watch objects of kind Role
   * @param [options] The optional parameters
   * @returns Promise<Models.ListRbacAuthorizationV1beta1RoleForAllNamespacesResponse>
   */
  listRbacAuthorizationV1beta1RoleForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListRbacAuthorizationV1beta1RoleForAllNamespacesOptionalParams): Promise<Models.ListRbacAuthorizationV1beta1RoleForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  listRbacAuthorizationV1beta1RoleForAllNamespaces(callback: msRest.ServiceCallback<Models.V1beta1RoleList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listRbacAuthorizationV1beta1RoleForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesListRbacAuthorizationV1beta1RoleForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1RoleList>): void;
  listRbacAuthorizationV1beta1RoleForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListRbacAuthorizationV1beta1RoleForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1beta1RoleList>, callback?: msRest.ServiceCallback<Models.V1beta1RoleList>): Promise<Models.ListRbacAuthorizationV1beta1RoleForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listRbacAuthorizationV1beta1RoleForAllNamespacesOperationSpec,
      callback) as Promise<Models.ListRbacAuthorizationV1beta1RoleForAllNamespacesResponse>;
  }

  /**
   * watch individual changes to a list of ClusterRoleBinding
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchRbacAuthorizationV1beta1ClusterRoleBindingListResponse>
   */
  watchRbacAuthorizationV1beta1ClusterRoleBindingList(options?: Models.OpenShiftAPIwithKubernetesWatchRbacAuthorizationV1beta1ClusterRoleBindingListOptionalParams): Promise<Models.WatchRbacAuthorizationV1beta1ClusterRoleBindingListResponse>;
  /**
   * @param callback The callback
   */
  watchRbacAuthorizationV1beta1ClusterRoleBindingList(callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  watchRbacAuthorizationV1beta1ClusterRoleBindingList(options: Models.OpenShiftAPIwithKubernetesWatchRbacAuthorizationV1beta1ClusterRoleBindingListOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchRbacAuthorizationV1beta1ClusterRoleBindingList(options?: Models.OpenShiftAPIwithKubernetesWatchRbacAuthorizationV1beta1ClusterRoleBindingListOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchRbacAuthorizationV1beta1ClusterRoleBindingListResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      watchRbacAuthorizationV1beta1ClusterRoleBindingListOperationSpec,
      callback) as Promise<Models.WatchRbacAuthorizationV1beta1ClusterRoleBindingListResponse>;
  }

  /**
   * watch changes to an object of kind ClusterRoleBinding
   * @param name name of the ClusterRoleBinding
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchRbacAuthorizationV1beta1ClusterRoleBindingResponse>
   */
  watchRbacAuthorizationV1beta1ClusterRoleBinding(name: string, options?: Models.OpenShiftAPIwithKubernetesWatchRbacAuthorizationV1beta1ClusterRoleBindingOptionalParams): Promise<Models.WatchRbacAuthorizationV1beta1ClusterRoleBindingResponse>;
  /**
   * @param name name of the ClusterRoleBinding
   * @param callback The callback
   */
  watchRbacAuthorizationV1beta1ClusterRoleBinding(name: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param name name of the ClusterRoleBinding
   * @param options The optional parameters
   * @param callback The callback
   */
  watchRbacAuthorizationV1beta1ClusterRoleBinding(name: string, options: Models.OpenShiftAPIwithKubernetesWatchRbacAuthorizationV1beta1ClusterRoleBindingOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchRbacAuthorizationV1beta1ClusterRoleBinding(name: string, options?: Models.OpenShiftAPIwithKubernetesWatchRbacAuthorizationV1beta1ClusterRoleBindingOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchRbacAuthorizationV1beta1ClusterRoleBindingResponse> {
    return this.sendOperationRequest(
      {
        name,
        options
      },
      watchRbacAuthorizationV1beta1ClusterRoleBindingOperationSpec,
      callback) as Promise<Models.WatchRbacAuthorizationV1beta1ClusterRoleBindingResponse>;
  }

  /**
   * watch individual changes to a list of ClusterRole
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchRbacAuthorizationV1beta1ClusterRoleListResponse>
   */
  watchRbacAuthorizationV1beta1ClusterRoleList(options?: Models.OpenShiftAPIwithKubernetesWatchRbacAuthorizationV1beta1ClusterRoleListOptionalParams): Promise<Models.WatchRbacAuthorizationV1beta1ClusterRoleListResponse>;
  /**
   * @param callback The callback
   */
  watchRbacAuthorizationV1beta1ClusterRoleList(callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  watchRbacAuthorizationV1beta1ClusterRoleList(options: Models.OpenShiftAPIwithKubernetesWatchRbacAuthorizationV1beta1ClusterRoleListOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchRbacAuthorizationV1beta1ClusterRoleList(options?: Models.OpenShiftAPIwithKubernetesWatchRbacAuthorizationV1beta1ClusterRoleListOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchRbacAuthorizationV1beta1ClusterRoleListResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      watchRbacAuthorizationV1beta1ClusterRoleListOperationSpec,
      callback) as Promise<Models.WatchRbacAuthorizationV1beta1ClusterRoleListResponse>;
  }

  /**
   * watch changes to an object of kind ClusterRole
   * @param name name of the ClusterRole
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchRbacAuthorizationV1beta1ClusterRoleResponse>
   */
  watchRbacAuthorizationV1beta1ClusterRole(name: string, options?: Models.OpenShiftAPIwithKubernetesWatchRbacAuthorizationV1beta1ClusterRoleOptionalParams): Promise<Models.WatchRbacAuthorizationV1beta1ClusterRoleResponse>;
  /**
   * @param name name of the ClusterRole
   * @param callback The callback
   */
  watchRbacAuthorizationV1beta1ClusterRole(name: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param name name of the ClusterRole
   * @param options The optional parameters
   * @param callback The callback
   */
  watchRbacAuthorizationV1beta1ClusterRole(name: string, options: Models.OpenShiftAPIwithKubernetesWatchRbacAuthorizationV1beta1ClusterRoleOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchRbacAuthorizationV1beta1ClusterRole(name: string, options?: Models.OpenShiftAPIwithKubernetesWatchRbacAuthorizationV1beta1ClusterRoleOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchRbacAuthorizationV1beta1ClusterRoleResponse> {
    return this.sendOperationRequest(
      {
        name,
        options
      },
      watchRbacAuthorizationV1beta1ClusterRoleOperationSpec,
      callback) as Promise<Models.WatchRbacAuthorizationV1beta1ClusterRoleResponse>;
  }

  /**
   * watch individual changes to a list of RoleBinding
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchRbacAuthorizationV1beta1NamespacedRoleBindingListResponse>
   */
  watchRbacAuthorizationV1beta1NamespacedRoleBindingList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchRbacAuthorizationV1beta1NamespacedRoleBindingListOptionalParams): Promise<Models.WatchRbacAuthorizationV1beta1NamespacedRoleBindingListResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchRbacAuthorizationV1beta1NamespacedRoleBindingList(namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchRbacAuthorizationV1beta1NamespacedRoleBindingList(namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchRbacAuthorizationV1beta1NamespacedRoleBindingListOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchRbacAuthorizationV1beta1NamespacedRoleBindingList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchRbacAuthorizationV1beta1NamespacedRoleBindingListOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchRbacAuthorizationV1beta1NamespacedRoleBindingListResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      watchRbacAuthorizationV1beta1NamespacedRoleBindingListOperationSpec,
      callback) as Promise<Models.WatchRbacAuthorizationV1beta1NamespacedRoleBindingListResponse>;
  }

  /**
   * watch changes to an object of kind RoleBinding
   * @param name name of the RoleBinding
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchRbacAuthorizationV1beta1NamespacedRoleBindingResponse>
   */
  watchRbacAuthorizationV1beta1NamespacedRoleBinding(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchRbacAuthorizationV1beta1NamespacedRoleBindingOptionalParams): Promise<Models.WatchRbacAuthorizationV1beta1NamespacedRoleBindingResponse>;
  /**
   * @param name name of the RoleBinding
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchRbacAuthorizationV1beta1NamespacedRoleBinding(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param name name of the RoleBinding
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchRbacAuthorizationV1beta1NamespacedRoleBinding(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchRbacAuthorizationV1beta1NamespacedRoleBindingOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchRbacAuthorizationV1beta1NamespacedRoleBinding(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchRbacAuthorizationV1beta1NamespacedRoleBindingOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchRbacAuthorizationV1beta1NamespacedRoleBindingResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      watchRbacAuthorizationV1beta1NamespacedRoleBindingOperationSpec,
      callback) as Promise<Models.WatchRbacAuthorizationV1beta1NamespacedRoleBindingResponse>;
  }

  /**
   * watch individual changes to a list of Role
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchRbacAuthorizationV1beta1NamespacedRoleListResponse>
   */
  watchRbacAuthorizationV1beta1NamespacedRoleList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchRbacAuthorizationV1beta1NamespacedRoleListOptionalParams): Promise<Models.WatchRbacAuthorizationV1beta1NamespacedRoleListResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchRbacAuthorizationV1beta1NamespacedRoleList(namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchRbacAuthorizationV1beta1NamespacedRoleList(namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchRbacAuthorizationV1beta1NamespacedRoleListOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchRbacAuthorizationV1beta1NamespacedRoleList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchRbacAuthorizationV1beta1NamespacedRoleListOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchRbacAuthorizationV1beta1NamespacedRoleListResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      watchRbacAuthorizationV1beta1NamespacedRoleListOperationSpec,
      callback) as Promise<Models.WatchRbacAuthorizationV1beta1NamespacedRoleListResponse>;
  }

  /**
   * watch changes to an object of kind Role
   * @param name name of the Role
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchRbacAuthorizationV1beta1NamespacedRoleResponse>
   */
  watchRbacAuthorizationV1beta1NamespacedRole(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchRbacAuthorizationV1beta1NamespacedRoleOptionalParams): Promise<Models.WatchRbacAuthorizationV1beta1NamespacedRoleResponse>;
  /**
   * @param name name of the Role
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchRbacAuthorizationV1beta1NamespacedRole(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param name name of the Role
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchRbacAuthorizationV1beta1NamespacedRole(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchRbacAuthorizationV1beta1NamespacedRoleOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchRbacAuthorizationV1beta1NamespacedRole(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchRbacAuthorizationV1beta1NamespacedRoleOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchRbacAuthorizationV1beta1NamespacedRoleResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      watchRbacAuthorizationV1beta1NamespacedRoleOperationSpec,
      callback) as Promise<Models.WatchRbacAuthorizationV1beta1NamespacedRoleResponse>;
  }

  /**
   * watch individual changes to a list of RoleBinding
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchRbacAuthorizationV1beta1RoleBindingListForAllNamespacesResponse>
   */
  watchRbacAuthorizationV1beta1RoleBindingListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchRbacAuthorizationV1beta1RoleBindingListForAllNamespacesOptionalParams): Promise<Models.WatchRbacAuthorizationV1beta1RoleBindingListForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  watchRbacAuthorizationV1beta1RoleBindingListForAllNamespaces(callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  watchRbacAuthorizationV1beta1RoleBindingListForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesWatchRbacAuthorizationV1beta1RoleBindingListForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchRbacAuthorizationV1beta1RoleBindingListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchRbacAuthorizationV1beta1RoleBindingListForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchRbacAuthorizationV1beta1RoleBindingListForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      watchRbacAuthorizationV1beta1RoleBindingListForAllNamespacesOperationSpec,
      callback) as Promise<Models.WatchRbacAuthorizationV1beta1RoleBindingListForAllNamespacesResponse>;
  }

  /**
   * watch individual changes to a list of Role
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchRbacAuthorizationV1beta1RoleListForAllNamespacesResponse>
   */
  watchRbacAuthorizationV1beta1RoleListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchRbacAuthorizationV1beta1RoleListForAllNamespacesOptionalParams): Promise<Models.WatchRbacAuthorizationV1beta1RoleListForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  watchRbacAuthorizationV1beta1RoleListForAllNamespaces(callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  watchRbacAuthorizationV1beta1RoleListForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesWatchRbacAuthorizationV1beta1RoleListForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchRbacAuthorizationV1beta1RoleListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchRbacAuthorizationV1beta1RoleListForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchRbacAuthorizationV1beta1RoleListForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      watchRbacAuthorizationV1beta1RoleListForAllNamespacesOperationSpec,
      callback) as Promise<Models.WatchRbacAuthorizationV1beta1RoleListForAllNamespacesResponse>;
  }

  /**
   * get information of a group
   * @param [options] The optional parameters
   * @returns Promise<Models.GetRouteOpenshiftIoAPIGroupResponse>
   */
  getRouteOpenshiftIoAPIGroup(options?: msRest.RequestOptionsBase): Promise<Models.GetRouteOpenshiftIoAPIGroupResponse>;
  /**
   * @param callback The callback
   */
  getRouteOpenshiftIoAPIGroup(callback: msRest.ServiceCallback<Models.V1APIGroup>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getRouteOpenshiftIoAPIGroup(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.V1APIGroup>): void;
  getRouteOpenshiftIoAPIGroup(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.V1APIGroup>, callback?: msRest.ServiceCallback<Models.V1APIGroup>): Promise<Models.GetRouteOpenshiftIoAPIGroupResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getRouteOpenshiftIoAPIGroupOperationSpec,
      callback) as Promise<Models.GetRouteOpenshiftIoAPIGroupResponse>;
  }

  /**
   * get available resources
   * @param [options] The optional parameters
   * @returns Promise<Models.GetRouteOpenshiftIoV1APIResourcesResponse>
   */
  getRouteOpenshiftIoV1APIResources(options?: msRest.RequestOptionsBase): Promise<Models.GetRouteOpenshiftIoV1APIResourcesResponse>;
  /**
   * @param callback The callback
   */
  getRouteOpenshiftIoV1APIResources(callback: msRest.ServiceCallback<Models.V1APIResourceList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getRouteOpenshiftIoV1APIResources(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.V1APIResourceList>): void;
  getRouteOpenshiftIoV1APIResources(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.V1APIResourceList>, callback?: msRest.ServiceCallback<Models.V1APIResourceList>): Promise<Models.GetRouteOpenshiftIoV1APIResourcesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getRouteOpenshiftIoV1APIResourcesOperationSpec,
      callback) as Promise<Models.GetRouteOpenshiftIoV1APIResourcesResponse>;
  }

  /**
   * list or watch objects of kind Route
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ListRouteOpenshiftIoV1NamespacedRouteResponse>
   */
  listRouteOpenshiftIoV1NamespacedRoute(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListRouteOpenshiftIoV1NamespacedRouteOptionalParams): Promise<Models.ListRouteOpenshiftIoV1NamespacedRouteResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  listRouteOpenshiftIoV1NamespacedRoute(namespace: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiroutev1RouteList>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  listRouteOpenshiftIoV1NamespacedRoute(namespace: string, options: Models.OpenShiftAPIwithKubernetesListRouteOpenshiftIoV1NamespacedRouteOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiroutev1RouteList>): void;
  listRouteOpenshiftIoV1NamespacedRoute(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListRouteOpenshiftIoV1NamespacedRouteOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiroutev1RouteList>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiroutev1RouteList>): Promise<Models.ListRouteOpenshiftIoV1NamespacedRouteResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      listRouteOpenshiftIoV1NamespacedRouteOperationSpec,
      callback) as Promise<Models.ListRouteOpenshiftIoV1NamespacedRouteResponse>;
  }

  /**
   * create a Route
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateRouteOpenshiftIoV1NamespacedRouteResponse>
   */
  createRouteOpenshiftIoV1NamespacedRoute(body: Models.Comgithubopenshiftapiroutev1Route, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateRouteOpenshiftIoV1NamespacedRouteOptionalParams): Promise<Models.CreateRouteOpenshiftIoV1NamespacedRouteResponse>;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  createRouteOpenshiftIoV1NamespacedRoute(body: Models.Comgithubopenshiftapiroutev1Route, namespace: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiroutev1Route>): void;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  createRouteOpenshiftIoV1NamespacedRoute(body: Models.Comgithubopenshiftapiroutev1Route, namespace: string, options: Models.OpenShiftAPIwithKubernetesCreateRouteOpenshiftIoV1NamespacedRouteOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiroutev1Route>): void;
  createRouteOpenshiftIoV1NamespacedRoute(body: Models.Comgithubopenshiftapiroutev1Route, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateRouteOpenshiftIoV1NamespacedRouteOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiroutev1Route>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiroutev1Route>): Promise<Models.CreateRouteOpenshiftIoV1NamespacedRouteResponse> {
    return this.sendOperationRequest(
      {
        body,
        namespace,
        options
      },
      createRouteOpenshiftIoV1NamespacedRouteOperationSpec,
      callback) as Promise<Models.CreateRouteOpenshiftIoV1NamespacedRouteResponse>;
  }

  /**
   * delete collection of Route
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteRouteOpenshiftIoV1CollectionNamespacedRouteResponse>
   */
  deleteRouteOpenshiftIoV1CollectionNamespacedRoute(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteRouteOpenshiftIoV1CollectionNamespacedRouteOptionalParams): Promise<Models.DeleteRouteOpenshiftIoV1CollectionNamespacedRouteResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteRouteOpenshiftIoV1CollectionNamespacedRoute(namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteRouteOpenshiftIoV1CollectionNamespacedRoute(namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteRouteOpenshiftIoV1CollectionNamespacedRouteOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteRouteOpenshiftIoV1CollectionNamespacedRoute(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteRouteOpenshiftIoV1CollectionNamespacedRouteOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteRouteOpenshiftIoV1CollectionNamespacedRouteResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      deleteRouteOpenshiftIoV1CollectionNamespacedRouteOperationSpec,
      callback) as Promise<Models.DeleteRouteOpenshiftIoV1CollectionNamespacedRouteResponse>;
  }

  /**
   * read the specified Route
   * @param name name of the Route
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadRouteOpenshiftIoV1NamespacedRouteResponse>
   */
  readRouteOpenshiftIoV1NamespacedRoute(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadRouteOpenshiftIoV1NamespacedRouteOptionalParams): Promise<Models.ReadRouteOpenshiftIoV1NamespacedRouteResponse>;
  /**
   * @param name name of the Route
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readRouteOpenshiftIoV1NamespacedRoute(name: string, namespace: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiroutev1Route>): void;
  /**
   * @param name name of the Route
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readRouteOpenshiftIoV1NamespacedRoute(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadRouteOpenshiftIoV1NamespacedRouteOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiroutev1Route>): void;
  readRouteOpenshiftIoV1NamespacedRoute(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadRouteOpenshiftIoV1NamespacedRouteOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiroutev1Route>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiroutev1Route>): Promise<Models.ReadRouteOpenshiftIoV1NamespacedRouteResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readRouteOpenshiftIoV1NamespacedRouteOperationSpec,
      callback) as Promise<Models.ReadRouteOpenshiftIoV1NamespacedRouteResponse>;
  }

  /**
   * replace the specified Route
   * @param body
   * @param name name of the Route
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceRouteOpenshiftIoV1NamespacedRouteResponse>
   */
  replaceRouteOpenshiftIoV1NamespacedRoute(body: Models.Comgithubopenshiftapiroutev1Route, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceRouteOpenshiftIoV1NamespacedRouteOptionalParams): Promise<Models.ReplaceRouteOpenshiftIoV1NamespacedRouteResponse>;
  /**
   * @param body
   * @param name name of the Route
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replaceRouteOpenshiftIoV1NamespacedRoute(body: Models.Comgithubopenshiftapiroutev1Route, name: string, namespace: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiroutev1Route>): void;
  /**
   * @param body
   * @param name name of the Route
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceRouteOpenshiftIoV1NamespacedRoute(body: Models.Comgithubopenshiftapiroutev1Route, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplaceRouteOpenshiftIoV1NamespacedRouteOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiroutev1Route>): void;
  replaceRouteOpenshiftIoV1NamespacedRoute(body: Models.Comgithubopenshiftapiroutev1Route, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceRouteOpenshiftIoV1NamespacedRouteOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiroutev1Route>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiroutev1Route>): Promise<Models.ReplaceRouteOpenshiftIoV1NamespacedRouteResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replaceRouteOpenshiftIoV1NamespacedRouteOperationSpec,
      callback) as Promise<Models.ReplaceRouteOpenshiftIoV1NamespacedRouteResponse>;
  }

  /**
   * delete a Route
   * @param body
   * @param name name of the Route
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteRouteOpenshiftIoV1NamespacedRouteResponse>
   */
  deleteRouteOpenshiftIoV1NamespacedRoute(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteRouteOpenshiftIoV1NamespacedRouteOptionalParams): Promise<Models.DeleteRouteOpenshiftIoV1NamespacedRouteResponse>;
  /**
   * @param body
   * @param name name of the Route
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteRouteOpenshiftIoV1NamespacedRoute(body: Models.V1DeleteOptions, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param name name of the Route
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteRouteOpenshiftIoV1NamespacedRoute(body: Models.V1DeleteOptions, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteRouteOpenshiftIoV1NamespacedRouteOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteRouteOpenshiftIoV1NamespacedRoute(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteRouteOpenshiftIoV1NamespacedRouteOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteRouteOpenshiftIoV1NamespacedRouteResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      deleteRouteOpenshiftIoV1NamespacedRouteOperationSpec,
      callback) as Promise<Models.DeleteRouteOpenshiftIoV1NamespacedRouteResponse>;
  }

  /**
   * partially update the specified Route
   * @param body
   * @param name name of the Route
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchRouteOpenshiftIoV1NamespacedRouteResponse>
   */
  patchRouteOpenshiftIoV1NamespacedRoute(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchRouteOpenshiftIoV1NamespacedRouteOptionalParams): Promise<Models.PatchRouteOpenshiftIoV1NamespacedRouteResponse>;
  /**
   * @param body
   * @param name name of the Route
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  patchRouteOpenshiftIoV1NamespacedRoute(body: any, name: string, namespace: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiroutev1Route>): void;
  /**
   * @param body
   * @param name name of the Route
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  patchRouteOpenshiftIoV1NamespacedRoute(body: any, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesPatchRouteOpenshiftIoV1NamespacedRouteOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiroutev1Route>): void;
  patchRouteOpenshiftIoV1NamespacedRoute(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchRouteOpenshiftIoV1NamespacedRouteOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiroutev1Route>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiroutev1Route>): Promise<Models.PatchRouteOpenshiftIoV1NamespacedRouteResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      patchRouteOpenshiftIoV1NamespacedRouteOperationSpec,
      callback) as Promise<Models.PatchRouteOpenshiftIoV1NamespacedRouteResponse>;
  }

  /**
   * read status of the specified Route
   * @param name name of the Route
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadRouteOpenshiftIoV1NamespacedRouteStatusResponse>
   */
  readRouteOpenshiftIoV1NamespacedRouteStatus(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadRouteOpenshiftIoV1NamespacedRouteStatusOptionalParams): Promise<Models.ReadRouteOpenshiftIoV1NamespacedRouteStatusResponse>;
  /**
   * @param name name of the Route
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readRouteOpenshiftIoV1NamespacedRouteStatus(name: string, namespace: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiroutev1Route>): void;
  /**
   * @param name name of the Route
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readRouteOpenshiftIoV1NamespacedRouteStatus(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadRouteOpenshiftIoV1NamespacedRouteStatusOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiroutev1Route>): void;
  readRouteOpenshiftIoV1NamespacedRouteStatus(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadRouteOpenshiftIoV1NamespacedRouteStatusOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiroutev1Route>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiroutev1Route>): Promise<Models.ReadRouteOpenshiftIoV1NamespacedRouteStatusResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readRouteOpenshiftIoV1NamespacedRouteStatusOperationSpec,
      callback) as Promise<Models.ReadRouteOpenshiftIoV1NamespacedRouteStatusResponse>;
  }

  /**
   * replace status of the specified Route
   * @param body
   * @param name name of the Route
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceRouteOpenshiftIoV1NamespacedRouteStatusResponse>
   */
  replaceRouteOpenshiftIoV1NamespacedRouteStatus(body: Models.Comgithubopenshiftapiroutev1Route, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceRouteOpenshiftIoV1NamespacedRouteStatusOptionalParams): Promise<Models.ReplaceRouteOpenshiftIoV1NamespacedRouteStatusResponse>;
  /**
   * @param body
   * @param name name of the Route
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replaceRouteOpenshiftIoV1NamespacedRouteStatus(body: Models.Comgithubopenshiftapiroutev1Route, name: string, namespace: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiroutev1Route>): void;
  /**
   * @param body
   * @param name name of the Route
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceRouteOpenshiftIoV1NamespacedRouteStatus(body: Models.Comgithubopenshiftapiroutev1Route, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplaceRouteOpenshiftIoV1NamespacedRouteStatusOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiroutev1Route>): void;
  replaceRouteOpenshiftIoV1NamespacedRouteStatus(body: Models.Comgithubopenshiftapiroutev1Route, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceRouteOpenshiftIoV1NamespacedRouteStatusOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiroutev1Route>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiroutev1Route>): Promise<Models.ReplaceRouteOpenshiftIoV1NamespacedRouteStatusResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replaceRouteOpenshiftIoV1NamespacedRouteStatusOperationSpec,
      callback) as Promise<Models.ReplaceRouteOpenshiftIoV1NamespacedRouteStatusResponse>;
  }

  /**
   * partially update status of the specified Route
   * @param body
   * @param name name of the Route
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchRouteOpenshiftIoV1NamespacedRouteStatusResponse>
   */
  patchRouteOpenshiftIoV1NamespacedRouteStatus(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchRouteOpenshiftIoV1NamespacedRouteStatusOptionalParams): Promise<Models.PatchRouteOpenshiftIoV1NamespacedRouteStatusResponse>;
  /**
   * @param body
   * @param name name of the Route
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  patchRouteOpenshiftIoV1NamespacedRouteStatus(body: any, name: string, namespace: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiroutev1Route>): void;
  /**
   * @param body
   * @param name name of the Route
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  patchRouteOpenshiftIoV1NamespacedRouteStatus(body: any, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesPatchRouteOpenshiftIoV1NamespacedRouteStatusOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiroutev1Route>): void;
  patchRouteOpenshiftIoV1NamespacedRouteStatus(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchRouteOpenshiftIoV1NamespacedRouteStatusOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiroutev1Route>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiroutev1Route>): Promise<Models.PatchRouteOpenshiftIoV1NamespacedRouteStatusResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      patchRouteOpenshiftIoV1NamespacedRouteStatusOperationSpec,
      callback) as Promise<Models.PatchRouteOpenshiftIoV1NamespacedRouteStatusResponse>;
  }

  /**
   * list or watch objects of kind Route
   * @param [options] The optional parameters
   * @returns Promise<Models.ListRouteOpenshiftIoV1RouteForAllNamespacesResponse>
   */
  listRouteOpenshiftIoV1RouteForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListRouteOpenshiftIoV1RouteForAllNamespacesOptionalParams): Promise<Models.ListRouteOpenshiftIoV1RouteForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  listRouteOpenshiftIoV1RouteForAllNamespaces(callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiroutev1RouteList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listRouteOpenshiftIoV1RouteForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesListRouteOpenshiftIoV1RouteForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiroutev1RouteList>): void;
  listRouteOpenshiftIoV1RouteForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListRouteOpenshiftIoV1RouteForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiroutev1RouteList>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiroutev1RouteList>): Promise<Models.ListRouteOpenshiftIoV1RouteForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listRouteOpenshiftIoV1RouteForAllNamespacesOperationSpec,
      callback) as Promise<Models.ListRouteOpenshiftIoV1RouteForAllNamespacesResponse>;
  }

  /**
   * watch individual changes to a list of Route
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchRouteOpenshiftIoV1NamespacedRouteListResponse>
   */
  watchRouteOpenshiftIoV1NamespacedRouteList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchRouteOpenshiftIoV1NamespacedRouteListOptionalParams): Promise<Models.WatchRouteOpenshiftIoV1NamespacedRouteListResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchRouteOpenshiftIoV1NamespacedRouteList(namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchRouteOpenshiftIoV1NamespacedRouteList(namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchRouteOpenshiftIoV1NamespacedRouteListOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchRouteOpenshiftIoV1NamespacedRouteList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchRouteOpenshiftIoV1NamespacedRouteListOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchRouteOpenshiftIoV1NamespacedRouteListResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      watchRouteOpenshiftIoV1NamespacedRouteListOperationSpec,
      callback) as Promise<Models.WatchRouteOpenshiftIoV1NamespacedRouteListResponse>;
  }

  /**
   * watch changes to an object of kind Route
   * @param name name of the Route
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchRouteOpenshiftIoV1NamespacedRouteResponse>
   */
  watchRouteOpenshiftIoV1NamespacedRoute(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchRouteOpenshiftIoV1NamespacedRouteOptionalParams): Promise<Models.WatchRouteOpenshiftIoV1NamespacedRouteResponse>;
  /**
   * @param name name of the Route
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchRouteOpenshiftIoV1NamespacedRoute(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param name name of the Route
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchRouteOpenshiftIoV1NamespacedRoute(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchRouteOpenshiftIoV1NamespacedRouteOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchRouteOpenshiftIoV1NamespacedRoute(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchRouteOpenshiftIoV1NamespacedRouteOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchRouteOpenshiftIoV1NamespacedRouteResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      watchRouteOpenshiftIoV1NamespacedRouteOperationSpec,
      callback) as Promise<Models.WatchRouteOpenshiftIoV1NamespacedRouteResponse>;
  }

  /**
   * watch individual changes to a list of Route
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchRouteOpenshiftIoV1RouteListForAllNamespacesResponse>
   */
  watchRouteOpenshiftIoV1RouteListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchRouteOpenshiftIoV1RouteListForAllNamespacesOptionalParams): Promise<Models.WatchRouteOpenshiftIoV1RouteListForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  watchRouteOpenshiftIoV1RouteListForAllNamespaces(callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  watchRouteOpenshiftIoV1RouteListForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesWatchRouteOpenshiftIoV1RouteListForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchRouteOpenshiftIoV1RouteListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchRouteOpenshiftIoV1RouteListForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchRouteOpenshiftIoV1RouteListForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      watchRouteOpenshiftIoV1RouteListForAllNamespacesOperationSpec,
      callback) as Promise<Models.WatchRouteOpenshiftIoV1RouteListForAllNamespacesResponse>;
  }

  /**
   * get information of a group
   * @param [options] The optional parameters
   * @returns Promise<Models.GetSchedulingAPIGroupResponse>
   */
  getSchedulingAPIGroup(options?: msRest.RequestOptionsBase): Promise<Models.GetSchedulingAPIGroupResponse>;
  /**
   * @param callback The callback
   */
  getSchedulingAPIGroup(callback: msRest.ServiceCallback<Models.V1APIGroup>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getSchedulingAPIGroup(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.V1APIGroup>): void;
  getSchedulingAPIGroup(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.V1APIGroup>, callback?: msRest.ServiceCallback<Models.V1APIGroup>): Promise<Models.GetSchedulingAPIGroupResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getSchedulingAPIGroupOperationSpec,
      callback) as Promise<Models.GetSchedulingAPIGroupResponse>;
  }

  /**
   * get available resources
   * @param [options] The optional parameters
   * @returns Promise<Models.GetSchedulingV1beta1APIResourcesResponse>
   */
  getSchedulingV1beta1APIResources(options?: msRest.RequestOptionsBase): Promise<Models.GetSchedulingV1beta1APIResourcesResponse>;
  /**
   * @param callback The callback
   */
  getSchedulingV1beta1APIResources(callback: msRest.ServiceCallback<Models.V1APIResourceList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getSchedulingV1beta1APIResources(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.V1APIResourceList>): void;
  getSchedulingV1beta1APIResources(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.V1APIResourceList>, callback?: msRest.ServiceCallback<Models.V1APIResourceList>): Promise<Models.GetSchedulingV1beta1APIResourcesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getSchedulingV1beta1APIResourcesOperationSpec,
      callback) as Promise<Models.GetSchedulingV1beta1APIResourcesResponse>;
  }

  /**
   * list or watch objects of kind PriorityClass
   * @param [options] The optional parameters
   * @returns Promise<Models.ListSchedulingV1beta1PriorityClassResponse>
   */
  listSchedulingV1beta1PriorityClass(options?: Models.OpenShiftAPIwithKubernetesListSchedulingV1beta1PriorityClassOptionalParams): Promise<Models.ListSchedulingV1beta1PriorityClassResponse>;
  /**
   * @param callback The callback
   */
  listSchedulingV1beta1PriorityClass(callback: msRest.ServiceCallback<Models.V1beta1PriorityClassList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listSchedulingV1beta1PriorityClass(options: Models.OpenShiftAPIwithKubernetesListSchedulingV1beta1PriorityClassOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1PriorityClassList>): void;
  listSchedulingV1beta1PriorityClass(options?: Models.OpenShiftAPIwithKubernetesListSchedulingV1beta1PriorityClassOptionalParams | msRest.ServiceCallback<Models.V1beta1PriorityClassList>, callback?: msRest.ServiceCallback<Models.V1beta1PriorityClassList>): Promise<Models.ListSchedulingV1beta1PriorityClassResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listSchedulingV1beta1PriorityClassOperationSpec,
      callback) as Promise<Models.ListSchedulingV1beta1PriorityClassResponse>;
  }

  /**
   * create a PriorityClass
   * @param body
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateSchedulingV1beta1PriorityClassResponse>
   */
  createSchedulingV1beta1PriorityClass(body: Models.V1beta1PriorityClass, options?: Models.OpenShiftAPIwithKubernetesCreateSchedulingV1beta1PriorityClassOptionalParams): Promise<Models.CreateSchedulingV1beta1PriorityClassResponse>;
  /**
   * @param body
   * @param callback The callback
   */
  createSchedulingV1beta1PriorityClass(body: Models.V1beta1PriorityClass, callback: msRest.ServiceCallback<Models.V1beta1PriorityClass>): void;
  /**
   * @param body
   * @param options The optional parameters
   * @param callback The callback
   */
  createSchedulingV1beta1PriorityClass(body: Models.V1beta1PriorityClass, options: Models.OpenShiftAPIwithKubernetesCreateSchedulingV1beta1PriorityClassOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1PriorityClass>): void;
  createSchedulingV1beta1PriorityClass(body: Models.V1beta1PriorityClass, options?: Models.OpenShiftAPIwithKubernetesCreateSchedulingV1beta1PriorityClassOptionalParams | msRest.ServiceCallback<Models.V1beta1PriorityClass>, callback?: msRest.ServiceCallback<Models.V1beta1PriorityClass>): Promise<Models.CreateSchedulingV1beta1PriorityClassResponse> {
    return this.sendOperationRequest(
      {
        body,
        options
      },
      createSchedulingV1beta1PriorityClassOperationSpec,
      callback) as Promise<Models.CreateSchedulingV1beta1PriorityClassResponse>;
  }

  /**
   * delete collection of PriorityClass
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteSchedulingV1beta1CollectionPriorityClassResponse>
   */
  deleteSchedulingV1beta1CollectionPriorityClass(options?: Models.OpenShiftAPIwithKubernetesDeleteSchedulingV1beta1CollectionPriorityClassOptionalParams): Promise<Models.DeleteSchedulingV1beta1CollectionPriorityClassResponse>;
  /**
   * @param callback The callback
   */
  deleteSchedulingV1beta1CollectionPriorityClass(callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteSchedulingV1beta1CollectionPriorityClass(options: Models.OpenShiftAPIwithKubernetesDeleteSchedulingV1beta1CollectionPriorityClassOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteSchedulingV1beta1CollectionPriorityClass(options?: Models.OpenShiftAPIwithKubernetesDeleteSchedulingV1beta1CollectionPriorityClassOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteSchedulingV1beta1CollectionPriorityClassResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      deleteSchedulingV1beta1CollectionPriorityClassOperationSpec,
      callback) as Promise<Models.DeleteSchedulingV1beta1CollectionPriorityClassResponse>;
  }

  /**
   * read the specified PriorityClass
   * @param name name of the PriorityClass
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadSchedulingV1beta1PriorityClassResponse>
   */
  readSchedulingV1beta1PriorityClass(name: string, options?: Models.OpenShiftAPIwithKubernetesReadSchedulingV1beta1PriorityClassOptionalParams): Promise<Models.ReadSchedulingV1beta1PriorityClassResponse>;
  /**
   * @param name name of the PriorityClass
   * @param callback The callback
   */
  readSchedulingV1beta1PriorityClass(name: string, callback: msRest.ServiceCallback<Models.V1beta1PriorityClass>): void;
  /**
   * @param name name of the PriorityClass
   * @param options The optional parameters
   * @param callback The callback
   */
  readSchedulingV1beta1PriorityClass(name: string, options: Models.OpenShiftAPIwithKubernetesReadSchedulingV1beta1PriorityClassOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1PriorityClass>): void;
  readSchedulingV1beta1PriorityClass(name: string, options?: Models.OpenShiftAPIwithKubernetesReadSchedulingV1beta1PriorityClassOptionalParams | msRest.ServiceCallback<Models.V1beta1PriorityClass>, callback?: msRest.ServiceCallback<Models.V1beta1PriorityClass>): Promise<Models.ReadSchedulingV1beta1PriorityClassResponse> {
    return this.sendOperationRequest(
      {
        name,
        options
      },
      readSchedulingV1beta1PriorityClassOperationSpec,
      callback) as Promise<Models.ReadSchedulingV1beta1PriorityClassResponse>;
  }

  /**
   * replace the specified PriorityClass
   * @param body
   * @param name name of the PriorityClass
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceSchedulingV1beta1PriorityClassResponse>
   */
  replaceSchedulingV1beta1PriorityClass(body: Models.V1beta1PriorityClass, name: string, options?: Models.OpenShiftAPIwithKubernetesReplaceSchedulingV1beta1PriorityClassOptionalParams): Promise<Models.ReplaceSchedulingV1beta1PriorityClassResponse>;
  /**
   * @param body
   * @param name name of the PriorityClass
   * @param callback The callback
   */
  replaceSchedulingV1beta1PriorityClass(body: Models.V1beta1PriorityClass, name: string, callback: msRest.ServiceCallback<Models.V1beta1PriorityClass>): void;
  /**
   * @param body
   * @param name name of the PriorityClass
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceSchedulingV1beta1PriorityClass(body: Models.V1beta1PriorityClass, name: string, options: Models.OpenShiftAPIwithKubernetesReplaceSchedulingV1beta1PriorityClassOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1PriorityClass>): void;
  replaceSchedulingV1beta1PriorityClass(body: Models.V1beta1PriorityClass, name: string, options?: Models.OpenShiftAPIwithKubernetesReplaceSchedulingV1beta1PriorityClassOptionalParams | msRest.ServiceCallback<Models.V1beta1PriorityClass>, callback?: msRest.ServiceCallback<Models.V1beta1PriorityClass>): Promise<Models.ReplaceSchedulingV1beta1PriorityClassResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      replaceSchedulingV1beta1PriorityClassOperationSpec,
      callback) as Promise<Models.ReplaceSchedulingV1beta1PriorityClassResponse>;
  }

  /**
   * delete a PriorityClass
   * @param body
   * @param name name of the PriorityClass
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteSchedulingV1beta1PriorityClassResponse>
   */
  deleteSchedulingV1beta1PriorityClass(body: Models.V1DeleteOptions, name: string, options?: Models.OpenShiftAPIwithKubernetesDeleteSchedulingV1beta1PriorityClassOptionalParams): Promise<Models.DeleteSchedulingV1beta1PriorityClassResponse>;
  /**
   * @param body
   * @param name name of the PriorityClass
   * @param callback The callback
   */
  deleteSchedulingV1beta1PriorityClass(body: Models.V1DeleteOptions, name: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param name name of the PriorityClass
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteSchedulingV1beta1PriorityClass(body: Models.V1DeleteOptions, name: string, options: Models.OpenShiftAPIwithKubernetesDeleteSchedulingV1beta1PriorityClassOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteSchedulingV1beta1PriorityClass(body: Models.V1DeleteOptions, name: string, options?: Models.OpenShiftAPIwithKubernetesDeleteSchedulingV1beta1PriorityClassOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteSchedulingV1beta1PriorityClassResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      deleteSchedulingV1beta1PriorityClassOperationSpec,
      callback) as Promise<Models.DeleteSchedulingV1beta1PriorityClassResponse>;
  }

  /**
   * partially update the specified PriorityClass
   * @param body
   * @param name name of the PriorityClass
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchSchedulingV1beta1PriorityClassResponse>
   */
  patchSchedulingV1beta1PriorityClass(body: any, name: string, options?: Models.OpenShiftAPIwithKubernetesPatchSchedulingV1beta1PriorityClassOptionalParams): Promise<Models.PatchSchedulingV1beta1PriorityClassResponse>;
  /**
   * @param body
   * @param name name of the PriorityClass
   * @param callback The callback
   */
  patchSchedulingV1beta1PriorityClass(body: any, name: string, callback: msRest.ServiceCallback<Models.V1beta1PriorityClass>): void;
  /**
   * @param body
   * @param name name of the PriorityClass
   * @param options The optional parameters
   * @param callback The callback
   */
  patchSchedulingV1beta1PriorityClass(body: any, name: string, options: Models.OpenShiftAPIwithKubernetesPatchSchedulingV1beta1PriorityClassOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1PriorityClass>): void;
  patchSchedulingV1beta1PriorityClass(body: any, name: string, options?: Models.OpenShiftAPIwithKubernetesPatchSchedulingV1beta1PriorityClassOptionalParams | msRest.ServiceCallback<Models.V1beta1PriorityClass>, callback?: msRest.ServiceCallback<Models.V1beta1PriorityClass>): Promise<Models.PatchSchedulingV1beta1PriorityClassResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      patchSchedulingV1beta1PriorityClassOperationSpec,
      callback) as Promise<Models.PatchSchedulingV1beta1PriorityClassResponse>;
  }

  /**
   * watch individual changes to a list of PriorityClass
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchSchedulingV1beta1PriorityClassListResponse>
   */
  watchSchedulingV1beta1PriorityClassList(options?: Models.OpenShiftAPIwithKubernetesWatchSchedulingV1beta1PriorityClassListOptionalParams): Promise<Models.WatchSchedulingV1beta1PriorityClassListResponse>;
  /**
   * @param callback The callback
   */
  watchSchedulingV1beta1PriorityClassList(callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  watchSchedulingV1beta1PriorityClassList(options: Models.OpenShiftAPIwithKubernetesWatchSchedulingV1beta1PriorityClassListOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchSchedulingV1beta1PriorityClassList(options?: Models.OpenShiftAPIwithKubernetesWatchSchedulingV1beta1PriorityClassListOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchSchedulingV1beta1PriorityClassListResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      watchSchedulingV1beta1PriorityClassListOperationSpec,
      callback) as Promise<Models.WatchSchedulingV1beta1PriorityClassListResponse>;
  }

  /**
   * watch changes to an object of kind PriorityClass
   * @param name name of the PriorityClass
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchSchedulingV1beta1PriorityClassResponse>
   */
  watchSchedulingV1beta1PriorityClass(name: string, options?: Models.OpenShiftAPIwithKubernetesWatchSchedulingV1beta1PriorityClassOptionalParams): Promise<Models.WatchSchedulingV1beta1PriorityClassResponse>;
  /**
   * @param name name of the PriorityClass
   * @param callback The callback
   */
  watchSchedulingV1beta1PriorityClass(name: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param name name of the PriorityClass
   * @param options The optional parameters
   * @param callback The callback
   */
  watchSchedulingV1beta1PriorityClass(name: string, options: Models.OpenShiftAPIwithKubernetesWatchSchedulingV1beta1PriorityClassOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchSchedulingV1beta1PriorityClass(name: string, options?: Models.OpenShiftAPIwithKubernetesWatchSchedulingV1beta1PriorityClassOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchSchedulingV1beta1PriorityClassResponse> {
    return this.sendOperationRequest(
      {
        name,
        options
      },
      watchSchedulingV1beta1PriorityClassOperationSpec,
      callback) as Promise<Models.WatchSchedulingV1beta1PriorityClassResponse>;
  }

  /**
   * get information of a group
   * @param [options] The optional parameters
   * @returns Promise<Models.GetSecurityOpenshiftIoAPIGroupResponse>
   */
  getSecurityOpenshiftIoAPIGroup(options?: msRest.RequestOptionsBase): Promise<Models.GetSecurityOpenshiftIoAPIGroupResponse>;
  /**
   * @param callback The callback
   */
  getSecurityOpenshiftIoAPIGroup(callback: msRest.ServiceCallback<Models.V1APIGroup>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getSecurityOpenshiftIoAPIGroup(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.V1APIGroup>): void;
  getSecurityOpenshiftIoAPIGroup(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.V1APIGroup>, callback?: msRest.ServiceCallback<Models.V1APIGroup>): Promise<Models.GetSecurityOpenshiftIoAPIGroupResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getSecurityOpenshiftIoAPIGroupOperationSpec,
      callback) as Promise<Models.GetSecurityOpenshiftIoAPIGroupResponse>;
  }

  /**
   * get available resources
   * @param [options] The optional parameters
   * @returns Promise<Models.GetSecurityOpenshiftIoV1APIResourcesResponse>
   */
  getSecurityOpenshiftIoV1APIResources(options?: msRest.RequestOptionsBase): Promise<Models.GetSecurityOpenshiftIoV1APIResourcesResponse>;
  /**
   * @param callback The callback
   */
  getSecurityOpenshiftIoV1APIResources(callback: msRest.ServiceCallback<Models.V1APIResourceList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getSecurityOpenshiftIoV1APIResources(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.V1APIResourceList>): void;
  getSecurityOpenshiftIoV1APIResources(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.V1APIResourceList>, callback?: msRest.ServiceCallback<Models.V1APIResourceList>): Promise<Models.GetSecurityOpenshiftIoV1APIResourcesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getSecurityOpenshiftIoV1APIResourcesOperationSpec,
      callback) as Promise<Models.GetSecurityOpenshiftIoV1APIResourcesResponse>;
  }

  /**
   * create a PodSecurityPolicyReview
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateSecurityOpenshiftIoV1NamespacedPodSecurityPolicyReviewResponse>
   */
  createSecurityOpenshiftIoV1NamespacedPodSecurityPolicyReview(body: Models.Comgithubopenshiftapisecurityv1PodSecurityPolicyReview, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateSecurityOpenshiftIoV1NamespacedPodSecurityPolicyReviewOptionalParams): Promise<Models.CreateSecurityOpenshiftIoV1NamespacedPodSecurityPolicyReviewResponse>;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  createSecurityOpenshiftIoV1NamespacedPodSecurityPolicyReview(body: Models.Comgithubopenshiftapisecurityv1PodSecurityPolicyReview, namespace: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapisecurityv1PodSecurityPolicyReview>): void;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  createSecurityOpenshiftIoV1NamespacedPodSecurityPolicyReview(body: Models.Comgithubopenshiftapisecurityv1PodSecurityPolicyReview, namespace: string, options: Models.OpenShiftAPIwithKubernetesCreateSecurityOpenshiftIoV1NamespacedPodSecurityPolicyReviewOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapisecurityv1PodSecurityPolicyReview>): void;
  createSecurityOpenshiftIoV1NamespacedPodSecurityPolicyReview(body: Models.Comgithubopenshiftapisecurityv1PodSecurityPolicyReview, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateSecurityOpenshiftIoV1NamespacedPodSecurityPolicyReviewOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapisecurityv1PodSecurityPolicyReview>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapisecurityv1PodSecurityPolicyReview>): Promise<Models.CreateSecurityOpenshiftIoV1NamespacedPodSecurityPolicyReviewResponse> {
    return this.sendOperationRequest(
      {
        body,
        namespace,
        options
      },
      createSecurityOpenshiftIoV1NamespacedPodSecurityPolicyReviewOperationSpec,
      callback) as Promise<Models.CreateSecurityOpenshiftIoV1NamespacedPodSecurityPolicyReviewResponse>;
  }

  /**
   * create a PodSecurityPolicySelfSubjectReview
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns
   * Promise<Models.CreateSecurityOpenshiftIoV1NamespacedPodSecurityPolicySelfSubjectReviewResponse>
   */
  createSecurityOpenshiftIoV1NamespacedPodSecurityPolicySelfSubjectReview(body: Models.Comgithubopenshiftapisecurityv1PodSecurityPolicySelfSubjectReview, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateSecurityOpenshiftIoV1NamespacedPodSecurityPolicySelfSubjectReviewOptionalParams): Promise<Models.CreateSecurityOpenshiftIoV1NamespacedPodSecurityPolicySelfSubjectReviewResponse>;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  createSecurityOpenshiftIoV1NamespacedPodSecurityPolicySelfSubjectReview(body: Models.Comgithubopenshiftapisecurityv1PodSecurityPolicySelfSubjectReview, namespace: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapisecurityv1PodSecurityPolicySelfSubjectReview>): void;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  createSecurityOpenshiftIoV1NamespacedPodSecurityPolicySelfSubjectReview(body: Models.Comgithubopenshiftapisecurityv1PodSecurityPolicySelfSubjectReview, namespace: string, options: Models.OpenShiftAPIwithKubernetesCreateSecurityOpenshiftIoV1NamespacedPodSecurityPolicySelfSubjectReviewOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapisecurityv1PodSecurityPolicySelfSubjectReview>): void;
  createSecurityOpenshiftIoV1NamespacedPodSecurityPolicySelfSubjectReview(body: Models.Comgithubopenshiftapisecurityv1PodSecurityPolicySelfSubjectReview, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateSecurityOpenshiftIoV1NamespacedPodSecurityPolicySelfSubjectReviewOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapisecurityv1PodSecurityPolicySelfSubjectReview>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapisecurityv1PodSecurityPolicySelfSubjectReview>): Promise<Models.CreateSecurityOpenshiftIoV1NamespacedPodSecurityPolicySelfSubjectReviewResponse> {
    return this.sendOperationRequest(
      {
        body,
        namespace,
        options
      },
      createSecurityOpenshiftIoV1NamespacedPodSecurityPolicySelfSubjectReviewOperationSpec,
      callback) as Promise<Models.CreateSecurityOpenshiftIoV1NamespacedPodSecurityPolicySelfSubjectReviewResponse>;
  }

  /**
   * create a PodSecurityPolicySubjectReview
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns
   * Promise<Models.CreateSecurityOpenshiftIoV1NamespacedPodSecurityPolicySubjectReviewResponse>
   */
  createSecurityOpenshiftIoV1NamespacedPodSecurityPolicySubjectReview(body: Models.Comgithubopenshiftapisecurityv1PodSecurityPolicySubjectReview, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateSecurityOpenshiftIoV1NamespacedPodSecurityPolicySubjectReviewOptionalParams): Promise<Models.CreateSecurityOpenshiftIoV1NamespacedPodSecurityPolicySubjectReviewResponse>;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  createSecurityOpenshiftIoV1NamespacedPodSecurityPolicySubjectReview(body: Models.Comgithubopenshiftapisecurityv1PodSecurityPolicySubjectReview, namespace: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapisecurityv1PodSecurityPolicySubjectReview>): void;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  createSecurityOpenshiftIoV1NamespacedPodSecurityPolicySubjectReview(body: Models.Comgithubopenshiftapisecurityv1PodSecurityPolicySubjectReview, namespace: string, options: Models.OpenShiftAPIwithKubernetesCreateSecurityOpenshiftIoV1NamespacedPodSecurityPolicySubjectReviewOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapisecurityv1PodSecurityPolicySubjectReview>): void;
  createSecurityOpenshiftIoV1NamespacedPodSecurityPolicySubjectReview(body: Models.Comgithubopenshiftapisecurityv1PodSecurityPolicySubjectReview, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateSecurityOpenshiftIoV1NamespacedPodSecurityPolicySubjectReviewOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapisecurityv1PodSecurityPolicySubjectReview>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapisecurityv1PodSecurityPolicySubjectReview>): Promise<Models.CreateSecurityOpenshiftIoV1NamespacedPodSecurityPolicySubjectReviewResponse> {
    return this.sendOperationRequest(
      {
        body,
        namespace,
        options
      },
      createSecurityOpenshiftIoV1NamespacedPodSecurityPolicySubjectReviewOperationSpec,
      callback) as Promise<Models.CreateSecurityOpenshiftIoV1NamespacedPodSecurityPolicySubjectReviewResponse>;
  }

  /**
   * list or watch objects of kind RangeAllocation
   * @param [options] The optional parameters
   * @returns Promise<Models.ListSecurityOpenshiftIoV1RangeAllocationResponse>
   */
  listSecurityOpenshiftIoV1RangeAllocation(options?: Models.OpenShiftAPIwithKubernetesListSecurityOpenshiftIoV1RangeAllocationOptionalParams): Promise<Models.ListSecurityOpenshiftIoV1RangeAllocationResponse>;
  /**
   * @param callback The callback
   */
  listSecurityOpenshiftIoV1RangeAllocation(callback: msRest.ServiceCallback<Models.Comgithubopenshiftapisecurityv1RangeAllocationList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listSecurityOpenshiftIoV1RangeAllocation(options: Models.OpenShiftAPIwithKubernetesListSecurityOpenshiftIoV1RangeAllocationOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapisecurityv1RangeAllocationList>): void;
  listSecurityOpenshiftIoV1RangeAllocation(options?: Models.OpenShiftAPIwithKubernetesListSecurityOpenshiftIoV1RangeAllocationOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapisecurityv1RangeAllocationList>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapisecurityv1RangeAllocationList>): Promise<Models.ListSecurityOpenshiftIoV1RangeAllocationResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listSecurityOpenshiftIoV1RangeAllocationOperationSpec,
      callback) as Promise<Models.ListSecurityOpenshiftIoV1RangeAllocationResponse>;
  }

  /**
   * create a RangeAllocation
   * @param body
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateSecurityOpenshiftIoV1RangeAllocationResponse>
   */
  createSecurityOpenshiftIoV1RangeAllocation(body: Models.Comgithubopenshiftapisecurityv1RangeAllocation, options?: Models.OpenShiftAPIwithKubernetesCreateSecurityOpenshiftIoV1RangeAllocationOptionalParams): Promise<Models.CreateSecurityOpenshiftIoV1RangeAllocationResponse>;
  /**
   * @param body
   * @param callback The callback
   */
  createSecurityOpenshiftIoV1RangeAllocation(body: Models.Comgithubopenshiftapisecurityv1RangeAllocation, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapisecurityv1RangeAllocation>): void;
  /**
   * @param body
   * @param options The optional parameters
   * @param callback The callback
   */
  createSecurityOpenshiftIoV1RangeAllocation(body: Models.Comgithubopenshiftapisecurityv1RangeAllocation, options: Models.OpenShiftAPIwithKubernetesCreateSecurityOpenshiftIoV1RangeAllocationOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapisecurityv1RangeAllocation>): void;
  createSecurityOpenshiftIoV1RangeAllocation(body: Models.Comgithubopenshiftapisecurityv1RangeAllocation, options?: Models.OpenShiftAPIwithKubernetesCreateSecurityOpenshiftIoV1RangeAllocationOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapisecurityv1RangeAllocation>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapisecurityv1RangeAllocation>): Promise<Models.CreateSecurityOpenshiftIoV1RangeAllocationResponse> {
    return this.sendOperationRequest(
      {
        body,
        options
      },
      createSecurityOpenshiftIoV1RangeAllocationOperationSpec,
      callback) as Promise<Models.CreateSecurityOpenshiftIoV1RangeAllocationResponse>;
  }

  /**
   * delete collection of RangeAllocation
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteSecurityOpenshiftIoV1CollectionRangeAllocationResponse>
   */
  deleteSecurityOpenshiftIoV1CollectionRangeAllocation(options?: Models.OpenShiftAPIwithKubernetesDeleteSecurityOpenshiftIoV1CollectionRangeAllocationOptionalParams): Promise<Models.DeleteSecurityOpenshiftIoV1CollectionRangeAllocationResponse>;
  /**
   * @param callback The callback
   */
  deleteSecurityOpenshiftIoV1CollectionRangeAllocation(callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteSecurityOpenshiftIoV1CollectionRangeAllocation(options: Models.OpenShiftAPIwithKubernetesDeleteSecurityOpenshiftIoV1CollectionRangeAllocationOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteSecurityOpenshiftIoV1CollectionRangeAllocation(options?: Models.OpenShiftAPIwithKubernetesDeleteSecurityOpenshiftIoV1CollectionRangeAllocationOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteSecurityOpenshiftIoV1CollectionRangeAllocationResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      deleteSecurityOpenshiftIoV1CollectionRangeAllocationOperationSpec,
      callback) as Promise<Models.DeleteSecurityOpenshiftIoV1CollectionRangeAllocationResponse>;
  }

  /**
   * read the specified RangeAllocation
   * @param name name of the RangeAllocation
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadSecurityOpenshiftIoV1RangeAllocationResponse>
   */
  readSecurityOpenshiftIoV1RangeAllocation(name: string, options?: Models.OpenShiftAPIwithKubernetesReadSecurityOpenshiftIoV1RangeAllocationOptionalParams): Promise<Models.ReadSecurityOpenshiftIoV1RangeAllocationResponse>;
  /**
   * @param name name of the RangeAllocation
   * @param callback The callback
   */
  readSecurityOpenshiftIoV1RangeAllocation(name: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapisecurityv1RangeAllocation>): void;
  /**
   * @param name name of the RangeAllocation
   * @param options The optional parameters
   * @param callback The callback
   */
  readSecurityOpenshiftIoV1RangeAllocation(name: string, options: Models.OpenShiftAPIwithKubernetesReadSecurityOpenshiftIoV1RangeAllocationOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapisecurityv1RangeAllocation>): void;
  readSecurityOpenshiftIoV1RangeAllocation(name: string, options?: Models.OpenShiftAPIwithKubernetesReadSecurityOpenshiftIoV1RangeAllocationOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapisecurityv1RangeAllocation>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapisecurityv1RangeAllocation>): Promise<Models.ReadSecurityOpenshiftIoV1RangeAllocationResponse> {
    return this.sendOperationRequest(
      {
        name,
        options
      },
      readSecurityOpenshiftIoV1RangeAllocationOperationSpec,
      callback) as Promise<Models.ReadSecurityOpenshiftIoV1RangeAllocationResponse>;
  }

  /**
   * replace the specified RangeAllocation
   * @param body
   * @param name name of the RangeAllocation
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceSecurityOpenshiftIoV1RangeAllocationResponse>
   */
  replaceSecurityOpenshiftIoV1RangeAllocation(body: Models.Comgithubopenshiftapisecurityv1RangeAllocation, name: string, options?: Models.OpenShiftAPIwithKubernetesReplaceSecurityOpenshiftIoV1RangeAllocationOptionalParams): Promise<Models.ReplaceSecurityOpenshiftIoV1RangeAllocationResponse>;
  /**
   * @param body
   * @param name name of the RangeAllocation
   * @param callback The callback
   */
  replaceSecurityOpenshiftIoV1RangeAllocation(body: Models.Comgithubopenshiftapisecurityv1RangeAllocation, name: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapisecurityv1RangeAllocation>): void;
  /**
   * @param body
   * @param name name of the RangeAllocation
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceSecurityOpenshiftIoV1RangeAllocation(body: Models.Comgithubopenshiftapisecurityv1RangeAllocation, name: string, options: Models.OpenShiftAPIwithKubernetesReplaceSecurityOpenshiftIoV1RangeAllocationOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapisecurityv1RangeAllocation>): void;
  replaceSecurityOpenshiftIoV1RangeAllocation(body: Models.Comgithubopenshiftapisecurityv1RangeAllocation, name: string, options?: Models.OpenShiftAPIwithKubernetesReplaceSecurityOpenshiftIoV1RangeAllocationOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapisecurityv1RangeAllocation>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapisecurityv1RangeAllocation>): Promise<Models.ReplaceSecurityOpenshiftIoV1RangeAllocationResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      replaceSecurityOpenshiftIoV1RangeAllocationOperationSpec,
      callback) as Promise<Models.ReplaceSecurityOpenshiftIoV1RangeAllocationResponse>;
  }

  /**
   * delete a RangeAllocation
   * @param body
   * @param name name of the RangeAllocation
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteSecurityOpenshiftIoV1RangeAllocationResponse>
   */
  deleteSecurityOpenshiftIoV1RangeAllocation(body: Models.V1DeleteOptions, name: string, options?: Models.OpenShiftAPIwithKubernetesDeleteSecurityOpenshiftIoV1RangeAllocationOptionalParams): Promise<Models.DeleteSecurityOpenshiftIoV1RangeAllocationResponse>;
  /**
   * @param body
   * @param name name of the RangeAllocation
   * @param callback The callback
   */
  deleteSecurityOpenshiftIoV1RangeAllocation(body: Models.V1DeleteOptions, name: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param name name of the RangeAllocation
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteSecurityOpenshiftIoV1RangeAllocation(body: Models.V1DeleteOptions, name: string, options: Models.OpenShiftAPIwithKubernetesDeleteSecurityOpenshiftIoV1RangeAllocationOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteSecurityOpenshiftIoV1RangeAllocation(body: Models.V1DeleteOptions, name: string, options?: Models.OpenShiftAPIwithKubernetesDeleteSecurityOpenshiftIoV1RangeAllocationOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteSecurityOpenshiftIoV1RangeAllocationResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      deleteSecurityOpenshiftIoV1RangeAllocationOperationSpec,
      callback) as Promise<Models.DeleteSecurityOpenshiftIoV1RangeAllocationResponse>;
  }

  /**
   * partially update the specified RangeAllocation
   * @param body
   * @param name name of the RangeAllocation
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchSecurityOpenshiftIoV1RangeAllocationResponse>
   */
  patchSecurityOpenshiftIoV1RangeAllocation(body: any, name: string, options?: Models.OpenShiftAPIwithKubernetesPatchSecurityOpenshiftIoV1RangeAllocationOptionalParams): Promise<Models.PatchSecurityOpenshiftIoV1RangeAllocationResponse>;
  /**
   * @param body
   * @param name name of the RangeAllocation
   * @param callback The callback
   */
  patchSecurityOpenshiftIoV1RangeAllocation(body: any, name: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapisecurityv1RangeAllocation>): void;
  /**
   * @param body
   * @param name name of the RangeAllocation
   * @param options The optional parameters
   * @param callback The callback
   */
  patchSecurityOpenshiftIoV1RangeAllocation(body: any, name: string, options: Models.OpenShiftAPIwithKubernetesPatchSecurityOpenshiftIoV1RangeAllocationOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapisecurityv1RangeAllocation>): void;
  patchSecurityOpenshiftIoV1RangeAllocation(body: any, name: string, options?: Models.OpenShiftAPIwithKubernetesPatchSecurityOpenshiftIoV1RangeAllocationOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapisecurityv1RangeAllocation>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapisecurityv1RangeAllocation>): Promise<Models.PatchSecurityOpenshiftIoV1RangeAllocationResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      patchSecurityOpenshiftIoV1RangeAllocationOperationSpec,
      callback) as Promise<Models.PatchSecurityOpenshiftIoV1RangeAllocationResponse>;
  }

  /**
   * list or watch objects of kind SecurityContextConstraints
   * @param [options] The optional parameters
   * @returns Promise<Models.ListSecurityOpenshiftIoV1SecurityContextConstraintsResponse>
   */
  listSecurityOpenshiftIoV1SecurityContextConstraints(options?: Models.OpenShiftAPIwithKubernetesListSecurityOpenshiftIoV1SecurityContextConstraintsOptionalParams): Promise<Models.ListSecurityOpenshiftIoV1SecurityContextConstraintsResponse>;
  /**
   * @param callback The callback
   */
  listSecurityOpenshiftIoV1SecurityContextConstraints(callback: msRest.ServiceCallback<Models.Comgithubopenshiftapisecurityv1SecurityContextConstraintsList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listSecurityOpenshiftIoV1SecurityContextConstraints(options: Models.OpenShiftAPIwithKubernetesListSecurityOpenshiftIoV1SecurityContextConstraintsOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapisecurityv1SecurityContextConstraintsList>): void;
  listSecurityOpenshiftIoV1SecurityContextConstraints(options?: Models.OpenShiftAPIwithKubernetesListSecurityOpenshiftIoV1SecurityContextConstraintsOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapisecurityv1SecurityContextConstraintsList>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapisecurityv1SecurityContextConstraintsList>): Promise<Models.ListSecurityOpenshiftIoV1SecurityContextConstraintsResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listSecurityOpenshiftIoV1SecurityContextConstraintsOperationSpec,
      callback) as Promise<Models.ListSecurityOpenshiftIoV1SecurityContextConstraintsResponse>;
  }

  /**
   * create SecurityContextConstraints
   * @param body
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateSecurityOpenshiftIoV1SecurityContextConstraintsResponse>
   */
  createSecurityOpenshiftIoV1SecurityContextConstraints(body: Models.Comgithubopenshiftapisecurityv1SecurityContextConstraints, options?: Models.OpenShiftAPIwithKubernetesCreateSecurityOpenshiftIoV1SecurityContextConstraintsOptionalParams): Promise<Models.CreateSecurityOpenshiftIoV1SecurityContextConstraintsResponse>;
  /**
   * @param body
   * @param callback The callback
   */
  createSecurityOpenshiftIoV1SecurityContextConstraints(body: Models.Comgithubopenshiftapisecurityv1SecurityContextConstraints, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapisecurityv1SecurityContextConstraints>): void;
  /**
   * @param body
   * @param options The optional parameters
   * @param callback The callback
   */
  createSecurityOpenshiftIoV1SecurityContextConstraints(body: Models.Comgithubopenshiftapisecurityv1SecurityContextConstraints, options: Models.OpenShiftAPIwithKubernetesCreateSecurityOpenshiftIoV1SecurityContextConstraintsOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapisecurityv1SecurityContextConstraints>): void;
  createSecurityOpenshiftIoV1SecurityContextConstraints(body: Models.Comgithubopenshiftapisecurityv1SecurityContextConstraints, options?: Models.OpenShiftAPIwithKubernetesCreateSecurityOpenshiftIoV1SecurityContextConstraintsOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapisecurityv1SecurityContextConstraints>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapisecurityv1SecurityContextConstraints>): Promise<Models.CreateSecurityOpenshiftIoV1SecurityContextConstraintsResponse> {
    return this.sendOperationRequest(
      {
        body,
        options
      },
      createSecurityOpenshiftIoV1SecurityContextConstraintsOperationSpec,
      callback) as Promise<Models.CreateSecurityOpenshiftIoV1SecurityContextConstraintsResponse>;
  }

  /**
   * delete collection of SecurityContextConstraints
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteSecurityOpenshiftIoV1CollectionSecurityContextConstraintsResponse>
   */
  deleteSecurityOpenshiftIoV1CollectionSecurityContextConstraints(options?: Models.OpenShiftAPIwithKubernetesDeleteSecurityOpenshiftIoV1CollectionSecurityContextConstraintsOptionalParams): Promise<Models.DeleteSecurityOpenshiftIoV1CollectionSecurityContextConstraintsResponse>;
  /**
   * @param callback The callback
   */
  deleteSecurityOpenshiftIoV1CollectionSecurityContextConstraints(callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteSecurityOpenshiftIoV1CollectionSecurityContextConstraints(options: Models.OpenShiftAPIwithKubernetesDeleteSecurityOpenshiftIoV1CollectionSecurityContextConstraintsOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteSecurityOpenshiftIoV1CollectionSecurityContextConstraints(options?: Models.OpenShiftAPIwithKubernetesDeleteSecurityOpenshiftIoV1CollectionSecurityContextConstraintsOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteSecurityOpenshiftIoV1CollectionSecurityContextConstraintsResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      deleteSecurityOpenshiftIoV1CollectionSecurityContextConstraintsOperationSpec,
      callback) as Promise<Models.DeleteSecurityOpenshiftIoV1CollectionSecurityContextConstraintsResponse>;
  }

  /**
   * read the specified SecurityContextConstraints
   * @param name name of the SecurityContextConstraints
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadSecurityOpenshiftIoV1SecurityContextConstraintsResponse>
   */
  readSecurityOpenshiftIoV1SecurityContextConstraints(name: string, options?: Models.OpenShiftAPIwithKubernetesReadSecurityOpenshiftIoV1SecurityContextConstraintsOptionalParams): Promise<Models.ReadSecurityOpenshiftIoV1SecurityContextConstraintsResponse>;
  /**
   * @param name name of the SecurityContextConstraints
   * @param callback The callback
   */
  readSecurityOpenshiftIoV1SecurityContextConstraints(name: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapisecurityv1SecurityContextConstraints>): void;
  /**
   * @param name name of the SecurityContextConstraints
   * @param options The optional parameters
   * @param callback The callback
   */
  readSecurityOpenshiftIoV1SecurityContextConstraints(name: string, options: Models.OpenShiftAPIwithKubernetesReadSecurityOpenshiftIoV1SecurityContextConstraintsOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapisecurityv1SecurityContextConstraints>): void;
  readSecurityOpenshiftIoV1SecurityContextConstraints(name: string, options?: Models.OpenShiftAPIwithKubernetesReadSecurityOpenshiftIoV1SecurityContextConstraintsOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapisecurityv1SecurityContextConstraints>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapisecurityv1SecurityContextConstraints>): Promise<Models.ReadSecurityOpenshiftIoV1SecurityContextConstraintsResponse> {
    return this.sendOperationRequest(
      {
        name,
        options
      },
      readSecurityOpenshiftIoV1SecurityContextConstraintsOperationSpec,
      callback) as Promise<Models.ReadSecurityOpenshiftIoV1SecurityContextConstraintsResponse>;
  }

  /**
   * replace the specified SecurityContextConstraints
   * @param body
   * @param name name of the SecurityContextConstraints
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceSecurityOpenshiftIoV1SecurityContextConstraintsResponse>
   */
  replaceSecurityOpenshiftIoV1SecurityContextConstraints(body: Models.Comgithubopenshiftapisecurityv1SecurityContextConstraints, name: string, options?: Models.OpenShiftAPIwithKubernetesReplaceSecurityOpenshiftIoV1SecurityContextConstraintsOptionalParams): Promise<Models.ReplaceSecurityOpenshiftIoV1SecurityContextConstraintsResponse>;
  /**
   * @param body
   * @param name name of the SecurityContextConstraints
   * @param callback The callback
   */
  replaceSecurityOpenshiftIoV1SecurityContextConstraints(body: Models.Comgithubopenshiftapisecurityv1SecurityContextConstraints, name: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapisecurityv1SecurityContextConstraints>): void;
  /**
   * @param body
   * @param name name of the SecurityContextConstraints
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceSecurityOpenshiftIoV1SecurityContextConstraints(body: Models.Comgithubopenshiftapisecurityv1SecurityContextConstraints, name: string, options: Models.OpenShiftAPIwithKubernetesReplaceSecurityOpenshiftIoV1SecurityContextConstraintsOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapisecurityv1SecurityContextConstraints>): void;
  replaceSecurityOpenshiftIoV1SecurityContextConstraints(body: Models.Comgithubopenshiftapisecurityv1SecurityContextConstraints, name: string, options?: Models.OpenShiftAPIwithKubernetesReplaceSecurityOpenshiftIoV1SecurityContextConstraintsOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapisecurityv1SecurityContextConstraints>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapisecurityv1SecurityContextConstraints>): Promise<Models.ReplaceSecurityOpenshiftIoV1SecurityContextConstraintsResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      replaceSecurityOpenshiftIoV1SecurityContextConstraintsOperationSpec,
      callback) as Promise<Models.ReplaceSecurityOpenshiftIoV1SecurityContextConstraintsResponse>;
  }

  /**
   * delete SecurityContextConstraints
   * @param body
   * @param name name of the SecurityContextConstraints
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteSecurityOpenshiftIoV1SecurityContextConstraintsResponse>
   */
  deleteSecurityOpenshiftIoV1SecurityContextConstraints(body: Models.V1DeleteOptions, name: string, options?: Models.OpenShiftAPIwithKubernetesDeleteSecurityOpenshiftIoV1SecurityContextConstraintsOptionalParams): Promise<Models.DeleteSecurityOpenshiftIoV1SecurityContextConstraintsResponse>;
  /**
   * @param body
   * @param name name of the SecurityContextConstraints
   * @param callback The callback
   */
  deleteSecurityOpenshiftIoV1SecurityContextConstraints(body: Models.V1DeleteOptions, name: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param name name of the SecurityContextConstraints
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteSecurityOpenshiftIoV1SecurityContextConstraints(body: Models.V1DeleteOptions, name: string, options: Models.OpenShiftAPIwithKubernetesDeleteSecurityOpenshiftIoV1SecurityContextConstraintsOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteSecurityOpenshiftIoV1SecurityContextConstraints(body: Models.V1DeleteOptions, name: string, options?: Models.OpenShiftAPIwithKubernetesDeleteSecurityOpenshiftIoV1SecurityContextConstraintsOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteSecurityOpenshiftIoV1SecurityContextConstraintsResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      deleteSecurityOpenshiftIoV1SecurityContextConstraintsOperationSpec,
      callback) as Promise<Models.DeleteSecurityOpenshiftIoV1SecurityContextConstraintsResponse>;
  }

  /**
   * partially update the specified SecurityContextConstraints
   * @param body
   * @param name name of the SecurityContextConstraints
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchSecurityOpenshiftIoV1SecurityContextConstraintsResponse>
   */
  patchSecurityOpenshiftIoV1SecurityContextConstraints(body: any, name: string, options?: Models.OpenShiftAPIwithKubernetesPatchSecurityOpenshiftIoV1SecurityContextConstraintsOptionalParams): Promise<Models.PatchSecurityOpenshiftIoV1SecurityContextConstraintsResponse>;
  /**
   * @param body
   * @param name name of the SecurityContextConstraints
   * @param callback The callback
   */
  patchSecurityOpenshiftIoV1SecurityContextConstraints(body: any, name: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapisecurityv1SecurityContextConstraints>): void;
  /**
   * @param body
   * @param name name of the SecurityContextConstraints
   * @param options The optional parameters
   * @param callback The callback
   */
  patchSecurityOpenshiftIoV1SecurityContextConstraints(body: any, name: string, options: Models.OpenShiftAPIwithKubernetesPatchSecurityOpenshiftIoV1SecurityContextConstraintsOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapisecurityv1SecurityContextConstraints>): void;
  patchSecurityOpenshiftIoV1SecurityContextConstraints(body: any, name: string, options?: Models.OpenShiftAPIwithKubernetesPatchSecurityOpenshiftIoV1SecurityContextConstraintsOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapisecurityv1SecurityContextConstraints>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapisecurityv1SecurityContextConstraints>): Promise<Models.PatchSecurityOpenshiftIoV1SecurityContextConstraintsResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      patchSecurityOpenshiftIoV1SecurityContextConstraintsOperationSpec,
      callback) as Promise<Models.PatchSecurityOpenshiftIoV1SecurityContextConstraintsResponse>;
  }

  /**
   * watch individual changes to a list of RangeAllocation
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchSecurityOpenshiftIoV1RangeAllocationListResponse>
   */
  watchSecurityOpenshiftIoV1RangeAllocationList(options?: Models.OpenShiftAPIwithKubernetesWatchSecurityOpenshiftIoV1RangeAllocationListOptionalParams): Promise<Models.WatchSecurityOpenshiftIoV1RangeAllocationListResponse>;
  /**
   * @param callback The callback
   */
  watchSecurityOpenshiftIoV1RangeAllocationList(callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  watchSecurityOpenshiftIoV1RangeAllocationList(options: Models.OpenShiftAPIwithKubernetesWatchSecurityOpenshiftIoV1RangeAllocationListOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchSecurityOpenshiftIoV1RangeAllocationList(options?: Models.OpenShiftAPIwithKubernetesWatchSecurityOpenshiftIoV1RangeAllocationListOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchSecurityOpenshiftIoV1RangeAllocationListResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      watchSecurityOpenshiftIoV1RangeAllocationListOperationSpec,
      callback) as Promise<Models.WatchSecurityOpenshiftIoV1RangeAllocationListResponse>;
  }

  /**
   * watch changes to an object of kind RangeAllocation
   * @param name name of the RangeAllocation
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchSecurityOpenshiftIoV1RangeAllocationResponse>
   */
  watchSecurityOpenshiftIoV1RangeAllocation(name: string, options?: Models.OpenShiftAPIwithKubernetesWatchSecurityOpenshiftIoV1RangeAllocationOptionalParams): Promise<Models.WatchSecurityOpenshiftIoV1RangeAllocationResponse>;
  /**
   * @param name name of the RangeAllocation
   * @param callback The callback
   */
  watchSecurityOpenshiftIoV1RangeAllocation(name: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param name name of the RangeAllocation
   * @param options The optional parameters
   * @param callback The callback
   */
  watchSecurityOpenshiftIoV1RangeAllocation(name: string, options: Models.OpenShiftAPIwithKubernetesWatchSecurityOpenshiftIoV1RangeAllocationOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchSecurityOpenshiftIoV1RangeAllocation(name: string, options?: Models.OpenShiftAPIwithKubernetesWatchSecurityOpenshiftIoV1RangeAllocationOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchSecurityOpenshiftIoV1RangeAllocationResponse> {
    return this.sendOperationRequest(
      {
        name,
        options
      },
      watchSecurityOpenshiftIoV1RangeAllocationOperationSpec,
      callback) as Promise<Models.WatchSecurityOpenshiftIoV1RangeAllocationResponse>;
  }

  /**
   * watch individual changes to a list of SecurityContextConstraints
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchSecurityOpenshiftIoV1SecurityContextConstraintsListResponse>
   */
  watchSecurityOpenshiftIoV1SecurityContextConstraintsList(options?: Models.OpenShiftAPIwithKubernetesWatchSecurityOpenshiftIoV1SecurityContextConstraintsListOptionalParams): Promise<Models.WatchSecurityOpenshiftIoV1SecurityContextConstraintsListResponse>;
  /**
   * @param callback The callback
   */
  watchSecurityOpenshiftIoV1SecurityContextConstraintsList(callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  watchSecurityOpenshiftIoV1SecurityContextConstraintsList(options: Models.OpenShiftAPIwithKubernetesWatchSecurityOpenshiftIoV1SecurityContextConstraintsListOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchSecurityOpenshiftIoV1SecurityContextConstraintsList(options?: Models.OpenShiftAPIwithKubernetesWatchSecurityOpenshiftIoV1SecurityContextConstraintsListOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchSecurityOpenshiftIoV1SecurityContextConstraintsListResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      watchSecurityOpenshiftIoV1SecurityContextConstraintsListOperationSpec,
      callback) as Promise<Models.WatchSecurityOpenshiftIoV1SecurityContextConstraintsListResponse>;
  }

  /**
   * watch changes to an object of kind SecurityContextConstraints
   * @param name name of the SecurityContextConstraints
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchSecurityOpenshiftIoV1SecurityContextConstraintsResponse>
   */
  watchSecurityOpenshiftIoV1SecurityContextConstraints(name: string, options?: Models.OpenShiftAPIwithKubernetesWatchSecurityOpenshiftIoV1SecurityContextConstraintsOptionalParams): Promise<Models.WatchSecurityOpenshiftIoV1SecurityContextConstraintsResponse>;
  /**
   * @param name name of the SecurityContextConstraints
   * @param callback The callback
   */
  watchSecurityOpenshiftIoV1SecurityContextConstraints(name: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param name name of the SecurityContextConstraints
   * @param options The optional parameters
   * @param callback The callback
   */
  watchSecurityOpenshiftIoV1SecurityContextConstraints(name: string, options: Models.OpenShiftAPIwithKubernetesWatchSecurityOpenshiftIoV1SecurityContextConstraintsOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchSecurityOpenshiftIoV1SecurityContextConstraints(name: string, options?: Models.OpenShiftAPIwithKubernetesWatchSecurityOpenshiftIoV1SecurityContextConstraintsOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchSecurityOpenshiftIoV1SecurityContextConstraintsResponse> {
    return this.sendOperationRequest(
      {
        name,
        options
      },
      watchSecurityOpenshiftIoV1SecurityContextConstraintsOperationSpec,
      callback) as Promise<Models.WatchSecurityOpenshiftIoV1SecurityContextConstraintsResponse>;
  }

  /**
   * get information of a group
   * @param [options] The optional parameters
   * @returns Promise<Models.GetStorageAPIGroupResponse>
   */
  getStorageAPIGroup(options?: msRest.RequestOptionsBase): Promise<Models.GetStorageAPIGroupResponse>;
  /**
   * @param callback The callback
   */
  getStorageAPIGroup(callback: msRest.ServiceCallback<Models.V1APIGroup>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getStorageAPIGroup(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.V1APIGroup>): void;
  getStorageAPIGroup(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.V1APIGroup>, callback?: msRest.ServiceCallback<Models.V1APIGroup>): Promise<Models.GetStorageAPIGroupResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getStorageAPIGroupOperationSpec,
      callback) as Promise<Models.GetStorageAPIGroupResponse>;
  }

  /**
   * get available resources
   * @param [options] The optional parameters
   * @returns Promise<Models.GetStorageV1APIResourcesResponse>
   */
  getStorageV1APIResources(options?: msRest.RequestOptionsBase): Promise<Models.GetStorageV1APIResourcesResponse>;
  /**
   * @param callback The callback
   */
  getStorageV1APIResources(callback: msRest.ServiceCallback<Models.V1APIResourceList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getStorageV1APIResources(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.V1APIResourceList>): void;
  getStorageV1APIResources(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.V1APIResourceList>, callback?: msRest.ServiceCallback<Models.V1APIResourceList>): Promise<Models.GetStorageV1APIResourcesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getStorageV1APIResourcesOperationSpec,
      callback) as Promise<Models.GetStorageV1APIResourcesResponse>;
  }

  /**
   * list or watch objects of kind StorageClass
   * @param [options] The optional parameters
   * @returns Promise<Models.ListStorageV1StorageClassResponse>
   */
  listStorageV1StorageClass(options?: Models.OpenShiftAPIwithKubernetesListStorageV1StorageClassOptionalParams): Promise<Models.ListStorageV1StorageClassResponse>;
  /**
   * @param callback The callback
   */
  listStorageV1StorageClass(callback: msRest.ServiceCallback<Models.V1StorageClassList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listStorageV1StorageClass(options: Models.OpenShiftAPIwithKubernetesListStorageV1StorageClassOptionalParams, callback: msRest.ServiceCallback<Models.V1StorageClassList>): void;
  listStorageV1StorageClass(options?: Models.OpenShiftAPIwithKubernetesListStorageV1StorageClassOptionalParams | msRest.ServiceCallback<Models.V1StorageClassList>, callback?: msRest.ServiceCallback<Models.V1StorageClassList>): Promise<Models.ListStorageV1StorageClassResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listStorageV1StorageClassOperationSpec,
      callback) as Promise<Models.ListStorageV1StorageClassResponse>;
  }

  /**
   * create a StorageClass
   * @param body
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateStorageV1StorageClassResponse>
   */
  createStorageV1StorageClass(body: Models.V1StorageClass, options?: Models.OpenShiftAPIwithKubernetesCreateStorageV1StorageClassOptionalParams): Promise<Models.CreateStorageV1StorageClassResponse>;
  /**
   * @param body
   * @param callback The callback
   */
  createStorageV1StorageClass(body: Models.V1StorageClass, callback: msRest.ServiceCallback<Models.V1StorageClass>): void;
  /**
   * @param body
   * @param options The optional parameters
   * @param callback The callback
   */
  createStorageV1StorageClass(body: Models.V1StorageClass, options: Models.OpenShiftAPIwithKubernetesCreateStorageV1StorageClassOptionalParams, callback: msRest.ServiceCallback<Models.V1StorageClass>): void;
  createStorageV1StorageClass(body: Models.V1StorageClass, options?: Models.OpenShiftAPIwithKubernetesCreateStorageV1StorageClassOptionalParams | msRest.ServiceCallback<Models.V1StorageClass>, callback?: msRest.ServiceCallback<Models.V1StorageClass>): Promise<Models.CreateStorageV1StorageClassResponse> {
    return this.sendOperationRequest(
      {
        body,
        options
      },
      createStorageV1StorageClassOperationSpec,
      callback) as Promise<Models.CreateStorageV1StorageClassResponse>;
  }

  /**
   * delete collection of StorageClass
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteStorageV1CollectionStorageClassResponse>
   */
  deleteStorageV1CollectionStorageClass(options?: Models.OpenShiftAPIwithKubernetesDeleteStorageV1CollectionStorageClassOptionalParams): Promise<Models.DeleteStorageV1CollectionStorageClassResponse>;
  /**
   * @param callback The callback
   */
  deleteStorageV1CollectionStorageClass(callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteStorageV1CollectionStorageClass(options: Models.OpenShiftAPIwithKubernetesDeleteStorageV1CollectionStorageClassOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteStorageV1CollectionStorageClass(options?: Models.OpenShiftAPIwithKubernetesDeleteStorageV1CollectionStorageClassOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteStorageV1CollectionStorageClassResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      deleteStorageV1CollectionStorageClassOperationSpec,
      callback) as Promise<Models.DeleteStorageV1CollectionStorageClassResponse>;
  }

  /**
   * read the specified StorageClass
   * @param name name of the StorageClass
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadStorageV1StorageClassResponse>
   */
  readStorageV1StorageClass(name: string, options?: Models.OpenShiftAPIwithKubernetesReadStorageV1StorageClassOptionalParams): Promise<Models.ReadStorageV1StorageClassResponse>;
  /**
   * @param name name of the StorageClass
   * @param callback The callback
   */
  readStorageV1StorageClass(name: string, callback: msRest.ServiceCallback<Models.V1StorageClass>): void;
  /**
   * @param name name of the StorageClass
   * @param options The optional parameters
   * @param callback The callback
   */
  readStorageV1StorageClass(name: string, options: Models.OpenShiftAPIwithKubernetesReadStorageV1StorageClassOptionalParams, callback: msRest.ServiceCallback<Models.V1StorageClass>): void;
  readStorageV1StorageClass(name: string, options?: Models.OpenShiftAPIwithKubernetesReadStorageV1StorageClassOptionalParams | msRest.ServiceCallback<Models.V1StorageClass>, callback?: msRest.ServiceCallback<Models.V1StorageClass>): Promise<Models.ReadStorageV1StorageClassResponse> {
    return this.sendOperationRequest(
      {
        name,
        options
      },
      readStorageV1StorageClassOperationSpec,
      callback) as Promise<Models.ReadStorageV1StorageClassResponse>;
  }

  /**
   * replace the specified StorageClass
   * @param body
   * @param name name of the StorageClass
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceStorageV1StorageClassResponse>
   */
  replaceStorageV1StorageClass(body: Models.V1StorageClass, name: string, options?: Models.OpenShiftAPIwithKubernetesReplaceStorageV1StorageClassOptionalParams): Promise<Models.ReplaceStorageV1StorageClassResponse>;
  /**
   * @param body
   * @param name name of the StorageClass
   * @param callback The callback
   */
  replaceStorageV1StorageClass(body: Models.V1StorageClass, name: string, callback: msRest.ServiceCallback<Models.V1StorageClass>): void;
  /**
   * @param body
   * @param name name of the StorageClass
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceStorageV1StorageClass(body: Models.V1StorageClass, name: string, options: Models.OpenShiftAPIwithKubernetesReplaceStorageV1StorageClassOptionalParams, callback: msRest.ServiceCallback<Models.V1StorageClass>): void;
  replaceStorageV1StorageClass(body: Models.V1StorageClass, name: string, options?: Models.OpenShiftAPIwithKubernetesReplaceStorageV1StorageClassOptionalParams | msRest.ServiceCallback<Models.V1StorageClass>, callback?: msRest.ServiceCallback<Models.V1StorageClass>): Promise<Models.ReplaceStorageV1StorageClassResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      replaceStorageV1StorageClassOperationSpec,
      callback) as Promise<Models.ReplaceStorageV1StorageClassResponse>;
  }

  /**
   * delete a StorageClass
   * @param body
   * @param name name of the StorageClass
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteStorageV1StorageClassResponse>
   */
  deleteStorageV1StorageClass(body: Models.V1DeleteOptions, name: string, options?: Models.OpenShiftAPIwithKubernetesDeleteStorageV1StorageClassOptionalParams): Promise<Models.DeleteStorageV1StorageClassResponse>;
  /**
   * @param body
   * @param name name of the StorageClass
   * @param callback The callback
   */
  deleteStorageV1StorageClass(body: Models.V1DeleteOptions, name: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param name name of the StorageClass
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteStorageV1StorageClass(body: Models.V1DeleteOptions, name: string, options: Models.OpenShiftAPIwithKubernetesDeleteStorageV1StorageClassOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteStorageV1StorageClass(body: Models.V1DeleteOptions, name: string, options?: Models.OpenShiftAPIwithKubernetesDeleteStorageV1StorageClassOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteStorageV1StorageClassResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      deleteStorageV1StorageClassOperationSpec,
      callback) as Promise<Models.DeleteStorageV1StorageClassResponse>;
  }

  /**
   * partially update the specified StorageClass
   * @param body
   * @param name name of the StorageClass
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchStorageV1StorageClassResponse>
   */
  patchStorageV1StorageClass(body: any, name: string, options?: Models.OpenShiftAPIwithKubernetesPatchStorageV1StorageClassOptionalParams): Promise<Models.PatchStorageV1StorageClassResponse>;
  /**
   * @param body
   * @param name name of the StorageClass
   * @param callback The callback
   */
  patchStorageV1StorageClass(body: any, name: string, callback: msRest.ServiceCallback<Models.V1StorageClass>): void;
  /**
   * @param body
   * @param name name of the StorageClass
   * @param options The optional parameters
   * @param callback The callback
   */
  patchStorageV1StorageClass(body: any, name: string, options: Models.OpenShiftAPIwithKubernetesPatchStorageV1StorageClassOptionalParams, callback: msRest.ServiceCallback<Models.V1StorageClass>): void;
  patchStorageV1StorageClass(body: any, name: string, options?: Models.OpenShiftAPIwithKubernetesPatchStorageV1StorageClassOptionalParams | msRest.ServiceCallback<Models.V1StorageClass>, callback?: msRest.ServiceCallback<Models.V1StorageClass>): Promise<Models.PatchStorageV1StorageClassResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      patchStorageV1StorageClassOperationSpec,
      callback) as Promise<Models.PatchStorageV1StorageClassResponse>;
  }

  /**
   * watch individual changes to a list of StorageClass
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchStorageV1StorageClassListResponse>
   */
  watchStorageV1StorageClassList(options?: Models.OpenShiftAPIwithKubernetesWatchStorageV1StorageClassListOptionalParams): Promise<Models.WatchStorageV1StorageClassListResponse>;
  /**
   * @param callback The callback
   */
  watchStorageV1StorageClassList(callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  watchStorageV1StorageClassList(options: Models.OpenShiftAPIwithKubernetesWatchStorageV1StorageClassListOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchStorageV1StorageClassList(options?: Models.OpenShiftAPIwithKubernetesWatchStorageV1StorageClassListOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchStorageV1StorageClassListResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      watchStorageV1StorageClassListOperationSpec,
      callback) as Promise<Models.WatchStorageV1StorageClassListResponse>;
  }

  /**
   * watch changes to an object of kind StorageClass
   * @param name name of the StorageClass
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchStorageV1StorageClassResponse>
   */
  watchStorageV1StorageClass(name: string, options?: Models.OpenShiftAPIwithKubernetesWatchStorageV1StorageClassOptionalParams): Promise<Models.WatchStorageV1StorageClassResponse>;
  /**
   * @param name name of the StorageClass
   * @param callback The callback
   */
  watchStorageV1StorageClass(name: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param name name of the StorageClass
   * @param options The optional parameters
   * @param callback The callback
   */
  watchStorageV1StorageClass(name: string, options: Models.OpenShiftAPIwithKubernetesWatchStorageV1StorageClassOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchStorageV1StorageClass(name: string, options?: Models.OpenShiftAPIwithKubernetesWatchStorageV1StorageClassOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchStorageV1StorageClassResponse> {
    return this.sendOperationRequest(
      {
        name,
        options
      },
      watchStorageV1StorageClassOperationSpec,
      callback) as Promise<Models.WatchStorageV1StorageClassResponse>;
  }

  /**
   * get available resources
   * @param [options] The optional parameters
   * @returns Promise<Models.GetStorageV1beta1APIResourcesResponse>
   */
  getStorageV1beta1APIResources(options?: msRest.RequestOptionsBase): Promise<Models.GetStorageV1beta1APIResourcesResponse>;
  /**
   * @param callback The callback
   */
  getStorageV1beta1APIResources(callback: msRest.ServiceCallback<Models.V1APIResourceList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getStorageV1beta1APIResources(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.V1APIResourceList>): void;
  getStorageV1beta1APIResources(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.V1APIResourceList>, callback?: msRest.ServiceCallback<Models.V1APIResourceList>): Promise<Models.GetStorageV1beta1APIResourcesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getStorageV1beta1APIResourcesOperationSpec,
      callback) as Promise<Models.GetStorageV1beta1APIResourcesResponse>;
  }

  /**
   * list or watch objects of kind StorageClass
   * @param [options] The optional parameters
   * @returns Promise<Models.ListStorageV1beta1StorageClassResponse>
   */
  listStorageV1beta1StorageClass(options?: Models.OpenShiftAPIwithKubernetesListStorageV1beta1StorageClassOptionalParams): Promise<Models.ListStorageV1beta1StorageClassResponse>;
  /**
   * @param callback The callback
   */
  listStorageV1beta1StorageClass(callback: msRest.ServiceCallback<Models.V1beta1StorageClassList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listStorageV1beta1StorageClass(options: Models.OpenShiftAPIwithKubernetesListStorageV1beta1StorageClassOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1StorageClassList>): void;
  listStorageV1beta1StorageClass(options?: Models.OpenShiftAPIwithKubernetesListStorageV1beta1StorageClassOptionalParams | msRest.ServiceCallback<Models.V1beta1StorageClassList>, callback?: msRest.ServiceCallback<Models.V1beta1StorageClassList>): Promise<Models.ListStorageV1beta1StorageClassResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listStorageV1beta1StorageClassOperationSpec,
      callback) as Promise<Models.ListStorageV1beta1StorageClassResponse>;
  }

  /**
   * create a StorageClass
   * @param body
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateStorageV1beta1StorageClassResponse>
   */
  createStorageV1beta1StorageClass(body: Models.V1beta1StorageClass, options?: Models.OpenShiftAPIwithKubernetesCreateStorageV1beta1StorageClassOptionalParams): Promise<Models.CreateStorageV1beta1StorageClassResponse>;
  /**
   * @param body
   * @param callback The callback
   */
  createStorageV1beta1StorageClass(body: Models.V1beta1StorageClass, callback: msRest.ServiceCallback<Models.V1beta1StorageClass>): void;
  /**
   * @param body
   * @param options The optional parameters
   * @param callback The callback
   */
  createStorageV1beta1StorageClass(body: Models.V1beta1StorageClass, options: Models.OpenShiftAPIwithKubernetesCreateStorageV1beta1StorageClassOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1StorageClass>): void;
  createStorageV1beta1StorageClass(body: Models.V1beta1StorageClass, options?: Models.OpenShiftAPIwithKubernetesCreateStorageV1beta1StorageClassOptionalParams | msRest.ServiceCallback<Models.V1beta1StorageClass>, callback?: msRest.ServiceCallback<Models.V1beta1StorageClass>): Promise<Models.CreateStorageV1beta1StorageClassResponse> {
    return this.sendOperationRequest(
      {
        body,
        options
      },
      createStorageV1beta1StorageClassOperationSpec,
      callback) as Promise<Models.CreateStorageV1beta1StorageClassResponse>;
  }

  /**
   * delete collection of StorageClass
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteStorageV1beta1CollectionStorageClassResponse>
   */
  deleteStorageV1beta1CollectionStorageClass(options?: Models.OpenShiftAPIwithKubernetesDeleteStorageV1beta1CollectionStorageClassOptionalParams): Promise<Models.DeleteStorageV1beta1CollectionStorageClassResponse>;
  /**
   * @param callback The callback
   */
  deleteStorageV1beta1CollectionStorageClass(callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteStorageV1beta1CollectionStorageClass(options: Models.OpenShiftAPIwithKubernetesDeleteStorageV1beta1CollectionStorageClassOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteStorageV1beta1CollectionStorageClass(options?: Models.OpenShiftAPIwithKubernetesDeleteStorageV1beta1CollectionStorageClassOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteStorageV1beta1CollectionStorageClassResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      deleteStorageV1beta1CollectionStorageClassOperationSpec,
      callback) as Promise<Models.DeleteStorageV1beta1CollectionStorageClassResponse>;
  }

  /**
   * read the specified StorageClass
   * @param name name of the StorageClass
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadStorageV1beta1StorageClassResponse>
   */
  readStorageV1beta1StorageClass(name: string, options?: Models.OpenShiftAPIwithKubernetesReadStorageV1beta1StorageClassOptionalParams): Promise<Models.ReadStorageV1beta1StorageClassResponse>;
  /**
   * @param name name of the StorageClass
   * @param callback The callback
   */
  readStorageV1beta1StorageClass(name: string, callback: msRest.ServiceCallback<Models.V1beta1StorageClass>): void;
  /**
   * @param name name of the StorageClass
   * @param options The optional parameters
   * @param callback The callback
   */
  readStorageV1beta1StorageClass(name: string, options: Models.OpenShiftAPIwithKubernetesReadStorageV1beta1StorageClassOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1StorageClass>): void;
  readStorageV1beta1StorageClass(name: string, options?: Models.OpenShiftAPIwithKubernetesReadStorageV1beta1StorageClassOptionalParams | msRest.ServiceCallback<Models.V1beta1StorageClass>, callback?: msRest.ServiceCallback<Models.V1beta1StorageClass>): Promise<Models.ReadStorageV1beta1StorageClassResponse> {
    return this.sendOperationRequest(
      {
        name,
        options
      },
      readStorageV1beta1StorageClassOperationSpec,
      callback) as Promise<Models.ReadStorageV1beta1StorageClassResponse>;
  }

  /**
   * replace the specified StorageClass
   * @param body
   * @param name name of the StorageClass
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceStorageV1beta1StorageClassResponse>
   */
  replaceStorageV1beta1StorageClass(body: Models.V1beta1StorageClass, name: string, options?: Models.OpenShiftAPIwithKubernetesReplaceStorageV1beta1StorageClassOptionalParams): Promise<Models.ReplaceStorageV1beta1StorageClassResponse>;
  /**
   * @param body
   * @param name name of the StorageClass
   * @param callback The callback
   */
  replaceStorageV1beta1StorageClass(body: Models.V1beta1StorageClass, name: string, callback: msRest.ServiceCallback<Models.V1beta1StorageClass>): void;
  /**
   * @param body
   * @param name name of the StorageClass
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceStorageV1beta1StorageClass(body: Models.V1beta1StorageClass, name: string, options: Models.OpenShiftAPIwithKubernetesReplaceStorageV1beta1StorageClassOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1StorageClass>): void;
  replaceStorageV1beta1StorageClass(body: Models.V1beta1StorageClass, name: string, options?: Models.OpenShiftAPIwithKubernetesReplaceStorageV1beta1StorageClassOptionalParams | msRest.ServiceCallback<Models.V1beta1StorageClass>, callback?: msRest.ServiceCallback<Models.V1beta1StorageClass>): Promise<Models.ReplaceStorageV1beta1StorageClassResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      replaceStorageV1beta1StorageClassOperationSpec,
      callback) as Promise<Models.ReplaceStorageV1beta1StorageClassResponse>;
  }

  /**
   * delete a StorageClass
   * @param body
   * @param name name of the StorageClass
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteStorageV1beta1StorageClassResponse>
   */
  deleteStorageV1beta1StorageClass(body: Models.V1DeleteOptions, name: string, options?: Models.OpenShiftAPIwithKubernetesDeleteStorageV1beta1StorageClassOptionalParams): Promise<Models.DeleteStorageV1beta1StorageClassResponse>;
  /**
   * @param body
   * @param name name of the StorageClass
   * @param callback The callback
   */
  deleteStorageV1beta1StorageClass(body: Models.V1DeleteOptions, name: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param name name of the StorageClass
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteStorageV1beta1StorageClass(body: Models.V1DeleteOptions, name: string, options: Models.OpenShiftAPIwithKubernetesDeleteStorageV1beta1StorageClassOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteStorageV1beta1StorageClass(body: Models.V1DeleteOptions, name: string, options?: Models.OpenShiftAPIwithKubernetesDeleteStorageV1beta1StorageClassOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteStorageV1beta1StorageClassResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      deleteStorageV1beta1StorageClassOperationSpec,
      callback) as Promise<Models.DeleteStorageV1beta1StorageClassResponse>;
  }

  /**
   * partially update the specified StorageClass
   * @param body
   * @param name name of the StorageClass
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchStorageV1beta1StorageClassResponse>
   */
  patchStorageV1beta1StorageClass(body: any, name: string, options?: Models.OpenShiftAPIwithKubernetesPatchStorageV1beta1StorageClassOptionalParams): Promise<Models.PatchStorageV1beta1StorageClassResponse>;
  /**
   * @param body
   * @param name name of the StorageClass
   * @param callback The callback
   */
  patchStorageV1beta1StorageClass(body: any, name: string, callback: msRest.ServiceCallback<Models.V1beta1StorageClass>): void;
  /**
   * @param body
   * @param name name of the StorageClass
   * @param options The optional parameters
   * @param callback The callback
   */
  patchStorageV1beta1StorageClass(body: any, name: string, options: Models.OpenShiftAPIwithKubernetesPatchStorageV1beta1StorageClassOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1StorageClass>): void;
  patchStorageV1beta1StorageClass(body: any, name: string, options?: Models.OpenShiftAPIwithKubernetesPatchStorageV1beta1StorageClassOptionalParams | msRest.ServiceCallback<Models.V1beta1StorageClass>, callback?: msRest.ServiceCallback<Models.V1beta1StorageClass>): Promise<Models.PatchStorageV1beta1StorageClassResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      patchStorageV1beta1StorageClassOperationSpec,
      callback) as Promise<Models.PatchStorageV1beta1StorageClassResponse>;
  }

  /**
   * list or watch objects of kind VolumeAttachment
   * @param [options] The optional parameters
   * @returns Promise<Models.ListStorageV1beta1VolumeAttachmentResponse>
   */
  listStorageV1beta1VolumeAttachment(options?: Models.OpenShiftAPIwithKubernetesListStorageV1beta1VolumeAttachmentOptionalParams): Promise<Models.ListStorageV1beta1VolumeAttachmentResponse>;
  /**
   * @param callback The callback
   */
  listStorageV1beta1VolumeAttachment(callback: msRest.ServiceCallback<Models.V1beta1VolumeAttachmentList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listStorageV1beta1VolumeAttachment(options: Models.OpenShiftAPIwithKubernetesListStorageV1beta1VolumeAttachmentOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1VolumeAttachmentList>): void;
  listStorageV1beta1VolumeAttachment(options?: Models.OpenShiftAPIwithKubernetesListStorageV1beta1VolumeAttachmentOptionalParams | msRest.ServiceCallback<Models.V1beta1VolumeAttachmentList>, callback?: msRest.ServiceCallback<Models.V1beta1VolumeAttachmentList>): Promise<Models.ListStorageV1beta1VolumeAttachmentResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listStorageV1beta1VolumeAttachmentOperationSpec,
      callback) as Promise<Models.ListStorageV1beta1VolumeAttachmentResponse>;
  }

  /**
   * create a VolumeAttachment
   * @param body
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateStorageV1beta1VolumeAttachmentResponse>
   */
  createStorageV1beta1VolumeAttachment(body: Models.V1beta1VolumeAttachment, options?: Models.OpenShiftAPIwithKubernetesCreateStorageV1beta1VolumeAttachmentOptionalParams): Promise<Models.CreateStorageV1beta1VolumeAttachmentResponse>;
  /**
   * @param body
   * @param callback The callback
   */
  createStorageV1beta1VolumeAttachment(body: Models.V1beta1VolumeAttachment, callback: msRest.ServiceCallback<Models.V1beta1VolumeAttachment>): void;
  /**
   * @param body
   * @param options The optional parameters
   * @param callback The callback
   */
  createStorageV1beta1VolumeAttachment(body: Models.V1beta1VolumeAttachment, options: Models.OpenShiftAPIwithKubernetesCreateStorageV1beta1VolumeAttachmentOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1VolumeAttachment>): void;
  createStorageV1beta1VolumeAttachment(body: Models.V1beta1VolumeAttachment, options?: Models.OpenShiftAPIwithKubernetesCreateStorageV1beta1VolumeAttachmentOptionalParams | msRest.ServiceCallback<Models.V1beta1VolumeAttachment>, callback?: msRest.ServiceCallback<Models.V1beta1VolumeAttachment>): Promise<Models.CreateStorageV1beta1VolumeAttachmentResponse> {
    return this.sendOperationRequest(
      {
        body,
        options
      },
      createStorageV1beta1VolumeAttachmentOperationSpec,
      callback) as Promise<Models.CreateStorageV1beta1VolumeAttachmentResponse>;
  }

  /**
   * delete collection of VolumeAttachment
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteStorageV1beta1CollectionVolumeAttachmentResponse>
   */
  deleteStorageV1beta1CollectionVolumeAttachment(options?: Models.OpenShiftAPIwithKubernetesDeleteStorageV1beta1CollectionVolumeAttachmentOptionalParams): Promise<Models.DeleteStorageV1beta1CollectionVolumeAttachmentResponse>;
  /**
   * @param callback The callback
   */
  deleteStorageV1beta1CollectionVolumeAttachment(callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteStorageV1beta1CollectionVolumeAttachment(options: Models.OpenShiftAPIwithKubernetesDeleteStorageV1beta1CollectionVolumeAttachmentOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteStorageV1beta1CollectionVolumeAttachment(options?: Models.OpenShiftAPIwithKubernetesDeleteStorageV1beta1CollectionVolumeAttachmentOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteStorageV1beta1CollectionVolumeAttachmentResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      deleteStorageV1beta1CollectionVolumeAttachmentOperationSpec,
      callback) as Promise<Models.DeleteStorageV1beta1CollectionVolumeAttachmentResponse>;
  }

  /**
   * read the specified VolumeAttachment
   * @param name name of the VolumeAttachment
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadStorageV1beta1VolumeAttachmentResponse>
   */
  readStorageV1beta1VolumeAttachment(name: string, options?: Models.OpenShiftAPIwithKubernetesReadStorageV1beta1VolumeAttachmentOptionalParams): Promise<Models.ReadStorageV1beta1VolumeAttachmentResponse>;
  /**
   * @param name name of the VolumeAttachment
   * @param callback The callback
   */
  readStorageV1beta1VolumeAttachment(name: string, callback: msRest.ServiceCallback<Models.V1beta1VolumeAttachment>): void;
  /**
   * @param name name of the VolumeAttachment
   * @param options The optional parameters
   * @param callback The callback
   */
  readStorageV1beta1VolumeAttachment(name: string, options: Models.OpenShiftAPIwithKubernetesReadStorageV1beta1VolumeAttachmentOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1VolumeAttachment>): void;
  readStorageV1beta1VolumeAttachment(name: string, options?: Models.OpenShiftAPIwithKubernetesReadStorageV1beta1VolumeAttachmentOptionalParams | msRest.ServiceCallback<Models.V1beta1VolumeAttachment>, callback?: msRest.ServiceCallback<Models.V1beta1VolumeAttachment>): Promise<Models.ReadStorageV1beta1VolumeAttachmentResponse> {
    return this.sendOperationRequest(
      {
        name,
        options
      },
      readStorageV1beta1VolumeAttachmentOperationSpec,
      callback) as Promise<Models.ReadStorageV1beta1VolumeAttachmentResponse>;
  }

  /**
   * replace the specified VolumeAttachment
   * @param body
   * @param name name of the VolumeAttachment
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceStorageV1beta1VolumeAttachmentResponse>
   */
  replaceStorageV1beta1VolumeAttachment(body: Models.V1beta1VolumeAttachment, name: string, options?: Models.OpenShiftAPIwithKubernetesReplaceStorageV1beta1VolumeAttachmentOptionalParams): Promise<Models.ReplaceStorageV1beta1VolumeAttachmentResponse>;
  /**
   * @param body
   * @param name name of the VolumeAttachment
   * @param callback The callback
   */
  replaceStorageV1beta1VolumeAttachment(body: Models.V1beta1VolumeAttachment, name: string, callback: msRest.ServiceCallback<Models.V1beta1VolumeAttachment>): void;
  /**
   * @param body
   * @param name name of the VolumeAttachment
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceStorageV1beta1VolumeAttachment(body: Models.V1beta1VolumeAttachment, name: string, options: Models.OpenShiftAPIwithKubernetesReplaceStorageV1beta1VolumeAttachmentOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1VolumeAttachment>): void;
  replaceStorageV1beta1VolumeAttachment(body: Models.V1beta1VolumeAttachment, name: string, options?: Models.OpenShiftAPIwithKubernetesReplaceStorageV1beta1VolumeAttachmentOptionalParams | msRest.ServiceCallback<Models.V1beta1VolumeAttachment>, callback?: msRest.ServiceCallback<Models.V1beta1VolumeAttachment>): Promise<Models.ReplaceStorageV1beta1VolumeAttachmentResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      replaceStorageV1beta1VolumeAttachmentOperationSpec,
      callback) as Promise<Models.ReplaceStorageV1beta1VolumeAttachmentResponse>;
  }

  /**
   * delete a VolumeAttachment
   * @param body
   * @param name name of the VolumeAttachment
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteStorageV1beta1VolumeAttachmentResponse>
   */
  deleteStorageV1beta1VolumeAttachment(body: Models.V1DeleteOptions, name: string, options?: Models.OpenShiftAPIwithKubernetesDeleteStorageV1beta1VolumeAttachmentOptionalParams): Promise<Models.DeleteStorageV1beta1VolumeAttachmentResponse>;
  /**
   * @param body
   * @param name name of the VolumeAttachment
   * @param callback The callback
   */
  deleteStorageV1beta1VolumeAttachment(body: Models.V1DeleteOptions, name: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param name name of the VolumeAttachment
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteStorageV1beta1VolumeAttachment(body: Models.V1DeleteOptions, name: string, options: Models.OpenShiftAPIwithKubernetesDeleteStorageV1beta1VolumeAttachmentOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteStorageV1beta1VolumeAttachment(body: Models.V1DeleteOptions, name: string, options?: Models.OpenShiftAPIwithKubernetesDeleteStorageV1beta1VolumeAttachmentOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteStorageV1beta1VolumeAttachmentResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      deleteStorageV1beta1VolumeAttachmentOperationSpec,
      callback) as Promise<Models.DeleteStorageV1beta1VolumeAttachmentResponse>;
  }

  /**
   * partially update the specified VolumeAttachment
   * @param body
   * @param name name of the VolumeAttachment
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchStorageV1beta1VolumeAttachmentResponse>
   */
  patchStorageV1beta1VolumeAttachment(body: any, name: string, options?: Models.OpenShiftAPIwithKubernetesPatchStorageV1beta1VolumeAttachmentOptionalParams): Promise<Models.PatchStorageV1beta1VolumeAttachmentResponse>;
  /**
   * @param body
   * @param name name of the VolumeAttachment
   * @param callback The callback
   */
  patchStorageV1beta1VolumeAttachment(body: any, name: string, callback: msRest.ServiceCallback<Models.V1beta1VolumeAttachment>): void;
  /**
   * @param body
   * @param name name of the VolumeAttachment
   * @param options The optional parameters
   * @param callback The callback
   */
  patchStorageV1beta1VolumeAttachment(body: any, name: string, options: Models.OpenShiftAPIwithKubernetesPatchStorageV1beta1VolumeAttachmentOptionalParams, callback: msRest.ServiceCallback<Models.V1beta1VolumeAttachment>): void;
  patchStorageV1beta1VolumeAttachment(body: any, name: string, options?: Models.OpenShiftAPIwithKubernetesPatchStorageV1beta1VolumeAttachmentOptionalParams | msRest.ServiceCallback<Models.V1beta1VolumeAttachment>, callback?: msRest.ServiceCallback<Models.V1beta1VolumeAttachment>): Promise<Models.PatchStorageV1beta1VolumeAttachmentResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      patchStorageV1beta1VolumeAttachmentOperationSpec,
      callback) as Promise<Models.PatchStorageV1beta1VolumeAttachmentResponse>;
  }

  /**
   * watch individual changes to a list of StorageClass
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchStorageV1beta1StorageClassListResponse>
   */
  watchStorageV1beta1StorageClassList(options?: Models.OpenShiftAPIwithKubernetesWatchStorageV1beta1StorageClassListOptionalParams): Promise<Models.WatchStorageV1beta1StorageClassListResponse>;
  /**
   * @param callback The callback
   */
  watchStorageV1beta1StorageClassList(callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  watchStorageV1beta1StorageClassList(options: Models.OpenShiftAPIwithKubernetesWatchStorageV1beta1StorageClassListOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchStorageV1beta1StorageClassList(options?: Models.OpenShiftAPIwithKubernetesWatchStorageV1beta1StorageClassListOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchStorageV1beta1StorageClassListResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      watchStorageV1beta1StorageClassListOperationSpec,
      callback) as Promise<Models.WatchStorageV1beta1StorageClassListResponse>;
  }

  /**
   * watch changes to an object of kind StorageClass
   * @param name name of the StorageClass
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchStorageV1beta1StorageClassResponse>
   */
  watchStorageV1beta1StorageClass(name: string, options?: Models.OpenShiftAPIwithKubernetesWatchStorageV1beta1StorageClassOptionalParams): Promise<Models.WatchStorageV1beta1StorageClassResponse>;
  /**
   * @param name name of the StorageClass
   * @param callback The callback
   */
  watchStorageV1beta1StorageClass(name: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param name name of the StorageClass
   * @param options The optional parameters
   * @param callback The callback
   */
  watchStorageV1beta1StorageClass(name: string, options: Models.OpenShiftAPIwithKubernetesWatchStorageV1beta1StorageClassOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchStorageV1beta1StorageClass(name: string, options?: Models.OpenShiftAPIwithKubernetesWatchStorageV1beta1StorageClassOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchStorageV1beta1StorageClassResponse> {
    return this.sendOperationRequest(
      {
        name,
        options
      },
      watchStorageV1beta1StorageClassOperationSpec,
      callback) as Promise<Models.WatchStorageV1beta1StorageClassResponse>;
  }

  /**
   * watch individual changes to a list of VolumeAttachment
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchStorageV1beta1VolumeAttachmentListResponse>
   */
  watchStorageV1beta1VolumeAttachmentList(options?: Models.OpenShiftAPIwithKubernetesWatchStorageV1beta1VolumeAttachmentListOptionalParams): Promise<Models.WatchStorageV1beta1VolumeAttachmentListResponse>;
  /**
   * @param callback The callback
   */
  watchStorageV1beta1VolumeAttachmentList(callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  watchStorageV1beta1VolumeAttachmentList(options: Models.OpenShiftAPIwithKubernetesWatchStorageV1beta1VolumeAttachmentListOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchStorageV1beta1VolumeAttachmentList(options?: Models.OpenShiftAPIwithKubernetesWatchStorageV1beta1VolumeAttachmentListOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchStorageV1beta1VolumeAttachmentListResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      watchStorageV1beta1VolumeAttachmentListOperationSpec,
      callback) as Promise<Models.WatchStorageV1beta1VolumeAttachmentListResponse>;
  }

  /**
   * watch changes to an object of kind VolumeAttachment
   * @param name name of the VolumeAttachment
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchStorageV1beta1VolumeAttachmentResponse>
   */
  watchStorageV1beta1VolumeAttachment(name: string, options?: Models.OpenShiftAPIwithKubernetesWatchStorageV1beta1VolumeAttachmentOptionalParams): Promise<Models.WatchStorageV1beta1VolumeAttachmentResponse>;
  /**
   * @param name name of the VolumeAttachment
   * @param callback The callback
   */
  watchStorageV1beta1VolumeAttachment(name: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param name name of the VolumeAttachment
   * @param options The optional parameters
   * @param callback The callback
   */
  watchStorageV1beta1VolumeAttachment(name: string, options: Models.OpenShiftAPIwithKubernetesWatchStorageV1beta1VolumeAttachmentOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchStorageV1beta1VolumeAttachment(name: string, options?: Models.OpenShiftAPIwithKubernetesWatchStorageV1beta1VolumeAttachmentOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchStorageV1beta1VolumeAttachmentResponse> {
    return this.sendOperationRequest(
      {
        name,
        options
      },
      watchStorageV1beta1VolumeAttachmentOperationSpec,
      callback) as Promise<Models.WatchStorageV1beta1VolumeAttachmentResponse>;
  }

  /**
   * get information of a group
   * @param [options] The optional parameters
   * @returns Promise<Models.GetTemplateOpenshiftIoAPIGroupResponse>
   */
  getTemplateOpenshiftIoAPIGroup(options?: msRest.RequestOptionsBase): Promise<Models.GetTemplateOpenshiftIoAPIGroupResponse>;
  /**
   * @param callback The callback
   */
  getTemplateOpenshiftIoAPIGroup(callback: msRest.ServiceCallback<Models.V1APIGroup>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getTemplateOpenshiftIoAPIGroup(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.V1APIGroup>): void;
  getTemplateOpenshiftIoAPIGroup(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.V1APIGroup>, callback?: msRest.ServiceCallback<Models.V1APIGroup>): Promise<Models.GetTemplateOpenshiftIoAPIGroupResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getTemplateOpenshiftIoAPIGroupOperationSpec,
      callback) as Promise<Models.GetTemplateOpenshiftIoAPIGroupResponse>;
  }

  /**
   * get available resources
   * @param [options] The optional parameters
   * @returns Promise<Models.GetTemplateOpenshiftIoV1APIResourcesResponse>
   */
  getTemplateOpenshiftIoV1APIResources(options?: msRest.RequestOptionsBase): Promise<Models.GetTemplateOpenshiftIoV1APIResourcesResponse>;
  /**
   * @param callback The callback
   */
  getTemplateOpenshiftIoV1APIResources(callback: msRest.ServiceCallback<Models.V1APIResourceList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getTemplateOpenshiftIoV1APIResources(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.V1APIResourceList>): void;
  getTemplateOpenshiftIoV1APIResources(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.V1APIResourceList>, callback?: msRest.ServiceCallback<Models.V1APIResourceList>): Promise<Models.GetTemplateOpenshiftIoV1APIResourcesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getTemplateOpenshiftIoV1APIResourcesOperationSpec,
      callback) as Promise<Models.GetTemplateOpenshiftIoV1APIResourcesResponse>;
  }

  /**
   * list or watch objects of kind BrokerTemplateInstance
   * @param [options] The optional parameters
   * @returns Promise<Models.ListTemplateOpenshiftIoV1BrokerTemplateInstanceResponse>
   */
  listTemplateOpenshiftIoV1BrokerTemplateInstance(options?: Models.OpenShiftAPIwithKubernetesListTemplateOpenshiftIoV1BrokerTemplateInstanceOptionalParams): Promise<Models.ListTemplateOpenshiftIoV1BrokerTemplateInstanceResponse>;
  /**
   * @param callback The callback
   */
  listTemplateOpenshiftIoV1BrokerTemplateInstance(callback: msRest.ServiceCallback<Models.Comgithubopenshiftapitemplatev1BrokerTemplateInstanceList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listTemplateOpenshiftIoV1BrokerTemplateInstance(options: Models.OpenShiftAPIwithKubernetesListTemplateOpenshiftIoV1BrokerTemplateInstanceOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapitemplatev1BrokerTemplateInstanceList>): void;
  listTemplateOpenshiftIoV1BrokerTemplateInstance(options?: Models.OpenShiftAPIwithKubernetesListTemplateOpenshiftIoV1BrokerTemplateInstanceOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapitemplatev1BrokerTemplateInstanceList>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapitemplatev1BrokerTemplateInstanceList>): Promise<Models.ListTemplateOpenshiftIoV1BrokerTemplateInstanceResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listTemplateOpenshiftIoV1BrokerTemplateInstanceOperationSpec,
      callback) as Promise<Models.ListTemplateOpenshiftIoV1BrokerTemplateInstanceResponse>;
  }

  /**
   * create a BrokerTemplateInstance
   * @param body
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateTemplateOpenshiftIoV1BrokerTemplateInstanceResponse>
   */
  createTemplateOpenshiftIoV1BrokerTemplateInstance(body: Models.Comgithubopenshiftapitemplatev1BrokerTemplateInstance, options?: Models.OpenShiftAPIwithKubernetesCreateTemplateOpenshiftIoV1BrokerTemplateInstanceOptionalParams): Promise<Models.CreateTemplateOpenshiftIoV1BrokerTemplateInstanceResponse>;
  /**
   * @param body
   * @param callback The callback
   */
  createTemplateOpenshiftIoV1BrokerTemplateInstance(body: Models.Comgithubopenshiftapitemplatev1BrokerTemplateInstance, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapitemplatev1BrokerTemplateInstance>): void;
  /**
   * @param body
   * @param options The optional parameters
   * @param callback The callback
   */
  createTemplateOpenshiftIoV1BrokerTemplateInstance(body: Models.Comgithubopenshiftapitemplatev1BrokerTemplateInstance, options: Models.OpenShiftAPIwithKubernetesCreateTemplateOpenshiftIoV1BrokerTemplateInstanceOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapitemplatev1BrokerTemplateInstance>): void;
  createTemplateOpenshiftIoV1BrokerTemplateInstance(body: Models.Comgithubopenshiftapitemplatev1BrokerTemplateInstance, options?: Models.OpenShiftAPIwithKubernetesCreateTemplateOpenshiftIoV1BrokerTemplateInstanceOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapitemplatev1BrokerTemplateInstance>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapitemplatev1BrokerTemplateInstance>): Promise<Models.CreateTemplateOpenshiftIoV1BrokerTemplateInstanceResponse> {
    return this.sendOperationRequest(
      {
        body,
        options
      },
      createTemplateOpenshiftIoV1BrokerTemplateInstanceOperationSpec,
      callback) as Promise<Models.CreateTemplateOpenshiftIoV1BrokerTemplateInstanceResponse>;
  }

  /**
   * delete collection of BrokerTemplateInstance
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteTemplateOpenshiftIoV1CollectionBrokerTemplateInstanceResponse>
   */
  deleteTemplateOpenshiftIoV1CollectionBrokerTemplateInstance(options?: Models.OpenShiftAPIwithKubernetesDeleteTemplateOpenshiftIoV1CollectionBrokerTemplateInstanceOptionalParams): Promise<Models.DeleteTemplateOpenshiftIoV1CollectionBrokerTemplateInstanceResponse>;
  /**
   * @param callback The callback
   */
  deleteTemplateOpenshiftIoV1CollectionBrokerTemplateInstance(callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteTemplateOpenshiftIoV1CollectionBrokerTemplateInstance(options: Models.OpenShiftAPIwithKubernetesDeleteTemplateOpenshiftIoV1CollectionBrokerTemplateInstanceOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteTemplateOpenshiftIoV1CollectionBrokerTemplateInstance(options?: Models.OpenShiftAPIwithKubernetesDeleteTemplateOpenshiftIoV1CollectionBrokerTemplateInstanceOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteTemplateOpenshiftIoV1CollectionBrokerTemplateInstanceResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      deleteTemplateOpenshiftIoV1CollectionBrokerTemplateInstanceOperationSpec,
      callback) as Promise<Models.DeleteTemplateOpenshiftIoV1CollectionBrokerTemplateInstanceResponse>;
  }

  /**
   * read the specified BrokerTemplateInstance
   * @param name name of the BrokerTemplateInstance
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadTemplateOpenshiftIoV1BrokerTemplateInstanceResponse>
   */
  readTemplateOpenshiftIoV1BrokerTemplateInstance(name: string, options?: Models.OpenShiftAPIwithKubernetesReadTemplateOpenshiftIoV1BrokerTemplateInstanceOptionalParams): Promise<Models.ReadTemplateOpenshiftIoV1BrokerTemplateInstanceResponse>;
  /**
   * @param name name of the BrokerTemplateInstance
   * @param callback The callback
   */
  readTemplateOpenshiftIoV1BrokerTemplateInstance(name: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapitemplatev1BrokerTemplateInstance>): void;
  /**
   * @param name name of the BrokerTemplateInstance
   * @param options The optional parameters
   * @param callback The callback
   */
  readTemplateOpenshiftIoV1BrokerTemplateInstance(name: string, options: Models.OpenShiftAPIwithKubernetesReadTemplateOpenshiftIoV1BrokerTemplateInstanceOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapitemplatev1BrokerTemplateInstance>): void;
  readTemplateOpenshiftIoV1BrokerTemplateInstance(name: string, options?: Models.OpenShiftAPIwithKubernetesReadTemplateOpenshiftIoV1BrokerTemplateInstanceOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapitemplatev1BrokerTemplateInstance>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapitemplatev1BrokerTemplateInstance>): Promise<Models.ReadTemplateOpenshiftIoV1BrokerTemplateInstanceResponse> {
    return this.sendOperationRequest(
      {
        name,
        options
      },
      readTemplateOpenshiftIoV1BrokerTemplateInstanceOperationSpec,
      callback) as Promise<Models.ReadTemplateOpenshiftIoV1BrokerTemplateInstanceResponse>;
  }

  /**
   * replace the specified BrokerTemplateInstance
   * @param body
   * @param name name of the BrokerTemplateInstance
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceTemplateOpenshiftIoV1BrokerTemplateInstanceResponse>
   */
  replaceTemplateOpenshiftIoV1BrokerTemplateInstance(body: Models.Comgithubopenshiftapitemplatev1BrokerTemplateInstance, name: string, options?: Models.OpenShiftAPIwithKubernetesReplaceTemplateOpenshiftIoV1BrokerTemplateInstanceOptionalParams): Promise<Models.ReplaceTemplateOpenshiftIoV1BrokerTemplateInstanceResponse>;
  /**
   * @param body
   * @param name name of the BrokerTemplateInstance
   * @param callback The callback
   */
  replaceTemplateOpenshiftIoV1BrokerTemplateInstance(body: Models.Comgithubopenshiftapitemplatev1BrokerTemplateInstance, name: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapitemplatev1BrokerTemplateInstance>): void;
  /**
   * @param body
   * @param name name of the BrokerTemplateInstance
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceTemplateOpenshiftIoV1BrokerTemplateInstance(body: Models.Comgithubopenshiftapitemplatev1BrokerTemplateInstance, name: string, options: Models.OpenShiftAPIwithKubernetesReplaceTemplateOpenshiftIoV1BrokerTemplateInstanceOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapitemplatev1BrokerTemplateInstance>): void;
  replaceTemplateOpenshiftIoV1BrokerTemplateInstance(body: Models.Comgithubopenshiftapitemplatev1BrokerTemplateInstance, name: string, options?: Models.OpenShiftAPIwithKubernetesReplaceTemplateOpenshiftIoV1BrokerTemplateInstanceOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapitemplatev1BrokerTemplateInstance>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapitemplatev1BrokerTemplateInstance>): Promise<Models.ReplaceTemplateOpenshiftIoV1BrokerTemplateInstanceResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      replaceTemplateOpenshiftIoV1BrokerTemplateInstanceOperationSpec,
      callback) as Promise<Models.ReplaceTemplateOpenshiftIoV1BrokerTemplateInstanceResponse>;
  }

  /**
   * delete a BrokerTemplateInstance
   * @param body
   * @param name name of the BrokerTemplateInstance
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteTemplateOpenshiftIoV1BrokerTemplateInstanceResponse>
   */
  deleteTemplateOpenshiftIoV1BrokerTemplateInstance(body: Models.V1DeleteOptions, name: string, options?: Models.OpenShiftAPIwithKubernetesDeleteTemplateOpenshiftIoV1BrokerTemplateInstanceOptionalParams): Promise<Models.DeleteTemplateOpenshiftIoV1BrokerTemplateInstanceResponse>;
  /**
   * @param body
   * @param name name of the BrokerTemplateInstance
   * @param callback The callback
   */
  deleteTemplateOpenshiftIoV1BrokerTemplateInstance(body: Models.V1DeleteOptions, name: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param name name of the BrokerTemplateInstance
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteTemplateOpenshiftIoV1BrokerTemplateInstance(body: Models.V1DeleteOptions, name: string, options: Models.OpenShiftAPIwithKubernetesDeleteTemplateOpenshiftIoV1BrokerTemplateInstanceOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteTemplateOpenshiftIoV1BrokerTemplateInstance(body: Models.V1DeleteOptions, name: string, options?: Models.OpenShiftAPIwithKubernetesDeleteTemplateOpenshiftIoV1BrokerTemplateInstanceOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteTemplateOpenshiftIoV1BrokerTemplateInstanceResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      deleteTemplateOpenshiftIoV1BrokerTemplateInstanceOperationSpec,
      callback) as Promise<Models.DeleteTemplateOpenshiftIoV1BrokerTemplateInstanceResponse>;
  }

  /**
   * partially update the specified BrokerTemplateInstance
   * @param body
   * @param name name of the BrokerTemplateInstance
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchTemplateOpenshiftIoV1BrokerTemplateInstanceResponse>
   */
  patchTemplateOpenshiftIoV1BrokerTemplateInstance(body: any, name: string, options?: Models.OpenShiftAPIwithKubernetesPatchTemplateOpenshiftIoV1BrokerTemplateInstanceOptionalParams): Promise<Models.PatchTemplateOpenshiftIoV1BrokerTemplateInstanceResponse>;
  /**
   * @param body
   * @param name name of the BrokerTemplateInstance
   * @param callback The callback
   */
  patchTemplateOpenshiftIoV1BrokerTemplateInstance(body: any, name: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapitemplatev1BrokerTemplateInstance>): void;
  /**
   * @param body
   * @param name name of the BrokerTemplateInstance
   * @param options The optional parameters
   * @param callback The callback
   */
  patchTemplateOpenshiftIoV1BrokerTemplateInstance(body: any, name: string, options: Models.OpenShiftAPIwithKubernetesPatchTemplateOpenshiftIoV1BrokerTemplateInstanceOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapitemplatev1BrokerTemplateInstance>): void;
  patchTemplateOpenshiftIoV1BrokerTemplateInstance(body: any, name: string, options?: Models.OpenShiftAPIwithKubernetesPatchTemplateOpenshiftIoV1BrokerTemplateInstanceOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapitemplatev1BrokerTemplateInstance>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapitemplatev1BrokerTemplateInstance>): Promise<Models.PatchTemplateOpenshiftIoV1BrokerTemplateInstanceResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      patchTemplateOpenshiftIoV1BrokerTemplateInstanceOperationSpec,
      callback) as Promise<Models.PatchTemplateOpenshiftIoV1BrokerTemplateInstanceResponse>;
  }

  /**
   * create a Template
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateNamespacedProcessedTemplateV1Response>
   */
  createNamespacedProcessedTemplateV1(body: Models.Comgithubopenshiftapitemplatev1Template, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateNamespacedProcessedTemplateV1OptionalParams): Promise<Models.CreateNamespacedProcessedTemplateV1Response>;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  createNamespacedProcessedTemplateV1(body: Models.Comgithubopenshiftapitemplatev1Template, namespace: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapitemplatev1Template>): void;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  createNamespacedProcessedTemplateV1(body: Models.Comgithubopenshiftapitemplatev1Template, namespace: string, options: Models.OpenShiftAPIwithKubernetesCreateNamespacedProcessedTemplateV1OptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapitemplatev1Template>): void;
  createNamespacedProcessedTemplateV1(body: Models.Comgithubopenshiftapitemplatev1Template, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateNamespacedProcessedTemplateV1OptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapitemplatev1Template>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapitemplatev1Template>): Promise<Models.CreateNamespacedProcessedTemplateV1Response> {
    return this.sendOperationRequest(
      {
        body,
        namespace,
        options
      },
      createNamespacedProcessedTemplateV1OperationSpec,
      callback) as Promise<Models.CreateNamespacedProcessedTemplateV1Response>;
  }

  /**
   * list or watch objects of kind TemplateInstance
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ListTemplateOpenshiftIoV1NamespacedTemplateInstanceResponse>
   */
  listTemplateOpenshiftIoV1NamespacedTemplateInstance(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListTemplateOpenshiftIoV1NamespacedTemplateInstanceOptionalParams): Promise<Models.ListTemplateOpenshiftIoV1NamespacedTemplateInstanceResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  listTemplateOpenshiftIoV1NamespacedTemplateInstance(namespace: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapitemplatev1TemplateInstanceList>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  listTemplateOpenshiftIoV1NamespacedTemplateInstance(namespace: string, options: Models.OpenShiftAPIwithKubernetesListTemplateOpenshiftIoV1NamespacedTemplateInstanceOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapitemplatev1TemplateInstanceList>): void;
  listTemplateOpenshiftIoV1NamespacedTemplateInstance(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListTemplateOpenshiftIoV1NamespacedTemplateInstanceOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapitemplatev1TemplateInstanceList>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapitemplatev1TemplateInstanceList>): Promise<Models.ListTemplateOpenshiftIoV1NamespacedTemplateInstanceResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      listTemplateOpenshiftIoV1NamespacedTemplateInstanceOperationSpec,
      callback) as Promise<Models.ListTemplateOpenshiftIoV1NamespacedTemplateInstanceResponse>;
  }

  /**
   * create a TemplateInstance
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateTemplateOpenshiftIoV1NamespacedTemplateInstanceResponse>
   */
  createTemplateOpenshiftIoV1NamespacedTemplateInstance(body: Models.Comgithubopenshiftapitemplatev1TemplateInstance, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateTemplateOpenshiftIoV1NamespacedTemplateInstanceOptionalParams): Promise<Models.CreateTemplateOpenshiftIoV1NamespacedTemplateInstanceResponse>;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  createTemplateOpenshiftIoV1NamespacedTemplateInstance(body: Models.Comgithubopenshiftapitemplatev1TemplateInstance, namespace: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapitemplatev1TemplateInstance>): void;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  createTemplateOpenshiftIoV1NamespacedTemplateInstance(body: Models.Comgithubopenshiftapitemplatev1TemplateInstance, namespace: string, options: Models.OpenShiftAPIwithKubernetesCreateTemplateOpenshiftIoV1NamespacedTemplateInstanceOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapitemplatev1TemplateInstance>): void;
  createTemplateOpenshiftIoV1NamespacedTemplateInstance(body: Models.Comgithubopenshiftapitemplatev1TemplateInstance, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateTemplateOpenshiftIoV1NamespacedTemplateInstanceOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapitemplatev1TemplateInstance>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapitemplatev1TemplateInstance>): Promise<Models.CreateTemplateOpenshiftIoV1NamespacedTemplateInstanceResponse> {
    return this.sendOperationRequest(
      {
        body,
        namespace,
        options
      },
      createTemplateOpenshiftIoV1NamespacedTemplateInstanceOperationSpec,
      callback) as Promise<Models.CreateTemplateOpenshiftIoV1NamespacedTemplateInstanceResponse>;
  }

  /**
   * delete collection of TemplateInstance
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteTemplateOpenshiftIoV1CollectionNamespacedTemplateInstanceResponse>
   */
  deleteTemplateOpenshiftIoV1CollectionNamespacedTemplateInstance(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteTemplateOpenshiftIoV1CollectionNamespacedTemplateInstanceOptionalParams): Promise<Models.DeleteTemplateOpenshiftIoV1CollectionNamespacedTemplateInstanceResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteTemplateOpenshiftIoV1CollectionNamespacedTemplateInstance(namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteTemplateOpenshiftIoV1CollectionNamespacedTemplateInstance(namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteTemplateOpenshiftIoV1CollectionNamespacedTemplateInstanceOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteTemplateOpenshiftIoV1CollectionNamespacedTemplateInstance(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteTemplateOpenshiftIoV1CollectionNamespacedTemplateInstanceOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteTemplateOpenshiftIoV1CollectionNamespacedTemplateInstanceResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      deleteTemplateOpenshiftIoV1CollectionNamespacedTemplateInstanceOperationSpec,
      callback) as Promise<Models.DeleteTemplateOpenshiftIoV1CollectionNamespacedTemplateInstanceResponse>;
  }

  /**
   * read the specified TemplateInstance
   * @param name name of the TemplateInstance
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadTemplateOpenshiftIoV1NamespacedTemplateInstanceResponse>
   */
  readTemplateOpenshiftIoV1NamespacedTemplateInstance(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadTemplateOpenshiftIoV1NamespacedTemplateInstanceOptionalParams): Promise<Models.ReadTemplateOpenshiftIoV1NamespacedTemplateInstanceResponse>;
  /**
   * @param name name of the TemplateInstance
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readTemplateOpenshiftIoV1NamespacedTemplateInstance(name: string, namespace: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapitemplatev1TemplateInstance>): void;
  /**
   * @param name name of the TemplateInstance
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readTemplateOpenshiftIoV1NamespacedTemplateInstance(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadTemplateOpenshiftIoV1NamespacedTemplateInstanceOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapitemplatev1TemplateInstance>): void;
  readTemplateOpenshiftIoV1NamespacedTemplateInstance(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadTemplateOpenshiftIoV1NamespacedTemplateInstanceOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapitemplatev1TemplateInstance>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapitemplatev1TemplateInstance>): Promise<Models.ReadTemplateOpenshiftIoV1NamespacedTemplateInstanceResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readTemplateOpenshiftIoV1NamespacedTemplateInstanceOperationSpec,
      callback) as Promise<Models.ReadTemplateOpenshiftIoV1NamespacedTemplateInstanceResponse>;
  }

  /**
   * replace the specified TemplateInstance
   * @param body
   * @param name name of the TemplateInstance
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceTemplateOpenshiftIoV1NamespacedTemplateInstanceResponse>
   */
  replaceTemplateOpenshiftIoV1NamespacedTemplateInstance(body: Models.Comgithubopenshiftapitemplatev1TemplateInstance, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceTemplateOpenshiftIoV1NamespacedTemplateInstanceOptionalParams): Promise<Models.ReplaceTemplateOpenshiftIoV1NamespacedTemplateInstanceResponse>;
  /**
   * @param body
   * @param name name of the TemplateInstance
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replaceTemplateOpenshiftIoV1NamespacedTemplateInstance(body: Models.Comgithubopenshiftapitemplatev1TemplateInstance, name: string, namespace: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapitemplatev1TemplateInstance>): void;
  /**
   * @param body
   * @param name name of the TemplateInstance
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceTemplateOpenshiftIoV1NamespacedTemplateInstance(body: Models.Comgithubopenshiftapitemplatev1TemplateInstance, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplaceTemplateOpenshiftIoV1NamespacedTemplateInstanceOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapitemplatev1TemplateInstance>): void;
  replaceTemplateOpenshiftIoV1NamespacedTemplateInstance(body: Models.Comgithubopenshiftapitemplatev1TemplateInstance, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceTemplateOpenshiftIoV1NamespacedTemplateInstanceOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapitemplatev1TemplateInstance>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapitemplatev1TemplateInstance>): Promise<Models.ReplaceTemplateOpenshiftIoV1NamespacedTemplateInstanceResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replaceTemplateOpenshiftIoV1NamespacedTemplateInstanceOperationSpec,
      callback) as Promise<Models.ReplaceTemplateOpenshiftIoV1NamespacedTemplateInstanceResponse>;
  }

  /**
   * delete a TemplateInstance
   * @param body
   * @param name name of the TemplateInstance
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteTemplateOpenshiftIoV1NamespacedTemplateInstanceResponse>
   */
  deleteTemplateOpenshiftIoV1NamespacedTemplateInstance(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteTemplateOpenshiftIoV1NamespacedTemplateInstanceOptionalParams): Promise<Models.DeleteTemplateOpenshiftIoV1NamespacedTemplateInstanceResponse>;
  /**
   * @param body
   * @param name name of the TemplateInstance
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteTemplateOpenshiftIoV1NamespacedTemplateInstance(body: Models.V1DeleteOptions, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param name name of the TemplateInstance
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteTemplateOpenshiftIoV1NamespacedTemplateInstance(body: Models.V1DeleteOptions, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteTemplateOpenshiftIoV1NamespacedTemplateInstanceOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteTemplateOpenshiftIoV1NamespacedTemplateInstance(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteTemplateOpenshiftIoV1NamespacedTemplateInstanceOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteTemplateOpenshiftIoV1NamespacedTemplateInstanceResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      deleteTemplateOpenshiftIoV1NamespacedTemplateInstanceOperationSpec,
      callback) as Promise<Models.DeleteTemplateOpenshiftIoV1NamespacedTemplateInstanceResponse>;
  }

  /**
   * partially update the specified TemplateInstance
   * @param body
   * @param name name of the TemplateInstance
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchTemplateOpenshiftIoV1NamespacedTemplateInstanceResponse>
   */
  patchTemplateOpenshiftIoV1NamespacedTemplateInstance(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchTemplateOpenshiftIoV1NamespacedTemplateInstanceOptionalParams): Promise<Models.PatchTemplateOpenshiftIoV1NamespacedTemplateInstanceResponse>;
  /**
   * @param body
   * @param name name of the TemplateInstance
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  patchTemplateOpenshiftIoV1NamespacedTemplateInstance(body: any, name: string, namespace: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapitemplatev1TemplateInstance>): void;
  /**
   * @param body
   * @param name name of the TemplateInstance
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  patchTemplateOpenshiftIoV1NamespacedTemplateInstance(body: any, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesPatchTemplateOpenshiftIoV1NamespacedTemplateInstanceOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapitemplatev1TemplateInstance>): void;
  patchTemplateOpenshiftIoV1NamespacedTemplateInstance(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchTemplateOpenshiftIoV1NamespacedTemplateInstanceOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapitemplatev1TemplateInstance>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapitemplatev1TemplateInstance>): Promise<Models.PatchTemplateOpenshiftIoV1NamespacedTemplateInstanceResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      patchTemplateOpenshiftIoV1NamespacedTemplateInstanceOperationSpec,
      callback) as Promise<Models.PatchTemplateOpenshiftIoV1NamespacedTemplateInstanceResponse>;
  }

  /**
   * read status of the specified TemplateInstance
   * @param name name of the TemplateInstance
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadTemplateOpenshiftIoV1NamespacedTemplateInstanceStatusResponse>
   */
  readTemplateOpenshiftIoV1NamespacedTemplateInstanceStatus(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadTemplateOpenshiftIoV1NamespacedTemplateInstanceStatusOptionalParams): Promise<Models.ReadTemplateOpenshiftIoV1NamespacedTemplateInstanceStatusResponse>;
  /**
   * @param name name of the TemplateInstance
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readTemplateOpenshiftIoV1NamespacedTemplateInstanceStatus(name: string, namespace: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapitemplatev1TemplateInstance>): void;
  /**
   * @param name name of the TemplateInstance
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readTemplateOpenshiftIoV1NamespacedTemplateInstanceStatus(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadTemplateOpenshiftIoV1NamespacedTemplateInstanceStatusOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapitemplatev1TemplateInstance>): void;
  readTemplateOpenshiftIoV1NamespacedTemplateInstanceStatus(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadTemplateOpenshiftIoV1NamespacedTemplateInstanceStatusOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapitemplatev1TemplateInstance>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapitemplatev1TemplateInstance>): Promise<Models.ReadTemplateOpenshiftIoV1NamespacedTemplateInstanceStatusResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readTemplateOpenshiftIoV1NamespacedTemplateInstanceStatusOperationSpec,
      callback) as Promise<Models.ReadTemplateOpenshiftIoV1NamespacedTemplateInstanceStatusResponse>;
  }

  /**
   * replace status of the specified TemplateInstance
   * @param body
   * @param name name of the TemplateInstance
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceTemplateOpenshiftIoV1NamespacedTemplateInstanceStatusResponse>
   */
  replaceTemplateOpenshiftIoV1NamespacedTemplateInstanceStatus(body: Models.Comgithubopenshiftapitemplatev1TemplateInstance, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceTemplateOpenshiftIoV1NamespacedTemplateInstanceStatusOptionalParams): Promise<Models.ReplaceTemplateOpenshiftIoV1NamespacedTemplateInstanceStatusResponse>;
  /**
   * @param body
   * @param name name of the TemplateInstance
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replaceTemplateOpenshiftIoV1NamespacedTemplateInstanceStatus(body: Models.Comgithubopenshiftapitemplatev1TemplateInstance, name: string, namespace: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapitemplatev1TemplateInstance>): void;
  /**
   * @param body
   * @param name name of the TemplateInstance
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceTemplateOpenshiftIoV1NamespacedTemplateInstanceStatus(body: Models.Comgithubopenshiftapitemplatev1TemplateInstance, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplaceTemplateOpenshiftIoV1NamespacedTemplateInstanceStatusOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapitemplatev1TemplateInstance>): void;
  replaceTemplateOpenshiftIoV1NamespacedTemplateInstanceStatus(body: Models.Comgithubopenshiftapitemplatev1TemplateInstance, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceTemplateOpenshiftIoV1NamespacedTemplateInstanceStatusOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapitemplatev1TemplateInstance>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapitemplatev1TemplateInstance>): Promise<Models.ReplaceTemplateOpenshiftIoV1NamespacedTemplateInstanceStatusResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replaceTemplateOpenshiftIoV1NamespacedTemplateInstanceStatusOperationSpec,
      callback) as Promise<Models.ReplaceTemplateOpenshiftIoV1NamespacedTemplateInstanceStatusResponse>;
  }

  /**
   * partially update status of the specified TemplateInstance
   * @param body
   * @param name name of the TemplateInstance
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchTemplateOpenshiftIoV1NamespacedTemplateInstanceStatusResponse>
   */
  patchTemplateOpenshiftIoV1NamespacedTemplateInstanceStatus(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchTemplateOpenshiftIoV1NamespacedTemplateInstanceStatusOptionalParams): Promise<Models.PatchTemplateOpenshiftIoV1NamespacedTemplateInstanceStatusResponse>;
  /**
   * @param body
   * @param name name of the TemplateInstance
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  patchTemplateOpenshiftIoV1NamespacedTemplateInstanceStatus(body: any, name: string, namespace: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapitemplatev1TemplateInstance>): void;
  /**
   * @param body
   * @param name name of the TemplateInstance
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  patchTemplateOpenshiftIoV1NamespacedTemplateInstanceStatus(body: any, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesPatchTemplateOpenshiftIoV1NamespacedTemplateInstanceStatusOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapitemplatev1TemplateInstance>): void;
  patchTemplateOpenshiftIoV1NamespacedTemplateInstanceStatus(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchTemplateOpenshiftIoV1NamespacedTemplateInstanceStatusOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapitemplatev1TemplateInstance>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapitemplatev1TemplateInstance>): Promise<Models.PatchTemplateOpenshiftIoV1NamespacedTemplateInstanceStatusResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      patchTemplateOpenshiftIoV1NamespacedTemplateInstanceStatusOperationSpec,
      callback) as Promise<Models.PatchTemplateOpenshiftIoV1NamespacedTemplateInstanceStatusResponse>;
  }

  /**
   * list or watch objects of kind Template
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ListTemplateOpenshiftIoV1NamespacedTemplateResponse>
   */
  listTemplateOpenshiftIoV1NamespacedTemplate(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListTemplateOpenshiftIoV1NamespacedTemplateOptionalParams): Promise<Models.ListTemplateOpenshiftIoV1NamespacedTemplateResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  listTemplateOpenshiftIoV1NamespacedTemplate(namespace: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapitemplatev1TemplateList>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  listTemplateOpenshiftIoV1NamespacedTemplate(namespace: string, options: Models.OpenShiftAPIwithKubernetesListTemplateOpenshiftIoV1NamespacedTemplateOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapitemplatev1TemplateList>): void;
  listTemplateOpenshiftIoV1NamespacedTemplate(namespace: string, options?: Models.OpenShiftAPIwithKubernetesListTemplateOpenshiftIoV1NamespacedTemplateOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapitemplatev1TemplateList>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapitemplatev1TemplateList>): Promise<Models.ListTemplateOpenshiftIoV1NamespacedTemplateResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      listTemplateOpenshiftIoV1NamespacedTemplateOperationSpec,
      callback) as Promise<Models.ListTemplateOpenshiftIoV1NamespacedTemplateResponse>;
  }

  /**
   * create a Template
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateTemplateOpenshiftIoV1NamespacedTemplateResponse>
   */
  createTemplateOpenshiftIoV1NamespacedTemplate(body: Models.Comgithubopenshiftapitemplatev1Template, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateTemplateOpenshiftIoV1NamespacedTemplateOptionalParams): Promise<Models.CreateTemplateOpenshiftIoV1NamespacedTemplateResponse>;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  createTemplateOpenshiftIoV1NamespacedTemplate(body: Models.Comgithubopenshiftapitemplatev1Template, namespace: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapitemplatev1Template>): void;
  /**
   * @param body
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  createTemplateOpenshiftIoV1NamespacedTemplate(body: Models.Comgithubopenshiftapitemplatev1Template, namespace: string, options: Models.OpenShiftAPIwithKubernetesCreateTemplateOpenshiftIoV1NamespacedTemplateOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapitemplatev1Template>): void;
  createTemplateOpenshiftIoV1NamespacedTemplate(body: Models.Comgithubopenshiftapitemplatev1Template, namespace: string, options?: Models.OpenShiftAPIwithKubernetesCreateTemplateOpenshiftIoV1NamespacedTemplateOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapitemplatev1Template>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapitemplatev1Template>): Promise<Models.CreateTemplateOpenshiftIoV1NamespacedTemplateResponse> {
    return this.sendOperationRequest(
      {
        body,
        namespace,
        options
      },
      createTemplateOpenshiftIoV1NamespacedTemplateOperationSpec,
      callback) as Promise<Models.CreateTemplateOpenshiftIoV1NamespacedTemplateResponse>;
  }

  /**
   * delete collection of Template
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteTemplateOpenshiftIoV1CollectionNamespacedTemplateResponse>
   */
  deleteTemplateOpenshiftIoV1CollectionNamespacedTemplate(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteTemplateOpenshiftIoV1CollectionNamespacedTemplateOptionalParams): Promise<Models.DeleteTemplateOpenshiftIoV1CollectionNamespacedTemplateResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteTemplateOpenshiftIoV1CollectionNamespacedTemplate(namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteTemplateOpenshiftIoV1CollectionNamespacedTemplate(namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteTemplateOpenshiftIoV1CollectionNamespacedTemplateOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteTemplateOpenshiftIoV1CollectionNamespacedTemplate(namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteTemplateOpenshiftIoV1CollectionNamespacedTemplateOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteTemplateOpenshiftIoV1CollectionNamespacedTemplateResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      deleteTemplateOpenshiftIoV1CollectionNamespacedTemplateOperationSpec,
      callback) as Promise<Models.DeleteTemplateOpenshiftIoV1CollectionNamespacedTemplateResponse>;
  }

  /**
   * read the specified Template
   * @param name name of the Template
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadTemplateOpenshiftIoV1NamespacedTemplateResponse>
   */
  readTemplateOpenshiftIoV1NamespacedTemplate(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadTemplateOpenshiftIoV1NamespacedTemplateOptionalParams): Promise<Models.ReadTemplateOpenshiftIoV1NamespacedTemplateResponse>;
  /**
   * @param name name of the Template
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  readTemplateOpenshiftIoV1NamespacedTemplate(name: string, namespace: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapitemplatev1Template>): void;
  /**
   * @param name name of the Template
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  readTemplateOpenshiftIoV1NamespacedTemplate(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReadTemplateOpenshiftIoV1NamespacedTemplateOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapitemplatev1Template>): void;
  readTemplateOpenshiftIoV1NamespacedTemplate(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReadTemplateOpenshiftIoV1NamespacedTemplateOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapitemplatev1Template>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapitemplatev1Template>): Promise<Models.ReadTemplateOpenshiftIoV1NamespacedTemplateResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      readTemplateOpenshiftIoV1NamespacedTemplateOperationSpec,
      callback) as Promise<Models.ReadTemplateOpenshiftIoV1NamespacedTemplateResponse>;
  }

  /**
   * replace the specified Template
   * @param body
   * @param name name of the Template
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceTemplateOpenshiftIoV1NamespacedTemplateResponse>
   */
  replaceTemplateOpenshiftIoV1NamespacedTemplate(body: Models.Comgithubopenshiftapitemplatev1Template, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceTemplateOpenshiftIoV1NamespacedTemplateOptionalParams): Promise<Models.ReplaceTemplateOpenshiftIoV1NamespacedTemplateResponse>;
  /**
   * @param body
   * @param name name of the Template
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  replaceTemplateOpenshiftIoV1NamespacedTemplate(body: Models.Comgithubopenshiftapitemplatev1Template, name: string, namespace: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapitemplatev1Template>): void;
  /**
   * @param body
   * @param name name of the Template
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceTemplateOpenshiftIoV1NamespacedTemplate(body: Models.Comgithubopenshiftapitemplatev1Template, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesReplaceTemplateOpenshiftIoV1NamespacedTemplateOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapitemplatev1Template>): void;
  replaceTemplateOpenshiftIoV1NamespacedTemplate(body: Models.Comgithubopenshiftapitemplatev1Template, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesReplaceTemplateOpenshiftIoV1NamespacedTemplateOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapitemplatev1Template>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapitemplatev1Template>): Promise<Models.ReplaceTemplateOpenshiftIoV1NamespacedTemplateResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      replaceTemplateOpenshiftIoV1NamespacedTemplateOperationSpec,
      callback) as Promise<Models.ReplaceTemplateOpenshiftIoV1NamespacedTemplateResponse>;
  }

  /**
   * delete a Template
   * @param body
   * @param name name of the Template
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteTemplateOpenshiftIoV1NamespacedTemplateResponse>
   */
  deleteTemplateOpenshiftIoV1NamespacedTemplate(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteTemplateOpenshiftIoV1NamespacedTemplateOptionalParams): Promise<Models.DeleteTemplateOpenshiftIoV1NamespacedTemplateResponse>;
  /**
   * @param body
   * @param name name of the Template
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  deleteTemplateOpenshiftIoV1NamespacedTemplate(body: Models.V1DeleteOptions, name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param name name of the Template
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteTemplateOpenshiftIoV1NamespacedTemplate(body: Models.V1DeleteOptions, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesDeleteTemplateOpenshiftIoV1NamespacedTemplateOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteTemplateOpenshiftIoV1NamespacedTemplate(body: Models.V1DeleteOptions, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesDeleteTemplateOpenshiftIoV1NamespacedTemplateOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteTemplateOpenshiftIoV1NamespacedTemplateResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      deleteTemplateOpenshiftIoV1NamespacedTemplateOperationSpec,
      callback) as Promise<Models.DeleteTemplateOpenshiftIoV1NamespacedTemplateResponse>;
  }

  /**
   * partially update the specified Template
   * @param body
   * @param name name of the Template
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchTemplateOpenshiftIoV1NamespacedTemplateResponse>
   */
  patchTemplateOpenshiftIoV1NamespacedTemplate(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchTemplateOpenshiftIoV1NamespacedTemplateOptionalParams): Promise<Models.PatchTemplateOpenshiftIoV1NamespacedTemplateResponse>;
  /**
   * @param body
   * @param name name of the Template
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  patchTemplateOpenshiftIoV1NamespacedTemplate(body: any, name: string, namespace: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapitemplatev1Template>): void;
  /**
   * @param body
   * @param name name of the Template
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  patchTemplateOpenshiftIoV1NamespacedTemplate(body: any, name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesPatchTemplateOpenshiftIoV1NamespacedTemplateOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapitemplatev1Template>): void;
  patchTemplateOpenshiftIoV1NamespacedTemplate(body: any, name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesPatchTemplateOpenshiftIoV1NamespacedTemplateOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapitemplatev1Template>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapitemplatev1Template>): Promise<Models.PatchTemplateOpenshiftIoV1NamespacedTemplateResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        namespace,
        options
      },
      patchTemplateOpenshiftIoV1NamespacedTemplateOperationSpec,
      callback) as Promise<Models.PatchTemplateOpenshiftIoV1NamespacedTemplateResponse>;
  }

  /**
   * list or watch objects of kind TemplateInstance
   * @param [options] The optional parameters
   * @returns Promise<Models.ListTemplateOpenshiftIoV1TemplateInstanceForAllNamespacesResponse>
   */
  listTemplateOpenshiftIoV1TemplateInstanceForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListTemplateOpenshiftIoV1TemplateInstanceForAllNamespacesOptionalParams): Promise<Models.ListTemplateOpenshiftIoV1TemplateInstanceForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  listTemplateOpenshiftIoV1TemplateInstanceForAllNamespaces(callback: msRest.ServiceCallback<Models.Comgithubopenshiftapitemplatev1TemplateInstanceList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listTemplateOpenshiftIoV1TemplateInstanceForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesListTemplateOpenshiftIoV1TemplateInstanceForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapitemplatev1TemplateInstanceList>): void;
  listTemplateOpenshiftIoV1TemplateInstanceForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListTemplateOpenshiftIoV1TemplateInstanceForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapitemplatev1TemplateInstanceList>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapitemplatev1TemplateInstanceList>): Promise<Models.ListTemplateOpenshiftIoV1TemplateInstanceForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listTemplateOpenshiftIoV1TemplateInstanceForAllNamespacesOperationSpec,
      callback) as Promise<Models.ListTemplateOpenshiftIoV1TemplateInstanceForAllNamespacesResponse>;
  }

  /**
   * list or watch objects of kind Template
   * @param [options] The optional parameters
   * @returns Promise<Models.ListTemplateOpenshiftIoV1TemplateForAllNamespacesResponse>
   */
  listTemplateOpenshiftIoV1TemplateForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListTemplateOpenshiftIoV1TemplateForAllNamespacesOptionalParams): Promise<Models.ListTemplateOpenshiftIoV1TemplateForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  listTemplateOpenshiftIoV1TemplateForAllNamespaces(callback: msRest.ServiceCallback<Models.Comgithubopenshiftapitemplatev1TemplateList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listTemplateOpenshiftIoV1TemplateForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesListTemplateOpenshiftIoV1TemplateForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapitemplatev1TemplateList>): void;
  listTemplateOpenshiftIoV1TemplateForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesListTemplateOpenshiftIoV1TemplateForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapitemplatev1TemplateList>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapitemplatev1TemplateList>): Promise<Models.ListTemplateOpenshiftIoV1TemplateForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listTemplateOpenshiftIoV1TemplateForAllNamespacesOperationSpec,
      callback) as Promise<Models.ListTemplateOpenshiftIoV1TemplateForAllNamespacesResponse>;
  }

  /**
   * watch individual changes to a list of BrokerTemplateInstance
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchTemplateOpenshiftIoV1BrokerTemplateInstanceListResponse>
   */
  watchTemplateOpenshiftIoV1BrokerTemplateInstanceList(options?: Models.OpenShiftAPIwithKubernetesWatchTemplateOpenshiftIoV1BrokerTemplateInstanceListOptionalParams): Promise<Models.WatchTemplateOpenshiftIoV1BrokerTemplateInstanceListResponse>;
  /**
   * @param callback The callback
   */
  watchTemplateOpenshiftIoV1BrokerTemplateInstanceList(callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  watchTemplateOpenshiftIoV1BrokerTemplateInstanceList(options: Models.OpenShiftAPIwithKubernetesWatchTemplateOpenshiftIoV1BrokerTemplateInstanceListOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchTemplateOpenshiftIoV1BrokerTemplateInstanceList(options?: Models.OpenShiftAPIwithKubernetesWatchTemplateOpenshiftIoV1BrokerTemplateInstanceListOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchTemplateOpenshiftIoV1BrokerTemplateInstanceListResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      watchTemplateOpenshiftIoV1BrokerTemplateInstanceListOperationSpec,
      callback) as Promise<Models.WatchTemplateOpenshiftIoV1BrokerTemplateInstanceListResponse>;
  }

  /**
   * watch changes to an object of kind BrokerTemplateInstance
   * @param name name of the BrokerTemplateInstance
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchTemplateOpenshiftIoV1BrokerTemplateInstanceResponse>
   */
  watchTemplateOpenshiftIoV1BrokerTemplateInstance(name: string, options?: Models.OpenShiftAPIwithKubernetesWatchTemplateOpenshiftIoV1BrokerTemplateInstanceOptionalParams): Promise<Models.WatchTemplateOpenshiftIoV1BrokerTemplateInstanceResponse>;
  /**
   * @param name name of the BrokerTemplateInstance
   * @param callback The callback
   */
  watchTemplateOpenshiftIoV1BrokerTemplateInstance(name: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param name name of the BrokerTemplateInstance
   * @param options The optional parameters
   * @param callback The callback
   */
  watchTemplateOpenshiftIoV1BrokerTemplateInstance(name: string, options: Models.OpenShiftAPIwithKubernetesWatchTemplateOpenshiftIoV1BrokerTemplateInstanceOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchTemplateOpenshiftIoV1BrokerTemplateInstance(name: string, options?: Models.OpenShiftAPIwithKubernetesWatchTemplateOpenshiftIoV1BrokerTemplateInstanceOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchTemplateOpenshiftIoV1BrokerTemplateInstanceResponse> {
    return this.sendOperationRequest(
      {
        name,
        options
      },
      watchTemplateOpenshiftIoV1BrokerTemplateInstanceOperationSpec,
      callback) as Promise<Models.WatchTemplateOpenshiftIoV1BrokerTemplateInstanceResponse>;
  }

  /**
   * watch individual changes to a list of TemplateInstance
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchTemplateOpenshiftIoV1NamespacedTemplateInstanceListResponse>
   */
  watchTemplateOpenshiftIoV1NamespacedTemplateInstanceList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchTemplateOpenshiftIoV1NamespacedTemplateInstanceListOptionalParams): Promise<Models.WatchTemplateOpenshiftIoV1NamespacedTemplateInstanceListResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchTemplateOpenshiftIoV1NamespacedTemplateInstanceList(namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchTemplateOpenshiftIoV1NamespacedTemplateInstanceList(namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchTemplateOpenshiftIoV1NamespacedTemplateInstanceListOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchTemplateOpenshiftIoV1NamespacedTemplateInstanceList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchTemplateOpenshiftIoV1NamespacedTemplateInstanceListOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchTemplateOpenshiftIoV1NamespacedTemplateInstanceListResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      watchTemplateOpenshiftIoV1NamespacedTemplateInstanceListOperationSpec,
      callback) as Promise<Models.WatchTemplateOpenshiftIoV1NamespacedTemplateInstanceListResponse>;
  }

  /**
   * watch changes to an object of kind TemplateInstance
   * @param name name of the TemplateInstance
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchTemplateOpenshiftIoV1NamespacedTemplateInstanceResponse>
   */
  watchTemplateOpenshiftIoV1NamespacedTemplateInstance(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchTemplateOpenshiftIoV1NamespacedTemplateInstanceOptionalParams): Promise<Models.WatchTemplateOpenshiftIoV1NamespacedTemplateInstanceResponse>;
  /**
   * @param name name of the TemplateInstance
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchTemplateOpenshiftIoV1NamespacedTemplateInstance(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param name name of the TemplateInstance
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchTemplateOpenshiftIoV1NamespacedTemplateInstance(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchTemplateOpenshiftIoV1NamespacedTemplateInstanceOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchTemplateOpenshiftIoV1NamespacedTemplateInstance(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchTemplateOpenshiftIoV1NamespacedTemplateInstanceOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchTemplateOpenshiftIoV1NamespacedTemplateInstanceResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      watchTemplateOpenshiftIoV1NamespacedTemplateInstanceOperationSpec,
      callback) as Promise<Models.WatchTemplateOpenshiftIoV1NamespacedTemplateInstanceResponse>;
  }

  /**
   * watch individual changes to a list of Template
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchTemplateOpenshiftIoV1NamespacedTemplateListResponse>
   */
  watchTemplateOpenshiftIoV1NamespacedTemplateList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchTemplateOpenshiftIoV1NamespacedTemplateListOptionalParams): Promise<Models.WatchTemplateOpenshiftIoV1NamespacedTemplateListResponse>;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchTemplateOpenshiftIoV1NamespacedTemplateList(namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchTemplateOpenshiftIoV1NamespacedTemplateList(namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchTemplateOpenshiftIoV1NamespacedTemplateListOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchTemplateOpenshiftIoV1NamespacedTemplateList(namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchTemplateOpenshiftIoV1NamespacedTemplateListOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchTemplateOpenshiftIoV1NamespacedTemplateListResponse> {
    return this.sendOperationRequest(
      {
        namespace,
        options
      },
      watchTemplateOpenshiftIoV1NamespacedTemplateListOperationSpec,
      callback) as Promise<Models.WatchTemplateOpenshiftIoV1NamespacedTemplateListResponse>;
  }

  /**
   * watch changes to an object of kind Template
   * @param name name of the Template
   * @param namespace object name and auth scope, such as for teams and projects
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchTemplateOpenshiftIoV1NamespacedTemplateResponse>
   */
  watchTemplateOpenshiftIoV1NamespacedTemplate(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchTemplateOpenshiftIoV1NamespacedTemplateOptionalParams): Promise<Models.WatchTemplateOpenshiftIoV1NamespacedTemplateResponse>;
  /**
   * @param name name of the Template
   * @param namespace object name and auth scope, such as for teams and projects
   * @param callback The callback
   */
  watchTemplateOpenshiftIoV1NamespacedTemplate(name: string, namespace: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param name name of the Template
   * @param namespace object name and auth scope, such as for teams and projects
   * @param options The optional parameters
   * @param callback The callback
   */
  watchTemplateOpenshiftIoV1NamespacedTemplate(name: string, namespace: string, options: Models.OpenShiftAPIwithKubernetesWatchTemplateOpenshiftIoV1NamespacedTemplateOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchTemplateOpenshiftIoV1NamespacedTemplate(name: string, namespace: string, options?: Models.OpenShiftAPIwithKubernetesWatchTemplateOpenshiftIoV1NamespacedTemplateOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchTemplateOpenshiftIoV1NamespacedTemplateResponse> {
    return this.sendOperationRequest(
      {
        name,
        namespace,
        options
      },
      watchTemplateOpenshiftIoV1NamespacedTemplateOperationSpec,
      callback) as Promise<Models.WatchTemplateOpenshiftIoV1NamespacedTemplateResponse>;
  }

  /**
   * watch individual changes to a list of TemplateInstance
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchTemplateOpenshiftIoV1TemplateInstanceListForAllNamespacesResponse>
   */
  watchTemplateOpenshiftIoV1TemplateInstanceListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchTemplateOpenshiftIoV1TemplateInstanceListForAllNamespacesOptionalParams): Promise<Models.WatchTemplateOpenshiftIoV1TemplateInstanceListForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  watchTemplateOpenshiftIoV1TemplateInstanceListForAllNamespaces(callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  watchTemplateOpenshiftIoV1TemplateInstanceListForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesWatchTemplateOpenshiftIoV1TemplateInstanceListForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchTemplateOpenshiftIoV1TemplateInstanceListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchTemplateOpenshiftIoV1TemplateInstanceListForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchTemplateOpenshiftIoV1TemplateInstanceListForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      watchTemplateOpenshiftIoV1TemplateInstanceListForAllNamespacesOperationSpec,
      callback) as Promise<Models.WatchTemplateOpenshiftIoV1TemplateInstanceListForAllNamespacesResponse>;
  }

  /**
   * watch individual changes to a list of Template
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchTemplateOpenshiftIoV1TemplateListForAllNamespacesResponse>
   */
  watchTemplateOpenshiftIoV1TemplateListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchTemplateOpenshiftIoV1TemplateListForAllNamespacesOptionalParams): Promise<Models.WatchTemplateOpenshiftIoV1TemplateListForAllNamespacesResponse>;
  /**
   * @param callback The callback
   */
  watchTemplateOpenshiftIoV1TemplateListForAllNamespaces(callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  watchTemplateOpenshiftIoV1TemplateListForAllNamespaces(options: Models.OpenShiftAPIwithKubernetesWatchTemplateOpenshiftIoV1TemplateListForAllNamespacesOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchTemplateOpenshiftIoV1TemplateListForAllNamespaces(options?: Models.OpenShiftAPIwithKubernetesWatchTemplateOpenshiftIoV1TemplateListForAllNamespacesOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchTemplateOpenshiftIoV1TemplateListForAllNamespacesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      watchTemplateOpenshiftIoV1TemplateListForAllNamespacesOperationSpec,
      callback) as Promise<Models.WatchTemplateOpenshiftIoV1TemplateListForAllNamespacesResponse>;
  }

  /**
   * get information of a group
   * @param [options] The optional parameters
   * @returns Promise<Models.GetUserOpenshiftIoAPIGroupResponse>
   */
  getUserOpenshiftIoAPIGroup(options?: msRest.RequestOptionsBase): Promise<Models.GetUserOpenshiftIoAPIGroupResponse>;
  /**
   * @param callback The callback
   */
  getUserOpenshiftIoAPIGroup(callback: msRest.ServiceCallback<Models.V1APIGroup>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getUserOpenshiftIoAPIGroup(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.V1APIGroup>): void;
  getUserOpenshiftIoAPIGroup(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.V1APIGroup>, callback?: msRest.ServiceCallback<Models.V1APIGroup>): Promise<Models.GetUserOpenshiftIoAPIGroupResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getUserOpenshiftIoAPIGroupOperationSpec,
      callback) as Promise<Models.GetUserOpenshiftIoAPIGroupResponse>;
  }

  /**
   * get available resources
   * @param [options] The optional parameters
   * @returns Promise<Models.GetUserOpenshiftIoV1APIResourcesResponse>
   */
  getUserOpenshiftIoV1APIResources(options?: msRest.RequestOptionsBase): Promise<Models.GetUserOpenshiftIoV1APIResourcesResponse>;
  /**
   * @param callback The callback
   */
  getUserOpenshiftIoV1APIResources(callback: msRest.ServiceCallback<Models.V1APIResourceList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getUserOpenshiftIoV1APIResources(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.V1APIResourceList>): void;
  getUserOpenshiftIoV1APIResources(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.V1APIResourceList>, callback?: msRest.ServiceCallback<Models.V1APIResourceList>): Promise<Models.GetUserOpenshiftIoV1APIResourcesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getUserOpenshiftIoV1APIResourcesOperationSpec,
      callback) as Promise<Models.GetUserOpenshiftIoV1APIResourcesResponse>;
  }

  /**
   * list or watch objects of kind Group
   * @param [options] The optional parameters
   * @returns Promise<Models.ListUserOpenshiftIoV1GroupResponse>
   */
  listUserOpenshiftIoV1Group(options?: Models.OpenShiftAPIwithKubernetesListUserOpenshiftIoV1GroupOptionalParams): Promise<Models.ListUserOpenshiftIoV1GroupResponse>;
  /**
   * @param callback The callback
   */
  listUserOpenshiftIoV1Group(callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiuserv1GroupList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listUserOpenshiftIoV1Group(options: Models.OpenShiftAPIwithKubernetesListUserOpenshiftIoV1GroupOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiuserv1GroupList>): void;
  listUserOpenshiftIoV1Group(options?: Models.OpenShiftAPIwithKubernetesListUserOpenshiftIoV1GroupOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiuserv1GroupList>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiuserv1GroupList>): Promise<Models.ListUserOpenshiftIoV1GroupResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listUserOpenshiftIoV1GroupOperationSpec,
      callback) as Promise<Models.ListUserOpenshiftIoV1GroupResponse>;
  }

  /**
   * create a Group
   * @param body
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateUserOpenshiftIoV1GroupResponse>
   */
  createUserOpenshiftIoV1Group(body: Models.Comgithubopenshiftapiuserv1Group, options?: Models.OpenShiftAPIwithKubernetesCreateUserOpenshiftIoV1GroupOptionalParams): Promise<Models.CreateUserOpenshiftIoV1GroupResponse>;
  /**
   * @param body
   * @param callback The callback
   */
  createUserOpenshiftIoV1Group(body: Models.Comgithubopenshiftapiuserv1Group, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiuserv1Group>): void;
  /**
   * @param body
   * @param options The optional parameters
   * @param callback The callback
   */
  createUserOpenshiftIoV1Group(body: Models.Comgithubopenshiftapiuserv1Group, options: Models.OpenShiftAPIwithKubernetesCreateUserOpenshiftIoV1GroupOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiuserv1Group>): void;
  createUserOpenshiftIoV1Group(body: Models.Comgithubopenshiftapiuserv1Group, options?: Models.OpenShiftAPIwithKubernetesCreateUserOpenshiftIoV1GroupOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiuserv1Group>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiuserv1Group>): Promise<Models.CreateUserOpenshiftIoV1GroupResponse> {
    return this.sendOperationRequest(
      {
        body,
        options
      },
      createUserOpenshiftIoV1GroupOperationSpec,
      callback) as Promise<Models.CreateUserOpenshiftIoV1GroupResponse>;
  }

  /**
   * delete collection of Group
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteUserOpenshiftIoV1CollectionGroupResponse>
   */
  deleteUserOpenshiftIoV1CollectionGroup(options?: Models.OpenShiftAPIwithKubernetesDeleteUserOpenshiftIoV1CollectionGroupOptionalParams): Promise<Models.DeleteUserOpenshiftIoV1CollectionGroupResponse>;
  /**
   * @param callback The callback
   */
  deleteUserOpenshiftIoV1CollectionGroup(callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteUserOpenshiftIoV1CollectionGroup(options: Models.OpenShiftAPIwithKubernetesDeleteUserOpenshiftIoV1CollectionGroupOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteUserOpenshiftIoV1CollectionGroup(options?: Models.OpenShiftAPIwithKubernetesDeleteUserOpenshiftIoV1CollectionGroupOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteUserOpenshiftIoV1CollectionGroupResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      deleteUserOpenshiftIoV1CollectionGroupOperationSpec,
      callback) as Promise<Models.DeleteUserOpenshiftIoV1CollectionGroupResponse>;
  }

  /**
   * read the specified Group
   * @param name name of the Group
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadUserOpenshiftIoV1GroupResponse>
   */
  readUserOpenshiftIoV1Group(name: string, options?: Models.OpenShiftAPIwithKubernetesReadUserOpenshiftIoV1GroupOptionalParams): Promise<Models.ReadUserOpenshiftIoV1GroupResponse>;
  /**
   * @param name name of the Group
   * @param callback The callback
   */
  readUserOpenshiftIoV1Group(name: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiuserv1Group>): void;
  /**
   * @param name name of the Group
   * @param options The optional parameters
   * @param callback The callback
   */
  readUserOpenshiftIoV1Group(name: string, options: Models.OpenShiftAPIwithKubernetesReadUserOpenshiftIoV1GroupOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiuserv1Group>): void;
  readUserOpenshiftIoV1Group(name: string, options?: Models.OpenShiftAPIwithKubernetesReadUserOpenshiftIoV1GroupOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiuserv1Group>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiuserv1Group>): Promise<Models.ReadUserOpenshiftIoV1GroupResponse> {
    return this.sendOperationRequest(
      {
        name,
        options
      },
      readUserOpenshiftIoV1GroupOperationSpec,
      callback) as Promise<Models.ReadUserOpenshiftIoV1GroupResponse>;
  }

  /**
   * replace the specified Group
   * @param body
   * @param name name of the Group
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceUserOpenshiftIoV1GroupResponse>
   */
  replaceUserOpenshiftIoV1Group(body: Models.Comgithubopenshiftapiuserv1Group, name: string, options?: Models.OpenShiftAPIwithKubernetesReplaceUserOpenshiftIoV1GroupOptionalParams): Promise<Models.ReplaceUserOpenshiftIoV1GroupResponse>;
  /**
   * @param body
   * @param name name of the Group
   * @param callback The callback
   */
  replaceUserOpenshiftIoV1Group(body: Models.Comgithubopenshiftapiuserv1Group, name: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiuserv1Group>): void;
  /**
   * @param body
   * @param name name of the Group
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceUserOpenshiftIoV1Group(body: Models.Comgithubopenshiftapiuserv1Group, name: string, options: Models.OpenShiftAPIwithKubernetesReplaceUserOpenshiftIoV1GroupOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiuserv1Group>): void;
  replaceUserOpenshiftIoV1Group(body: Models.Comgithubopenshiftapiuserv1Group, name: string, options?: Models.OpenShiftAPIwithKubernetesReplaceUserOpenshiftIoV1GroupOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiuserv1Group>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiuserv1Group>): Promise<Models.ReplaceUserOpenshiftIoV1GroupResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      replaceUserOpenshiftIoV1GroupOperationSpec,
      callback) as Promise<Models.ReplaceUserOpenshiftIoV1GroupResponse>;
  }

  /**
   * delete a Group
   * @param body
   * @param name name of the Group
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteUserOpenshiftIoV1GroupResponse>
   */
  deleteUserOpenshiftIoV1Group(body: Models.V1DeleteOptions, name: string, options?: Models.OpenShiftAPIwithKubernetesDeleteUserOpenshiftIoV1GroupOptionalParams): Promise<Models.DeleteUserOpenshiftIoV1GroupResponse>;
  /**
   * @param body
   * @param name name of the Group
   * @param callback The callback
   */
  deleteUserOpenshiftIoV1Group(body: Models.V1DeleteOptions, name: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param name name of the Group
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteUserOpenshiftIoV1Group(body: Models.V1DeleteOptions, name: string, options: Models.OpenShiftAPIwithKubernetesDeleteUserOpenshiftIoV1GroupOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteUserOpenshiftIoV1Group(body: Models.V1DeleteOptions, name: string, options?: Models.OpenShiftAPIwithKubernetesDeleteUserOpenshiftIoV1GroupOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteUserOpenshiftIoV1GroupResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      deleteUserOpenshiftIoV1GroupOperationSpec,
      callback) as Promise<Models.DeleteUserOpenshiftIoV1GroupResponse>;
  }

  /**
   * partially update the specified Group
   * @param body
   * @param name name of the Group
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchUserOpenshiftIoV1GroupResponse>
   */
  patchUserOpenshiftIoV1Group(body: any, name: string, options?: Models.OpenShiftAPIwithKubernetesPatchUserOpenshiftIoV1GroupOptionalParams): Promise<Models.PatchUserOpenshiftIoV1GroupResponse>;
  /**
   * @param body
   * @param name name of the Group
   * @param callback The callback
   */
  patchUserOpenshiftIoV1Group(body: any, name: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiuserv1Group>): void;
  /**
   * @param body
   * @param name name of the Group
   * @param options The optional parameters
   * @param callback The callback
   */
  patchUserOpenshiftIoV1Group(body: any, name: string, options: Models.OpenShiftAPIwithKubernetesPatchUserOpenshiftIoV1GroupOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiuserv1Group>): void;
  patchUserOpenshiftIoV1Group(body: any, name: string, options?: Models.OpenShiftAPIwithKubernetesPatchUserOpenshiftIoV1GroupOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiuserv1Group>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiuserv1Group>): Promise<Models.PatchUserOpenshiftIoV1GroupResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      patchUserOpenshiftIoV1GroupOperationSpec,
      callback) as Promise<Models.PatchUserOpenshiftIoV1GroupResponse>;
  }

  /**
   * list or watch objects of kind Identity
   * @param [options] The optional parameters
   * @returns Promise<Models.ListUserOpenshiftIoV1IdentityResponse>
   */
  listUserOpenshiftIoV1Identity(options?: Models.OpenShiftAPIwithKubernetesListUserOpenshiftIoV1IdentityOptionalParams): Promise<Models.ListUserOpenshiftIoV1IdentityResponse>;
  /**
   * @param callback The callback
   */
  listUserOpenshiftIoV1Identity(callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiuserv1IdentityList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listUserOpenshiftIoV1Identity(options: Models.OpenShiftAPIwithKubernetesListUserOpenshiftIoV1IdentityOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiuserv1IdentityList>): void;
  listUserOpenshiftIoV1Identity(options?: Models.OpenShiftAPIwithKubernetesListUserOpenshiftIoV1IdentityOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiuserv1IdentityList>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiuserv1IdentityList>): Promise<Models.ListUserOpenshiftIoV1IdentityResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listUserOpenshiftIoV1IdentityOperationSpec,
      callback) as Promise<Models.ListUserOpenshiftIoV1IdentityResponse>;
  }

  /**
   * create an Identity
   * @param body
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateUserOpenshiftIoV1IdentityResponse>
   */
  createUserOpenshiftIoV1Identity(body: Models.Comgithubopenshiftapiuserv1Identity, options?: Models.OpenShiftAPIwithKubernetesCreateUserOpenshiftIoV1IdentityOptionalParams): Promise<Models.CreateUserOpenshiftIoV1IdentityResponse>;
  /**
   * @param body
   * @param callback The callback
   */
  createUserOpenshiftIoV1Identity(body: Models.Comgithubopenshiftapiuserv1Identity, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiuserv1Identity>): void;
  /**
   * @param body
   * @param options The optional parameters
   * @param callback The callback
   */
  createUserOpenshiftIoV1Identity(body: Models.Comgithubopenshiftapiuserv1Identity, options: Models.OpenShiftAPIwithKubernetesCreateUserOpenshiftIoV1IdentityOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiuserv1Identity>): void;
  createUserOpenshiftIoV1Identity(body: Models.Comgithubopenshiftapiuserv1Identity, options?: Models.OpenShiftAPIwithKubernetesCreateUserOpenshiftIoV1IdentityOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiuserv1Identity>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiuserv1Identity>): Promise<Models.CreateUserOpenshiftIoV1IdentityResponse> {
    return this.sendOperationRequest(
      {
        body,
        options
      },
      createUserOpenshiftIoV1IdentityOperationSpec,
      callback) as Promise<Models.CreateUserOpenshiftIoV1IdentityResponse>;
  }

  /**
   * delete collection of Identity
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteUserOpenshiftIoV1CollectionIdentityResponse>
   */
  deleteUserOpenshiftIoV1CollectionIdentity(options?: Models.OpenShiftAPIwithKubernetesDeleteUserOpenshiftIoV1CollectionIdentityOptionalParams): Promise<Models.DeleteUserOpenshiftIoV1CollectionIdentityResponse>;
  /**
   * @param callback The callback
   */
  deleteUserOpenshiftIoV1CollectionIdentity(callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteUserOpenshiftIoV1CollectionIdentity(options: Models.OpenShiftAPIwithKubernetesDeleteUserOpenshiftIoV1CollectionIdentityOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteUserOpenshiftIoV1CollectionIdentity(options?: Models.OpenShiftAPIwithKubernetesDeleteUserOpenshiftIoV1CollectionIdentityOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteUserOpenshiftIoV1CollectionIdentityResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      deleteUserOpenshiftIoV1CollectionIdentityOperationSpec,
      callback) as Promise<Models.DeleteUserOpenshiftIoV1CollectionIdentityResponse>;
  }

  /**
   * read the specified Identity
   * @param name name of the Identity
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadUserOpenshiftIoV1IdentityResponse>
   */
  readUserOpenshiftIoV1Identity(name: string, options?: Models.OpenShiftAPIwithKubernetesReadUserOpenshiftIoV1IdentityOptionalParams): Promise<Models.ReadUserOpenshiftIoV1IdentityResponse>;
  /**
   * @param name name of the Identity
   * @param callback The callback
   */
  readUserOpenshiftIoV1Identity(name: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiuserv1Identity>): void;
  /**
   * @param name name of the Identity
   * @param options The optional parameters
   * @param callback The callback
   */
  readUserOpenshiftIoV1Identity(name: string, options: Models.OpenShiftAPIwithKubernetesReadUserOpenshiftIoV1IdentityOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiuserv1Identity>): void;
  readUserOpenshiftIoV1Identity(name: string, options?: Models.OpenShiftAPIwithKubernetesReadUserOpenshiftIoV1IdentityOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiuserv1Identity>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiuserv1Identity>): Promise<Models.ReadUserOpenshiftIoV1IdentityResponse> {
    return this.sendOperationRequest(
      {
        name,
        options
      },
      readUserOpenshiftIoV1IdentityOperationSpec,
      callback) as Promise<Models.ReadUserOpenshiftIoV1IdentityResponse>;
  }

  /**
   * replace the specified Identity
   * @param body
   * @param name name of the Identity
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceUserOpenshiftIoV1IdentityResponse>
   */
  replaceUserOpenshiftIoV1Identity(body: Models.Comgithubopenshiftapiuserv1Identity, name: string, options?: Models.OpenShiftAPIwithKubernetesReplaceUserOpenshiftIoV1IdentityOptionalParams): Promise<Models.ReplaceUserOpenshiftIoV1IdentityResponse>;
  /**
   * @param body
   * @param name name of the Identity
   * @param callback The callback
   */
  replaceUserOpenshiftIoV1Identity(body: Models.Comgithubopenshiftapiuserv1Identity, name: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiuserv1Identity>): void;
  /**
   * @param body
   * @param name name of the Identity
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceUserOpenshiftIoV1Identity(body: Models.Comgithubopenshiftapiuserv1Identity, name: string, options: Models.OpenShiftAPIwithKubernetesReplaceUserOpenshiftIoV1IdentityOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiuserv1Identity>): void;
  replaceUserOpenshiftIoV1Identity(body: Models.Comgithubopenshiftapiuserv1Identity, name: string, options?: Models.OpenShiftAPIwithKubernetesReplaceUserOpenshiftIoV1IdentityOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiuserv1Identity>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiuserv1Identity>): Promise<Models.ReplaceUserOpenshiftIoV1IdentityResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      replaceUserOpenshiftIoV1IdentityOperationSpec,
      callback) as Promise<Models.ReplaceUserOpenshiftIoV1IdentityResponse>;
  }

  /**
   * delete an Identity
   * @param body
   * @param name name of the Identity
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteUserOpenshiftIoV1IdentityResponse>
   */
  deleteUserOpenshiftIoV1Identity(body: Models.V1DeleteOptions, name: string, options?: Models.OpenShiftAPIwithKubernetesDeleteUserOpenshiftIoV1IdentityOptionalParams): Promise<Models.DeleteUserOpenshiftIoV1IdentityResponse>;
  /**
   * @param body
   * @param name name of the Identity
   * @param callback The callback
   */
  deleteUserOpenshiftIoV1Identity(body: Models.V1DeleteOptions, name: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param name name of the Identity
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteUserOpenshiftIoV1Identity(body: Models.V1DeleteOptions, name: string, options: Models.OpenShiftAPIwithKubernetesDeleteUserOpenshiftIoV1IdentityOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteUserOpenshiftIoV1Identity(body: Models.V1DeleteOptions, name: string, options?: Models.OpenShiftAPIwithKubernetesDeleteUserOpenshiftIoV1IdentityOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteUserOpenshiftIoV1IdentityResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      deleteUserOpenshiftIoV1IdentityOperationSpec,
      callback) as Promise<Models.DeleteUserOpenshiftIoV1IdentityResponse>;
  }

  /**
   * partially update the specified Identity
   * @param body
   * @param name name of the Identity
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchUserOpenshiftIoV1IdentityResponse>
   */
  patchUserOpenshiftIoV1Identity(body: any, name: string, options?: Models.OpenShiftAPIwithKubernetesPatchUserOpenshiftIoV1IdentityOptionalParams): Promise<Models.PatchUserOpenshiftIoV1IdentityResponse>;
  /**
   * @param body
   * @param name name of the Identity
   * @param callback The callback
   */
  patchUserOpenshiftIoV1Identity(body: any, name: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiuserv1Identity>): void;
  /**
   * @param body
   * @param name name of the Identity
   * @param options The optional parameters
   * @param callback The callback
   */
  patchUserOpenshiftIoV1Identity(body: any, name: string, options: Models.OpenShiftAPIwithKubernetesPatchUserOpenshiftIoV1IdentityOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiuserv1Identity>): void;
  patchUserOpenshiftIoV1Identity(body: any, name: string, options?: Models.OpenShiftAPIwithKubernetesPatchUserOpenshiftIoV1IdentityOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiuserv1Identity>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiuserv1Identity>): Promise<Models.PatchUserOpenshiftIoV1IdentityResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      patchUserOpenshiftIoV1IdentityOperationSpec,
      callback) as Promise<Models.PatchUserOpenshiftIoV1IdentityResponse>;
  }

  /**
   * create an UserIdentityMapping
   * @param body
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateUserOpenshiftIoV1UserIdentityMappingResponse>
   */
  createUserOpenshiftIoV1UserIdentityMapping(body: Models.Comgithubopenshiftapiuserv1UserIdentityMapping, options?: Models.OpenShiftAPIwithKubernetesCreateUserOpenshiftIoV1UserIdentityMappingOptionalParams): Promise<Models.CreateUserOpenshiftIoV1UserIdentityMappingResponse>;
  /**
   * @param body
   * @param callback The callback
   */
  createUserOpenshiftIoV1UserIdentityMapping(body: Models.Comgithubopenshiftapiuserv1UserIdentityMapping, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiuserv1UserIdentityMapping>): void;
  /**
   * @param body
   * @param options The optional parameters
   * @param callback The callback
   */
  createUserOpenshiftIoV1UserIdentityMapping(body: Models.Comgithubopenshiftapiuserv1UserIdentityMapping, options: Models.OpenShiftAPIwithKubernetesCreateUserOpenshiftIoV1UserIdentityMappingOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiuserv1UserIdentityMapping>): void;
  createUserOpenshiftIoV1UserIdentityMapping(body: Models.Comgithubopenshiftapiuserv1UserIdentityMapping, options?: Models.OpenShiftAPIwithKubernetesCreateUserOpenshiftIoV1UserIdentityMappingOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiuserv1UserIdentityMapping>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiuserv1UserIdentityMapping>): Promise<Models.CreateUserOpenshiftIoV1UserIdentityMappingResponse> {
    return this.sendOperationRequest(
      {
        body,
        options
      },
      createUserOpenshiftIoV1UserIdentityMappingOperationSpec,
      callback) as Promise<Models.CreateUserOpenshiftIoV1UserIdentityMappingResponse>;
  }

  /**
   * read the specified UserIdentityMapping
   * @param name name of the UserIdentityMapping
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadUserOpenshiftIoV1UserIdentityMappingResponse>
   */
  readUserOpenshiftIoV1UserIdentityMapping(name: string, options?: Models.OpenShiftAPIwithKubernetesReadUserOpenshiftIoV1UserIdentityMappingOptionalParams): Promise<Models.ReadUserOpenshiftIoV1UserIdentityMappingResponse>;
  /**
   * @param name name of the UserIdentityMapping
   * @param callback The callback
   */
  readUserOpenshiftIoV1UserIdentityMapping(name: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiuserv1UserIdentityMapping>): void;
  /**
   * @param name name of the UserIdentityMapping
   * @param options The optional parameters
   * @param callback The callback
   */
  readUserOpenshiftIoV1UserIdentityMapping(name: string, options: Models.OpenShiftAPIwithKubernetesReadUserOpenshiftIoV1UserIdentityMappingOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiuserv1UserIdentityMapping>): void;
  readUserOpenshiftIoV1UserIdentityMapping(name: string, options?: Models.OpenShiftAPIwithKubernetesReadUserOpenshiftIoV1UserIdentityMappingOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiuserv1UserIdentityMapping>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiuserv1UserIdentityMapping>): Promise<Models.ReadUserOpenshiftIoV1UserIdentityMappingResponse> {
    return this.sendOperationRequest(
      {
        name,
        options
      },
      readUserOpenshiftIoV1UserIdentityMappingOperationSpec,
      callback) as Promise<Models.ReadUserOpenshiftIoV1UserIdentityMappingResponse>;
  }

  /**
   * replace the specified UserIdentityMapping
   * @param body
   * @param name name of the UserIdentityMapping
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceUserOpenshiftIoV1UserIdentityMappingResponse>
   */
  replaceUserOpenshiftIoV1UserIdentityMapping(body: Models.Comgithubopenshiftapiuserv1UserIdentityMapping, name: string, options?: Models.OpenShiftAPIwithKubernetesReplaceUserOpenshiftIoV1UserIdentityMappingOptionalParams): Promise<Models.ReplaceUserOpenshiftIoV1UserIdentityMappingResponse>;
  /**
   * @param body
   * @param name name of the UserIdentityMapping
   * @param callback The callback
   */
  replaceUserOpenshiftIoV1UserIdentityMapping(body: Models.Comgithubopenshiftapiuserv1UserIdentityMapping, name: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiuserv1UserIdentityMapping>): void;
  /**
   * @param body
   * @param name name of the UserIdentityMapping
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceUserOpenshiftIoV1UserIdentityMapping(body: Models.Comgithubopenshiftapiuserv1UserIdentityMapping, name: string, options: Models.OpenShiftAPIwithKubernetesReplaceUserOpenshiftIoV1UserIdentityMappingOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiuserv1UserIdentityMapping>): void;
  replaceUserOpenshiftIoV1UserIdentityMapping(body: Models.Comgithubopenshiftapiuserv1UserIdentityMapping, name: string, options?: Models.OpenShiftAPIwithKubernetesReplaceUserOpenshiftIoV1UserIdentityMappingOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiuserv1UserIdentityMapping>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiuserv1UserIdentityMapping>): Promise<Models.ReplaceUserOpenshiftIoV1UserIdentityMappingResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      replaceUserOpenshiftIoV1UserIdentityMappingOperationSpec,
      callback) as Promise<Models.ReplaceUserOpenshiftIoV1UserIdentityMappingResponse>;
  }

  /**
   * delete an UserIdentityMapping
   * @param body
   * @param name name of the UserIdentityMapping
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteUserOpenshiftIoV1UserIdentityMappingResponse>
   */
  deleteUserOpenshiftIoV1UserIdentityMapping(body: Models.V1DeleteOptions, name: string, options?: Models.OpenShiftAPIwithKubernetesDeleteUserOpenshiftIoV1UserIdentityMappingOptionalParams): Promise<Models.DeleteUserOpenshiftIoV1UserIdentityMappingResponse>;
  /**
   * @param body
   * @param name name of the UserIdentityMapping
   * @param callback The callback
   */
  deleteUserOpenshiftIoV1UserIdentityMapping(body: Models.V1DeleteOptions, name: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param name name of the UserIdentityMapping
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteUserOpenshiftIoV1UserIdentityMapping(body: Models.V1DeleteOptions, name: string, options: Models.OpenShiftAPIwithKubernetesDeleteUserOpenshiftIoV1UserIdentityMappingOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteUserOpenshiftIoV1UserIdentityMapping(body: Models.V1DeleteOptions, name: string, options?: Models.OpenShiftAPIwithKubernetesDeleteUserOpenshiftIoV1UserIdentityMappingOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteUserOpenshiftIoV1UserIdentityMappingResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      deleteUserOpenshiftIoV1UserIdentityMappingOperationSpec,
      callback) as Promise<Models.DeleteUserOpenshiftIoV1UserIdentityMappingResponse>;
  }

  /**
   * partially update the specified UserIdentityMapping
   * @param body
   * @param name name of the UserIdentityMapping
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchUserOpenshiftIoV1UserIdentityMappingResponse>
   */
  patchUserOpenshiftIoV1UserIdentityMapping(body: any, name: string, options?: Models.OpenShiftAPIwithKubernetesPatchUserOpenshiftIoV1UserIdentityMappingOptionalParams): Promise<Models.PatchUserOpenshiftIoV1UserIdentityMappingResponse>;
  /**
   * @param body
   * @param name name of the UserIdentityMapping
   * @param callback The callback
   */
  patchUserOpenshiftIoV1UserIdentityMapping(body: any, name: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiuserv1UserIdentityMapping>): void;
  /**
   * @param body
   * @param name name of the UserIdentityMapping
   * @param options The optional parameters
   * @param callback The callback
   */
  patchUserOpenshiftIoV1UserIdentityMapping(body: any, name: string, options: Models.OpenShiftAPIwithKubernetesPatchUserOpenshiftIoV1UserIdentityMappingOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiuserv1UserIdentityMapping>): void;
  patchUserOpenshiftIoV1UserIdentityMapping(body: any, name: string, options?: Models.OpenShiftAPIwithKubernetesPatchUserOpenshiftIoV1UserIdentityMappingOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiuserv1UserIdentityMapping>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiuserv1UserIdentityMapping>): Promise<Models.PatchUserOpenshiftIoV1UserIdentityMappingResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      patchUserOpenshiftIoV1UserIdentityMappingOperationSpec,
      callback) as Promise<Models.PatchUserOpenshiftIoV1UserIdentityMappingResponse>;
  }

  /**
   * list or watch objects of kind User
   * @param [options] The optional parameters
   * @returns Promise<Models.ListUserOpenshiftIoV1UserResponse>
   */
  listUserOpenshiftIoV1User(options?: Models.OpenShiftAPIwithKubernetesListUserOpenshiftIoV1UserOptionalParams): Promise<Models.ListUserOpenshiftIoV1UserResponse>;
  /**
   * @param callback The callback
   */
  listUserOpenshiftIoV1User(callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiuserv1UserList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listUserOpenshiftIoV1User(options: Models.OpenShiftAPIwithKubernetesListUserOpenshiftIoV1UserOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiuserv1UserList>): void;
  listUserOpenshiftIoV1User(options?: Models.OpenShiftAPIwithKubernetesListUserOpenshiftIoV1UserOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiuserv1UserList>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiuserv1UserList>): Promise<Models.ListUserOpenshiftIoV1UserResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listUserOpenshiftIoV1UserOperationSpec,
      callback) as Promise<Models.ListUserOpenshiftIoV1UserResponse>;
  }

  /**
   * create an User
   * @param body
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateUserOpenshiftIoV1UserResponse>
   */
  createUserOpenshiftIoV1User(body: Models.Comgithubopenshiftapiuserv1User, options?: Models.OpenShiftAPIwithKubernetesCreateUserOpenshiftIoV1UserOptionalParams): Promise<Models.CreateUserOpenshiftIoV1UserResponse>;
  /**
   * @param body
   * @param callback The callback
   */
  createUserOpenshiftIoV1User(body: Models.Comgithubopenshiftapiuserv1User, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiuserv1User>): void;
  /**
   * @param body
   * @param options The optional parameters
   * @param callback The callback
   */
  createUserOpenshiftIoV1User(body: Models.Comgithubopenshiftapiuserv1User, options: Models.OpenShiftAPIwithKubernetesCreateUserOpenshiftIoV1UserOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiuserv1User>): void;
  createUserOpenshiftIoV1User(body: Models.Comgithubopenshiftapiuserv1User, options?: Models.OpenShiftAPIwithKubernetesCreateUserOpenshiftIoV1UserOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiuserv1User>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiuserv1User>): Promise<Models.CreateUserOpenshiftIoV1UserResponse> {
    return this.sendOperationRequest(
      {
        body,
        options
      },
      createUserOpenshiftIoV1UserOperationSpec,
      callback) as Promise<Models.CreateUserOpenshiftIoV1UserResponse>;
  }

  /**
   * delete collection of User
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteUserOpenshiftIoV1CollectionUserResponse>
   */
  deleteUserOpenshiftIoV1CollectionUser(options?: Models.OpenShiftAPIwithKubernetesDeleteUserOpenshiftIoV1CollectionUserOptionalParams): Promise<Models.DeleteUserOpenshiftIoV1CollectionUserResponse>;
  /**
   * @param callback The callback
   */
  deleteUserOpenshiftIoV1CollectionUser(callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteUserOpenshiftIoV1CollectionUser(options: Models.OpenShiftAPIwithKubernetesDeleteUserOpenshiftIoV1CollectionUserOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteUserOpenshiftIoV1CollectionUser(options?: Models.OpenShiftAPIwithKubernetesDeleteUserOpenshiftIoV1CollectionUserOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteUserOpenshiftIoV1CollectionUserResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      deleteUserOpenshiftIoV1CollectionUserOperationSpec,
      callback) as Promise<Models.DeleteUserOpenshiftIoV1CollectionUserResponse>;
  }

  /**
   * read the specified User
   * @param name name of the User
   * @param [options] The optional parameters
   * @returns Promise<Models.ReadUserOpenshiftIoV1UserResponse>
   */
  readUserOpenshiftIoV1User(name: string, options?: Models.OpenShiftAPIwithKubernetesReadUserOpenshiftIoV1UserOptionalParams): Promise<Models.ReadUserOpenshiftIoV1UserResponse>;
  /**
   * @param name name of the User
   * @param callback The callback
   */
  readUserOpenshiftIoV1User(name: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiuserv1User>): void;
  /**
   * @param name name of the User
   * @param options The optional parameters
   * @param callback The callback
   */
  readUserOpenshiftIoV1User(name: string, options: Models.OpenShiftAPIwithKubernetesReadUserOpenshiftIoV1UserOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiuserv1User>): void;
  readUserOpenshiftIoV1User(name: string, options?: Models.OpenShiftAPIwithKubernetesReadUserOpenshiftIoV1UserOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiuserv1User>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiuserv1User>): Promise<Models.ReadUserOpenshiftIoV1UserResponse> {
    return this.sendOperationRequest(
      {
        name,
        options
      },
      readUserOpenshiftIoV1UserOperationSpec,
      callback) as Promise<Models.ReadUserOpenshiftIoV1UserResponse>;
  }

  /**
   * replace the specified User
   * @param body
   * @param name name of the User
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceUserOpenshiftIoV1UserResponse>
   */
  replaceUserOpenshiftIoV1User(body: Models.Comgithubopenshiftapiuserv1User, name: string, options?: Models.OpenShiftAPIwithKubernetesReplaceUserOpenshiftIoV1UserOptionalParams): Promise<Models.ReplaceUserOpenshiftIoV1UserResponse>;
  /**
   * @param body
   * @param name name of the User
   * @param callback The callback
   */
  replaceUserOpenshiftIoV1User(body: Models.Comgithubopenshiftapiuserv1User, name: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiuserv1User>): void;
  /**
   * @param body
   * @param name name of the User
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceUserOpenshiftIoV1User(body: Models.Comgithubopenshiftapiuserv1User, name: string, options: Models.OpenShiftAPIwithKubernetesReplaceUserOpenshiftIoV1UserOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiuserv1User>): void;
  replaceUserOpenshiftIoV1User(body: Models.Comgithubopenshiftapiuserv1User, name: string, options?: Models.OpenShiftAPIwithKubernetesReplaceUserOpenshiftIoV1UserOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiuserv1User>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiuserv1User>): Promise<Models.ReplaceUserOpenshiftIoV1UserResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      replaceUserOpenshiftIoV1UserOperationSpec,
      callback) as Promise<Models.ReplaceUserOpenshiftIoV1UserResponse>;
  }

  /**
   * delete an User
   * @param body
   * @param name name of the User
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteUserOpenshiftIoV1UserResponse>
   */
  deleteUserOpenshiftIoV1User(body: Models.V1DeleteOptions, name: string, options?: Models.OpenShiftAPIwithKubernetesDeleteUserOpenshiftIoV1UserOptionalParams): Promise<Models.DeleteUserOpenshiftIoV1UserResponse>;
  /**
   * @param body
   * @param name name of the User
   * @param callback The callback
   */
  deleteUserOpenshiftIoV1User(body: Models.V1DeleteOptions, name: string, callback: msRest.ServiceCallback<Models.V1Status>): void;
  /**
   * @param body
   * @param name name of the User
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteUserOpenshiftIoV1User(body: Models.V1DeleteOptions, name: string, options: Models.OpenShiftAPIwithKubernetesDeleteUserOpenshiftIoV1UserOptionalParams, callback: msRest.ServiceCallback<Models.V1Status>): void;
  deleteUserOpenshiftIoV1User(body: Models.V1DeleteOptions, name: string, options?: Models.OpenShiftAPIwithKubernetesDeleteUserOpenshiftIoV1UserOptionalParams | msRest.ServiceCallback<Models.V1Status>, callback?: msRest.ServiceCallback<Models.V1Status>): Promise<Models.DeleteUserOpenshiftIoV1UserResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      deleteUserOpenshiftIoV1UserOperationSpec,
      callback) as Promise<Models.DeleteUserOpenshiftIoV1UserResponse>;
  }

  /**
   * partially update the specified User
   * @param body
   * @param name name of the User
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchUserOpenshiftIoV1UserResponse>
   */
  patchUserOpenshiftIoV1User(body: any, name: string, options?: Models.OpenShiftAPIwithKubernetesPatchUserOpenshiftIoV1UserOptionalParams): Promise<Models.PatchUserOpenshiftIoV1UserResponse>;
  /**
   * @param body
   * @param name name of the User
   * @param callback The callback
   */
  patchUserOpenshiftIoV1User(body: any, name: string, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiuserv1User>): void;
  /**
   * @param body
   * @param name name of the User
   * @param options The optional parameters
   * @param callback The callback
   */
  patchUserOpenshiftIoV1User(body: any, name: string, options: Models.OpenShiftAPIwithKubernetesPatchUserOpenshiftIoV1UserOptionalParams, callback: msRest.ServiceCallback<Models.Comgithubopenshiftapiuserv1User>): void;
  patchUserOpenshiftIoV1User(body: any, name: string, options?: Models.OpenShiftAPIwithKubernetesPatchUserOpenshiftIoV1UserOptionalParams | msRest.ServiceCallback<Models.Comgithubopenshiftapiuserv1User>, callback?: msRest.ServiceCallback<Models.Comgithubopenshiftapiuserv1User>): Promise<Models.PatchUserOpenshiftIoV1UserResponse> {
    return this.sendOperationRequest(
      {
        body,
        name,
        options
      },
      patchUserOpenshiftIoV1UserOperationSpec,
      callback) as Promise<Models.PatchUserOpenshiftIoV1UserResponse>;
  }

  /**
   * watch individual changes to a list of Group
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchUserOpenshiftIoV1GroupListResponse>
   */
  watchUserOpenshiftIoV1GroupList(options?: Models.OpenShiftAPIwithKubernetesWatchUserOpenshiftIoV1GroupListOptionalParams): Promise<Models.WatchUserOpenshiftIoV1GroupListResponse>;
  /**
   * @param callback The callback
   */
  watchUserOpenshiftIoV1GroupList(callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  watchUserOpenshiftIoV1GroupList(options: Models.OpenShiftAPIwithKubernetesWatchUserOpenshiftIoV1GroupListOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchUserOpenshiftIoV1GroupList(options?: Models.OpenShiftAPIwithKubernetesWatchUserOpenshiftIoV1GroupListOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchUserOpenshiftIoV1GroupListResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      watchUserOpenshiftIoV1GroupListOperationSpec,
      callback) as Promise<Models.WatchUserOpenshiftIoV1GroupListResponse>;
  }

  /**
   * watch changes to an object of kind Group
   * @param name name of the Group
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchUserOpenshiftIoV1GroupResponse>
   */
  watchUserOpenshiftIoV1Group(name: string, options?: Models.OpenShiftAPIwithKubernetesWatchUserOpenshiftIoV1GroupOptionalParams): Promise<Models.WatchUserOpenshiftIoV1GroupResponse>;
  /**
   * @param name name of the Group
   * @param callback The callback
   */
  watchUserOpenshiftIoV1Group(name: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param name name of the Group
   * @param options The optional parameters
   * @param callback The callback
   */
  watchUserOpenshiftIoV1Group(name: string, options: Models.OpenShiftAPIwithKubernetesWatchUserOpenshiftIoV1GroupOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchUserOpenshiftIoV1Group(name: string, options?: Models.OpenShiftAPIwithKubernetesWatchUserOpenshiftIoV1GroupOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchUserOpenshiftIoV1GroupResponse> {
    return this.sendOperationRequest(
      {
        name,
        options
      },
      watchUserOpenshiftIoV1GroupOperationSpec,
      callback) as Promise<Models.WatchUserOpenshiftIoV1GroupResponse>;
  }

  /**
   * watch individual changes to a list of Identity
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchUserOpenshiftIoV1IdentityListResponse>
   */
  watchUserOpenshiftIoV1IdentityList(options?: Models.OpenShiftAPIwithKubernetesWatchUserOpenshiftIoV1IdentityListOptionalParams): Promise<Models.WatchUserOpenshiftIoV1IdentityListResponse>;
  /**
   * @param callback The callback
   */
  watchUserOpenshiftIoV1IdentityList(callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  watchUserOpenshiftIoV1IdentityList(options: Models.OpenShiftAPIwithKubernetesWatchUserOpenshiftIoV1IdentityListOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchUserOpenshiftIoV1IdentityList(options?: Models.OpenShiftAPIwithKubernetesWatchUserOpenshiftIoV1IdentityListOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchUserOpenshiftIoV1IdentityListResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      watchUserOpenshiftIoV1IdentityListOperationSpec,
      callback) as Promise<Models.WatchUserOpenshiftIoV1IdentityListResponse>;
  }

  /**
   * watch changes to an object of kind Identity
   * @param name name of the Identity
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchUserOpenshiftIoV1IdentityResponse>
   */
  watchUserOpenshiftIoV1Identity(name: string, options?: Models.OpenShiftAPIwithKubernetesWatchUserOpenshiftIoV1IdentityOptionalParams): Promise<Models.WatchUserOpenshiftIoV1IdentityResponse>;
  /**
   * @param name name of the Identity
   * @param callback The callback
   */
  watchUserOpenshiftIoV1Identity(name: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param name name of the Identity
   * @param options The optional parameters
   * @param callback The callback
   */
  watchUserOpenshiftIoV1Identity(name: string, options: Models.OpenShiftAPIwithKubernetesWatchUserOpenshiftIoV1IdentityOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchUserOpenshiftIoV1Identity(name: string, options?: Models.OpenShiftAPIwithKubernetesWatchUserOpenshiftIoV1IdentityOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchUserOpenshiftIoV1IdentityResponse> {
    return this.sendOperationRequest(
      {
        name,
        options
      },
      watchUserOpenshiftIoV1IdentityOperationSpec,
      callback) as Promise<Models.WatchUserOpenshiftIoV1IdentityResponse>;
  }

  /**
   * watch individual changes to a list of User
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchUserOpenshiftIoV1UserListResponse>
   */
  watchUserOpenshiftIoV1UserList(options?: Models.OpenShiftAPIwithKubernetesWatchUserOpenshiftIoV1UserListOptionalParams): Promise<Models.WatchUserOpenshiftIoV1UserListResponse>;
  /**
   * @param callback The callback
   */
  watchUserOpenshiftIoV1UserList(callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  watchUserOpenshiftIoV1UserList(options: Models.OpenShiftAPIwithKubernetesWatchUserOpenshiftIoV1UserListOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchUserOpenshiftIoV1UserList(options?: Models.OpenShiftAPIwithKubernetesWatchUserOpenshiftIoV1UserListOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchUserOpenshiftIoV1UserListResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      watchUserOpenshiftIoV1UserListOperationSpec,
      callback) as Promise<Models.WatchUserOpenshiftIoV1UserListResponse>;
  }

  /**
   * watch changes to an object of kind User
   * @param name name of the User
   * @param [options] The optional parameters
   * @returns Promise<Models.WatchUserOpenshiftIoV1UserResponse>
   */
  watchUserOpenshiftIoV1User(name: string, options?: Models.OpenShiftAPIwithKubernetesWatchUserOpenshiftIoV1UserOptionalParams): Promise<Models.WatchUserOpenshiftIoV1UserResponse>;
  /**
   * @param name name of the User
   * @param callback The callback
   */
  watchUserOpenshiftIoV1User(name: string, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  /**
   * @param name name of the User
   * @param options The optional parameters
   * @param callback The callback
   */
  watchUserOpenshiftIoV1User(name: string, options: Models.OpenShiftAPIwithKubernetesWatchUserOpenshiftIoV1UserOptionalParams, callback: msRest.ServiceCallback<Models.V1WatchEvent>): void;
  watchUserOpenshiftIoV1User(name: string, options?: Models.OpenShiftAPIwithKubernetesWatchUserOpenshiftIoV1UserOptionalParams | msRest.ServiceCallback<Models.V1WatchEvent>, callback?: msRest.ServiceCallback<Models.V1WatchEvent>): Promise<Models.WatchUserOpenshiftIoV1UserResponse> {
    return this.sendOperationRequest(
      {
        name,
        options
      },
      watchUserOpenshiftIoV1UserOperationSpec,
      callback) as Promise<Models.WatchUserOpenshiftIoV1UserResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getCoreLegacyAPIVersionsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/",
  responses: {
    200: {
      bodyMapper: Mappers.V1APIVersions
    },
    401: {},
    default: {}
  },
  serializer
};

const getCoreV1APIResourcesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/",
  responses: {
    200: {
      bodyMapper: Mappers.V1APIResourceList
    },
    401: {},
    default: {}
  },
  serializer
};

const listCoreV1ComponentStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/componentstatuses",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1ComponentStatusList
    },
    401: {},
    default: {}
  },
  serializer
};

const readCoreV1ComponentStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/componentstatuses/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1ComponentStatus
    },
    401: {},
    default: {}
  },
  serializer
};

const listCoreV1ConfigMapForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/configmaps",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1ConfigMapList
    },
    401: {},
    default: {}
  },
  serializer
};

const listCoreV1EndpointsForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/endpoints",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1EndpointsList
    },
    401: {},
    default: {}
  },
  serializer
};

const listCoreV1EventForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/events",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1EventList
    },
    401: {},
    default: {}
  },
  serializer
};

const listCoreV1LimitRangeForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/limitranges",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1LimitRangeList
    },
    401: {},
    default: {}
  },
  serializer
};

const listCoreV1NamespaceOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/namespaces",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1NamespaceList
    },
    401: {},
    default: {}
  },
  serializer
};

const createCoreV1NamespaceOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/v1/namespaces",
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1Namespace,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Namespace
    },
    201: {
      bodyMapper: Mappers.V1Namespace
    },
    202: {
      bodyMapper: Mappers.V1Namespace
    },
    401: {},
    default: {}
  },
  serializer
};

const createCoreV1NamespacedBindingOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/v1/namespaces/{namespace}/bindings",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1Binding,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Binding
    },
    201: {
      bodyMapper: Mappers.V1Binding
    },
    202: {
      bodyMapper: Mappers.V1Binding
    },
    401: {},
    default: {}
  },
  serializer
};

const listCoreV1NamespacedConfigMapOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/namespaces/{namespace}/configmaps",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1ConfigMapList
    },
    401: {},
    default: {}
  },
  serializer
};

const createCoreV1NamespacedConfigMapOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/v1/namespaces/{namespace}/configmaps",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1ConfigMap,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1ConfigMap
    },
    201: {
      bodyMapper: Mappers.V1ConfigMap
    },
    202: {
      bodyMapper: Mappers.V1ConfigMap
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteCoreV1CollectionNamespacedConfigMapOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "api/v1/namespaces/{namespace}/configmaps",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const readCoreV1NamespacedConfigMapOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/namespaces/{namespace}/configmaps/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.exact,
    Parameters.exportParameter,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1ConfigMap
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceCoreV1NamespacedConfigMapOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "api/v1/namespaces/{namespace}/configmaps/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1ConfigMap,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1ConfigMap
    },
    201: {
      bodyMapper: Mappers.V1ConfigMap
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteCoreV1NamespacedConfigMapOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "api/v1/namespaces/{namespace}/configmaps/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy,
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const patchCoreV1NamespacedConfigMapOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "api/v1/namespaces/{namespace}/configmaps/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.V1ConfigMap
    },
    401: {},
    default: {}
  },
  serializer
};

const listCoreV1NamespacedEndpointsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/namespaces/{namespace}/endpoints",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1EndpointsList
    },
    401: {},
    default: {}
  },
  serializer
};

const createCoreV1NamespacedEndpointsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/v1/namespaces/{namespace}/endpoints",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1Endpoints,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Endpoints
    },
    201: {
      bodyMapper: Mappers.V1Endpoints
    },
    202: {
      bodyMapper: Mappers.V1Endpoints
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteCoreV1CollectionNamespacedEndpointsOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "api/v1/namespaces/{namespace}/endpoints",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const readCoreV1NamespacedEndpointsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/namespaces/{namespace}/endpoints/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.exact,
    Parameters.exportParameter,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Endpoints
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceCoreV1NamespacedEndpointsOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "api/v1/namespaces/{namespace}/endpoints/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1Endpoints,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Endpoints
    },
    201: {
      bodyMapper: Mappers.V1Endpoints
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteCoreV1NamespacedEndpointsOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "api/v1/namespaces/{namespace}/endpoints/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy,
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const patchCoreV1NamespacedEndpointsOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "api/v1/namespaces/{namespace}/endpoints/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.V1Endpoints
    },
    401: {},
    default: {}
  },
  serializer
};

const listCoreV1NamespacedEventOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/namespaces/{namespace}/events",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1EventList
    },
    401: {},
    default: {}
  },
  serializer
};

const createCoreV1NamespacedEventOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/v1/namespaces/{namespace}/events",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1Event,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Event
    },
    201: {
      bodyMapper: Mappers.V1Event
    },
    202: {
      bodyMapper: Mappers.V1Event
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteCoreV1CollectionNamespacedEventOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "api/v1/namespaces/{namespace}/events",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const readCoreV1NamespacedEventOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/namespaces/{namespace}/events/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.exact,
    Parameters.exportParameter,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Event
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceCoreV1NamespacedEventOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "api/v1/namespaces/{namespace}/events/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1Event,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Event
    },
    201: {
      bodyMapper: Mappers.V1Event
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteCoreV1NamespacedEventOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "api/v1/namespaces/{namespace}/events/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy,
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const patchCoreV1NamespacedEventOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "api/v1/namespaces/{namespace}/events/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.V1Event
    },
    401: {},
    default: {}
  },
  serializer
};

const listCoreV1NamespacedLimitRangeOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/namespaces/{namespace}/limitranges",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1LimitRangeList
    },
    401: {},
    default: {}
  },
  serializer
};

const createCoreV1NamespacedLimitRangeOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/v1/namespaces/{namespace}/limitranges",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1LimitRange,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1LimitRange
    },
    201: {
      bodyMapper: Mappers.V1LimitRange
    },
    202: {
      bodyMapper: Mappers.V1LimitRange
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteCoreV1CollectionNamespacedLimitRangeOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "api/v1/namespaces/{namespace}/limitranges",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const readCoreV1NamespacedLimitRangeOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/namespaces/{namespace}/limitranges/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.exact,
    Parameters.exportParameter,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1LimitRange
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceCoreV1NamespacedLimitRangeOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "api/v1/namespaces/{namespace}/limitranges/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1LimitRange,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1LimitRange
    },
    201: {
      bodyMapper: Mappers.V1LimitRange
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteCoreV1NamespacedLimitRangeOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "api/v1/namespaces/{namespace}/limitranges/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy,
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const patchCoreV1NamespacedLimitRangeOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "api/v1/namespaces/{namespace}/limitranges/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.V1LimitRange
    },
    401: {},
    default: {}
  },
  serializer
};

const listCoreV1NamespacedPersistentVolumeClaimOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/namespaces/{namespace}/persistentvolumeclaims",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1PersistentVolumeClaimList
    },
    401: {},
    default: {}
  },
  serializer
};

const createCoreV1NamespacedPersistentVolumeClaimOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/v1/namespaces/{namespace}/persistentvolumeclaims",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1PersistentVolumeClaim,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1PersistentVolumeClaim
    },
    201: {
      bodyMapper: Mappers.V1PersistentVolumeClaim
    },
    202: {
      bodyMapper: Mappers.V1PersistentVolumeClaim
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteCoreV1CollectionNamespacedPersistentVolumeClaimOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "api/v1/namespaces/{namespace}/persistentvolumeclaims",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const readCoreV1NamespacedPersistentVolumeClaimOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.exact,
    Parameters.exportParameter,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1PersistentVolumeClaim
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceCoreV1NamespacedPersistentVolumeClaimOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1PersistentVolumeClaim,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1PersistentVolumeClaim
    },
    201: {
      bodyMapper: Mappers.V1PersistentVolumeClaim
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteCoreV1NamespacedPersistentVolumeClaimOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy,
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const patchCoreV1NamespacedPersistentVolumeClaimOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.V1PersistentVolumeClaim
    },
    401: {},
    default: {}
  },
  serializer
};

const readCoreV1NamespacedPersistentVolumeClaimStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}/status",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1PersistentVolumeClaim
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceCoreV1NamespacedPersistentVolumeClaimStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}/status",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1PersistentVolumeClaim,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1PersistentVolumeClaim
    },
    201: {
      bodyMapper: Mappers.V1PersistentVolumeClaim
    },
    401: {},
    default: {}
  },
  serializer
};

const patchCoreV1NamespacedPersistentVolumeClaimStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}/status",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.V1PersistentVolumeClaim
    },
    401: {},
    default: {}
  },
  serializer
};

const listCoreV1NamespacedPodOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/namespaces/{namespace}/pods",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1PodList
    },
    401: {},
    default: {}
  },
  serializer
};

const createCoreV1NamespacedPodOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/v1/namespaces/{namespace}/pods",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1Pod,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Pod
    },
    201: {
      bodyMapper: Mappers.V1Pod
    },
    202: {
      bodyMapper: Mappers.V1Pod
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteCoreV1CollectionNamespacedPodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "api/v1/namespaces/{namespace}/pods",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const readCoreV1NamespacedPodOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/namespaces/{namespace}/pods/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.exact,
    Parameters.exportParameter,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Pod
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceCoreV1NamespacedPodOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "api/v1/namespaces/{namespace}/pods/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1Pod,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Pod
    },
    201: {
      bodyMapper: Mappers.V1Pod
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteCoreV1NamespacedPodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "api/v1/namespaces/{namespace}/pods/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy,
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const patchCoreV1NamespacedPodOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "api/v1/namespaces/{namespace}/pods/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.V1Pod
    },
    401: {},
    default: {}
  },
  serializer
};

const connectCoreV1GetNamespacedPodAttachOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/namespaces/{namespace}/pods/{name}/attach",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.container,
    Parameters.stderr,
    Parameters.stdin,
    Parameters.stdout,
    Parameters.tty
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    401: {},
    default: {}
  },
  serializer
};

const connectCoreV1PostNamespacedPodAttachOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/v1/namespaces/{namespace}/pods/{name}/attach",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.container,
    Parameters.stderr,
    Parameters.stdin,
    Parameters.stdout,
    Parameters.tty
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    401: {},
    default: {}
  },
  serializer
};

const createCoreV1NamespacedPodBindingOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/v1/namespaces/{namespace}/pods/{name}/binding",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1Binding,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Binding
    },
    201: {
      bodyMapper: Mappers.V1Binding
    },
    202: {
      bodyMapper: Mappers.V1Binding
    },
    401: {},
    default: {}
  },
  serializer
};

const createCoreV1NamespacedPodEvictionOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/v1/namespaces/{namespace}/pods/{name}/eviction",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1beta1Eviction,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1Eviction
    },
    201: {
      bodyMapper: Mappers.V1beta1Eviction
    },
    202: {
      bodyMapper: Mappers.V1beta1Eviction
    },
    401: {},
    default: {}
  },
  serializer
};

const connectCoreV1GetNamespacedPodExecOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/namespaces/{namespace}/pods/{name}/exec",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.command,
    Parameters.container,
    Parameters.stderr,
    Parameters.stdin,
    Parameters.stdout,
    Parameters.tty
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    401: {},
    default: {}
  },
  serializer
};

const connectCoreV1PostNamespacedPodExecOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/v1/namespaces/{namespace}/pods/{name}/exec",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.command,
    Parameters.container,
    Parameters.stderr,
    Parameters.stdin,
    Parameters.stdout,
    Parameters.tty
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    401: {},
    default: {}
  },
  serializer
};

const readCoreV1NamespacedPodLogOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/namespaces/{namespace}/pods/{name}/log",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.container,
    Parameters.follow,
    Parameters.limitBytes,
    Parameters.pretty,
    Parameters.previous,
    Parameters.sinceSeconds,
    Parameters.tailLines,
    Parameters.timestamps
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    401: {},
    default: {}
  },
  serializer
};

const connectCoreV1GetNamespacedPodPortforwardOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/namespaces/{namespace}/pods/{name}/portforward",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.ports
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    401: {},
    default: {}
  },
  serializer
};

const connectCoreV1PostNamespacedPodPortforwardOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/v1/namespaces/{namespace}/pods/{name}/portforward",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.ports
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    401: {},
    default: {}
  },
  serializer
};

const connectCoreV1GetNamespacedPodProxyOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/namespaces/{namespace}/pods/{name}/proxy",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.path0
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    401: {},
    default: {}
  },
  serializer
};

const connectCoreV1PutNamespacedPodProxyOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "api/v1/namespaces/{namespace}/pods/{name}/proxy",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.path0
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    401: {},
    default: {}
  },
  serializer
};

const connectCoreV1PostNamespacedPodProxyOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/v1/namespaces/{namespace}/pods/{name}/proxy",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.path0
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    401: {},
    default: {}
  },
  serializer
};

const connectCoreV1DeleteNamespacedPodProxyOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "api/v1/namespaces/{namespace}/pods/{name}/proxy",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.path0
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    401: {},
    default: {}
  },
  serializer
};

const connectCoreV1HeadNamespacedPodProxyOperationSpec: msRest.OperationSpec = {
  httpMethod: "HEAD",
  path: "api/v1/namespaces/{namespace}/pods/{name}/proxy",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.path0
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    401: {},
    default: {}
  },
  serializer
};

const connectCoreV1PatchNamespacedPodProxyOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "api/v1/namespaces/{namespace}/pods/{name}/proxy",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.path0
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    401: {},
    default: {}
  },
  serializer
};

const connectCoreV1GetNamespacedPodProxyWithPathOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace,
    Parameters.path1
  ],
  queryParameters: [
    Parameters.path1
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    401: {},
    default: {}
  },
  serializer
};

const connectCoreV1PutNamespacedPodProxyWithPathOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace,
    Parameters.path1
  ],
  queryParameters: [
    Parameters.path1
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    401: {},
    default: {}
  },
  serializer
};

const connectCoreV1PostNamespacedPodProxyWithPathOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace,
    Parameters.path1
  ],
  queryParameters: [
    Parameters.path1
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    401: {},
    default: {}
  },
  serializer
};

const connectCoreV1DeleteNamespacedPodProxyWithPathOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace,
    Parameters.path1
  ],
  queryParameters: [
    Parameters.path1
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    401: {},
    default: {}
  },
  serializer
};

const connectCoreV1HeadNamespacedPodProxyWithPathOperationSpec: msRest.OperationSpec = {
  httpMethod: "HEAD",
  path: "api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace,
    Parameters.path1
  ],
  queryParameters: [
    Parameters.path1
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    401: {},
    default: {}
  },
  serializer
};

const connectCoreV1PatchNamespacedPodProxyWithPathOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace,
    Parameters.path1
  ],
  queryParameters: [
    Parameters.path1
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    401: {},
    default: {}
  },
  serializer
};

const readCoreV1NamespacedPodStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/namespaces/{namespace}/pods/{name}/status",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Pod
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceCoreV1NamespacedPodStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "api/v1/namespaces/{namespace}/pods/{name}/status",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1Pod,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Pod
    },
    201: {
      bodyMapper: Mappers.V1Pod
    },
    401: {},
    default: {}
  },
  serializer
};

const patchCoreV1NamespacedPodStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "api/v1/namespaces/{namespace}/pods/{name}/status",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.V1Pod
    },
    401: {},
    default: {}
  },
  serializer
};

const listCoreV1NamespacedPodTemplateOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/namespaces/{namespace}/podtemplates",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1PodTemplateList
    },
    401: {},
    default: {}
  },
  serializer
};

const createCoreV1NamespacedPodTemplateOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/v1/namespaces/{namespace}/podtemplates",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1PodTemplate,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1PodTemplate
    },
    201: {
      bodyMapper: Mappers.V1PodTemplate
    },
    202: {
      bodyMapper: Mappers.V1PodTemplate
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteCoreV1CollectionNamespacedPodTemplateOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "api/v1/namespaces/{namespace}/podtemplates",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const readCoreV1NamespacedPodTemplateOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/namespaces/{namespace}/podtemplates/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.exact,
    Parameters.exportParameter,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1PodTemplate
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceCoreV1NamespacedPodTemplateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "api/v1/namespaces/{namespace}/podtemplates/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1PodTemplate,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1PodTemplate
    },
    201: {
      bodyMapper: Mappers.V1PodTemplate
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteCoreV1NamespacedPodTemplateOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "api/v1/namespaces/{namespace}/podtemplates/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy,
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const patchCoreV1NamespacedPodTemplateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "api/v1/namespaces/{namespace}/podtemplates/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.V1PodTemplate
    },
    401: {},
    default: {}
  },
  serializer
};

const listCoreV1NamespacedReplicationControllerOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/namespaces/{namespace}/replicationcontrollers",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1ReplicationControllerList
    },
    401: {},
    default: {}
  },
  serializer
};

const createCoreV1NamespacedReplicationControllerOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/v1/namespaces/{namespace}/replicationcontrollers",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1ReplicationController,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1ReplicationController
    },
    201: {
      bodyMapper: Mappers.V1ReplicationController
    },
    202: {
      bodyMapper: Mappers.V1ReplicationController
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteCoreV1CollectionNamespacedReplicationControllerOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "api/v1/namespaces/{namespace}/replicationcontrollers",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const readCoreV1NamespacedReplicationControllerOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/namespaces/{namespace}/replicationcontrollers/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.exact,
    Parameters.exportParameter,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1ReplicationController
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceCoreV1NamespacedReplicationControllerOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "api/v1/namespaces/{namespace}/replicationcontrollers/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1ReplicationController,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1ReplicationController
    },
    201: {
      bodyMapper: Mappers.V1ReplicationController
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteCoreV1NamespacedReplicationControllerOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "api/v1/namespaces/{namespace}/replicationcontrollers/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy,
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const patchCoreV1NamespacedReplicationControllerOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "api/v1/namespaces/{namespace}/replicationcontrollers/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.V1ReplicationController
    },
    401: {},
    default: {}
  },
  serializer
};

const readCoreV1NamespacedReplicationControllerScaleOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/namespaces/{namespace}/replicationcontrollers/{name}/scale",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Scale
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceCoreV1NamespacedReplicationControllerScaleOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "api/v1/namespaces/{namespace}/replicationcontrollers/{name}/scale",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1Scale,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Scale
    },
    201: {
      bodyMapper: Mappers.V1Scale
    },
    401: {},
    default: {}
  },
  serializer
};

const patchCoreV1NamespacedReplicationControllerScaleOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "api/v1/namespaces/{namespace}/replicationcontrollers/{name}/scale",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.V1Scale
    },
    401: {},
    default: {}
  },
  serializer
};

const readCoreV1NamespacedReplicationControllerStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/namespaces/{namespace}/replicationcontrollers/{name}/status",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1ReplicationController
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceCoreV1NamespacedReplicationControllerStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "api/v1/namespaces/{namespace}/replicationcontrollers/{name}/status",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1ReplicationController,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1ReplicationController
    },
    201: {
      bodyMapper: Mappers.V1ReplicationController
    },
    401: {},
    default: {}
  },
  serializer
};

const patchCoreV1NamespacedReplicationControllerStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "api/v1/namespaces/{namespace}/replicationcontrollers/{name}/status",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.V1ReplicationController
    },
    401: {},
    default: {}
  },
  serializer
};

const listCoreV1NamespacedResourceQuotaOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/namespaces/{namespace}/resourcequotas",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1ResourceQuotaList
    },
    401: {},
    default: {}
  },
  serializer
};

const createCoreV1NamespacedResourceQuotaOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/v1/namespaces/{namespace}/resourcequotas",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1ResourceQuota,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1ResourceQuota
    },
    201: {
      bodyMapper: Mappers.V1ResourceQuota
    },
    202: {
      bodyMapper: Mappers.V1ResourceQuota
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteCoreV1CollectionNamespacedResourceQuotaOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "api/v1/namespaces/{namespace}/resourcequotas",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const readCoreV1NamespacedResourceQuotaOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/namespaces/{namespace}/resourcequotas/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.exact,
    Parameters.exportParameter,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1ResourceQuota
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceCoreV1NamespacedResourceQuotaOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "api/v1/namespaces/{namespace}/resourcequotas/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1ResourceQuota,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1ResourceQuota
    },
    201: {
      bodyMapper: Mappers.V1ResourceQuota
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteCoreV1NamespacedResourceQuotaOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "api/v1/namespaces/{namespace}/resourcequotas/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy,
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const patchCoreV1NamespacedResourceQuotaOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "api/v1/namespaces/{namespace}/resourcequotas/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.V1ResourceQuota
    },
    401: {},
    default: {}
  },
  serializer
};

const readCoreV1NamespacedResourceQuotaStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/namespaces/{namespace}/resourcequotas/{name}/status",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1ResourceQuota
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceCoreV1NamespacedResourceQuotaStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "api/v1/namespaces/{namespace}/resourcequotas/{name}/status",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1ResourceQuota,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1ResourceQuota
    },
    201: {
      bodyMapper: Mappers.V1ResourceQuota
    },
    401: {},
    default: {}
  },
  serializer
};

const patchCoreV1NamespacedResourceQuotaStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "api/v1/namespaces/{namespace}/resourcequotas/{name}/status",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.V1ResourceQuota
    },
    401: {},
    default: {}
  },
  serializer
};

const listCoreV1NamespacedSecretOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/namespaces/{namespace}/secrets",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1SecretList
    },
    401: {},
    default: {}
  },
  serializer
};

const createCoreV1NamespacedSecretOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/v1/namespaces/{namespace}/secrets",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1Secret,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Secret
    },
    201: {
      bodyMapper: Mappers.V1Secret
    },
    202: {
      bodyMapper: Mappers.V1Secret
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteCoreV1CollectionNamespacedSecretOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "api/v1/namespaces/{namespace}/secrets",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const readCoreV1NamespacedSecretOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/namespaces/{namespace}/secrets/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.exact,
    Parameters.exportParameter,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Secret
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceCoreV1NamespacedSecretOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "api/v1/namespaces/{namespace}/secrets/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1Secret,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Secret
    },
    201: {
      bodyMapper: Mappers.V1Secret
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteCoreV1NamespacedSecretOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "api/v1/namespaces/{namespace}/secrets/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy,
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const patchCoreV1NamespacedSecretOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "api/v1/namespaces/{namespace}/secrets/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.V1Secret
    },
    401: {},
    default: {}
  },
  serializer
};

const listCoreV1NamespacedServiceAccountOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/namespaces/{namespace}/serviceaccounts",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1ServiceAccountList
    },
    401: {},
    default: {}
  },
  serializer
};

const createCoreV1NamespacedServiceAccountOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/v1/namespaces/{namespace}/serviceaccounts",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1ServiceAccount,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1ServiceAccount
    },
    201: {
      bodyMapper: Mappers.V1ServiceAccount
    },
    202: {
      bodyMapper: Mappers.V1ServiceAccount
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteCoreV1CollectionNamespacedServiceAccountOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "api/v1/namespaces/{namespace}/serviceaccounts",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const readCoreV1NamespacedServiceAccountOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/namespaces/{namespace}/serviceaccounts/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.exact,
    Parameters.exportParameter,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1ServiceAccount
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceCoreV1NamespacedServiceAccountOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "api/v1/namespaces/{namespace}/serviceaccounts/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1ServiceAccount,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1ServiceAccount
    },
    201: {
      bodyMapper: Mappers.V1ServiceAccount
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteCoreV1NamespacedServiceAccountOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "api/v1/namespaces/{namespace}/serviceaccounts/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy,
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const patchCoreV1NamespacedServiceAccountOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "api/v1/namespaces/{namespace}/serviceaccounts/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.V1ServiceAccount
    },
    401: {},
    default: {}
  },
  serializer
};

const listCoreV1NamespacedServiceOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/namespaces/{namespace}/services",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1ServiceList
    },
    401: {},
    default: {}
  },
  serializer
};

const createCoreV1NamespacedServiceOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/v1/namespaces/{namespace}/services",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1Service,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Service
    },
    201: {
      bodyMapper: Mappers.V1Service
    },
    202: {
      bodyMapper: Mappers.V1Service
    },
    401: {},
    default: {}
  },
  serializer
};

const readCoreV1NamespacedServiceOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/namespaces/{namespace}/services/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.exact,
    Parameters.exportParameter,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Service
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceCoreV1NamespacedServiceOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "api/v1/namespaces/{namespace}/services/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1Service,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Service
    },
    201: {
      bodyMapper: Mappers.V1Service
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteCoreV1NamespacedServiceOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "api/v1/namespaces/{namespace}/services/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy,
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const patchCoreV1NamespacedServiceOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "api/v1/namespaces/{namespace}/services/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.V1Service
    },
    401: {},
    default: {}
  },
  serializer
};

const connectCoreV1GetNamespacedServiceProxyOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/namespaces/{namespace}/services/{name}/proxy",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.path0
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    401: {},
    default: {}
  },
  serializer
};

const connectCoreV1PutNamespacedServiceProxyOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "api/v1/namespaces/{namespace}/services/{name}/proxy",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.path0
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    401: {},
    default: {}
  },
  serializer
};

const connectCoreV1PostNamespacedServiceProxyOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/v1/namespaces/{namespace}/services/{name}/proxy",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.path0
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    401: {},
    default: {}
  },
  serializer
};

const connectCoreV1DeleteNamespacedServiceProxyOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "api/v1/namespaces/{namespace}/services/{name}/proxy",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.path0
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    401: {},
    default: {}
  },
  serializer
};

const connectCoreV1HeadNamespacedServiceProxyOperationSpec: msRest.OperationSpec = {
  httpMethod: "HEAD",
  path: "api/v1/namespaces/{namespace}/services/{name}/proxy",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.path0
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    401: {},
    default: {}
  },
  serializer
};

const connectCoreV1PatchNamespacedServiceProxyOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "api/v1/namespaces/{namespace}/services/{name}/proxy",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.path0
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    401: {},
    default: {}
  },
  serializer
};

const connectCoreV1GetNamespacedServiceProxyWithPathOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/namespaces/{namespace}/services/{name}/proxy/{path}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace,
    Parameters.path1
  ],
  queryParameters: [
    Parameters.path1
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    401: {},
    default: {}
  },
  serializer
};

const connectCoreV1PutNamespacedServiceProxyWithPathOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "api/v1/namespaces/{namespace}/services/{name}/proxy/{path}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace,
    Parameters.path1
  ],
  queryParameters: [
    Parameters.path1
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    401: {},
    default: {}
  },
  serializer
};

const connectCoreV1PostNamespacedServiceProxyWithPathOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/v1/namespaces/{namespace}/services/{name}/proxy/{path}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace,
    Parameters.path1
  ],
  queryParameters: [
    Parameters.path1
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    401: {},
    default: {}
  },
  serializer
};

const connectCoreV1DeleteNamespacedServiceProxyWithPathOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "api/v1/namespaces/{namespace}/services/{name}/proxy/{path}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace,
    Parameters.path1
  ],
  queryParameters: [
    Parameters.path1
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    401: {},
    default: {}
  },
  serializer
};

const connectCoreV1HeadNamespacedServiceProxyWithPathOperationSpec: msRest.OperationSpec = {
  httpMethod: "HEAD",
  path: "api/v1/namespaces/{namespace}/services/{name}/proxy/{path}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace,
    Parameters.path1
  ],
  queryParameters: [
    Parameters.path1
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    401: {},
    default: {}
  },
  serializer
};

const connectCoreV1PatchNamespacedServiceProxyWithPathOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "api/v1/namespaces/{namespace}/services/{name}/proxy/{path}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace,
    Parameters.path1
  ],
  queryParameters: [
    Parameters.path1
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    401: {},
    default: {}
  },
  serializer
};

const readCoreV1NamespacedServiceStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/namespaces/{namespace}/services/{name}/status",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Service
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceCoreV1NamespacedServiceStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "api/v1/namespaces/{namespace}/services/{name}/status",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1Service,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Service
    },
    201: {
      bodyMapper: Mappers.V1Service
    },
    401: {},
    default: {}
  },
  serializer
};

const patchCoreV1NamespacedServiceStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "api/v1/namespaces/{namespace}/services/{name}/status",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.V1Service
    },
    401: {},
    default: {}
  },
  serializer
};

const readCoreV1NamespaceOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/namespaces/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.exact,
    Parameters.exportParameter,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Namespace
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceCoreV1NamespaceOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "api/v1/namespaces/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1Namespace,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Namespace
    },
    201: {
      bodyMapper: Mappers.V1Namespace
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteCoreV1NamespaceOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "api/v1/namespaces/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy,
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const patchCoreV1NamespaceOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "api/v1/namespaces/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.V1Namespace
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceCoreV1NamespaceFinalizeOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "api/v1/namespaces/{name}/finalize",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1Namespace,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Namespace
    },
    201: {
      bodyMapper: Mappers.V1Namespace
    },
    401: {},
    default: {}
  },
  serializer
};

const readCoreV1NamespaceStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/namespaces/{name}/status",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Namespace
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceCoreV1NamespaceStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "api/v1/namespaces/{name}/status",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1Namespace,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Namespace
    },
    201: {
      bodyMapper: Mappers.V1Namespace
    },
    401: {},
    default: {}
  },
  serializer
};

const patchCoreV1NamespaceStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "api/v1/namespaces/{name}/status",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.V1Namespace
    },
    401: {},
    default: {}
  },
  serializer
};

const listCoreV1NodeOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/nodes",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1NodeList
    },
    401: {},
    default: {}
  },
  serializer
};

const createCoreV1NodeOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/v1/nodes",
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1Node,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Node
    },
    201: {
      bodyMapper: Mappers.V1Node
    },
    202: {
      bodyMapper: Mappers.V1Node
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteCoreV1CollectionNodeOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "api/v1/nodes",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const readCoreV1NodeOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/nodes/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.exact,
    Parameters.exportParameter,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Node
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceCoreV1NodeOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "api/v1/nodes/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1Node,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Node
    },
    201: {
      bodyMapper: Mappers.V1Node
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteCoreV1NodeOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "api/v1/nodes/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy,
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const patchCoreV1NodeOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "api/v1/nodes/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.V1Node
    },
    401: {},
    default: {}
  },
  serializer
};

const connectCoreV1GetNodeProxyOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/nodes/{name}/proxy",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.path0
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    401: {},
    default: {}
  },
  serializer
};

const connectCoreV1PutNodeProxyOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "api/v1/nodes/{name}/proxy",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.path0
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    401: {},
    default: {}
  },
  serializer
};

const connectCoreV1PostNodeProxyOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/v1/nodes/{name}/proxy",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.path0
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    401: {},
    default: {}
  },
  serializer
};

const connectCoreV1DeleteNodeProxyOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "api/v1/nodes/{name}/proxy",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.path0
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    401: {},
    default: {}
  },
  serializer
};

const connectCoreV1HeadNodeProxyOperationSpec: msRest.OperationSpec = {
  httpMethod: "HEAD",
  path: "api/v1/nodes/{name}/proxy",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.path0
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    401: {},
    default: {}
  },
  serializer
};

const connectCoreV1PatchNodeProxyOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "api/v1/nodes/{name}/proxy",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.path0
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    401: {},
    default: {}
  },
  serializer
};

const connectCoreV1GetNodeProxyWithPathOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/nodes/{name}/proxy/{path}",
  urlParameters: [
    Parameters.name,
    Parameters.path1
  ],
  queryParameters: [
    Parameters.path1
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    401: {},
    default: {}
  },
  serializer
};

const connectCoreV1PutNodeProxyWithPathOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "api/v1/nodes/{name}/proxy/{path}",
  urlParameters: [
    Parameters.name,
    Parameters.path1
  ],
  queryParameters: [
    Parameters.path1
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    401: {},
    default: {}
  },
  serializer
};

const connectCoreV1PostNodeProxyWithPathOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/v1/nodes/{name}/proxy/{path}",
  urlParameters: [
    Parameters.name,
    Parameters.path1
  ],
  queryParameters: [
    Parameters.path1
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    401: {},
    default: {}
  },
  serializer
};

const connectCoreV1DeleteNodeProxyWithPathOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "api/v1/nodes/{name}/proxy/{path}",
  urlParameters: [
    Parameters.name,
    Parameters.path1
  ],
  queryParameters: [
    Parameters.path1
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    401: {},
    default: {}
  },
  serializer
};

const connectCoreV1HeadNodeProxyWithPathOperationSpec: msRest.OperationSpec = {
  httpMethod: "HEAD",
  path: "api/v1/nodes/{name}/proxy/{path}",
  urlParameters: [
    Parameters.name,
    Parameters.path1
  ],
  queryParameters: [
    Parameters.path1
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    401: {},
    default: {}
  },
  serializer
};

const connectCoreV1PatchNodeProxyWithPathOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "api/v1/nodes/{name}/proxy/{path}",
  urlParameters: [
    Parameters.name,
    Parameters.path1
  ],
  queryParameters: [
    Parameters.path1
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    401: {},
    default: {}
  },
  serializer
};

const readCoreV1NodeStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/nodes/{name}/status",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Node
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceCoreV1NodeStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "api/v1/nodes/{name}/status",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1Node,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Node
    },
    201: {
      bodyMapper: Mappers.V1Node
    },
    401: {},
    default: {}
  },
  serializer
};

const patchCoreV1NodeStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "api/v1/nodes/{name}/status",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.V1Node
    },
    401: {},
    default: {}
  },
  serializer
};

const listCoreV1PersistentVolumeClaimForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/persistentvolumeclaims",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1PersistentVolumeClaimList
    },
    401: {},
    default: {}
  },
  serializer
};

const listCoreV1PersistentVolumeOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/persistentvolumes",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1PersistentVolumeList
    },
    401: {},
    default: {}
  },
  serializer
};

const createCoreV1PersistentVolumeOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/v1/persistentvolumes",
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1PersistentVolume,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1PersistentVolume
    },
    201: {
      bodyMapper: Mappers.V1PersistentVolume
    },
    202: {
      bodyMapper: Mappers.V1PersistentVolume
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteCoreV1CollectionPersistentVolumeOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "api/v1/persistentvolumes",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const readCoreV1PersistentVolumeOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/persistentvolumes/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.exact,
    Parameters.exportParameter,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1PersistentVolume
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceCoreV1PersistentVolumeOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "api/v1/persistentvolumes/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1PersistentVolume,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1PersistentVolume
    },
    201: {
      bodyMapper: Mappers.V1PersistentVolume
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteCoreV1PersistentVolumeOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "api/v1/persistentvolumes/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy,
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const patchCoreV1PersistentVolumeOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "api/v1/persistentvolumes/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.V1PersistentVolume
    },
    401: {},
    default: {}
  },
  serializer
};

const readCoreV1PersistentVolumeStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/persistentvolumes/{name}/status",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1PersistentVolume
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceCoreV1PersistentVolumeStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "api/v1/persistentvolumes/{name}/status",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1PersistentVolume,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1PersistentVolume
    },
    201: {
      bodyMapper: Mappers.V1PersistentVolume
    },
    401: {},
    default: {}
  },
  serializer
};

const patchCoreV1PersistentVolumeStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "api/v1/persistentvolumes/{name}/status",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.V1PersistentVolume
    },
    401: {},
    default: {}
  },
  serializer
};

const listCoreV1PodForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/pods",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1PodList
    },
    401: {},
    default: {}
  },
  serializer
};

const listCoreV1PodTemplateForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/podtemplates",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1PodTemplateList
    },
    401: {},
    default: {}
  },
  serializer
};

const listCoreV1ReplicationControllerForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/replicationcontrollers",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1ReplicationControllerList
    },
    401: {},
    default: {}
  },
  serializer
};

const listCoreV1ResourceQuotaForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/resourcequotas",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1ResourceQuotaList
    },
    401: {},
    default: {}
  },
  serializer
};

const listCoreV1SecretForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/secrets",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1SecretList
    },
    401: {},
    default: {}
  },
  serializer
};

const listCoreV1ServiceAccountForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/serviceaccounts",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1ServiceAccountList
    },
    401: {},
    default: {}
  },
  serializer
};

const listCoreV1ServiceForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/services",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1ServiceList
    },
    401: {},
    default: {}
  },
  serializer
};

const watchCoreV1ConfigMapListForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/watch/configmaps",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchCoreV1EndpointsListForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/watch/endpoints",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchCoreV1EventListForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/watch/events",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchCoreV1LimitRangeListForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/watch/limitranges",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchCoreV1NamespaceListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/watch/namespaces",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchCoreV1NamespacedConfigMapListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/watch/namespaces/{namespace}/configmaps",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchCoreV1NamespacedConfigMapOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/watch/namespaces/{namespace}/configmaps/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchCoreV1NamespacedEndpointsListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/watch/namespaces/{namespace}/endpoints",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchCoreV1NamespacedEndpointsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/watch/namespaces/{namespace}/endpoints/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchCoreV1NamespacedEventListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/watch/namespaces/{namespace}/events",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchCoreV1NamespacedEventOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/watch/namespaces/{namespace}/events/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchCoreV1NamespacedLimitRangeListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/watch/namespaces/{namespace}/limitranges",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchCoreV1NamespacedLimitRangeOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/watch/namespaces/{namespace}/limitranges/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchCoreV1NamespacedPersistentVolumeClaimListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/watch/namespaces/{namespace}/persistentvolumeclaims",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchCoreV1NamespacedPersistentVolumeClaimOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/watch/namespaces/{namespace}/persistentvolumeclaims/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchCoreV1NamespacedPodListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/watch/namespaces/{namespace}/pods",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchCoreV1NamespacedPodOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/watch/namespaces/{namespace}/pods/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchCoreV1NamespacedPodTemplateListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/watch/namespaces/{namespace}/podtemplates",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchCoreV1NamespacedPodTemplateOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/watch/namespaces/{namespace}/podtemplates/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchCoreV1NamespacedReplicationControllerListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/watch/namespaces/{namespace}/replicationcontrollers",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchCoreV1NamespacedReplicationControllerOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/watch/namespaces/{namespace}/replicationcontrollers/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchCoreV1NamespacedResourceQuotaListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/watch/namespaces/{namespace}/resourcequotas",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchCoreV1NamespacedResourceQuotaOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/watch/namespaces/{namespace}/resourcequotas/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchCoreV1NamespacedSecretListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/watch/namespaces/{namespace}/secrets",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchCoreV1NamespacedSecretOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/watch/namespaces/{namespace}/secrets/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchCoreV1NamespacedServiceAccountListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/watch/namespaces/{namespace}/serviceaccounts",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchCoreV1NamespacedServiceAccountOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/watch/namespaces/{namespace}/serviceaccounts/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchCoreV1NamespacedServiceListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/watch/namespaces/{namespace}/services",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchCoreV1NamespacedServiceOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/watch/namespaces/{namespace}/services/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchCoreV1NamespaceOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/watch/namespaces/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchCoreV1NodeListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/watch/nodes",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchCoreV1NodeOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/watch/nodes/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchCoreV1PersistentVolumeClaimListForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/watch/persistentvolumeclaims",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchCoreV1PersistentVolumeListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/watch/persistentvolumes",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchCoreV1PersistentVolumeOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/watch/persistentvolumes/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchCoreV1PodListForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/watch/pods",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchCoreV1PodTemplateListForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/watch/podtemplates",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchCoreV1ReplicationControllerListForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/watch/replicationcontrollers",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchCoreV1ResourceQuotaListForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/watch/resourcequotas",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchCoreV1SecretListForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/watch/secrets",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchCoreV1ServiceAccountListForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/watch/serviceaccounts",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchCoreV1ServiceListForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/watch/services",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const getAPIVersionsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/",
  responses: {
    200: {
      bodyMapper: Mappers.V1APIGroupList
    },
    401: {},
    default: {}
  },
  serializer
};

const getAdmissionregistrationAPIGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/admissionregistration.k8s.io/",
  responses: {
    200: {
      bodyMapper: Mappers.V1APIGroup
    },
    401: {},
    default: {}
  },
  serializer
};

const getAdmissionregistrationV1beta1APIResourcesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/admissionregistration.k8s.io/v1beta1/",
  responses: {
    200: {
      bodyMapper: Mappers.V1APIResourceList
    },
    401: {},
    default: {}
  },
  serializer
};

const listAdmissionregistrationV1beta1MutatingWebhookConfigurationOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/admissionregistration.k8s.io/v1beta1/mutatingwebhookconfigurations",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1MutatingWebhookConfigurationList
    },
    401: {},
    default: {}
  },
  serializer
};

const createAdmissionregistrationV1beta1MutatingWebhookConfigurationOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/admissionregistration.k8s.io/v1beta1/mutatingwebhookconfigurations",
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1beta1MutatingWebhookConfiguration,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1MutatingWebhookConfiguration
    },
    201: {
      bodyMapper: Mappers.V1beta1MutatingWebhookConfiguration
    },
    202: {
      bodyMapper: Mappers.V1beta1MutatingWebhookConfiguration
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteAdmissionregistrationV1beta1CollectionMutatingWebhookConfigurationOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/admissionregistration.k8s.io/v1beta1/mutatingwebhookconfigurations",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const readAdmissionregistrationV1beta1MutatingWebhookConfigurationOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/admissionregistration.k8s.io/v1beta1/mutatingwebhookconfigurations/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.exact,
    Parameters.exportParameter,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1MutatingWebhookConfiguration
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceAdmissionregistrationV1beta1MutatingWebhookConfigurationOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/admissionregistration.k8s.io/v1beta1/mutatingwebhookconfigurations/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1beta1MutatingWebhookConfiguration,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1MutatingWebhookConfiguration
    },
    201: {
      bodyMapper: Mappers.V1beta1MutatingWebhookConfiguration
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteAdmissionregistrationV1beta1MutatingWebhookConfigurationOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/admissionregistration.k8s.io/v1beta1/mutatingwebhookconfigurations/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy,
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const patchAdmissionregistrationV1beta1MutatingWebhookConfigurationOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/admissionregistration.k8s.io/v1beta1/mutatingwebhookconfigurations/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1MutatingWebhookConfiguration
    },
    401: {},
    default: {}
  },
  serializer
};

const listAdmissionregistrationV1beta1ValidatingWebhookConfigurationOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/admissionregistration.k8s.io/v1beta1/validatingwebhookconfigurations",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1ValidatingWebhookConfigurationList
    },
    401: {},
    default: {}
  },
  serializer
};

const createAdmissionregistrationV1beta1ValidatingWebhookConfigurationOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/admissionregistration.k8s.io/v1beta1/validatingwebhookconfigurations",
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1beta1ValidatingWebhookConfiguration,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1ValidatingWebhookConfiguration
    },
    201: {
      bodyMapper: Mappers.V1beta1ValidatingWebhookConfiguration
    },
    202: {
      bodyMapper: Mappers.V1beta1ValidatingWebhookConfiguration
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteAdmissionregistrationV1beta1CollectionValidatingWebhookConfigurationOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/admissionregistration.k8s.io/v1beta1/validatingwebhookconfigurations",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const readAdmissionregistrationV1beta1ValidatingWebhookConfigurationOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/admissionregistration.k8s.io/v1beta1/validatingwebhookconfigurations/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.exact,
    Parameters.exportParameter,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1ValidatingWebhookConfiguration
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceAdmissionregistrationV1beta1ValidatingWebhookConfigurationOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/admissionregistration.k8s.io/v1beta1/validatingwebhookconfigurations/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1beta1ValidatingWebhookConfiguration,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1ValidatingWebhookConfiguration
    },
    201: {
      bodyMapper: Mappers.V1beta1ValidatingWebhookConfiguration
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteAdmissionregistrationV1beta1ValidatingWebhookConfigurationOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/admissionregistration.k8s.io/v1beta1/validatingwebhookconfigurations/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy,
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const patchAdmissionregistrationV1beta1ValidatingWebhookConfigurationOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/admissionregistration.k8s.io/v1beta1/validatingwebhookconfigurations/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1ValidatingWebhookConfiguration
    },
    401: {},
    default: {}
  },
  serializer
};

const watchAdmissionregistrationV1beta1MutatingWebhookConfigurationListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/admissionregistration.k8s.io/v1beta1/watch/mutatingwebhookconfigurations",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchAdmissionregistrationV1beta1MutatingWebhookConfigurationOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/admissionregistration.k8s.io/v1beta1/watch/mutatingwebhookconfigurations/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchAdmissionregistrationV1beta1ValidatingWebhookConfigurationListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/admissionregistration.k8s.io/v1beta1/watch/validatingwebhookconfigurations",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchAdmissionregistrationV1beta1ValidatingWebhookConfigurationOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/admissionregistration.k8s.io/v1beta1/watch/validatingwebhookconfigurations/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const getApiregistrationAPIGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apiregistration.k8s.io/",
  responses: {
    200: {
      bodyMapper: Mappers.V1APIGroup
    },
    401: {},
    default: {}
  },
  serializer
};

const getApiregistrationV1APIResourcesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apiregistration.k8s.io/v1/",
  responses: {
    200: {
      bodyMapper: Mappers.V1APIResourceList
    },
    401: {},
    default: {}
  },
  serializer
};

const listApiregistrationV1APIServiceOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apiregistration.k8s.io/v1/apiservices",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Iok8skubeAggregatorpkgapisapiregistrationv1APIServiceList
    },
    401: {},
    default: {}
  },
  serializer
};

const createApiregistrationV1APIServiceOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/apiregistration.k8s.io/v1/apiservices",
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Iok8skubeAggregatorpkgapisapiregistrationv1APIService,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Iok8skubeAggregatorpkgapisapiregistrationv1APIService
    },
    201: {
      bodyMapper: Mappers.Iok8skubeAggregatorpkgapisapiregistrationv1APIService
    },
    202: {
      bodyMapper: Mappers.Iok8skubeAggregatorpkgapisapiregistrationv1APIService
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteApiregistrationV1CollectionAPIServiceOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/apiregistration.k8s.io/v1/apiservices",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const readApiregistrationV1APIServiceOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apiregistration.k8s.io/v1/apiservices/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.exact,
    Parameters.exportParameter,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Iok8skubeAggregatorpkgapisapiregistrationv1APIService
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceApiregistrationV1APIServiceOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/apiregistration.k8s.io/v1/apiservices/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Iok8skubeAggregatorpkgapisapiregistrationv1APIService,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Iok8skubeAggregatorpkgapisapiregistrationv1APIService
    },
    201: {
      bodyMapper: Mappers.Iok8skubeAggregatorpkgapisapiregistrationv1APIService
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteApiregistrationV1APIServiceOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/apiregistration.k8s.io/v1/apiservices/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy,
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const patchApiregistrationV1APIServiceOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/apiregistration.k8s.io/v1/apiservices/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.Iok8skubeAggregatorpkgapisapiregistrationv1APIService
    },
    401: {},
    default: {}
  },
  serializer
};

const readApiregistrationV1APIServiceStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apiregistration.k8s.io/v1/apiservices/{name}/status",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Iok8skubeAggregatorpkgapisapiregistrationv1APIService
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceApiregistrationV1APIServiceStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/apiregistration.k8s.io/v1/apiservices/{name}/status",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Iok8skubeAggregatorpkgapisapiregistrationv1APIService,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Iok8skubeAggregatorpkgapisapiregistrationv1APIService
    },
    201: {
      bodyMapper: Mappers.Iok8skubeAggregatorpkgapisapiregistrationv1APIService
    },
    401: {},
    default: {}
  },
  serializer
};

const patchApiregistrationV1APIServiceStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/apiregistration.k8s.io/v1/apiservices/{name}/status",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.Iok8skubeAggregatorpkgapisapiregistrationv1APIService
    },
    401: {},
    default: {}
  },
  serializer
};

const watchApiregistrationV1APIServiceListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apiregistration.k8s.io/v1/watch/apiservices",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchApiregistrationV1APIServiceOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apiregistration.k8s.io/v1/watch/apiservices/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const getApiregistrationV1beta1APIResourcesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apiregistration.k8s.io/v1beta1/",
  responses: {
    200: {
      bodyMapper: Mappers.V1APIResourceList
    },
    401: {},
    default: {}
  },
  serializer
};

const listApiregistrationV1beta1APIServiceOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apiregistration.k8s.io/v1beta1/apiservices",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Iok8skubeAggregatorpkgapisapiregistrationv1beta1APIServiceList
    },
    401: {},
    default: {}
  },
  serializer
};

const createApiregistrationV1beta1APIServiceOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/apiregistration.k8s.io/v1beta1/apiservices",
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Iok8skubeAggregatorpkgapisapiregistrationv1beta1APIService,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Iok8skubeAggregatorpkgapisapiregistrationv1beta1APIService
    },
    201: {
      bodyMapper: Mappers.Iok8skubeAggregatorpkgapisapiregistrationv1beta1APIService
    },
    202: {
      bodyMapper: Mappers.Iok8skubeAggregatorpkgapisapiregistrationv1beta1APIService
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteApiregistrationV1beta1CollectionAPIServiceOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/apiregistration.k8s.io/v1beta1/apiservices",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const readApiregistrationV1beta1APIServiceOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apiregistration.k8s.io/v1beta1/apiservices/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.exact,
    Parameters.exportParameter,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Iok8skubeAggregatorpkgapisapiregistrationv1beta1APIService
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceApiregistrationV1beta1APIServiceOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/apiregistration.k8s.io/v1beta1/apiservices/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Iok8skubeAggregatorpkgapisapiregistrationv1beta1APIService,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Iok8skubeAggregatorpkgapisapiregistrationv1beta1APIService
    },
    201: {
      bodyMapper: Mappers.Iok8skubeAggregatorpkgapisapiregistrationv1beta1APIService
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteApiregistrationV1beta1APIServiceOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/apiregistration.k8s.io/v1beta1/apiservices/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy,
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const patchApiregistrationV1beta1APIServiceOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/apiregistration.k8s.io/v1beta1/apiservices/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.Iok8skubeAggregatorpkgapisapiregistrationv1beta1APIService
    },
    401: {},
    default: {}
  },
  serializer
};

const readApiregistrationV1beta1APIServiceStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apiregistration.k8s.io/v1beta1/apiservices/{name}/status",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Iok8skubeAggregatorpkgapisapiregistrationv1beta1APIService
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceApiregistrationV1beta1APIServiceStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/apiregistration.k8s.io/v1beta1/apiservices/{name}/status",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Iok8skubeAggregatorpkgapisapiregistrationv1beta1APIService,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Iok8skubeAggregatorpkgapisapiregistrationv1beta1APIService
    },
    201: {
      bodyMapper: Mappers.Iok8skubeAggregatorpkgapisapiregistrationv1beta1APIService
    },
    401: {},
    default: {}
  },
  serializer
};

const patchApiregistrationV1beta1APIServiceStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/apiregistration.k8s.io/v1beta1/apiservices/{name}/status",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.Iok8skubeAggregatorpkgapisapiregistrationv1beta1APIService
    },
    401: {},
    default: {}
  },
  serializer
};

const watchApiregistrationV1beta1APIServiceListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apiregistration.k8s.io/v1beta1/watch/apiservices",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchApiregistrationV1beta1APIServiceOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apiregistration.k8s.io/v1beta1/watch/apiservices/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const getAppsOpenshiftIoAPIGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps.openshift.io/",
  responses: {
    200: {
      bodyMapper: Mappers.V1APIGroup
    },
    401: {},
    default: {}
  },
  serializer
};

const getAppsOpenshiftIoV1APIResourcesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps.openshift.io/v1/",
  responses: {
    200: {
      bodyMapper: Mappers.V1APIResourceList
    },
    401: {},
    default: {}
  },
  serializer
};

const listAppsOpenshiftIoV1DeploymentConfigForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps.openshift.io/v1/deploymentconfigs",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiappsv1DeploymentConfigList
    },
    401: {},
    default: {}
  },
  serializer
};

const listAppsOpenshiftIoV1NamespacedDeploymentConfigOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps.openshift.io/v1/namespaces/{namespace}/deploymentconfigs",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiappsv1DeploymentConfigList
    },
    401: {},
    default: {}
  },
  serializer
};

const createAppsOpenshiftIoV1NamespacedDeploymentConfigOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/apps.openshift.io/v1/namespaces/{namespace}/deploymentconfigs",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Comgithubopenshiftapiappsv1DeploymentConfig,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiappsv1DeploymentConfig
    },
    201: {
      bodyMapper: Mappers.Comgithubopenshiftapiappsv1DeploymentConfig
    },
    202: {
      bodyMapper: Mappers.Comgithubopenshiftapiappsv1DeploymentConfig
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteAppsOpenshiftIoV1CollectionNamespacedDeploymentConfigOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/apps.openshift.io/v1/namespaces/{namespace}/deploymentconfigs",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const readAppsOpenshiftIoV1NamespacedDeploymentConfigOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps.openshift.io/v1/namespaces/{namespace}/deploymentconfigs/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.exact,
    Parameters.exportParameter,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiappsv1DeploymentConfig
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceAppsOpenshiftIoV1NamespacedDeploymentConfigOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/apps.openshift.io/v1/namespaces/{namespace}/deploymentconfigs/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Comgithubopenshiftapiappsv1DeploymentConfig,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiappsv1DeploymentConfig
    },
    201: {
      bodyMapper: Mappers.Comgithubopenshiftapiappsv1DeploymentConfig
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteAppsOpenshiftIoV1NamespacedDeploymentConfigOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/apps.openshift.io/v1/namespaces/{namespace}/deploymentconfigs/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy,
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const patchAppsOpenshiftIoV1NamespacedDeploymentConfigOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/apps.openshift.io/v1/namespaces/{namespace}/deploymentconfigs/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiappsv1DeploymentConfig
    },
    401: {},
    default: {}
  },
  serializer
};

const createAppsOpenshiftIoV1NamespacedDeploymentConfigInstantiateOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/apps.openshift.io/v1/namespaces/{namespace}/deploymentconfigs/{name}/instantiate",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Comgithubopenshiftapiappsv1DeploymentRequest,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiappsv1DeploymentRequest
    },
    201: {
      bodyMapper: Mappers.Comgithubopenshiftapiappsv1DeploymentRequest
    },
    202: {
      bodyMapper: Mappers.Comgithubopenshiftapiappsv1DeploymentRequest
    },
    401: {},
    default: {}
  },
  serializer
};

const readAppsOpenshiftIoV1NamespacedDeploymentConfigLogOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps.openshift.io/v1/namespaces/{namespace}/deploymentconfigs/{name}/log",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.container,
    Parameters.follow,
    Parameters.limitBytes,
    Parameters.nowait,
    Parameters.pretty,
    Parameters.previous,
    Parameters.sinceSeconds,
    Parameters.tailLines,
    Parameters.timestamps,
    Parameters.version
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiappsv1DeploymentLog
    },
    401: {},
    default: {}
  },
  serializer
};

const createAppsOpenshiftIoV1NamespacedDeploymentConfigRollbackOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/apps.openshift.io/v1/namespaces/{namespace}/deploymentconfigs/{name}/rollback",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Comgithubopenshiftapiappsv1DeploymentConfigRollback,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiappsv1DeploymentConfigRollback
    },
    201: {
      bodyMapper: Mappers.Comgithubopenshiftapiappsv1DeploymentConfigRollback
    },
    202: {
      bodyMapper: Mappers.Comgithubopenshiftapiappsv1DeploymentConfigRollback
    },
    401: {},
    default: {}
  },
  serializer
};

const readAppsOpenshiftIoV1NamespacedDeploymentConfigScaleOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps.openshift.io/v1/namespaces/{namespace}/deploymentconfigs/{name}/scale",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Iok8sapiextensionsv1beta1Scale
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceAppsOpenshiftIoV1NamespacedDeploymentConfigScaleOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/apps.openshift.io/v1/namespaces/{namespace}/deploymentconfigs/{name}/scale",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Iok8sapiextensionsv1beta1Scale,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Iok8sapiextensionsv1beta1Scale
    },
    201: {
      bodyMapper: Mappers.Iok8sapiextensionsv1beta1Scale
    },
    401: {},
    default: {}
  },
  serializer
};

const patchAppsOpenshiftIoV1NamespacedDeploymentConfigScaleOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/apps.openshift.io/v1/namespaces/{namespace}/deploymentconfigs/{name}/scale",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.Iok8sapiextensionsv1beta1Scale
    },
    401: {},
    default: {}
  },
  serializer
};

const readAppsOpenshiftIoV1NamespacedDeploymentConfigStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps.openshift.io/v1/namespaces/{namespace}/deploymentconfigs/{name}/status",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiappsv1DeploymentConfig
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceAppsOpenshiftIoV1NamespacedDeploymentConfigStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/apps.openshift.io/v1/namespaces/{namespace}/deploymentconfigs/{name}/status",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Comgithubopenshiftapiappsv1DeploymentConfig,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiappsv1DeploymentConfig
    },
    201: {
      bodyMapper: Mappers.Comgithubopenshiftapiappsv1DeploymentConfig
    },
    401: {},
    default: {}
  },
  serializer
};

const patchAppsOpenshiftIoV1NamespacedDeploymentConfigStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/apps.openshift.io/v1/namespaces/{namespace}/deploymentconfigs/{name}/status",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiappsv1DeploymentConfig
    },
    401: {},
    default: {}
  },
  serializer
};

const watchAppsOpenshiftIoV1DeploymentConfigListForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps.openshift.io/v1/watch/deploymentconfigs",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchAppsOpenshiftIoV1NamespacedDeploymentConfigListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps.openshift.io/v1/watch/namespaces/{namespace}/deploymentconfigs",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchAppsOpenshiftIoV1NamespacedDeploymentConfigOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps.openshift.io/v1/watch/namespaces/{namespace}/deploymentconfigs/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const getAppsAPIGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/",
  responses: {
    200: {
      bodyMapper: Mappers.V1APIGroup
    },
    401: {},
    default: {}
  },
  serializer
};

const getAppsV1APIResourcesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1/",
  responses: {
    200: {
      bodyMapper: Mappers.V1APIResourceList
    },
    401: {},
    default: {}
  },
  serializer
};

const listAppsV1ControllerRevisionForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1/controllerrevisions",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1ControllerRevisionList
    },
    401: {},
    default: {}
  },
  serializer
};

const listAppsV1DaemonSetForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1/daemonsets",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1DaemonSetList
    },
    401: {},
    default: {}
  },
  serializer
};

const listAppsV1DeploymentForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1/deployments",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1DeploymentList
    },
    401: {},
    default: {}
  },
  serializer
};

const listAppsV1NamespacedControllerRevisionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1/namespaces/{namespace}/controllerrevisions",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1ControllerRevisionList
    },
    401: {},
    default: {}
  },
  serializer
};

const createAppsV1NamespacedControllerRevisionOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/apps/v1/namespaces/{namespace}/controllerrevisions",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1ControllerRevision,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1ControllerRevision
    },
    201: {
      bodyMapper: Mappers.V1ControllerRevision
    },
    202: {
      bodyMapper: Mappers.V1ControllerRevision
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteAppsV1CollectionNamespacedControllerRevisionOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/apps/v1/namespaces/{namespace}/controllerrevisions",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const readAppsV1NamespacedControllerRevisionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1/namespaces/{namespace}/controllerrevisions/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.exact,
    Parameters.exportParameter,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1ControllerRevision
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceAppsV1NamespacedControllerRevisionOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/apps/v1/namespaces/{namespace}/controllerrevisions/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1ControllerRevision,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1ControllerRevision
    },
    201: {
      bodyMapper: Mappers.V1ControllerRevision
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteAppsV1NamespacedControllerRevisionOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/apps/v1/namespaces/{namespace}/controllerrevisions/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy,
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const patchAppsV1NamespacedControllerRevisionOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/apps/v1/namespaces/{namespace}/controllerrevisions/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.V1ControllerRevision
    },
    401: {},
    default: {}
  },
  serializer
};

const listAppsV1NamespacedDaemonSetOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1/namespaces/{namespace}/daemonsets",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1DaemonSetList
    },
    401: {},
    default: {}
  },
  serializer
};

const createAppsV1NamespacedDaemonSetOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/apps/v1/namespaces/{namespace}/daemonsets",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DaemonSet,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1DaemonSet
    },
    201: {
      bodyMapper: Mappers.V1DaemonSet
    },
    202: {
      bodyMapper: Mappers.V1DaemonSet
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteAppsV1CollectionNamespacedDaemonSetOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/apps/v1/namespaces/{namespace}/daemonsets",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const readAppsV1NamespacedDaemonSetOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1/namespaces/{namespace}/daemonsets/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.exact,
    Parameters.exportParameter,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1DaemonSet
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceAppsV1NamespacedDaemonSetOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/apps/v1/namespaces/{namespace}/daemonsets/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DaemonSet,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1DaemonSet
    },
    201: {
      bodyMapper: Mappers.V1DaemonSet
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteAppsV1NamespacedDaemonSetOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/apps/v1/namespaces/{namespace}/daemonsets/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy,
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const patchAppsV1NamespacedDaemonSetOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/apps/v1/namespaces/{namespace}/daemonsets/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.V1DaemonSet
    },
    401: {},
    default: {}
  },
  serializer
};

const readAppsV1NamespacedDaemonSetStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1/namespaces/{namespace}/daemonsets/{name}/status",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1DaemonSet
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceAppsV1NamespacedDaemonSetStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/apps/v1/namespaces/{namespace}/daemonsets/{name}/status",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DaemonSet,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1DaemonSet
    },
    201: {
      bodyMapper: Mappers.V1DaemonSet
    },
    401: {},
    default: {}
  },
  serializer
};

const patchAppsV1NamespacedDaemonSetStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/apps/v1/namespaces/{namespace}/daemonsets/{name}/status",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.V1DaemonSet
    },
    401: {},
    default: {}
  },
  serializer
};

const listAppsV1NamespacedDeploymentOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1/namespaces/{namespace}/deployments",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1DeploymentList
    },
    401: {},
    default: {}
  },
  serializer
};

const createAppsV1NamespacedDeploymentOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/apps/v1/namespaces/{namespace}/deployments",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1Deployment,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Deployment
    },
    201: {
      bodyMapper: Mappers.V1Deployment
    },
    202: {
      bodyMapper: Mappers.V1Deployment
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteAppsV1CollectionNamespacedDeploymentOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/apps/v1/namespaces/{namespace}/deployments",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const readAppsV1NamespacedDeploymentOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1/namespaces/{namespace}/deployments/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.exact,
    Parameters.exportParameter,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Deployment
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceAppsV1NamespacedDeploymentOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/apps/v1/namespaces/{namespace}/deployments/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1Deployment,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Deployment
    },
    201: {
      bodyMapper: Mappers.V1Deployment
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteAppsV1NamespacedDeploymentOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/apps/v1/namespaces/{namespace}/deployments/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy,
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const patchAppsV1NamespacedDeploymentOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/apps/v1/namespaces/{namespace}/deployments/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.V1Deployment
    },
    401: {},
    default: {}
  },
  serializer
};

const readAppsV1NamespacedDeploymentScaleOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1/namespaces/{namespace}/deployments/{name}/scale",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Scale
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceAppsV1NamespacedDeploymentScaleOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/apps/v1/namespaces/{namespace}/deployments/{name}/scale",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1Scale,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Scale
    },
    201: {
      bodyMapper: Mappers.V1Scale
    },
    401: {},
    default: {}
  },
  serializer
};

const patchAppsV1NamespacedDeploymentScaleOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/apps/v1/namespaces/{namespace}/deployments/{name}/scale",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.V1Scale
    },
    401: {},
    default: {}
  },
  serializer
};

const readAppsV1NamespacedDeploymentStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1/namespaces/{namespace}/deployments/{name}/status",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Deployment
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceAppsV1NamespacedDeploymentStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/apps/v1/namespaces/{namespace}/deployments/{name}/status",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1Deployment,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Deployment
    },
    201: {
      bodyMapper: Mappers.V1Deployment
    },
    401: {},
    default: {}
  },
  serializer
};

const patchAppsV1NamespacedDeploymentStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/apps/v1/namespaces/{namespace}/deployments/{name}/status",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.V1Deployment
    },
    401: {},
    default: {}
  },
  serializer
};

const listAppsV1NamespacedReplicaSetOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1/namespaces/{namespace}/replicasets",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1ReplicaSetList
    },
    401: {},
    default: {}
  },
  serializer
};

const createAppsV1NamespacedReplicaSetOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/apps/v1/namespaces/{namespace}/replicasets",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1ReplicaSet,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1ReplicaSet
    },
    201: {
      bodyMapper: Mappers.V1ReplicaSet
    },
    202: {
      bodyMapper: Mappers.V1ReplicaSet
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteAppsV1CollectionNamespacedReplicaSetOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/apps/v1/namespaces/{namespace}/replicasets",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const readAppsV1NamespacedReplicaSetOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1/namespaces/{namespace}/replicasets/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.exact,
    Parameters.exportParameter,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1ReplicaSet
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceAppsV1NamespacedReplicaSetOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/apps/v1/namespaces/{namespace}/replicasets/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1ReplicaSet,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1ReplicaSet
    },
    201: {
      bodyMapper: Mappers.V1ReplicaSet
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteAppsV1NamespacedReplicaSetOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/apps/v1/namespaces/{namespace}/replicasets/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy,
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const patchAppsV1NamespacedReplicaSetOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/apps/v1/namespaces/{namespace}/replicasets/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.V1ReplicaSet
    },
    401: {},
    default: {}
  },
  serializer
};

const readAppsV1NamespacedReplicaSetScaleOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1/namespaces/{namespace}/replicasets/{name}/scale",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Scale
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceAppsV1NamespacedReplicaSetScaleOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/apps/v1/namespaces/{namespace}/replicasets/{name}/scale",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1Scale,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Scale
    },
    201: {
      bodyMapper: Mappers.V1Scale
    },
    401: {},
    default: {}
  },
  serializer
};

const patchAppsV1NamespacedReplicaSetScaleOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/apps/v1/namespaces/{namespace}/replicasets/{name}/scale",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.V1Scale
    },
    401: {},
    default: {}
  },
  serializer
};

const readAppsV1NamespacedReplicaSetStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1/namespaces/{namespace}/replicasets/{name}/status",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1ReplicaSet
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceAppsV1NamespacedReplicaSetStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/apps/v1/namespaces/{namespace}/replicasets/{name}/status",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1ReplicaSet,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1ReplicaSet
    },
    201: {
      bodyMapper: Mappers.V1ReplicaSet
    },
    401: {},
    default: {}
  },
  serializer
};

const patchAppsV1NamespacedReplicaSetStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/apps/v1/namespaces/{namespace}/replicasets/{name}/status",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.V1ReplicaSet
    },
    401: {},
    default: {}
  },
  serializer
};

const listAppsV1NamespacedStatefulSetOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1/namespaces/{namespace}/statefulsets",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1StatefulSetList
    },
    401: {},
    default: {}
  },
  serializer
};

const createAppsV1NamespacedStatefulSetOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/apps/v1/namespaces/{namespace}/statefulsets",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1StatefulSet,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1StatefulSet
    },
    201: {
      bodyMapper: Mappers.V1StatefulSet
    },
    202: {
      bodyMapper: Mappers.V1StatefulSet
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteAppsV1CollectionNamespacedStatefulSetOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/apps/v1/namespaces/{namespace}/statefulsets",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const readAppsV1NamespacedStatefulSetOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1/namespaces/{namespace}/statefulsets/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.exact,
    Parameters.exportParameter,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1StatefulSet
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceAppsV1NamespacedStatefulSetOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/apps/v1/namespaces/{namespace}/statefulsets/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1StatefulSet,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1StatefulSet
    },
    201: {
      bodyMapper: Mappers.V1StatefulSet
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteAppsV1NamespacedStatefulSetOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/apps/v1/namespaces/{namespace}/statefulsets/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy,
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const patchAppsV1NamespacedStatefulSetOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/apps/v1/namespaces/{namespace}/statefulsets/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.V1StatefulSet
    },
    401: {},
    default: {}
  },
  serializer
};

const readAppsV1NamespacedStatefulSetScaleOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1/namespaces/{namespace}/statefulsets/{name}/scale",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Scale
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceAppsV1NamespacedStatefulSetScaleOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/apps/v1/namespaces/{namespace}/statefulsets/{name}/scale",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1Scale,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Scale
    },
    201: {
      bodyMapper: Mappers.V1Scale
    },
    401: {},
    default: {}
  },
  serializer
};

const patchAppsV1NamespacedStatefulSetScaleOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/apps/v1/namespaces/{namespace}/statefulsets/{name}/scale",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.V1Scale
    },
    401: {},
    default: {}
  },
  serializer
};

const readAppsV1NamespacedStatefulSetStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1/namespaces/{namespace}/statefulsets/{name}/status",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1StatefulSet
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceAppsV1NamespacedStatefulSetStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/apps/v1/namespaces/{namespace}/statefulsets/{name}/status",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1StatefulSet,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1StatefulSet
    },
    201: {
      bodyMapper: Mappers.V1StatefulSet
    },
    401: {},
    default: {}
  },
  serializer
};

const patchAppsV1NamespacedStatefulSetStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/apps/v1/namespaces/{namespace}/statefulsets/{name}/status",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.V1StatefulSet
    },
    401: {},
    default: {}
  },
  serializer
};

const listAppsV1ReplicaSetForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1/replicasets",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1ReplicaSetList
    },
    401: {},
    default: {}
  },
  serializer
};

const listAppsV1StatefulSetForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1/statefulsets",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1StatefulSetList
    },
    401: {},
    default: {}
  },
  serializer
};

const watchAppsV1ControllerRevisionListForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1/watch/controllerrevisions",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchAppsV1DaemonSetListForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1/watch/daemonsets",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchAppsV1DeploymentListForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1/watch/deployments",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchAppsV1NamespacedControllerRevisionListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1/watch/namespaces/{namespace}/controllerrevisions",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchAppsV1NamespacedControllerRevisionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1/watch/namespaces/{namespace}/controllerrevisions/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchAppsV1NamespacedDaemonSetListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1/watch/namespaces/{namespace}/daemonsets",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchAppsV1NamespacedDaemonSetOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1/watch/namespaces/{namespace}/daemonsets/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchAppsV1NamespacedDeploymentListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1/watch/namespaces/{namespace}/deployments",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchAppsV1NamespacedDeploymentOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1/watch/namespaces/{namespace}/deployments/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchAppsV1NamespacedReplicaSetListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1/watch/namespaces/{namespace}/replicasets",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchAppsV1NamespacedReplicaSetOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1/watch/namespaces/{namespace}/replicasets/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchAppsV1NamespacedStatefulSetListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1/watch/namespaces/{namespace}/statefulsets",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchAppsV1NamespacedStatefulSetOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1/watch/namespaces/{namespace}/statefulsets/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchAppsV1ReplicaSetListForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1/watch/replicasets",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchAppsV1StatefulSetListForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1/watch/statefulsets",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const getAppsV1beta1APIResourcesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1beta1/",
  responses: {
    200: {
      bodyMapper: Mappers.V1APIResourceList
    },
    401: {},
    default: {}
  },
  serializer
};

const listAppsV1beta1ControllerRevisionForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1beta1/controllerrevisions",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1ControllerRevisionList
    },
    401: {},
    default: {}
  },
  serializer
};

const listAppsV1beta1DeploymentForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1beta1/deployments",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1DeploymentList
    },
    401: {},
    default: {}
  },
  serializer
};

const listAppsV1beta1NamespacedControllerRevisionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1beta1/namespaces/{namespace}/controllerrevisions",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1ControllerRevisionList
    },
    401: {},
    default: {}
  },
  serializer
};

const createAppsV1beta1NamespacedControllerRevisionOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/apps/v1beta1/namespaces/{namespace}/controllerrevisions",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1beta1ControllerRevision,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1ControllerRevision
    },
    201: {
      bodyMapper: Mappers.V1beta1ControllerRevision
    },
    202: {
      bodyMapper: Mappers.V1beta1ControllerRevision
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteAppsV1beta1CollectionNamespacedControllerRevisionOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/apps/v1beta1/namespaces/{namespace}/controllerrevisions",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const readAppsV1beta1NamespacedControllerRevisionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1beta1/namespaces/{namespace}/controllerrevisions/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.exact,
    Parameters.exportParameter,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1ControllerRevision
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceAppsV1beta1NamespacedControllerRevisionOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/apps/v1beta1/namespaces/{namespace}/controllerrevisions/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1beta1ControllerRevision,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1ControllerRevision
    },
    201: {
      bodyMapper: Mappers.V1beta1ControllerRevision
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteAppsV1beta1NamespacedControllerRevisionOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/apps/v1beta1/namespaces/{namespace}/controllerrevisions/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy,
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const patchAppsV1beta1NamespacedControllerRevisionOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/apps/v1beta1/namespaces/{namespace}/controllerrevisions/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1ControllerRevision
    },
    401: {},
    default: {}
  },
  serializer
};

const listAppsV1beta1NamespacedDeploymentOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1beta1/namespaces/{namespace}/deployments",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1DeploymentList
    },
    401: {},
    default: {}
  },
  serializer
};

const createAppsV1beta1NamespacedDeploymentOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/apps/v1beta1/namespaces/{namespace}/deployments",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1beta1Deployment,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1Deployment
    },
    201: {
      bodyMapper: Mappers.V1beta1Deployment
    },
    202: {
      bodyMapper: Mappers.V1beta1Deployment
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteAppsV1beta1CollectionNamespacedDeploymentOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/apps/v1beta1/namespaces/{namespace}/deployments",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const readAppsV1beta1NamespacedDeploymentOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1beta1/namespaces/{namespace}/deployments/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.exact,
    Parameters.exportParameter,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1Deployment
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceAppsV1beta1NamespacedDeploymentOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/apps/v1beta1/namespaces/{namespace}/deployments/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1beta1Deployment,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1Deployment
    },
    201: {
      bodyMapper: Mappers.V1beta1Deployment
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteAppsV1beta1NamespacedDeploymentOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/apps/v1beta1/namespaces/{namespace}/deployments/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy,
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const patchAppsV1beta1NamespacedDeploymentOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/apps/v1beta1/namespaces/{namespace}/deployments/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1Deployment
    },
    401: {},
    default: {}
  },
  serializer
};

const createAppsV1beta1NamespacedDeploymentRollbackOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/apps/v1beta1/namespaces/{namespace}/deployments/{name}/rollback",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1beta1DeploymentRollback,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1DeploymentRollback
    },
    201: {
      bodyMapper: Mappers.V1beta1DeploymentRollback
    },
    202: {
      bodyMapper: Mappers.V1beta1DeploymentRollback
    },
    401: {},
    default: {}
  },
  serializer
};

const readAppsV1beta1NamespacedDeploymentScaleOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1beta1/namespaces/{namespace}/deployments/{name}/scale",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1Scale
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceAppsV1beta1NamespacedDeploymentScaleOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/apps/v1beta1/namespaces/{namespace}/deployments/{name}/scale",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1beta1Scale,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1Scale
    },
    201: {
      bodyMapper: Mappers.V1beta1Scale
    },
    401: {},
    default: {}
  },
  serializer
};

const patchAppsV1beta1NamespacedDeploymentScaleOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/apps/v1beta1/namespaces/{namespace}/deployments/{name}/scale",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1Scale
    },
    401: {},
    default: {}
  },
  serializer
};

const readAppsV1beta1NamespacedDeploymentStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1beta1/namespaces/{namespace}/deployments/{name}/status",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1Deployment
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceAppsV1beta1NamespacedDeploymentStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/apps/v1beta1/namespaces/{namespace}/deployments/{name}/status",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1beta1Deployment,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1Deployment
    },
    201: {
      bodyMapper: Mappers.V1beta1Deployment
    },
    401: {},
    default: {}
  },
  serializer
};

const patchAppsV1beta1NamespacedDeploymentStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/apps/v1beta1/namespaces/{namespace}/deployments/{name}/status",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1Deployment
    },
    401: {},
    default: {}
  },
  serializer
};

const listAppsV1beta1NamespacedStatefulSetOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1beta1/namespaces/{namespace}/statefulsets",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1StatefulSetList
    },
    401: {},
    default: {}
  },
  serializer
};

const createAppsV1beta1NamespacedStatefulSetOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/apps/v1beta1/namespaces/{namespace}/statefulsets",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1beta1StatefulSet,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1StatefulSet
    },
    201: {
      bodyMapper: Mappers.V1beta1StatefulSet
    },
    202: {
      bodyMapper: Mappers.V1beta1StatefulSet
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteAppsV1beta1CollectionNamespacedStatefulSetOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/apps/v1beta1/namespaces/{namespace}/statefulsets",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const readAppsV1beta1NamespacedStatefulSetOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1beta1/namespaces/{namespace}/statefulsets/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.exact,
    Parameters.exportParameter,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1StatefulSet
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceAppsV1beta1NamespacedStatefulSetOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/apps/v1beta1/namespaces/{namespace}/statefulsets/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1beta1StatefulSet,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1StatefulSet
    },
    201: {
      bodyMapper: Mappers.V1beta1StatefulSet
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteAppsV1beta1NamespacedStatefulSetOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/apps/v1beta1/namespaces/{namespace}/statefulsets/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy,
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const patchAppsV1beta1NamespacedStatefulSetOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/apps/v1beta1/namespaces/{namespace}/statefulsets/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1StatefulSet
    },
    401: {},
    default: {}
  },
  serializer
};

const readAppsV1beta1NamespacedStatefulSetScaleOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1beta1/namespaces/{namespace}/statefulsets/{name}/scale",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1Scale
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceAppsV1beta1NamespacedStatefulSetScaleOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/apps/v1beta1/namespaces/{namespace}/statefulsets/{name}/scale",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1beta1Scale,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1Scale
    },
    201: {
      bodyMapper: Mappers.V1beta1Scale
    },
    401: {},
    default: {}
  },
  serializer
};

const patchAppsV1beta1NamespacedStatefulSetScaleOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/apps/v1beta1/namespaces/{namespace}/statefulsets/{name}/scale",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1Scale
    },
    401: {},
    default: {}
  },
  serializer
};

const readAppsV1beta1NamespacedStatefulSetStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1beta1/namespaces/{namespace}/statefulsets/{name}/status",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1StatefulSet
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceAppsV1beta1NamespacedStatefulSetStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/apps/v1beta1/namespaces/{namespace}/statefulsets/{name}/status",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1beta1StatefulSet,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1StatefulSet
    },
    201: {
      bodyMapper: Mappers.V1beta1StatefulSet
    },
    401: {},
    default: {}
  },
  serializer
};

const patchAppsV1beta1NamespacedStatefulSetStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/apps/v1beta1/namespaces/{namespace}/statefulsets/{name}/status",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1StatefulSet
    },
    401: {},
    default: {}
  },
  serializer
};

const listAppsV1beta1StatefulSetForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1beta1/statefulsets",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1StatefulSetList
    },
    401: {},
    default: {}
  },
  serializer
};

const watchAppsV1beta1ControllerRevisionListForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1beta1/watch/controllerrevisions",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchAppsV1beta1DeploymentListForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1beta1/watch/deployments",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchAppsV1beta1NamespacedControllerRevisionListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1beta1/watch/namespaces/{namespace}/controllerrevisions",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchAppsV1beta1NamespacedControllerRevisionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1beta1/watch/namespaces/{namespace}/controllerrevisions/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchAppsV1beta1NamespacedDeploymentListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1beta1/watch/namespaces/{namespace}/deployments",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchAppsV1beta1NamespacedDeploymentOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1beta1/watch/namespaces/{namespace}/deployments/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchAppsV1beta1NamespacedStatefulSetListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1beta1/watch/namespaces/{namespace}/statefulsets",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchAppsV1beta1NamespacedStatefulSetOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1beta1/watch/namespaces/{namespace}/statefulsets/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchAppsV1beta1StatefulSetListForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1beta1/watch/statefulsets",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const getAppsV1beta2APIResourcesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1beta2/",
  responses: {
    200: {
      bodyMapper: Mappers.V1APIResourceList
    },
    401: {},
    default: {}
  },
  serializer
};

const listAppsV1beta2ControllerRevisionForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1beta2/controllerrevisions",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1beta2ControllerRevisionList
    },
    401: {},
    default: {}
  },
  serializer
};

const listAppsV1beta2DaemonSetForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1beta2/daemonsets",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1beta2DaemonSetList
    },
    401: {},
    default: {}
  },
  serializer
};

const listAppsV1beta2DeploymentForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1beta2/deployments",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1beta2DeploymentList
    },
    401: {},
    default: {}
  },
  serializer
};

const listAppsV1beta2NamespacedControllerRevisionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1beta2/namespaces/{namespace}/controllerrevisions",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1beta2ControllerRevisionList
    },
    401: {},
    default: {}
  },
  serializer
};

const createAppsV1beta2NamespacedControllerRevisionOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/apps/v1beta2/namespaces/{namespace}/controllerrevisions",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1beta2ControllerRevision,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta2ControllerRevision
    },
    201: {
      bodyMapper: Mappers.V1beta2ControllerRevision
    },
    202: {
      bodyMapper: Mappers.V1beta2ControllerRevision
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteAppsV1beta2CollectionNamespacedControllerRevisionOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/apps/v1beta2/namespaces/{namespace}/controllerrevisions",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const readAppsV1beta2NamespacedControllerRevisionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1beta2/namespaces/{namespace}/controllerrevisions/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.exact,
    Parameters.exportParameter,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1beta2ControllerRevision
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceAppsV1beta2NamespacedControllerRevisionOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/apps/v1beta2/namespaces/{namespace}/controllerrevisions/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1beta2ControllerRevision,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta2ControllerRevision
    },
    201: {
      bodyMapper: Mappers.V1beta2ControllerRevision
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteAppsV1beta2NamespacedControllerRevisionOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/apps/v1beta2/namespaces/{namespace}/controllerrevisions/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy,
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const patchAppsV1beta2NamespacedControllerRevisionOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/apps/v1beta2/namespaces/{namespace}/controllerrevisions/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta2ControllerRevision
    },
    401: {},
    default: {}
  },
  serializer
};

const listAppsV1beta2NamespacedDaemonSetOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1beta2/namespaces/{namespace}/daemonsets",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1beta2DaemonSetList
    },
    401: {},
    default: {}
  },
  serializer
};

const createAppsV1beta2NamespacedDaemonSetOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/apps/v1beta2/namespaces/{namespace}/daemonsets",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1beta2DaemonSet,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta2DaemonSet
    },
    201: {
      bodyMapper: Mappers.V1beta2DaemonSet
    },
    202: {
      bodyMapper: Mappers.V1beta2DaemonSet
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteAppsV1beta2CollectionNamespacedDaemonSetOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/apps/v1beta2/namespaces/{namespace}/daemonsets",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const readAppsV1beta2NamespacedDaemonSetOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1beta2/namespaces/{namespace}/daemonsets/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.exact,
    Parameters.exportParameter,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1beta2DaemonSet
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceAppsV1beta2NamespacedDaemonSetOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/apps/v1beta2/namespaces/{namespace}/daemonsets/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1beta2DaemonSet,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta2DaemonSet
    },
    201: {
      bodyMapper: Mappers.V1beta2DaemonSet
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteAppsV1beta2NamespacedDaemonSetOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/apps/v1beta2/namespaces/{namespace}/daemonsets/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy,
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const patchAppsV1beta2NamespacedDaemonSetOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/apps/v1beta2/namespaces/{namespace}/daemonsets/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta2DaemonSet
    },
    401: {},
    default: {}
  },
  serializer
};

const readAppsV1beta2NamespacedDaemonSetStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1beta2/namespaces/{namespace}/daemonsets/{name}/status",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1beta2DaemonSet
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceAppsV1beta2NamespacedDaemonSetStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/apps/v1beta2/namespaces/{namespace}/daemonsets/{name}/status",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1beta2DaemonSet,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta2DaemonSet
    },
    201: {
      bodyMapper: Mappers.V1beta2DaemonSet
    },
    401: {},
    default: {}
  },
  serializer
};

const patchAppsV1beta2NamespacedDaemonSetStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/apps/v1beta2/namespaces/{namespace}/daemonsets/{name}/status",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta2DaemonSet
    },
    401: {},
    default: {}
  },
  serializer
};

const listAppsV1beta2NamespacedDeploymentOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1beta2/namespaces/{namespace}/deployments",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1beta2DeploymentList
    },
    401: {},
    default: {}
  },
  serializer
};

const createAppsV1beta2NamespacedDeploymentOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/apps/v1beta2/namespaces/{namespace}/deployments",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1beta2Deployment,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta2Deployment
    },
    201: {
      bodyMapper: Mappers.V1beta2Deployment
    },
    202: {
      bodyMapper: Mappers.V1beta2Deployment
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteAppsV1beta2CollectionNamespacedDeploymentOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/apps/v1beta2/namespaces/{namespace}/deployments",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const readAppsV1beta2NamespacedDeploymentOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1beta2/namespaces/{namespace}/deployments/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.exact,
    Parameters.exportParameter,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1beta2Deployment
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceAppsV1beta2NamespacedDeploymentOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/apps/v1beta2/namespaces/{namespace}/deployments/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1beta2Deployment,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta2Deployment
    },
    201: {
      bodyMapper: Mappers.V1beta2Deployment
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteAppsV1beta2NamespacedDeploymentOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/apps/v1beta2/namespaces/{namespace}/deployments/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy,
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const patchAppsV1beta2NamespacedDeploymentOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/apps/v1beta2/namespaces/{namespace}/deployments/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta2Deployment
    },
    401: {},
    default: {}
  },
  serializer
};

const readAppsV1beta2NamespacedDeploymentScaleOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1beta2/namespaces/{namespace}/deployments/{name}/scale",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1beta2Scale
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceAppsV1beta2NamespacedDeploymentScaleOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/apps/v1beta2/namespaces/{namespace}/deployments/{name}/scale",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1beta2Scale,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta2Scale
    },
    201: {
      bodyMapper: Mappers.V1beta2Scale
    },
    401: {},
    default: {}
  },
  serializer
};

const patchAppsV1beta2NamespacedDeploymentScaleOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/apps/v1beta2/namespaces/{namespace}/deployments/{name}/scale",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta2Scale
    },
    401: {},
    default: {}
  },
  serializer
};

const readAppsV1beta2NamespacedDeploymentStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1beta2/namespaces/{namespace}/deployments/{name}/status",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1beta2Deployment
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceAppsV1beta2NamespacedDeploymentStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/apps/v1beta2/namespaces/{namespace}/deployments/{name}/status",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1beta2Deployment,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta2Deployment
    },
    201: {
      bodyMapper: Mappers.V1beta2Deployment
    },
    401: {},
    default: {}
  },
  serializer
};

const patchAppsV1beta2NamespacedDeploymentStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/apps/v1beta2/namespaces/{namespace}/deployments/{name}/status",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta2Deployment
    },
    401: {},
    default: {}
  },
  serializer
};

const listAppsV1beta2NamespacedReplicaSetOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1beta2/namespaces/{namespace}/replicasets",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1beta2ReplicaSetList
    },
    401: {},
    default: {}
  },
  serializer
};

const createAppsV1beta2NamespacedReplicaSetOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/apps/v1beta2/namespaces/{namespace}/replicasets",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1beta2ReplicaSet,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta2ReplicaSet
    },
    201: {
      bodyMapper: Mappers.V1beta2ReplicaSet
    },
    202: {
      bodyMapper: Mappers.V1beta2ReplicaSet
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteAppsV1beta2CollectionNamespacedReplicaSetOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/apps/v1beta2/namespaces/{namespace}/replicasets",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const readAppsV1beta2NamespacedReplicaSetOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1beta2/namespaces/{namespace}/replicasets/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.exact,
    Parameters.exportParameter,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1beta2ReplicaSet
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceAppsV1beta2NamespacedReplicaSetOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/apps/v1beta2/namespaces/{namespace}/replicasets/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1beta2ReplicaSet,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta2ReplicaSet
    },
    201: {
      bodyMapper: Mappers.V1beta2ReplicaSet
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteAppsV1beta2NamespacedReplicaSetOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/apps/v1beta2/namespaces/{namespace}/replicasets/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy,
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const patchAppsV1beta2NamespacedReplicaSetOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/apps/v1beta2/namespaces/{namespace}/replicasets/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta2ReplicaSet
    },
    401: {},
    default: {}
  },
  serializer
};

const readAppsV1beta2NamespacedReplicaSetScaleOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1beta2/namespaces/{namespace}/replicasets/{name}/scale",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1beta2Scale
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceAppsV1beta2NamespacedReplicaSetScaleOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/apps/v1beta2/namespaces/{namespace}/replicasets/{name}/scale",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1beta2Scale,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta2Scale
    },
    201: {
      bodyMapper: Mappers.V1beta2Scale
    },
    401: {},
    default: {}
  },
  serializer
};

const patchAppsV1beta2NamespacedReplicaSetScaleOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/apps/v1beta2/namespaces/{namespace}/replicasets/{name}/scale",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta2Scale
    },
    401: {},
    default: {}
  },
  serializer
};

const readAppsV1beta2NamespacedReplicaSetStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1beta2/namespaces/{namespace}/replicasets/{name}/status",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1beta2ReplicaSet
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceAppsV1beta2NamespacedReplicaSetStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/apps/v1beta2/namespaces/{namespace}/replicasets/{name}/status",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1beta2ReplicaSet,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta2ReplicaSet
    },
    201: {
      bodyMapper: Mappers.V1beta2ReplicaSet
    },
    401: {},
    default: {}
  },
  serializer
};

const patchAppsV1beta2NamespacedReplicaSetStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/apps/v1beta2/namespaces/{namespace}/replicasets/{name}/status",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta2ReplicaSet
    },
    401: {},
    default: {}
  },
  serializer
};

const listAppsV1beta2NamespacedStatefulSetOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1beta2/namespaces/{namespace}/statefulsets",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1beta2StatefulSetList
    },
    401: {},
    default: {}
  },
  serializer
};

const createAppsV1beta2NamespacedStatefulSetOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/apps/v1beta2/namespaces/{namespace}/statefulsets",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1beta2StatefulSet,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta2StatefulSet
    },
    201: {
      bodyMapper: Mappers.V1beta2StatefulSet
    },
    202: {
      bodyMapper: Mappers.V1beta2StatefulSet
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteAppsV1beta2CollectionNamespacedStatefulSetOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/apps/v1beta2/namespaces/{namespace}/statefulsets",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const readAppsV1beta2NamespacedStatefulSetOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1beta2/namespaces/{namespace}/statefulsets/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.exact,
    Parameters.exportParameter,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1beta2StatefulSet
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceAppsV1beta2NamespacedStatefulSetOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/apps/v1beta2/namespaces/{namespace}/statefulsets/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1beta2StatefulSet,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta2StatefulSet
    },
    201: {
      bodyMapper: Mappers.V1beta2StatefulSet
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteAppsV1beta2NamespacedStatefulSetOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/apps/v1beta2/namespaces/{namespace}/statefulsets/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy,
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const patchAppsV1beta2NamespacedStatefulSetOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/apps/v1beta2/namespaces/{namespace}/statefulsets/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta2StatefulSet
    },
    401: {},
    default: {}
  },
  serializer
};

const readAppsV1beta2NamespacedStatefulSetScaleOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1beta2/namespaces/{namespace}/statefulsets/{name}/scale",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1beta2Scale
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceAppsV1beta2NamespacedStatefulSetScaleOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/apps/v1beta2/namespaces/{namespace}/statefulsets/{name}/scale",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1beta2Scale,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta2Scale
    },
    201: {
      bodyMapper: Mappers.V1beta2Scale
    },
    401: {},
    default: {}
  },
  serializer
};

const patchAppsV1beta2NamespacedStatefulSetScaleOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/apps/v1beta2/namespaces/{namespace}/statefulsets/{name}/scale",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta2Scale
    },
    401: {},
    default: {}
  },
  serializer
};

const readAppsV1beta2NamespacedStatefulSetStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1beta2/namespaces/{namespace}/statefulsets/{name}/status",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1beta2StatefulSet
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceAppsV1beta2NamespacedStatefulSetStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/apps/v1beta2/namespaces/{namespace}/statefulsets/{name}/status",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1beta2StatefulSet,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta2StatefulSet
    },
    201: {
      bodyMapper: Mappers.V1beta2StatefulSet
    },
    401: {},
    default: {}
  },
  serializer
};

const patchAppsV1beta2NamespacedStatefulSetStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/apps/v1beta2/namespaces/{namespace}/statefulsets/{name}/status",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta2StatefulSet
    },
    401: {},
    default: {}
  },
  serializer
};

const listAppsV1beta2ReplicaSetForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1beta2/replicasets",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1beta2ReplicaSetList
    },
    401: {},
    default: {}
  },
  serializer
};

const listAppsV1beta2StatefulSetForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1beta2/statefulsets",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1beta2StatefulSetList
    },
    401: {},
    default: {}
  },
  serializer
};

const watchAppsV1beta2ControllerRevisionListForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1beta2/watch/controllerrevisions",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchAppsV1beta2DaemonSetListForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1beta2/watch/daemonsets",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchAppsV1beta2DeploymentListForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1beta2/watch/deployments",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchAppsV1beta2NamespacedControllerRevisionListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1beta2/watch/namespaces/{namespace}/controllerrevisions",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchAppsV1beta2NamespacedControllerRevisionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1beta2/watch/namespaces/{namespace}/controllerrevisions/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchAppsV1beta2NamespacedDaemonSetListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1beta2/watch/namespaces/{namespace}/daemonsets",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchAppsV1beta2NamespacedDaemonSetOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1beta2/watch/namespaces/{namespace}/daemonsets/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchAppsV1beta2NamespacedDeploymentListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1beta2/watch/namespaces/{namespace}/deployments",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchAppsV1beta2NamespacedDeploymentOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1beta2/watch/namespaces/{namespace}/deployments/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchAppsV1beta2NamespacedReplicaSetListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1beta2/watch/namespaces/{namespace}/replicasets",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchAppsV1beta2NamespacedReplicaSetOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1beta2/watch/namespaces/{namespace}/replicasets/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchAppsV1beta2NamespacedStatefulSetListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1beta2/watch/namespaces/{namespace}/statefulsets",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchAppsV1beta2NamespacedStatefulSetOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1beta2/watch/namespaces/{namespace}/statefulsets/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchAppsV1beta2ReplicaSetListForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1beta2/watch/replicasets",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchAppsV1beta2StatefulSetListForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/apps/v1beta2/watch/statefulsets",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const getAuthenticationAPIGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/authentication.k8s.io/",
  responses: {
    200: {
      bodyMapper: Mappers.V1APIGroup
    },
    401: {},
    default: {}
  },
  serializer
};

const getAuthenticationV1APIResourcesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/authentication.k8s.io/v1/",
  responses: {
    200: {
      bodyMapper: Mappers.V1APIResourceList
    },
    401: {},
    default: {}
  },
  serializer
};

const createAuthenticationV1TokenReviewOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/authentication.k8s.io/v1/tokenreviews",
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1TokenReview,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1TokenReview
    },
    201: {
      bodyMapper: Mappers.V1TokenReview
    },
    202: {
      bodyMapper: Mappers.V1TokenReview
    },
    401: {},
    default: {}
  },
  serializer
};

const getAuthenticationV1beta1APIResourcesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/authentication.k8s.io/v1beta1/",
  responses: {
    200: {
      bodyMapper: Mappers.V1APIResourceList
    },
    401: {},
    default: {}
  },
  serializer
};

const createAuthenticationV1beta1TokenReviewOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/authentication.k8s.io/v1beta1/tokenreviews",
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1beta1TokenReview,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1TokenReview
    },
    201: {
      bodyMapper: Mappers.V1beta1TokenReview
    },
    202: {
      bodyMapper: Mappers.V1beta1TokenReview
    },
    401: {},
    default: {}
  },
  serializer
};

const getAuthorizationAPIGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/authorization.k8s.io/",
  responses: {
    200: {
      bodyMapper: Mappers.V1APIGroup
    },
    401: {},
    default: {}
  },
  serializer
};

const getAuthorizationV1APIResourcesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/authorization.k8s.io/v1/",
  responses: {
    200: {
      bodyMapper: Mappers.V1APIResourceList
    },
    401: {},
    default: {}
  },
  serializer
};

const createAuthorizationV1NamespacedLocalSubjectAccessReviewOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1LocalSubjectAccessReview,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1LocalSubjectAccessReview
    },
    201: {
      bodyMapper: Mappers.V1LocalSubjectAccessReview
    },
    202: {
      bodyMapper: Mappers.V1LocalSubjectAccessReview
    },
    401: {},
    default: {}
  },
  serializer
};

const createAuthorizationV1SelfSubjectAccessReviewOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/authorization.k8s.io/v1/selfsubjectaccessreviews",
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1SelfSubjectAccessReview,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1SelfSubjectAccessReview
    },
    201: {
      bodyMapper: Mappers.V1SelfSubjectAccessReview
    },
    202: {
      bodyMapper: Mappers.V1SelfSubjectAccessReview
    },
    401: {},
    default: {}
  },
  serializer
};

const createAuthorizationV1SelfSubjectRulesReviewOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/authorization.k8s.io/v1/selfsubjectrulesreviews",
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1SelfSubjectRulesReview,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1SelfSubjectRulesReview
    },
    201: {
      bodyMapper: Mappers.V1SelfSubjectRulesReview
    },
    202: {
      bodyMapper: Mappers.V1SelfSubjectRulesReview
    },
    401: {},
    default: {}
  },
  serializer
};

const createAuthorizationV1SubjectAccessReviewOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/authorization.k8s.io/v1/subjectaccessreviews",
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1SubjectAccessReview,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1SubjectAccessReview
    },
    201: {
      bodyMapper: Mappers.V1SubjectAccessReview
    },
    202: {
      bodyMapper: Mappers.V1SubjectAccessReview
    },
    401: {},
    default: {}
  },
  serializer
};

const getAuthorizationV1beta1APIResourcesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/authorization.k8s.io/v1beta1/",
  responses: {
    200: {
      bodyMapper: Mappers.V1APIResourceList
    },
    401: {},
    default: {}
  },
  serializer
};

const createAuthorizationV1beta1NamespacedLocalSubjectAccessReviewOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/authorization.k8s.io/v1beta1/namespaces/{namespace}/localsubjectaccessreviews",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1beta1LocalSubjectAccessReview,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1LocalSubjectAccessReview
    },
    201: {
      bodyMapper: Mappers.V1beta1LocalSubjectAccessReview
    },
    202: {
      bodyMapper: Mappers.V1beta1LocalSubjectAccessReview
    },
    401: {},
    default: {}
  },
  serializer
};

const createAuthorizationV1beta1SelfSubjectAccessReviewOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/authorization.k8s.io/v1beta1/selfsubjectaccessreviews",
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1beta1SelfSubjectAccessReview,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1SelfSubjectAccessReview
    },
    201: {
      bodyMapper: Mappers.V1beta1SelfSubjectAccessReview
    },
    202: {
      bodyMapper: Mappers.V1beta1SelfSubjectAccessReview
    },
    401: {},
    default: {}
  },
  serializer
};

const createAuthorizationV1beta1SelfSubjectRulesReviewOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/authorization.k8s.io/v1beta1/selfsubjectrulesreviews",
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1beta1SelfSubjectRulesReview,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1SelfSubjectRulesReview
    },
    201: {
      bodyMapper: Mappers.V1beta1SelfSubjectRulesReview
    },
    202: {
      bodyMapper: Mappers.V1beta1SelfSubjectRulesReview
    },
    401: {},
    default: {}
  },
  serializer
};

const createAuthorizationV1beta1SubjectAccessReviewOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/authorization.k8s.io/v1beta1/subjectaccessreviews",
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1beta1SubjectAccessReview,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1SubjectAccessReview
    },
    201: {
      bodyMapper: Mappers.V1beta1SubjectAccessReview
    },
    202: {
      bodyMapper: Mappers.V1beta1SubjectAccessReview
    },
    401: {},
    default: {}
  },
  serializer
};

const getAuthorizationOpenshiftIoAPIGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/authorization.openshift.io/",
  responses: {
    200: {
      bodyMapper: Mappers.V1APIGroup
    },
    401: {},
    default: {}
  },
  serializer
};

const getAuthorizationOpenshiftIoV1APIResourcesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/authorization.openshift.io/v1/",
  responses: {
    200: {
      bodyMapper: Mappers.V1APIResourceList
    },
    401: {},
    default: {}
  },
  serializer
};

const listAuthorizationOpenshiftIoV1ClusterRoleBindingOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/authorization.openshift.io/v1/clusterrolebindings",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiauthorizationv1ClusterRoleBindingList
    },
    401: {},
    default: {}
  },
  serializer
};

const createAuthorizationOpenshiftIoV1ClusterRoleBindingOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/authorization.openshift.io/v1/clusterrolebindings",
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Comgithubopenshiftapiauthorizationv1ClusterRoleBinding,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiauthorizationv1ClusterRoleBinding
    },
    201: {
      bodyMapper: Mappers.Comgithubopenshiftapiauthorizationv1ClusterRoleBinding
    },
    202: {
      bodyMapper: Mappers.Comgithubopenshiftapiauthorizationv1ClusterRoleBinding
    },
    401: {},
    default: {}
  },
  serializer
};

const readAuthorizationOpenshiftIoV1ClusterRoleBindingOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/authorization.openshift.io/v1/clusterrolebindings/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiauthorizationv1ClusterRoleBinding
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceAuthorizationOpenshiftIoV1ClusterRoleBindingOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/authorization.openshift.io/v1/clusterrolebindings/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Comgithubopenshiftapiauthorizationv1ClusterRoleBinding,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiauthorizationv1ClusterRoleBinding
    },
    201: {
      bodyMapper: Mappers.Comgithubopenshiftapiauthorizationv1ClusterRoleBinding
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteAuthorizationOpenshiftIoV1ClusterRoleBindingOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/authorization.openshift.io/v1/clusterrolebindings/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy,
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const patchAuthorizationOpenshiftIoV1ClusterRoleBindingOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/authorization.openshift.io/v1/clusterrolebindings/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiauthorizationv1ClusterRoleBinding
    },
    401: {},
    default: {}
  },
  serializer
};

const listAuthorizationOpenshiftIoV1ClusterRoleOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/authorization.openshift.io/v1/clusterroles",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiauthorizationv1ClusterRoleList
    },
    401: {},
    default: {}
  },
  serializer
};

const createAuthorizationOpenshiftIoV1ClusterRoleOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/authorization.openshift.io/v1/clusterroles",
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Comgithubopenshiftapiauthorizationv1ClusterRole,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiauthorizationv1ClusterRole
    },
    201: {
      bodyMapper: Mappers.Comgithubopenshiftapiauthorizationv1ClusterRole
    },
    202: {
      bodyMapper: Mappers.Comgithubopenshiftapiauthorizationv1ClusterRole
    },
    401: {},
    default: {}
  },
  serializer
};

const readAuthorizationOpenshiftIoV1ClusterRoleOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/authorization.openshift.io/v1/clusterroles/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiauthorizationv1ClusterRole
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceAuthorizationOpenshiftIoV1ClusterRoleOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/authorization.openshift.io/v1/clusterroles/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Comgithubopenshiftapiauthorizationv1ClusterRole,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiauthorizationv1ClusterRole
    },
    201: {
      bodyMapper: Mappers.Comgithubopenshiftapiauthorizationv1ClusterRole
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteAuthorizationOpenshiftIoV1ClusterRoleOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/authorization.openshift.io/v1/clusterroles/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy,
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const patchAuthorizationOpenshiftIoV1ClusterRoleOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/authorization.openshift.io/v1/clusterroles/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiauthorizationv1ClusterRole
    },
    401: {},
    default: {}
  },
  serializer
};

const createAuthorizationOpenshiftIoV1NamespacedLocalResourceAccessReviewOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/authorization.openshift.io/v1/namespaces/{namespace}/localresourceaccessreviews",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Comgithubopenshiftapiauthorizationv1LocalResourceAccessReview,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiauthorizationv1LocalResourceAccessReview
    },
    201: {
      bodyMapper: Mappers.Comgithubopenshiftapiauthorizationv1LocalResourceAccessReview
    },
    202: {
      bodyMapper: Mappers.Comgithubopenshiftapiauthorizationv1LocalResourceAccessReview
    },
    401: {},
    default: {}
  },
  serializer
};

const createAuthorizationOpenshiftIoV1NamespacedLocalSubjectAccessReviewOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/authorization.openshift.io/v1/namespaces/{namespace}/localsubjectaccessreviews",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Comgithubopenshiftapiauthorizationv1LocalSubjectAccessReview,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiauthorizationv1LocalSubjectAccessReview
    },
    201: {
      bodyMapper: Mappers.Comgithubopenshiftapiauthorizationv1LocalSubjectAccessReview
    },
    202: {
      bodyMapper: Mappers.Comgithubopenshiftapiauthorizationv1LocalSubjectAccessReview
    },
    401: {},
    default: {}
  },
  serializer
};

const listAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/authorization.openshift.io/v1/namespaces/{namespace}/rolebindingrestrictions",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiauthorizationv1RoleBindingRestrictionList
    },
    401: {},
    default: {}
  },
  serializer
};

const createAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/authorization.openshift.io/v1/namespaces/{namespace}/rolebindingrestrictions",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Comgithubopenshiftapiauthorizationv1RoleBindingRestriction,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiauthorizationv1RoleBindingRestriction
    },
    201: {
      bodyMapper: Mappers.Comgithubopenshiftapiauthorizationv1RoleBindingRestriction
    },
    202: {
      bodyMapper: Mappers.Comgithubopenshiftapiauthorizationv1RoleBindingRestriction
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteAuthorizationOpenshiftIoV1CollectionNamespacedRoleBindingRestrictionOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/authorization.openshift.io/v1/namespaces/{namespace}/rolebindingrestrictions",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const readAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/authorization.openshift.io/v1/namespaces/{namespace}/rolebindingrestrictions/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.exact,
    Parameters.exportParameter,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiauthorizationv1RoleBindingRestriction
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/authorization.openshift.io/v1/namespaces/{namespace}/rolebindingrestrictions/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Comgithubopenshiftapiauthorizationv1RoleBindingRestriction,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiauthorizationv1RoleBindingRestriction
    },
    201: {
      bodyMapper: Mappers.Comgithubopenshiftapiauthorizationv1RoleBindingRestriction
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/authorization.openshift.io/v1/namespaces/{namespace}/rolebindingrestrictions/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy,
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const patchAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/authorization.openshift.io/v1/namespaces/{namespace}/rolebindingrestrictions/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiauthorizationv1RoleBindingRestriction
    },
    401: {},
    default: {}
  },
  serializer
};

const listAuthorizationOpenshiftIoV1NamespacedRoleBindingOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/authorization.openshift.io/v1/namespaces/{namespace}/rolebindings",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiauthorizationv1RoleBindingList
    },
    401: {},
    default: {}
  },
  serializer
};

const createAuthorizationOpenshiftIoV1NamespacedRoleBindingOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/authorization.openshift.io/v1/namespaces/{namespace}/rolebindings",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Comgithubopenshiftapiauthorizationv1RoleBinding,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiauthorizationv1RoleBinding
    },
    201: {
      bodyMapper: Mappers.Comgithubopenshiftapiauthorizationv1RoleBinding
    },
    202: {
      bodyMapper: Mappers.Comgithubopenshiftapiauthorizationv1RoleBinding
    },
    401: {},
    default: {}
  },
  serializer
};

const readAuthorizationOpenshiftIoV1NamespacedRoleBindingOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/authorization.openshift.io/v1/namespaces/{namespace}/rolebindings/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiauthorizationv1RoleBinding
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceAuthorizationOpenshiftIoV1NamespacedRoleBindingOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/authorization.openshift.io/v1/namespaces/{namespace}/rolebindings/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Comgithubopenshiftapiauthorizationv1RoleBinding,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiauthorizationv1RoleBinding
    },
    201: {
      bodyMapper: Mappers.Comgithubopenshiftapiauthorizationv1RoleBinding
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteAuthorizationOpenshiftIoV1NamespacedRoleBindingOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/authorization.openshift.io/v1/namespaces/{namespace}/rolebindings/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy,
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const patchAuthorizationOpenshiftIoV1NamespacedRoleBindingOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/authorization.openshift.io/v1/namespaces/{namespace}/rolebindings/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiauthorizationv1RoleBinding
    },
    401: {},
    default: {}
  },
  serializer
};

const listAuthorizationOpenshiftIoV1NamespacedRoleOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/authorization.openshift.io/v1/namespaces/{namespace}/roles",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiauthorizationv1RoleList
    },
    401: {},
    default: {}
  },
  serializer
};

const createAuthorizationOpenshiftIoV1NamespacedRoleOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/authorization.openshift.io/v1/namespaces/{namespace}/roles",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Comgithubopenshiftapiauthorizationv1Role,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiauthorizationv1Role
    },
    201: {
      bodyMapper: Mappers.Comgithubopenshiftapiauthorizationv1Role
    },
    202: {
      bodyMapper: Mappers.Comgithubopenshiftapiauthorizationv1Role
    },
    401: {},
    default: {}
  },
  serializer
};

const readAuthorizationOpenshiftIoV1NamespacedRoleOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/authorization.openshift.io/v1/namespaces/{namespace}/roles/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiauthorizationv1Role
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceAuthorizationOpenshiftIoV1NamespacedRoleOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/authorization.openshift.io/v1/namespaces/{namespace}/roles/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Comgithubopenshiftapiauthorizationv1Role,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiauthorizationv1Role
    },
    201: {
      bodyMapper: Mappers.Comgithubopenshiftapiauthorizationv1Role
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteAuthorizationOpenshiftIoV1NamespacedRoleOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/authorization.openshift.io/v1/namespaces/{namespace}/roles/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy,
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const patchAuthorizationOpenshiftIoV1NamespacedRoleOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/authorization.openshift.io/v1/namespaces/{namespace}/roles/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiauthorizationv1Role
    },
    401: {},
    default: {}
  },
  serializer
};

const createAuthorizationOpenshiftIoV1NamespacedSelfSubjectRulesReviewOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/authorization.openshift.io/v1/namespaces/{namespace}/selfsubjectrulesreviews",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Comgithubopenshiftapiauthorizationv1SelfSubjectRulesReview,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiauthorizationv1SelfSubjectRulesReview
    },
    201: {
      bodyMapper: Mappers.Comgithubopenshiftapiauthorizationv1SelfSubjectRulesReview
    },
    202: {
      bodyMapper: Mappers.Comgithubopenshiftapiauthorizationv1SelfSubjectRulesReview
    },
    401: {},
    default: {}
  },
  serializer
};

const createAuthorizationOpenshiftIoV1NamespacedSubjectRulesReviewOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/authorization.openshift.io/v1/namespaces/{namespace}/subjectrulesreviews",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Comgithubopenshiftapiauthorizationv1SubjectRulesReview,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiauthorizationv1SubjectRulesReview
    },
    201: {
      bodyMapper: Mappers.Comgithubopenshiftapiauthorizationv1SubjectRulesReview
    },
    202: {
      bodyMapper: Mappers.Comgithubopenshiftapiauthorizationv1SubjectRulesReview
    },
    401: {},
    default: {}
  },
  serializer
};

const createAuthorizationOpenshiftIoV1ResourceAccessReviewOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/authorization.openshift.io/v1/resourceaccessreviews",
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Comgithubopenshiftapiauthorizationv1ResourceAccessReview,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiauthorizationv1ResourceAccessReview
    },
    201: {
      bodyMapper: Mappers.Comgithubopenshiftapiauthorizationv1ResourceAccessReview
    },
    202: {
      bodyMapper: Mappers.Comgithubopenshiftapiauthorizationv1ResourceAccessReview
    },
    401: {},
    default: {}
  },
  serializer
};

const listAuthorizationOpenshiftIoV1RoleBindingRestrictionForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/authorization.openshift.io/v1/rolebindingrestrictions",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiauthorizationv1RoleBindingRestrictionList
    },
    401: {},
    default: {}
  },
  serializer
};

const listAuthorizationOpenshiftIoV1RoleBindingForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/authorization.openshift.io/v1/rolebindings",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiauthorizationv1RoleBindingList
    },
    401: {},
    default: {}
  },
  serializer
};

const listAuthorizationOpenshiftIoV1RoleForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/authorization.openshift.io/v1/roles",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiauthorizationv1RoleList
    },
    401: {},
    default: {}
  },
  serializer
};

const createAuthorizationOpenshiftIoV1SubjectAccessReviewOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/authorization.openshift.io/v1/subjectaccessreviews",
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Comgithubopenshiftapiauthorizationv1SubjectAccessReview,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiauthorizationv1SubjectAccessReview
    },
    201: {
      bodyMapper: Mappers.Comgithubopenshiftapiauthorizationv1SubjectAccessReview
    },
    202: {
      bodyMapper: Mappers.Comgithubopenshiftapiauthorizationv1SubjectAccessReview
    },
    401: {},
    default: {}
  },
  serializer
};

const watchAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/authorization.openshift.io/v1/watch/namespaces/{namespace}/rolebindingrestrictions",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/authorization.openshift.io/v1/watch/namespaces/{namespace}/rolebindingrestrictions/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchAuthorizationOpenshiftIoV1RoleBindingRestrictionListForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/authorization.openshift.io/v1/watch/rolebindingrestrictions",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const getAutoscalingAPIGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/autoscaling/",
  responses: {
    200: {
      bodyMapper: Mappers.V1APIGroup
    },
    401: {},
    default: {}
  },
  serializer
};

const getAutoscalingV1APIResourcesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/autoscaling/v1/",
  responses: {
    200: {
      bodyMapper: Mappers.V1APIResourceList
    },
    401: {},
    default: {}
  },
  serializer
};

const listAutoscalingV1HorizontalPodAutoscalerForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/autoscaling/v1/horizontalpodautoscalers",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1HorizontalPodAutoscalerList
    },
    401: {},
    default: {}
  },
  serializer
};

const listAutoscalingV1NamespacedHorizontalPodAutoscalerOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1HorizontalPodAutoscalerList
    },
    401: {},
    default: {}
  },
  serializer
};

const createAutoscalingV1NamespacedHorizontalPodAutoscalerOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1HorizontalPodAutoscaler,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1HorizontalPodAutoscaler
    },
    201: {
      bodyMapper: Mappers.V1HorizontalPodAutoscaler
    },
    202: {
      bodyMapper: Mappers.V1HorizontalPodAutoscaler
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteAutoscalingV1CollectionNamespacedHorizontalPodAutoscalerOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const readAutoscalingV1NamespacedHorizontalPodAutoscalerOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.exact,
    Parameters.exportParameter,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1HorizontalPodAutoscaler
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceAutoscalingV1NamespacedHorizontalPodAutoscalerOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1HorizontalPodAutoscaler,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1HorizontalPodAutoscaler
    },
    201: {
      bodyMapper: Mappers.V1HorizontalPodAutoscaler
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteAutoscalingV1NamespacedHorizontalPodAutoscalerOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy,
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const patchAutoscalingV1NamespacedHorizontalPodAutoscalerOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.V1HorizontalPodAutoscaler
    },
    401: {},
    default: {}
  },
  serializer
};

const readAutoscalingV1NamespacedHorizontalPodAutoscalerStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers/{name}/status",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1HorizontalPodAutoscaler
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceAutoscalingV1NamespacedHorizontalPodAutoscalerStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers/{name}/status",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1HorizontalPodAutoscaler,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1HorizontalPodAutoscaler
    },
    201: {
      bodyMapper: Mappers.V1HorizontalPodAutoscaler
    },
    401: {},
    default: {}
  },
  serializer
};

const patchAutoscalingV1NamespacedHorizontalPodAutoscalerStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers/{name}/status",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.V1HorizontalPodAutoscaler
    },
    401: {},
    default: {}
  },
  serializer
};

const watchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/autoscaling/v1/watch/horizontalpodautoscalers",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchAutoscalingV1NamespacedHorizontalPodAutoscalerListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/autoscaling/v1/watch/namespaces/{namespace}/horizontalpodautoscalers",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchAutoscalingV1NamespacedHorizontalPodAutoscalerOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/autoscaling/v1/watch/namespaces/{namespace}/horizontalpodautoscalers/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const getAutoscalingV2beta1APIResourcesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/autoscaling/v2beta1/",
  responses: {
    200: {
      bodyMapper: Mappers.V1APIResourceList
    },
    401: {},
    default: {}
  },
  serializer
};

const listAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/autoscaling/v2beta1/horizontalpodautoscalers",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V2beta1HorizontalPodAutoscalerList
    },
    401: {},
    default: {}
  },
  serializer
};

const listAutoscalingV2beta1NamespacedHorizontalPodAutoscalerOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/autoscaling/v2beta1/namespaces/{namespace}/horizontalpodautoscalers",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V2beta1HorizontalPodAutoscalerList
    },
    401: {},
    default: {}
  },
  serializer
};

const createAutoscalingV2beta1NamespacedHorizontalPodAutoscalerOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/autoscaling/v2beta1/namespaces/{namespace}/horizontalpodautoscalers",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V2beta1HorizontalPodAutoscaler,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V2beta1HorizontalPodAutoscaler
    },
    201: {
      bodyMapper: Mappers.V2beta1HorizontalPodAutoscaler
    },
    202: {
      bodyMapper: Mappers.V2beta1HorizontalPodAutoscaler
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteAutoscalingV2beta1CollectionNamespacedHorizontalPodAutoscalerOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/autoscaling/v2beta1/namespaces/{namespace}/horizontalpodautoscalers",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const readAutoscalingV2beta1NamespacedHorizontalPodAutoscalerOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/autoscaling/v2beta1/namespaces/{namespace}/horizontalpodautoscalers/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.exact,
    Parameters.exportParameter,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V2beta1HorizontalPodAutoscaler
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/autoscaling/v2beta1/namespaces/{namespace}/horizontalpodautoscalers/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V2beta1HorizontalPodAutoscaler,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V2beta1HorizontalPodAutoscaler
    },
    201: {
      bodyMapper: Mappers.V2beta1HorizontalPodAutoscaler
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteAutoscalingV2beta1NamespacedHorizontalPodAutoscalerOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/autoscaling/v2beta1/namespaces/{namespace}/horizontalpodautoscalers/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy,
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const patchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/autoscaling/v2beta1/namespaces/{namespace}/horizontalpodautoscalers/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.V2beta1HorizontalPodAutoscaler
    },
    401: {},
    default: {}
  },
  serializer
};

const readAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/autoscaling/v2beta1/namespaces/{namespace}/horizontalpodautoscalers/{name}/status",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V2beta1HorizontalPodAutoscaler
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/autoscaling/v2beta1/namespaces/{namespace}/horizontalpodautoscalers/{name}/status",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V2beta1HorizontalPodAutoscaler,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V2beta1HorizontalPodAutoscaler
    },
    201: {
      bodyMapper: Mappers.V2beta1HorizontalPodAutoscaler
    },
    401: {},
    default: {}
  },
  serializer
};

const patchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/autoscaling/v2beta1/namespaces/{namespace}/horizontalpodautoscalers/{name}/status",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.V2beta1HorizontalPodAutoscaler
    },
    401: {},
    default: {}
  },
  serializer
};

const watchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/autoscaling/v2beta1/watch/horizontalpodautoscalers",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/autoscaling/v2beta1/watch/namespaces/{namespace}/horizontalpodautoscalers",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/autoscaling/v2beta1/watch/namespaces/{namespace}/horizontalpodautoscalers/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const getBatchAPIGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/batch/",
  responses: {
    200: {
      bodyMapper: Mappers.V1APIGroup
    },
    401: {},
    default: {}
  },
  serializer
};

const getBatchV1APIResourcesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/batch/v1/",
  responses: {
    200: {
      bodyMapper: Mappers.V1APIResourceList
    },
    401: {},
    default: {}
  },
  serializer
};

const listBatchV1JobForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/batch/v1/jobs",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1JobList
    },
    401: {},
    default: {}
  },
  serializer
};

const listBatchV1NamespacedJobOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/batch/v1/namespaces/{namespace}/jobs",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1JobList
    },
    401: {},
    default: {}
  },
  serializer
};

const createBatchV1NamespacedJobOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/batch/v1/namespaces/{namespace}/jobs",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1Job,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Job
    },
    201: {
      bodyMapper: Mappers.V1Job
    },
    202: {
      bodyMapper: Mappers.V1Job
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteBatchV1CollectionNamespacedJobOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/batch/v1/namespaces/{namespace}/jobs",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const readBatchV1NamespacedJobOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/batch/v1/namespaces/{namespace}/jobs/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.exact,
    Parameters.exportParameter,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Job
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceBatchV1NamespacedJobOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/batch/v1/namespaces/{namespace}/jobs/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1Job,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Job
    },
    201: {
      bodyMapper: Mappers.V1Job
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteBatchV1NamespacedJobOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/batch/v1/namespaces/{namespace}/jobs/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy,
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const patchBatchV1NamespacedJobOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/batch/v1/namespaces/{namespace}/jobs/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.V1Job
    },
    401: {},
    default: {}
  },
  serializer
};

const readBatchV1NamespacedJobStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/batch/v1/namespaces/{namespace}/jobs/{name}/status",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Job
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceBatchV1NamespacedJobStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/batch/v1/namespaces/{namespace}/jobs/{name}/status",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1Job,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Job
    },
    201: {
      bodyMapper: Mappers.V1Job
    },
    401: {},
    default: {}
  },
  serializer
};

const patchBatchV1NamespacedJobStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/batch/v1/namespaces/{namespace}/jobs/{name}/status",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.V1Job
    },
    401: {},
    default: {}
  },
  serializer
};

const watchBatchV1JobListForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/batch/v1/watch/jobs",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchBatchV1NamespacedJobListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/batch/v1/watch/namespaces/{namespace}/jobs",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchBatchV1NamespacedJobOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/batch/v1/watch/namespaces/{namespace}/jobs/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const getBatchV1beta1APIResourcesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/batch/v1beta1/",
  responses: {
    200: {
      bodyMapper: Mappers.V1APIResourceList
    },
    401: {},
    default: {}
  },
  serializer
};

const listBatchV1beta1CronJobForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/batch/v1beta1/cronjobs",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1CronJobList
    },
    401: {},
    default: {}
  },
  serializer
};

const listBatchV1beta1NamespacedCronJobOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/batch/v1beta1/namespaces/{namespace}/cronjobs",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1CronJobList
    },
    401: {},
    default: {}
  },
  serializer
};

const createBatchV1beta1NamespacedCronJobOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/batch/v1beta1/namespaces/{namespace}/cronjobs",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1beta1CronJob,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1CronJob
    },
    201: {
      bodyMapper: Mappers.V1beta1CronJob
    },
    202: {
      bodyMapper: Mappers.V1beta1CronJob
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteBatchV1beta1CollectionNamespacedCronJobOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/batch/v1beta1/namespaces/{namespace}/cronjobs",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const readBatchV1beta1NamespacedCronJobOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/batch/v1beta1/namespaces/{namespace}/cronjobs/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.exact,
    Parameters.exportParameter,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1CronJob
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceBatchV1beta1NamespacedCronJobOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/batch/v1beta1/namespaces/{namespace}/cronjobs/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1beta1CronJob,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1CronJob
    },
    201: {
      bodyMapper: Mappers.V1beta1CronJob
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteBatchV1beta1NamespacedCronJobOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/batch/v1beta1/namespaces/{namespace}/cronjobs/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy,
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const patchBatchV1beta1NamespacedCronJobOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/batch/v1beta1/namespaces/{namespace}/cronjobs/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1CronJob
    },
    401: {},
    default: {}
  },
  serializer
};

const readBatchV1beta1NamespacedCronJobStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/batch/v1beta1/namespaces/{namespace}/cronjobs/{name}/status",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1CronJob
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceBatchV1beta1NamespacedCronJobStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/batch/v1beta1/namespaces/{namespace}/cronjobs/{name}/status",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1beta1CronJob,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1CronJob
    },
    201: {
      bodyMapper: Mappers.V1beta1CronJob
    },
    401: {},
    default: {}
  },
  serializer
};

const patchBatchV1beta1NamespacedCronJobStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/batch/v1beta1/namespaces/{namespace}/cronjobs/{name}/status",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1CronJob
    },
    401: {},
    default: {}
  },
  serializer
};

const watchBatchV1beta1CronJobListForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/batch/v1beta1/watch/cronjobs",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchBatchV1beta1NamespacedCronJobListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/batch/v1beta1/watch/namespaces/{namespace}/cronjobs",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchBatchV1beta1NamespacedCronJobOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/batch/v1beta1/watch/namespaces/{namespace}/cronjobs/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const getBuildOpenshiftIoAPIGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/build.openshift.io/",
  responses: {
    200: {
      bodyMapper: Mappers.V1APIGroup
    },
    401: {},
    default: {}
  },
  serializer
};

const getBuildOpenshiftIoV1APIResourcesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/build.openshift.io/v1/",
  responses: {
    200: {
      bodyMapper: Mappers.V1APIResourceList
    },
    401: {},
    default: {}
  },
  serializer
};

const listBuildOpenshiftIoV1BuildConfigForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/build.openshift.io/v1/buildconfigs",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapibuildv1BuildConfigList
    },
    401: {},
    default: {}
  },
  serializer
};

const listBuildOpenshiftIoV1BuildForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/build.openshift.io/v1/builds",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapibuildv1BuildList
    },
    401: {},
    default: {}
  },
  serializer
};

const listBuildOpenshiftIoV1NamespacedBuildConfigOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/build.openshift.io/v1/namespaces/{namespace}/buildconfigs",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapibuildv1BuildConfigList
    },
    401: {},
    default: {}
  },
  serializer
};

const createBuildOpenshiftIoV1NamespacedBuildConfigOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/build.openshift.io/v1/namespaces/{namespace}/buildconfigs",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Comgithubopenshiftapibuildv1BuildConfig,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapibuildv1BuildConfig
    },
    201: {
      bodyMapper: Mappers.Comgithubopenshiftapibuildv1BuildConfig
    },
    202: {
      bodyMapper: Mappers.Comgithubopenshiftapibuildv1BuildConfig
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteBuildOpenshiftIoV1CollectionNamespacedBuildConfigOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/build.openshift.io/v1/namespaces/{namespace}/buildconfigs",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const readBuildOpenshiftIoV1NamespacedBuildConfigOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/build.openshift.io/v1/namespaces/{namespace}/buildconfigs/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.exact,
    Parameters.exportParameter,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapibuildv1BuildConfig
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceBuildOpenshiftIoV1NamespacedBuildConfigOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/build.openshift.io/v1/namespaces/{namespace}/buildconfigs/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Comgithubopenshiftapibuildv1BuildConfig,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapibuildv1BuildConfig
    },
    201: {
      bodyMapper: Mappers.Comgithubopenshiftapibuildv1BuildConfig
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteBuildOpenshiftIoV1NamespacedBuildConfigOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/build.openshift.io/v1/namespaces/{namespace}/buildconfigs/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy,
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const patchBuildOpenshiftIoV1NamespacedBuildConfigOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/build.openshift.io/v1/namespaces/{namespace}/buildconfigs/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapibuildv1BuildConfig
    },
    401: {},
    default: {}
  },
  serializer
};

const createBuildOpenshiftIoV1NamespacedBuildConfigInstantiateOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/build.openshift.io/v1/namespaces/{namespace}/buildconfigs/{name}/instantiate",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Comgithubopenshiftapibuildv1BuildRequest,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapibuildv1Build
    },
    201: {
      bodyMapper: Mappers.Comgithubopenshiftapibuildv1Build
    },
    202: {
      bodyMapper: Mappers.Comgithubopenshiftapibuildv1Build
    },
    401: {},
    default: {}
  },
  serializer
};

const connectBuildOpenshiftIoV1PostNamespacedBuildConfigInstantiatebinaryOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/build.openshift.io/v1/namespaces/{namespace}/buildconfigs/{name}/instantiatebinary",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.asFile,
    Parameters.revisionauthorEmail,
    Parameters.revisionauthorName,
    Parameters.revisioncommit,
    Parameters.revisioncommitterEmail,
    Parameters.revisioncommitterName,
    Parameters.revisionmessage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapibuildv1Build
    },
    401: {},
    default: {}
  },
  serializer
};

const connectBuildOpenshiftIoV1PostNamespacedBuildConfigWebhooksOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/build.openshift.io/v1/namespaces/{namespace}/buildconfigs/{name}/webhooks",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.path0
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    401: {},
    default: {}
  },
  serializer
};

const connectBuildOpenshiftIoV1PostNamespacedBuildConfigWebhooksWithPathOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/build.openshift.io/v1/namespaces/{namespace}/buildconfigs/{name}/webhooks/{path}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace,
    Parameters.path1
  ],
  queryParameters: [
    Parameters.path1
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    401: {},
    default: {}
  },
  serializer
};

const listBuildOpenshiftIoV1NamespacedBuildOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/build.openshift.io/v1/namespaces/{namespace}/builds",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapibuildv1BuildList
    },
    401: {},
    default: {}
  },
  serializer
};

const createBuildOpenshiftIoV1NamespacedBuildOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/build.openshift.io/v1/namespaces/{namespace}/builds",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Comgithubopenshiftapibuildv1Build,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapibuildv1Build
    },
    201: {
      bodyMapper: Mappers.Comgithubopenshiftapibuildv1Build
    },
    202: {
      bodyMapper: Mappers.Comgithubopenshiftapibuildv1Build
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteBuildOpenshiftIoV1CollectionNamespacedBuildOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/build.openshift.io/v1/namespaces/{namespace}/builds",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const readBuildOpenshiftIoV1NamespacedBuildOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/build.openshift.io/v1/namespaces/{namespace}/builds/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.exact,
    Parameters.exportParameter,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapibuildv1Build
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceBuildOpenshiftIoV1NamespacedBuildOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/build.openshift.io/v1/namespaces/{namespace}/builds/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Comgithubopenshiftapibuildv1Build,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapibuildv1Build
    },
    201: {
      bodyMapper: Mappers.Comgithubopenshiftapibuildv1Build
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteBuildOpenshiftIoV1NamespacedBuildOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/build.openshift.io/v1/namespaces/{namespace}/builds/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy,
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const patchBuildOpenshiftIoV1NamespacedBuildOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/build.openshift.io/v1/namespaces/{namespace}/builds/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapibuildv1Build
    },
    401: {},
    default: {}
  },
  serializer
};

const createBuildOpenshiftIoV1NamespacedBuildCloneOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/build.openshift.io/v1/namespaces/{namespace}/builds/{name}/clone",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Comgithubopenshiftapibuildv1BuildRequest,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapibuildv1BuildRequest
    },
    201: {
      bodyMapper: Mappers.Comgithubopenshiftapibuildv1BuildRequest
    },
    202: {
      bodyMapper: Mappers.Comgithubopenshiftapibuildv1BuildRequest
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceBuildOpenshiftIoV1NamespacedBuildDetailsOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/build.openshift.io/v1/namespaces/{namespace}/builds/{name}/details",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Comgithubopenshiftapibuildv1Build,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapibuildv1Build
    },
    201: {
      bodyMapper: Mappers.Comgithubopenshiftapibuildv1Build
    },
    401: {},
    default: {}
  },
  serializer
};

const readBuildOpenshiftIoV1NamespacedBuildLogOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/build.openshift.io/v1/namespaces/{namespace}/builds/{name}/log",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.container,
    Parameters.follow,
    Parameters.limitBytes,
    Parameters.nowait,
    Parameters.pretty,
    Parameters.previous,
    Parameters.sinceSeconds,
    Parameters.tailLines,
    Parameters.timestamps,
    Parameters.version
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapibuildv1BuildLog
    },
    401: {},
    default: {}
  },
  serializer
};

const watchBuildOpenshiftIoV1BuildConfigListForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/build.openshift.io/v1/watch/buildconfigs",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchBuildOpenshiftIoV1BuildListForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/build.openshift.io/v1/watch/builds",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchBuildOpenshiftIoV1NamespacedBuildConfigListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/build.openshift.io/v1/watch/namespaces/{namespace}/buildconfigs",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchBuildOpenshiftIoV1NamespacedBuildConfigOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/build.openshift.io/v1/watch/namespaces/{namespace}/buildconfigs/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchBuildOpenshiftIoV1NamespacedBuildListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/build.openshift.io/v1/watch/namespaces/{namespace}/builds",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchBuildOpenshiftIoV1NamespacedBuildOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/build.openshift.io/v1/watch/namespaces/{namespace}/builds/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const getCertificatesAPIGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/certificates.k8s.io/",
  responses: {
    200: {
      bodyMapper: Mappers.V1APIGroup
    },
    401: {},
    default: {}
  },
  serializer
};

const getCertificatesV1beta1APIResourcesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/certificates.k8s.io/v1beta1/",
  responses: {
    200: {
      bodyMapper: Mappers.V1APIResourceList
    },
    401: {},
    default: {}
  },
  serializer
};

const listCertificatesV1beta1CertificateSigningRequestOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/certificates.k8s.io/v1beta1/certificatesigningrequests",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1CertificateSigningRequestList
    },
    401: {},
    default: {}
  },
  serializer
};

const createCertificatesV1beta1CertificateSigningRequestOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/certificates.k8s.io/v1beta1/certificatesigningrequests",
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1beta1CertificateSigningRequest,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1CertificateSigningRequest
    },
    201: {
      bodyMapper: Mappers.V1beta1CertificateSigningRequest
    },
    202: {
      bodyMapper: Mappers.V1beta1CertificateSigningRequest
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteCertificatesV1beta1CollectionCertificateSigningRequestOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/certificates.k8s.io/v1beta1/certificatesigningrequests",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const readCertificatesV1beta1CertificateSigningRequestOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/certificates.k8s.io/v1beta1/certificatesigningrequests/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.exact,
    Parameters.exportParameter,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1CertificateSigningRequest
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceCertificatesV1beta1CertificateSigningRequestOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/certificates.k8s.io/v1beta1/certificatesigningrequests/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1beta1CertificateSigningRequest,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1CertificateSigningRequest
    },
    201: {
      bodyMapper: Mappers.V1beta1CertificateSigningRequest
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteCertificatesV1beta1CertificateSigningRequestOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/certificates.k8s.io/v1beta1/certificatesigningrequests/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy,
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const patchCertificatesV1beta1CertificateSigningRequestOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/certificates.k8s.io/v1beta1/certificatesigningrequests/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1CertificateSigningRequest
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceCertificatesV1beta1CertificateSigningRequestApprovalOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/certificates.k8s.io/v1beta1/certificatesigningrequests/{name}/approval",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1beta1CertificateSigningRequest,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1CertificateSigningRequest
    },
    201: {
      bodyMapper: Mappers.V1beta1CertificateSigningRequest
    },
    401: {},
    default: {}
  },
  serializer
};

const readCertificatesV1beta1CertificateSigningRequestStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/certificates.k8s.io/v1beta1/certificatesigningrequests/{name}/status",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1CertificateSigningRequest
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceCertificatesV1beta1CertificateSigningRequestStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/certificates.k8s.io/v1beta1/certificatesigningrequests/{name}/status",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1beta1CertificateSigningRequest,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1CertificateSigningRequest
    },
    201: {
      bodyMapper: Mappers.V1beta1CertificateSigningRequest
    },
    401: {},
    default: {}
  },
  serializer
};

const patchCertificatesV1beta1CertificateSigningRequestStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/certificates.k8s.io/v1beta1/certificatesigningrequests/{name}/status",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1CertificateSigningRequest
    },
    401: {},
    default: {}
  },
  serializer
};

const watchCertificatesV1beta1CertificateSigningRequestListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/certificates.k8s.io/v1beta1/watch/certificatesigningrequests",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchCertificatesV1beta1CertificateSigningRequestOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/certificates.k8s.io/v1beta1/watch/certificatesigningrequests/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const getEventsAPIGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/events.k8s.io/",
  responses: {
    200: {
      bodyMapper: Mappers.V1APIGroup
    },
    401: {},
    default: {}
  },
  serializer
};

const getEventsV1beta1APIResourcesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/events.k8s.io/v1beta1/",
  responses: {
    200: {
      bodyMapper: Mappers.V1APIResourceList
    },
    401: {},
    default: {}
  },
  serializer
};

const listEventsV1beta1EventForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/events.k8s.io/v1beta1/events",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1EventList
    },
    401: {},
    default: {}
  },
  serializer
};

const listEventsV1beta1NamespacedEventOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/events.k8s.io/v1beta1/namespaces/{namespace}/events",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1EventList
    },
    401: {},
    default: {}
  },
  serializer
};

const createEventsV1beta1NamespacedEventOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/events.k8s.io/v1beta1/namespaces/{namespace}/events",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1beta1Event,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1Event
    },
    201: {
      bodyMapper: Mappers.V1beta1Event
    },
    202: {
      bodyMapper: Mappers.V1beta1Event
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteEventsV1beta1CollectionNamespacedEventOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/events.k8s.io/v1beta1/namespaces/{namespace}/events",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const readEventsV1beta1NamespacedEventOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/events.k8s.io/v1beta1/namespaces/{namespace}/events/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.exact,
    Parameters.exportParameter,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1Event
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceEventsV1beta1NamespacedEventOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/events.k8s.io/v1beta1/namespaces/{namespace}/events/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1beta1Event,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1Event
    },
    201: {
      bodyMapper: Mappers.V1beta1Event
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteEventsV1beta1NamespacedEventOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/events.k8s.io/v1beta1/namespaces/{namespace}/events/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy,
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const patchEventsV1beta1NamespacedEventOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/events.k8s.io/v1beta1/namespaces/{namespace}/events/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1Event
    },
    401: {},
    default: {}
  },
  serializer
};

const watchEventsV1beta1EventListForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/events.k8s.io/v1beta1/watch/events",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchEventsV1beta1NamespacedEventListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/events.k8s.io/v1beta1/watch/namespaces/{namespace}/events",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchEventsV1beta1NamespacedEventOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/events.k8s.io/v1beta1/watch/namespaces/{namespace}/events/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const getExtensionsAPIGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/extensions/",
  responses: {
    200: {
      bodyMapper: Mappers.V1APIGroup
    },
    401: {},
    default: {}
  },
  serializer
};

const getExtensionsV1beta1APIResourcesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/extensions/v1beta1/",
  responses: {
    200: {
      bodyMapper: Mappers.V1APIResourceList
    },
    401: {},
    default: {}
  },
  serializer
};

const listExtensionsV1beta1DaemonSetForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/extensions/v1beta1/daemonsets",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Iok8sapiextensionsv1beta1DaemonSetList
    },
    401: {},
    default: {}
  },
  serializer
};

const listExtensionsV1beta1DeploymentForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/extensions/v1beta1/deployments",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Iok8sapiextensionsv1beta1DeploymentList
    },
    401: {},
    default: {}
  },
  serializer
};

const listExtensionsV1beta1IngressForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/extensions/v1beta1/ingresses",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Iok8sapiextensionsv1beta1IngressList
    },
    401: {},
    default: {}
  },
  serializer
};

const listExtensionsV1beta1NamespacedDaemonSetOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/extensions/v1beta1/namespaces/{namespace}/daemonsets",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Iok8sapiextensionsv1beta1DaemonSetList
    },
    401: {},
    default: {}
  },
  serializer
};

const createExtensionsV1beta1NamespacedDaemonSetOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/extensions/v1beta1/namespaces/{namespace}/daemonsets",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Iok8sapiextensionsv1beta1DaemonSet,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Iok8sapiextensionsv1beta1DaemonSet
    },
    201: {
      bodyMapper: Mappers.Iok8sapiextensionsv1beta1DaemonSet
    },
    202: {
      bodyMapper: Mappers.Iok8sapiextensionsv1beta1DaemonSet
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteExtensionsV1beta1CollectionNamespacedDaemonSetOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/extensions/v1beta1/namespaces/{namespace}/daemonsets",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const readExtensionsV1beta1NamespacedDaemonSetOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.exact,
    Parameters.exportParameter,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Iok8sapiextensionsv1beta1DaemonSet
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceExtensionsV1beta1NamespacedDaemonSetOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Iok8sapiextensionsv1beta1DaemonSet,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Iok8sapiextensionsv1beta1DaemonSet
    },
    201: {
      bodyMapper: Mappers.Iok8sapiextensionsv1beta1DaemonSet
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteExtensionsV1beta1NamespacedDaemonSetOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy,
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const patchExtensionsV1beta1NamespacedDaemonSetOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.Iok8sapiextensionsv1beta1DaemonSet
    },
    401: {},
    default: {}
  },
  serializer
};

const readExtensionsV1beta1NamespacedDaemonSetStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}/status",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Iok8sapiextensionsv1beta1DaemonSet
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceExtensionsV1beta1NamespacedDaemonSetStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}/status",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Iok8sapiextensionsv1beta1DaemonSet,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Iok8sapiextensionsv1beta1DaemonSet
    },
    201: {
      bodyMapper: Mappers.Iok8sapiextensionsv1beta1DaemonSet
    },
    401: {},
    default: {}
  },
  serializer
};

const patchExtensionsV1beta1NamespacedDaemonSetStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}/status",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.Iok8sapiextensionsv1beta1DaemonSet
    },
    401: {},
    default: {}
  },
  serializer
};

const listExtensionsV1beta1NamespacedDeploymentOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/extensions/v1beta1/namespaces/{namespace}/deployments",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Iok8sapiextensionsv1beta1DeploymentList
    },
    401: {},
    default: {}
  },
  serializer
};

const createExtensionsV1beta1NamespacedDeploymentOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/extensions/v1beta1/namespaces/{namespace}/deployments",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Iok8sapiextensionsv1beta1Deployment,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Iok8sapiextensionsv1beta1Deployment
    },
    201: {
      bodyMapper: Mappers.Iok8sapiextensionsv1beta1Deployment
    },
    202: {
      bodyMapper: Mappers.Iok8sapiextensionsv1beta1Deployment
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteExtensionsV1beta1CollectionNamespacedDeploymentOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/extensions/v1beta1/namespaces/{namespace}/deployments",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const readExtensionsV1beta1NamespacedDeploymentOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.exact,
    Parameters.exportParameter,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Iok8sapiextensionsv1beta1Deployment
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceExtensionsV1beta1NamespacedDeploymentOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Iok8sapiextensionsv1beta1Deployment,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Iok8sapiextensionsv1beta1Deployment
    },
    201: {
      bodyMapper: Mappers.Iok8sapiextensionsv1beta1Deployment
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteExtensionsV1beta1NamespacedDeploymentOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy,
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const patchExtensionsV1beta1NamespacedDeploymentOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.Iok8sapiextensionsv1beta1Deployment
    },
    401: {},
    default: {}
  },
  serializer
};

const createExtensionsV1beta1NamespacedDeploymentRollbackOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/rollback",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Iok8sapiextensionsv1beta1DeploymentRollback,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Iok8sapiextensionsv1beta1DeploymentRollback
    },
    201: {
      bodyMapper: Mappers.Iok8sapiextensionsv1beta1DeploymentRollback
    },
    202: {
      bodyMapper: Mappers.Iok8sapiextensionsv1beta1DeploymentRollback
    },
    401: {},
    default: {}
  },
  serializer
};

const readExtensionsV1beta1NamespacedDeploymentScaleOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/scale",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Iok8sapiextensionsv1beta1Scale
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceExtensionsV1beta1NamespacedDeploymentScaleOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/scale",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Iok8sapiextensionsv1beta1Scale,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Iok8sapiextensionsv1beta1Scale
    },
    201: {
      bodyMapper: Mappers.Iok8sapiextensionsv1beta1Scale
    },
    401: {},
    default: {}
  },
  serializer
};

const patchExtensionsV1beta1NamespacedDeploymentScaleOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/scale",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.Iok8sapiextensionsv1beta1Scale
    },
    401: {},
    default: {}
  },
  serializer
};

const readExtensionsV1beta1NamespacedDeploymentStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/status",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Iok8sapiextensionsv1beta1Deployment
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceExtensionsV1beta1NamespacedDeploymentStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/status",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Iok8sapiextensionsv1beta1Deployment,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Iok8sapiextensionsv1beta1Deployment
    },
    201: {
      bodyMapper: Mappers.Iok8sapiextensionsv1beta1Deployment
    },
    401: {},
    default: {}
  },
  serializer
};

const patchExtensionsV1beta1NamespacedDeploymentStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/status",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.Iok8sapiextensionsv1beta1Deployment
    },
    401: {},
    default: {}
  },
  serializer
};

const listExtensionsV1beta1NamespacedIngressOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/extensions/v1beta1/namespaces/{namespace}/ingresses",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Iok8sapiextensionsv1beta1IngressList
    },
    401: {},
    default: {}
  },
  serializer
};

const createExtensionsV1beta1NamespacedIngressOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/extensions/v1beta1/namespaces/{namespace}/ingresses",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Iok8sapiextensionsv1beta1Ingress,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Iok8sapiextensionsv1beta1Ingress
    },
    201: {
      bodyMapper: Mappers.Iok8sapiextensionsv1beta1Ingress
    },
    202: {
      bodyMapper: Mappers.Iok8sapiextensionsv1beta1Ingress
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteExtensionsV1beta1CollectionNamespacedIngressOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/extensions/v1beta1/namespaces/{namespace}/ingresses",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const readExtensionsV1beta1NamespacedIngressOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.exact,
    Parameters.exportParameter,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Iok8sapiextensionsv1beta1Ingress
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceExtensionsV1beta1NamespacedIngressOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Iok8sapiextensionsv1beta1Ingress,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Iok8sapiextensionsv1beta1Ingress
    },
    201: {
      bodyMapper: Mappers.Iok8sapiextensionsv1beta1Ingress
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteExtensionsV1beta1NamespacedIngressOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy,
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const patchExtensionsV1beta1NamespacedIngressOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.Iok8sapiextensionsv1beta1Ingress
    },
    401: {},
    default: {}
  },
  serializer
};

const readExtensionsV1beta1NamespacedIngressStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}/status",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Iok8sapiextensionsv1beta1Ingress
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceExtensionsV1beta1NamespacedIngressStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}/status",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Iok8sapiextensionsv1beta1Ingress,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Iok8sapiextensionsv1beta1Ingress
    },
    201: {
      bodyMapper: Mappers.Iok8sapiextensionsv1beta1Ingress
    },
    401: {},
    default: {}
  },
  serializer
};

const patchExtensionsV1beta1NamespacedIngressStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}/status",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.Iok8sapiextensionsv1beta1Ingress
    },
    401: {},
    default: {}
  },
  serializer
};

const listExtensionsV1beta1NamespacedNetworkPolicyOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Iok8sapiextensionsv1beta1NetworkPolicyList
    },
    401: {},
    default: {}
  },
  serializer
};

const createExtensionsV1beta1NamespacedNetworkPolicyOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Iok8sapiextensionsv1beta1NetworkPolicy,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Iok8sapiextensionsv1beta1NetworkPolicy
    },
    201: {
      bodyMapper: Mappers.Iok8sapiextensionsv1beta1NetworkPolicy
    },
    202: {
      bodyMapper: Mappers.Iok8sapiextensionsv1beta1NetworkPolicy
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteExtensionsV1beta1CollectionNamespacedNetworkPolicyOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const readExtensionsV1beta1NamespacedNetworkPolicyOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.exact,
    Parameters.exportParameter,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Iok8sapiextensionsv1beta1NetworkPolicy
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceExtensionsV1beta1NamespacedNetworkPolicyOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Iok8sapiextensionsv1beta1NetworkPolicy,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Iok8sapiextensionsv1beta1NetworkPolicy
    },
    201: {
      bodyMapper: Mappers.Iok8sapiextensionsv1beta1NetworkPolicy
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteExtensionsV1beta1NamespacedNetworkPolicyOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy,
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const patchExtensionsV1beta1NamespacedNetworkPolicyOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.Iok8sapiextensionsv1beta1NetworkPolicy
    },
    401: {},
    default: {}
  },
  serializer
};

const listExtensionsV1beta1NamespacedReplicaSetOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/extensions/v1beta1/namespaces/{namespace}/replicasets",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Iok8sapiextensionsv1beta1ReplicaSetList
    },
    401: {},
    default: {}
  },
  serializer
};

const createExtensionsV1beta1NamespacedReplicaSetOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/extensions/v1beta1/namespaces/{namespace}/replicasets",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Iok8sapiextensionsv1beta1ReplicaSet,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Iok8sapiextensionsv1beta1ReplicaSet
    },
    201: {
      bodyMapper: Mappers.Iok8sapiextensionsv1beta1ReplicaSet
    },
    202: {
      bodyMapper: Mappers.Iok8sapiextensionsv1beta1ReplicaSet
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteExtensionsV1beta1CollectionNamespacedReplicaSetOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/extensions/v1beta1/namespaces/{namespace}/replicasets",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const readExtensionsV1beta1NamespacedReplicaSetOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.exact,
    Parameters.exportParameter,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Iok8sapiextensionsv1beta1ReplicaSet
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceExtensionsV1beta1NamespacedReplicaSetOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Iok8sapiextensionsv1beta1ReplicaSet,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Iok8sapiextensionsv1beta1ReplicaSet
    },
    201: {
      bodyMapper: Mappers.Iok8sapiextensionsv1beta1ReplicaSet
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteExtensionsV1beta1NamespacedReplicaSetOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy,
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const patchExtensionsV1beta1NamespacedReplicaSetOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.Iok8sapiextensionsv1beta1ReplicaSet
    },
    401: {},
    default: {}
  },
  serializer
};

const readExtensionsV1beta1NamespacedReplicaSetScaleOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}/scale",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Iok8sapiextensionsv1beta1Scale
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceExtensionsV1beta1NamespacedReplicaSetScaleOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}/scale",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Iok8sapiextensionsv1beta1Scale,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Iok8sapiextensionsv1beta1Scale
    },
    201: {
      bodyMapper: Mappers.Iok8sapiextensionsv1beta1Scale
    },
    401: {},
    default: {}
  },
  serializer
};

const patchExtensionsV1beta1NamespacedReplicaSetScaleOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}/scale",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.Iok8sapiextensionsv1beta1Scale
    },
    401: {},
    default: {}
  },
  serializer
};

const readExtensionsV1beta1NamespacedReplicaSetStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}/status",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Iok8sapiextensionsv1beta1ReplicaSet
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceExtensionsV1beta1NamespacedReplicaSetStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}/status",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Iok8sapiextensionsv1beta1ReplicaSet,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Iok8sapiextensionsv1beta1ReplicaSet
    },
    201: {
      bodyMapper: Mappers.Iok8sapiextensionsv1beta1ReplicaSet
    },
    401: {},
    default: {}
  },
  serializer
};

const patchExtensionsV1beta1NamespacedReplicaSetStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}/status",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.Iok8sapiextensionsv1beta1ReplicaSet
    },
    401: {},
    default: {}
  },
  serializer
};

const readExtensionsV1beta1NamespacedReplicationControllerDummyScaleOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/extensions/v1beta1/namespaces/{namespace}/replicationcontrollers/{name}/scale",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Iok8sapiextensionsv1beta1Scale
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceExtensionsV1beta1NamespacedReplicationControllerDummyScaleOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/extensions/v1beta1/namespaces/{namespace}/replicationcontrollers/{name}/scale",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Iok8sapiextensionsv1beta1Scale,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Iok8sapiextensionsv1beta1Scale
    },
    201: {
      bodyMapper: Mappers.Iok8sapiextensionsv1beta1Scale
    },
    401: {},
    default: {}
  },
  serializer
};

const patchExtensionsV1beta1NamespacedReplicationControllerDummyScaleOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/extensions/v1beta1/namespaces/{namespace}/replicationcontrollers/{name}/scale",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.Iok8sapiextensionsv1beta1Scale
    },
    401: {},
    default: {}
  },
  serializer
};

const listExtensionsV1beta1NetworkPolicyForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/extensions/v1beta1/networkpolicies",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Iok8sapiextensionsv1beta1NetworkPolicyList
    },
    401: {},
    default: {}
  },
  serializer
};

const listExtensionsV1beta1PodSecurityPolicyOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/extensions/v1beta1/podsecuritypolicies",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Iok8sapiextensionsv1beta1PodSecurityPolicyList
    },
    401: {},
    default: {}
  },
  serializer
};

const createExtensionsV1beta1PodSecurityPolicyOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/extensions/v1beta1/podsecuritypolicies",
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Iok8sapiextensionsv1beta1PodSecurityPolicy,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Iok8sapiextensionsv1beta1PodSecurityPolicy
    },
    201: {
      bodyMapper: Mappers.Iok8sapiextensionsv1beta1PodSecurityPolicy
    },
    202: {
      bodyMapper: Mappers.Iok8sapiextensionsv1beta1PodSecurityPolicy
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteExtensionsV1beta1CollectionPodSecurityPolicyOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/extensions/v1beta1/podsecuritypolicies",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const readExtensionsV1beta1PodSecurityPolicyOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/extensions/v1beta1/podsecuritypolicies/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.exact,
    Parameters.exportParameter,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Iok8sapiextensionsv1beta1PodSecurityPolicy
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceExtensionsV1beta1PodSecurityPolicyOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/extensions/v1beta1/podsecuritypolicies/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Iok8sapiextensionsv1beta1PodSecurityPolicy,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Iok8sapiextensionsv1beta1PodSecurityPolicy
    },
    201: {
      bodyMapper: Mappers.Iok8sapiextensionsv1beta1PodSecurityPolicy
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteExtensionsV1beta1PodSecurityPolicyOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/extensions/v1beta1/podsecuritypolicies/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy,
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const patchExtensionsV1beta1PodSecurityPolicyOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/extensions/v1beta1/podsecuritypolicies/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.Iok8sapiextensionsv1beta1PodSecurityPolicy
    },
    401: {},
    default: {}
  },
  serializer
};

const listExtensionsV1beta1ReplicaSetForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/extensions/v1beta1/replicasets",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Iok8sapiextensionsv1beta1ReplicaSetList
    },
    401: {},
    default: {}
  },
  serializer
};

const watchExtensionsV1beta1DaemonSetListForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/extensions/v1beta1/watch/daemonsets",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchExtensionsV1beta1DeploymentListForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/extensions/v1beta1/watch/deployments",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchExtensionsV1beta1IngressListForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/extensions/v1beta1/watch/ingresses",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchExtensionsV1beta1NamespacedDaemonSetListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/extensions/v1beta1/watch/namespaces/{namespace}/daemonsets",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchExtensionsV1beta1NamespacedDaemonSetOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/extensions/v1beta1/watch/namespaces/{namespace}/daemonsets/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchExtensionsV1beta1NamespacedDeploymentListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/extensions/v1beta1/watch/namespaces/{namespace}/deployments",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchExtensionsV1beta1NamespacedDeploymentOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/extensions/v1beta1/watch/namespaces/{namespace}/deployments/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchExtensionsV1beta1NamespacedIngressListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/extensions/v1beta1/watch/namespaces/{namespace}/ingresses",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchExtensionsV1beta1NamespacedIngressOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/extensions/v1beta1/watch/namespaces/{namespace}/ingresses/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchExtensionsV1beta1NamespacedNetworkPolicyListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/extensions/v1beta1/watch/namespaces/{namespace}/networkpolicies",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchExtensionsV1beta1NamespacedNetworkPolicyOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/extensions/v1beta1/watch/namespaces/{namespace}/networkpolicies/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchExtensionsV1beta1NamespacedReplicaSetListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/extensions/v1beta1/watch/namespaces/{namespace}/replicasets",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchExtensionsV1beta1NamespacedReplicaSetOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/extensions/v1beta1/watch/namespaces/{namespace}/replicasets/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchExtensionsV1beta1NetworkPolicyListForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/extensions/v1beta1/watch/networkpolicies",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchExtensionsV1beta1PodSecurityPolicyListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/extensions/v1beta1/watch/podsecuritypolicies",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchExtensionsV1beta1PodSecurityPolicyOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/extensions/v1beta1/watch/podsecuritypolicies/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchExtensionsV1beta1ReplicaSetListForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/extensions/v1beta1/watch/replicasets",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const getImageOpenshiftIoAPIGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/image.openshift.io/",
  responses: {
    200: {
      bodyMapper: Mappers.V1APIGroup
    },
    401: {},
    default: {}
  },
  serializer
};

const getImageOpenshiftIoV1APIResourcesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/image.openshift.io/v1/",
  responses: {
    200: {
      bodyMapper: Mappers.V1APIResourceList
    },
    401: {},
    default: {}
  },
  serializer
};

const listImageOpenshiftIoV1ImageOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/image.openshift.io/v1/images",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiimagev1ImageList
    },
    401: {},
    default: {}
  },
  serializer
};

const createImageOpenshiftIoV1ImageOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/image.openshift.io/v1/images",
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Comgithubopenshiftapiimagev1Image,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiimagev1Image
    },
    201: {
      bodyMapper: Mappers.Comgithubopenshiftapiimagev1Image
    },
    202: {
      bodyMapper: Mappers.Comgithubopenshiftapiimagev1Image
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteImageOpenshiftIoV1CollectionImageOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/image.openshift.io/v1/images",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const readImageOpenshiftIoV1ImageOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/image.openshift.io/v1/images/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.exact,
    Parameters.exportParameter,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiimagev1Image
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceImageOpenshiftIoV1ImageOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/image.openshift.io/v1/images/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Comgithubopenshiftapiimagev1Image,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiimagev1Image
    },
    201: {
      bodyMapper: Mappers.Comgithubopenshiftapiimagev1Image
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteImageOpenshiftIoV1ImageOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/image.openshift.io/v1/images/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy,
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const patchImageOpenshiftIoV1ImageOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/image.openshift.io/v1/images/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiimagev1Image
    },
    401: {},
    default: {}
  },
  serializer
};

const createImageOpenshiftIoV1ImageSignatureOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/image.openshift.io/v1/imagesignatures",
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Comgithubopenshiftapiimagev1ImageSignature,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiimagev1ImageSignature
    },
    201: {
      bodyMapper: Mappers.Comgithubopenshiftapiimagev1ImageSignature
    },
    202: {
      bodyMapper: Mappers.Comgithubopenshiftapiimagev1ImageSignature
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteImageOpenshiftIoV1ImageSignatureOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/image.openshift.io/v1/imagesignatures/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.pretty,
    Parameters.propagationPolicy
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const listImageOpenshiftIoV1ImageStreamForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/image.openshift.io/v1/imagestreams",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiimagev1ImageStreamList
    },
    401: {},
    default: {}
  },
  serializer
};

const listImageOpenshiftIoV1ImageStreamTagForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/image.openshift.io/v1/imagestreamtags",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiimagev1ImageStreamTagList
    },
    401: {},
    default: {}
  },
  serializer
};

const readImageOpenshiftIoV1NamespacedImageStreamImageOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/image.openshift.io/v1/namespaces/{namespace}/imagestreamimages/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiimagev1ImageStreamImage
    },
    401: {},
    default: {}
  },
  serializer
};

const createImageOpenshiftIoV1NamespacedImageStreamImportOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/image.openshift.io/v1/namespaces/{namespace}/imagestreamimports",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Comgithubopenshiftapiimagev1ImageStreamImport,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiimagev1ImageStreamImport
    },
    201: {
      bodyMapper: Mappers.Comgithubopenshiftapiimagev1ImageStreamImport
    },
    202: {
      bodyMapper: Mappers.Comgithubopenshiftapiimagev1ImageStreamImport
    },
    401: {},
    default: {}
  },
  serializer
};

const createImageOpenshiftIoV1NamespacedImageStreamMappingOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/image.openshift.io/v1/namespaces/{namespace}/imagestreammappings",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Comgithubopenshiftapiimagev1ImageStreamMapping,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiimagev1ImageStreamMapping
    },
    201: {
      bodyMapper: Mappers.Comgithubopenshiftapiimagev1ImageStreamMapping
    },
    202: {
      bodyMapper: Mappers.Comgithubopenshiftapiimagev1ImageStreamMapping
    },
    401: {},
    default: {}
  },
  serializer
};

const listImageOpenshiftIoV1NamespacedImageStreamOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/image.openshift.io/v1/namespaces/{namespace}/imagestreams",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiimagev1ImageStreamList
    },
    401: {},
    default: {}
  },
  serializer
};

const createImageOpenshiftIoV1NamespacedImageStreamOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/image.openshift.io/v1/namespaces/{namespace}/imagestreams",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Comgithubopenshiftapiimagev1ImageStream,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiimagev1ImageStream
    },
    201: {
      bodyMapper: Mappers.Comgithubopenshiftapiimagev1ImageStream
    },
    202: {
      bodyMapper: Mappers.Comgithubopenshiftapiimagev1ImageStream
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteImageOpenshiftIoV1CollectionNamespacedImageStreamOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/image.openshift.io/v1/namespaces/{namespace}/imagestreams",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const readImageOpenshiftIoV1NamespacedImageStreamOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/image.openshift.io/v1/namespaces/{namespace}/imagestreams/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.exact,
    Parameters.exportParameter,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiimagev1ImageStream
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceImageOpenshiftIoV1NamespacedImageStreamOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/image.openshift.io/v1/namespaces/{namespace}/imagestreams/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Comgithubopenshiftapiimagev1ImageStream,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiimagev1ImageStream
    },
    201: {
      bodyMapper: Mappers.Comgithubopenshiftapiimagev1ImageStream
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteImageOpenshiftIoV1NamespacedImageStreamOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/image.openshift.io/v1/namespaces/{namespace}/imagestreams/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy,
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const patchImageOpenshiftIoV1NamespacedImageStreamOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/image.openshift.io/v1/namespaces/{namespace}/imagestreams/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiimagev1ImageStream
    },
    401: {},
    default: {}
  },
  serializer
};

const readImageOpenshiftIoV1NamespacedImageStreamLayersOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/image.openshift.io/v1/namespaces/{namespace}/imagestreams/{name}/layers",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiimagev1ImageStreamLayers
    },
    401: {},
    default: {}
  },
  serializer
};

const readImageOpenshiftIoV1NamespacedImageStreamSecretsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/image.openshift.io/v1/namespaces/{namespace}/imagestreams/{name}/secrets",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1SecretList
    },
    401: {},
    default: {}
  },
  serializer
};

const readImageOpenshiftIoV1NamespacedImageStreamStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/image.openshift.io/v1/namespaces/{namespace}/imagestreams/{name}/status",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiimagev1ImageStream
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceImageOpenshiftIoV1NamespacedImageStreamStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/image.openshift.io/v1/namespaces/{namespace}/imagestreams/{name}/status",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Comgithubopenshiftapiimagev1ImageStream,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiimagev1ImageStream
    },
    201: {
      bodyMapper: Mappers.Comgithubopenshiftapiimagev1ImageStream
    },
    401: {},
    default: {}
  },
  serializer
};

const patchImageOpenshiftIoV1NamespacedImageStreamStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/image.openshift.io/v1/namespaces/{namespace}/imagestreams/{name}/status",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiimagev1ImageStream
    },
    401: {},
    default: {}
  },
  serializer
};

const listImageOpenshiftIoV1NamespacedImageStreamTagOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/image.openshift.io/v1/namespaces/{namespace}/imagestreamtags",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiimagev1ImageStreamTagList
    },
    401: {},
    default: {}
  },
  serializer
};

const createImageOpenshiftIoV1NamespacedImageStreamTagOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/image.openshift.io/v1/namespaces/{namespace}/imagestreamtags",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Comgithubopenshiftapiimagev1ImageStreamTag,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiimagev1ImageStreamTag
    },
    201: {
      bodyMapper: Mappers.Comgithubopenshiftapiimagev1ImageStreamTag
    },
    202: {
      bodyMapper: Mappers.Comgithubopenshiftapiimagev1ImageStreamTag
    },
    401: {},
    default: {}
  },
  serializer
};

const readImageOpenshiftIoV1NamespacedImageStreamTagOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/image.openshift.io/v1/namespaces/{namespace}/imagestreamtags/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiimagev1ImageStreamTag
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceImageOpenshiftIoV1NamespacedImageStreamTagOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/image.openshift.io/v1/namespaces/{namespace}/imagestreamtags/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Comgithubopenshiftapiimagev1ImageStreamTag,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiimagev1ImageStreamTag
    },
    201: {
      bodyMapper: Mappers.Comgithubopenshiftapiimagev1ImageStreamTag
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteImageOpenshiftIoV1NamespacedImageStreamTagOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/image.openshift.io/v1/namespaces/{namespace}/imagestreamtags/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy,
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const patchImageOpenshiftIoV1NamespacedImageStreamTagOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/image.openshift.io/v1/namespaces/{namespace}/imagestreamtags/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiimagev1ImageStreamTag
    },
    401: {},
    default: {}
  },
  serializer
};

const watchImageOpenshiftIoV1ImageListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/image.openshift.io/v1/watch/images",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchImageOpenshiftIoV1ImageOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/image.openshift.io/v1/watch/images/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchImageOpenshiftIoV1ImageStreamListForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/image.openshift.io/v1/watch/imagestreams",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchImageOpenshiftIoV1NamespacedImageStreamListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/image.openshift.io/v1/watch/namespaces/{namespace}/imagestreams",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchImageOpenshiftIoV1NamespacedImageStreamOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/image.openshift.io/v1/watch/namespaces/{namespace}/imagestreams/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const getNetworkOpenshiftIoAPIGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/network.openshift.io/",
  responses: {
    200: {
      bodyMapper: Mappers.V1APIGroup
    },
    401: {},
    default: {}
  },
  serializer
};

const getNetworkOpenshiftIoV1APIResourcesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/network.openshift.io/v1/",
  responses: {
    200: {
      bodyMapper: Mappers.V1APIResourceList
    },
    401: {},
    default: {}
  },
  serializer
};

const listNetworkOpenshiftIoV1ClusterNetworkOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/network.openshift.io/v1/clusternetworks",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapinetworkv1ClusterNetworkList
    },
    401: {},
    default: {}
  },
  serializer
};

const createNetworkOpenshiftIoV1ClusterNetworkOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/network.openshift.io/v1/clusternetworks",
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Comgithubopenshiftapinetworkv1ClusterNetwork,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapinetworkv1ClusterNetwork
    },
    201: {
      bodyMapper: Mappers.Comgithubopenshiftapinetworkv1ClusterNetwork
    },
    202: {
      bodyMapper: Mappers.Comgithubopenshiftapinetworkv1ClusterNetwork
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteNetworkOpenshiftIoV1CollectionClusterNetworkOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/network.openshift.io/v1/clusternetworks",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const readNetworkOpenshiftIoV1ClusterNetworkOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/network.openshift.io/v1/clusternetworks/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.exact,
    Parameters.exportParameter,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapinetworkv1ClusterNetwork
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceNetworkOpenshiftIoV1ClusterNetworkOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/network.openshift.io/v1/clusternetworks/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Comgithubopenshiftapinetworkv1ClusterNetwork,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapinetworkv1ClusterNetwork
    },
    201: {
      bodyMapper: Mappers.Comgithubopenshiftapinetworkv1ClusterNetwork
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteNetworkOpenshiftIoV1ClusterNetworkOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/network.openshift.io/v1/clusternetworks/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy,
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const patchNetworkOpenshiftIoV1ClusterNetworkOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/network.openshift.io/v1/clusternetworks/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapinetworkv1ClusterNetwork
    },
    401: {},
    default: {}
  },
  serializer
};

const listNetworkOpenshiftIoV1EgressNetworkPolicyForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/network.openshift.io/v1/egressnetworkpolicies",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapinetworkv1EgressNetworkPolicyList
    },
    401: {},
    default: {}
  },
  serializer
};

const listNetworkOpenshiftIoV1HostSubnetOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/network.openshift.io/v1/hostsubnets",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapinetworkv1HostSubnetList
    },
    401: {},
    default: {}
  },
  serializer
};

const createNetworkOpenshiftIoV1HostSubnetOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/network.openshift.io/v1/hostsubnets",
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Comgithubopenshiftapinetworkv1HostSubnet,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapinetworkv1HostSubnet
    },
    201: {
      bodyMapper: Mappers.Comgithubopenshiftapinetworkv1HostSubnet
    },
    202: {
      bodyMapper: Mappers.Comgithubopenshiftapinetworkv1HostSubnet
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteNetworkOpenshiftIoV1CollectionHostSubnetOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/network.openshift.io/v1/hostsubnets",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const readNetworkOpenshiftIoV1HostSubnetOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/network.openshift.io/v1/hostsubnets/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.exact,
    Parameters.exportParameter,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapinetworkv1HostSubnet
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceNetworkOpenshiftIoV1HostSubnetOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/network.openshift.io/v1/hostsubnets/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Comgithubopenshiftapinetworkv1HostSubnet,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapinetworkv1HostSubnet
    },
    201: {
      bodyMapper: Mappers.Comgithubopenshiftapinetworkv1HostSubnet
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteNetworkOpenshiftIoV1HostSubnetOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/network.openshift.io/v1/hostsubnets/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy,
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const patchNetworkOpenshiftIoV1HostSubnetOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/network.openshift.io/v1/hostsubnets/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapinetworkv1HostSubnet
    },
    401: {},
    default: {}
  },
  serializer
};

const listNetworkOpenshiftIoV1NamespacedEgressNetworkPolicyOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/network.openshift.io/v1/namespaces/{namespace}/egressnetworkpolicies",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapinetworkv1EgressNetworkPolicyList
    },
    401: {},
    default: {}
  },
  serializer
};

const createNetworkOpenshiftIoV1NamespacedEgressNetworkPolicyOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/network.openshift.io/v1/namespaces/{namespace}/egressnetworkpolicies",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Comgithubopenshiftapinetworkv1EgressNetworkPolicy,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapinetworkv1EgressNetworkPolicy
    },
    201: {
      bodyMapper: Mappers.Comgithubopenshiftapinetworkv1EgressNetworkPolicy
    },
    202: {
      bodyMapper: Mappers.Comgithubopenshiftapinetworkv1EgressNetworkPolicy
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteNetworkOpenshiftIoV1CollectionNamespacedEgressNetworkPolicyOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/network.openshift.io/v1/namespaces/{namespace}/egressnetworkpolicies",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const readNetworkOpenshiftIoV1NamespacedEgressNetworkPolicyOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/network.openshift.io/v1/namespaces/{namespace}/egressnetworkpolicies/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.exact,
    Parameters.exportParameter,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapinetworkv1EgressNetworkPolicy
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceNetworkOpenshiftIoV1NamespacedEgressNetworkPolicyOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/network.openshift.io/v1/namespaces/{namespace}/egressnetworkpolicies/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Comgithubopenshiftapinetworkv1EgressNetworkPolicy,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapinetworkv1EgressNetworkPolicy
    },
    201: {
      bodyMapper: Mappers.Comgithubopenshiftapinetworkv1EgressNetworkPolicy
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteNetworkOpenshiftIoV1NamespacedEgressNetworkPolicyOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/network.openshift.io/v1/namespaces/{namespace}/egressnetworkpolicies/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy,
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const patchNetworkOpenshiftIoV1NamespacedEgressNetworkPolicyOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/network.openshift.io/v1/namespaces/{namespace}/egressnetworkpolicies/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapinetworkv1EgressNetworkPolicy
    },
    401: {},
    default: {}
  },
  serializer
};

const listNetworkOpenshiftIoV1NetNamespaceOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/network.openshift.io/v1/netnamespaces",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapinetworkv1NetNamespaceList
    },
    401: {},
    default: {}
  },
  serializer
};

const createNetworkOpenshiftIoV1NetNamespaceOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/network.openshift.io/v1/netnamespaces",
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Comgithubopenshiftapinetworkv1NetNamespace,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapinetworkv1NetNamespace
    },
    201: {
      bodyMapper: Mappers.Comgithubopenshiftapinetworkv1NetNamespace
    },
    202: {
      bodyMapper: Mappers.Comgithubopenshiftapinetworkv1NetNamespace
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteNetworkOpenshiftIoV1CollectionNetNamespaceOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/network.openshift.io/v1/netnamespaces",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const readNetworkOpenshiftIoV1NetNamespaceOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/network.openshift.io/v1/netnamespaces/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.exact,
    Parameters.exportParameter,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapinetworkv1NetNamespace
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceNetworkOpenshiftIoV1NetNamespaceOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/network.openshift.io/v1/netnamespaces/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Comgithubopenshiftapinetworkv1NetNamespace,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapinetworkv1NetNamespace
    },
    201: {
      bodyMapper: Mappers.Comgithubopenshiftapinetworkv1NetNamespace
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteNetworkOpenshiftIoV1NetNamespaceOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/network.openshift.io/v1/netnamespaces/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy,
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const patchNetworkOpenshiftIoV1NetNamespaceOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/network.openshift.io/v1/netnamespaces/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapinetworkv1NetNamespace
    },
    401: {},
    default: {}
  },
  serializer
};

const watchNetworkOpenshiftIoV1ClusterNetworkListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/network.openshift.io/v1/watch/clusternetworks",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchNetworkOpenshiftIoV1ClusterNetworkOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/network.openshift.io/v1/watch/clusternetworks/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchNetworkOpenshiftIoV1EgressNetworkPolicyListForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/network.openshift.io/v1/watch/egressnetworkpolicies",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchNetworkOpenshiftIoV1HostSubnetListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/network.openshift.io/v1/watch/hostsubnets",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchNetworkOpenshiftIoV1HostSubnetOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/network.openshift.io/v1/watch/hostsubnets/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchNetworkOpenshiftIoV1NamespacedEgressNetworkPolicyListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/network.openshift.io/v1/watch/namespaces/{namespace}/egressnetworkpolicies",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchNetworkOpenshiftIoV1NamespacedEgressNetworkPolicyOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/network.openshift.io/v1/watch/namespaces/{namespace}/egressnetworkpolicies/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchNetworkOpenshiftIoV1NetNamespaceListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/network.openshift.io/v1/watch/netnamespaces",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchNetworkOpenshiftIoV1NetNamespaceOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/network.openshift.io/v1/watch/netnamespaces/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const getNetworkingAPIGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/networking.k8s.io/",
  responses: {
    200: {
      bodyMapper: Mappers.V1APIGroup
    },
    401: {},
    default: {}
  },
  serializer
};

const getNetworkingV1APIResourcesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/networking.k8s.io/v1/",
  responses: {
    200: {
      bodyMapper: Mappers.V1APIResourceList
    },
    401: {},
    default: {}
  },
  serializer
};

const listNetworkingV1NamespacedNetworkPolicyOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1NetworkPolicyList
    },
    401: {},
    default: {}
  },
  serializer
};

const createNetworkingV1NamespacedNetworkPolicyOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1NetworkPolicy,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1NetworkPolicy
    },
    201: {
      bodyMapper: Mappers.V1NetworkPolicy
    },
    202: {
      bodyMapper: Mappers.V1NetworkPolicy
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteNetworkingV1CollectionNamespacedNetworkPolicyOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const readNetworkingV1NamespacedNetworkPolicyOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.exact,
    Parameters.exportParameter,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1NetworkPolicy
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceNetworkingV1NamespacedNetworkPolicyOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1NetworkPolicy,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1NetworkPolicy
    },
    201: {
      bodyMapper: Mappers.V1NetworkPolicy
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteNetworkingV1NamespacedNetworkPolicyOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy,
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const patchNetworkingV1NamespacedNetworkPolicyOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.V1NetworkPolicy
    },
    401: {},
    default: {}
  },
  serializer
};

const listNetworkingV1NetworkPolicyForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/networking.k8s.io/v1/networkpolicies",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1NetworkPolicyList
    },
    401: {},
    default: {}
  },
  serializer
};

const watchNetworkingV1NamespacedNetworkPolicyListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/networking.k8s.io/v1/watch/namespaces/{namespace}/networkpolicies",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchNetworkingV1NamespacedNetworkPolicyOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/networking.k8s.io/v1/watch/namespaces/{namespace}/networkpolicies/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchNetworkingV1NetworkPolicyListForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/networking.k8s.io/v1/watch/networkpolicies",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const getOauthOpenshiftIoAPIGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/oauth.openshift.io/",
  responses: {
    200: {
      bodyMapper: Mappers.V1APIGroup
    },
    401: {},
    default: {}
  },
  serializer
};

const getOauthOpenshiftIoV1APIResourcesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/oauth.openshift.io/v1/",
  responses: {
    200: {
      bodyMapper: Mappers.V1APIResourceList
    },
    401: {},
    default: {}
  },
  serializer
};

const listOauthOpenshiftIoV1OAuthAccessTokenOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/oauth.openshift.io/v1/oauthaccesstokens",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapioauthv1OAuthAccessTokenList
    },
    401: {},
    default: {}
  },
  serializer
};

const createOauthOpenshiftIoV1OAuthAccessTokenOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/oauth.openshift.io/v1/oauthaccesstokens",
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Comgithubopenshiftapioauthv1OAuthAccessToken,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapioauthv1OAuthAccessToken
    },
    201: {
      bodyMapper: Mappers.Comgithubopenshiftapioauthv1OAuthAccessToken
    },
    202: {
      bodyMapper: Mappers.Comgithubopenshiftapioauthv1OAuthAccessToken
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteOauthOpenshiftIoV1CollectionOAuthAccessTokenOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/oauth.openshift.io/v1/oauthaccesstokens",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const readOauthOpenshiftIoV1OAuthAccessTokenOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/oauth.openshift.io/v1/oauthaccesstokens/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.exact,
    Parameters.exportParameter,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapioauthv1OAuthAccessToken
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceOauthOpenshiftIoV1OAuthAccessTokenOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/oauth.openshift.io/v1/oauthaccesstokens/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Comgithubopenshiftapioauthv1OAuthAccessToken,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapioauthv1OAuthAccessToken
    },
    201: {
      bodyMapper: Mappers.Comgithubopenshiftapioauthv1OAuthAccessToken
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteOauthOpenshiftIoV1OAuthAccessTokenOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/oauth.openshift.io/v1/oauthaccesstokens/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy,
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const patchOauthOpenshiftIoV1OAuthAccessTokenOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/oauth.openshift.io/v1/oauthaccesstokens/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapioauthv1OAuthAccessToken
    },
    401: {},
    default: {}
  },
  serializer
};

const listOauthOpenshiftIoV1OAuthAuthorizeTokenOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/oauth.openshift.io/v1/oauthauthorizetokens",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapioauthv1OAuthAuthorizeTokenList
    },
    401: {},
    default: {}
  },
  serializer
};

const createOauthOpenshiftIoV1OAuthAuthorizeTokenOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/oauth.openshift.io/v1/oauthauthorizetokens",
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Comgithubopenshiftapioauthv1OAuthAuthorizeToken,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapioauthv1OAuthAuthorizeToken
    },
    201: {
      bodyMapper: Mappers.Comgithubopenshiftapioauthv1OAuthAuthorizeToken
    },
    202: {
      bodyMapper: Mappers.Comgithubopenshiftapioauthv1OAuthAuthorizeToken
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteOauthOpenshiftIoV1CollectionOAuthAuthorizeTokenOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/oauth.openshift.io/v1/oauthauthorizetokens",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const readOauthOpenshiftIoV1OAuthAuthorizeTokenOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/oauth.openshift.io/v1/oauthauthorizetokens/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.exact,
    Parameters.exportParameter,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapioauthv1OAuthAuthorizeToken
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceOauthOpenshiftIoV1OAuthAuthorizeTokenOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/oauth.openshift.io/v1/oauthauthorizetokens/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Comgithubopenshiftapioauthv1OAuthAuthorizeToken,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapioauthv1OAuthAuthorizeToken
    },
    201: {
      bodyMapper: Mappers.Comgithubopenshiftapioauthv1OAuthAuthorizeToken
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteOauthOpenshiftIoV1OAuthAuthorizeTokenOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/oauth.openshift.io/v1/oauthauthorizetokens/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy,
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const patchOauthOpenshiftIoV1OAuthAuthorizeTokenOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/oauth.openshift.io/v1/oauthauthorizetokens/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapioauthv1OAuthAuthorizeToken
    },
    401: {},
    default: {}
  },
  serializer
};

const listOauthOpenshiftIoV1OAuthClientAuthorizationOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/oauth.openshift.io/v1/oauthclientauthorizations",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapioauthv1OAuthClientAuthorizationList
    },
    401: {},
    default: {}
  },
  serializer
};

const createOauthOpenshiftIoV1OAuthClientAuthorizationOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/oauth.openshift.io/v1/oauthclientauthorizations",
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Comgithubopenshiftapioauthv1OAuthClientAuthorization,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapioauthv1OAuthClientAuthorization
    },
    201: {
      bodyMapper: Mappers.Comgithubopenshiftapioauthv1OAuthClientAuthorization
    },
    202: {
      bodyMapper: Mappers.Comgithubopenshiftapioauthv1OAuthClientAuthorization
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteOauthOpenshiftIoV1CollectionOAuthClientAuthorizationOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/oauth.openshift.io/v1/oauthclientauthorizations",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const readOauthOpenshiftIoV1OAuthClientAuthorizationOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/oauth.openshift.io/v1/oauthclientauthorizations/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.exact,
    Parameters.exportParameter,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapioauthv1OAuthClientAuthorization
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceOauthOpenshiftIoV1OAuthClientAuthorizationOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/oauth.openshift.io/v1/oauthclientauthorizations/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Comgithubopenshiftapioauthv1OAuthClientAuthorization,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapioauthv1OAuthClientAuthorization
    },
    201: {
      bodyMapper: Mappers.Comgithubopenshiftapioauthv1OAuthClientAuthorization
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteOauthOpenshiftIoV1OAuthClientAuthorizationOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/oauth.openshift.io/v1/oauthclientauthorizations/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy,
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const patchOauthOpenshiftIoV1OAuthClientAuthorizationOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/oauth.openshift.io/v1/oauthclientauthorizations/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapioauthv1OAuthClientAuthorization
    },
    401: {},
    default: {}
  },
  serializer
};

const listOauthOpenshiftIoV1OAuthClientOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/oauth.openshift.io/v1/oauthclients",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapioauthv1OAuthClientList
    },
    401: {},
    default: {}
  },
  serializer
};

const createOauthOpenshiftIoV1OAuthClientOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/oauth.openshift.io/v1/oauthclients",
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Comgithubopenshiftapioauthv1OAuthClient,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapioauthv1OAuthClient
    },
    201: {
      bodyMapper: Mappers.Comgithubopenshiftapioauthv1OAuthClient
    },
    202: {
      bodyMapper: Mappers.Comgithubopenshiftapioauthv1OAuthClient
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteOauthOpenshiftIoV1CollectionOAuthClientOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/oauth.openshift.io/v1/oauthclients",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const readOauthOpenshiftIoV1OAuthClientOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/oauth.openshift.io/v1/oauthclients/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.exact,
    Parameters.exportParameter,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapioauthv1OAuthClient
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceOauthOpenshiftIoV1OAuthClientOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/oauth.openshift.io/v1/oauthclients/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Comgithubopenshiftapioauthv1OAuthClient,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapioauthv1OAuthClient
    },
    201: {
      bodyMapper: Mappers.Comgithubopenshiftapioauthv1OAuthClient
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteOauthOpenshiftIoV1OAuthClientOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/oauth.openshift.io/v1/oauthclients/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy,
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const patchOauthOpenshiftIoV1OAuthClientOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/oauth.openshift.io/v1/oauthclients/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapioauthv1OAuthClient
    },
    401: {},
    default: {}
  },
  serializer
};

const watchOauthOpenshiftIoV1OAuthAccessTokenListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/oauth.openshift.io/v1/watch/oauthaccesstokens",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchOauthOpenshiftIoV1OAuthAccessTokenOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/oauth.openshift.io/v1/watch/oauthaccesstokens/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchOauthOpenshiftIoV1OAuthAuthorizeTokenListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/oauth.openshift.io/v1/watch/oauthauthorizetokens",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchOauthOpenshiftIoV1OAuthAuthorizeTokenOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/oauth.openshift.io/v1/watch/oauthauthorizetokens/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchOauthOpenshiftIoV1OAuthClientAuthorizationListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/oauth.openshift.io/v1/watch/oauthclientauthorizations",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchOauthOpenshiftIoV1OAuthClientAuthorizationOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/oauth.openshift.io/v1/watch/oauthclientauthorizations/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchOauthOpenshiftIoV1OAuthClientListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/oauth.openshift.io/v1/watch/oauthclients",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchOauthOpenshiftIoV1OAuthClientOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/oauth.openshift.io/v1/watch/oauthclients/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const getPolicyAPIGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/policy/",
  responses: {
    200: {
      bodyMapper: Mappers.V1APIGroup
    },
    401: {},
    default: {}
  },
  serializer
};

const getPolicyV1beta1APIResourcesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/policy/v1beta1/",
  responses: {
    200: {
      bodyMapper: Mappers.V1APIResourceList
    },
    401: {},
    default: {}
  },
  serializer
};

const listPolicyV1beta1NamespacedPodDisruptionBudgetOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1PodDisruptionBudgetList
    },
    401: {},
    default: {}
  },
  serializer
};

const createPolicyV1beta1NamespacedPodDisruptionBudgetOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1beta1PodDisruptionBudget,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1PodDisruptionBudget
    },
    201: {
      bodyMapper: Mappers.V1beta1PodDisruptionBudget
    },
    202: {
      bodyMapper: Mappers.V1beta1PodDisruptionBudget
    },
    401: {},
    default: {}
  },
  serializer
};

const deletePolicyV1beta1CollectionNamespacedPodDisruptionBudgetOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const readPolicyV1beta1NamespacedPodDisruptionBudgetOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.exact,
    Parameters.exportParameter,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1PodDisruptionBudget
    },
    401: {},
    default: {}
  },
  serializer
};

const replacePolicyV1beta1NamespacedPodDisruptionBudgetOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1beta1PodDisruptionBudget,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1PodDisruptionBudget
    },
    201: {
      bodyMapper: Mappers.V1beta1PodDisruptionBudget
    },
    401: {},
    default: {}
  },
  serializer
};

const deletePolicyV1beta1NamespacedPodDisruptionBudgetOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy,
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const patchPolicyV1beta1NamespacedPodDisruptionBudgetOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1PodDisruptionBudget
    },
    401: {},
    default: {}
  },
  serializer
};

const readPolicyV1beta1NamespacedPodDisruptionBudgetStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets/{name}/status",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1PodDisruptionBudget
    },
    401: {},
    default: {}
  },
  serializer
};

const replacePolicyV1beta1NamespacedPodDisruptionBudgetStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets/{name}/status",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1beta1PodDisruptionBudget,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1PodDisruptionBudget
    },
    201: {
      bodyMapper: Mappers.V1beta1PodDisruptionBudget
    },
    401: {},
    default: {}
  },
  serializer
};

const patchPolicyV1beta1NamespacedPodDisruptionBudgetStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets/{name}/status",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1PodDisruptionBudget
    },
    401: {},
    default: {}
  },
  serializer
};

const listPolicyV1beta1PodDisruptionBudgetForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/policy/v1beta1/poddisruptionbudgets",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1PodDisruptionBudgetList
    },
    401: {},
    default: {}
  },
  serializer
};

const listPolicyV1beta1PodSecurityPolicyOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/policy/v1beta1/podsecuritypolicies",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1PodSecurityPolicyList
    },
    401: {},
    default: {}
  },
  serializer
};

const createPolicyV1beta1PodSecurityPolicyOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/policy/v1beta1/podsecuritypolicies",
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1beta1PodSecurityPolicy,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1PodSecurityPolicy
    },
    201: {
      bodyMapper: Mappers.V1beta1PodSecurityPolicy
    },
    202: {
      bodyMapper: Mappers.V1beta1PodSecurityPolicy
    },
    401: {},
    default: {}
  },
  serializer
};

const deletePolicyV1beta1CollectionPodSecurityPolicyOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/policy/v1beta1/podsecuritypolicies",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const readPolicyV1beta1PodSecurityPolicyOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/policy/v1beta1/podsecuritypolicies/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.exact,
    Parameters.exportParameter,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1PodSecurityPolicy
    },
    401: {},
    default: {}
  },
  serializer
};

const replacePolicyV1beta1PodSecurityPolicyOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/policy/v1beta1/podsecuritypolicies/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1beta1PodSecurityPolicy,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1PodSecurityPolicy
    },
    201: {
      bodyMapper: Mappers.V1beta1PodSecurityPolicy
    },
    401: {},
    default: {}
  },
  serializer
};

const deletePolicyV1beta1PodSecurityPolicyOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/policy/v1beta1/podsecuritypolicies/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy,
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const patchPolicyV1beta1PodSecurityPolicyOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/policy/v1beta1/podsecuritypolicies/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1PodSecurityPolicy
    },
    401: {},
    default: {}
  },
  serializer
};

const watchPolicyV1beta1NamespacedPodDisruptionBudgetListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/policy/v1beta1/watch/namespaces/{namespace}/poddisruptionbudgets",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchPolicyV1beta1NamespacedPodDisruptionBudgetOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/policy/v1beta1/watch/namespaces/{namespace}/poddisruptionbudgets/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/policy/v1beta1/watch/poddisruptionbudgets",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchPolicyV1beta1PodSecurityPolicyListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/policy/v1beta1/watch/podsecuritypolicies",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchPolicyV1beta1PodSecurityPolicyOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/policy/v1beta1/watch/podsecuritypolicies/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const getProjectOpenshiftIoAPIGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/project.openshift.io/",
  responses: {
    200: {
      bodyMapper: Mappers.V1APIGroup
    },
    401: {},
    default: {}
  },
  serializer
};

const getProjectOpenshiftIoV1APIResourcesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/project.openshift.io/v1/",
  responses: {
    200: {
      bodyMapper: Mappers.V1APIResourceList
    },
    401: {},
    default: {}
  },
  serializer
};

const listProjectOpenshiftIoV1ProjectRequestOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/project.openshift.io/v1/projectrequests",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const createProjectOpenshiftIoV1ProjectRequestOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/project.openshift.io/v1/projectrequests",
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Comgithubopenshiftapiprojectv1ProjectRequest,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiprojectv1ProjectRequest
    },
    201: {
      bodyMapper: Mappers.Comgithubopenshiftapiprojectv1ProjectRequest
    },
    202: {
      bodyMapper: Mappers.Comgithubopenshiftapiprojectv1ProjectRequest
    },
    401: {},
    default: {}
  },
  serializer
};

const listProjectOpenshiftIoV1ProjectOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/project.openshift.io/v1/projects",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiprojectv1ProjectList
    },
    401: {},
    default: {}
  },
  serializer
};

const createProjectOpenshiftIoV1ProjectOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/project.openshift.io/v1/projects",
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Comgithubopenshiftapiprojectv1Project,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiprojectv1Project
    },
    201: {
      bodyMapper: Mappers.Comgithubopenshiftapiprojectv1Project
    },
    202: {
      bodyMapper: Mappers.Comgithubopenshiftapiprojectv1Project
    },
    401: {},
    default: {}
  },
  serializer
};

const readProjectOpenshiftIoV1ProjectOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/project.openshift.io/v1/projects/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiprojectv1Project
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceProjectOpenshiftIoV1ProjectOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/project.openshift.io/v1/projects/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Comgithubopenshiftapiprojectv1Project,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiprojectv1Project
    },
    201: {
      bodyMapper: Mappers.Comgithubopenshiftapiprojectv1Project
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteProjectOpenshiftIoV1ProjectOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/project.openshift.io/v1/projects/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy,
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const patchProjectOpenshiftIoV1ProjectOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/project.openshift.io/v1/projects/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiprojectv1Project
    },
    401: {},
    default: {}
  },
  serializer
};

const watchProjectOpenshiftIoV1ProjectListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/project.openshift.io/v1/watch/projects",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchProjectOpenshiftIoV1ProjectOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/project.openshift.io/v1/watch/projects/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const getQuotaOpenshiftIoAPIGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/quota.openshift.io/",
  responses: {
    200: {
      bodyMapper: Mappers.V1APIGroup
    },
    401: {},
    default: {}
  },
  serializer
};

const getQuotaOpenshiftIoV1APIResourcesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/quota.openshift.io/v1/",
  responses: {
    200: {
      bodyMapper: Mappers.V1APIResourceList
    },
    401: {},
    default: {}
  },
  serializer
};

const listQuotaOpenshiftIoV1AppliedClusterResourceQuotaForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/quota.openshift.io/v1/appliedclusterresourcequotas",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiquotav1AppliedClusterResourceQuotaList
    },
    401: {},
    default: {}
  },
  serializer
};

const listQuotaOpenshiftIoV1ClusterResourceQuotaOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/quota.openshift.io/v1/clusterresourcequotas",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiquotav1ClusterResourceQuotaList
    },
    401: {},
    default: {}
  },
  serializer
};

const createQuotaOpenshiftIoV1ClusterResourceQuotaOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/quota.openshift.io/v1/clusterresourcequotas",
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Comgithubopenshiftapiquotav1ClusterResourceQuota,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiquotav1ClusterResourceQuota
    },
    201: {
      bodyMapper: Mappers.Comgithubopenshiftapiquotav1ClusterResourceQuota
    },
    202: {
      bodyMapper: Mappers.Comgithubopenshiftapiquotav1ClusterResourceQuota
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteQuotaOpenshiftIoV1CollectionClusterResourceQuotaOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/quota.openshift.io/v1/clusterresourcequotas",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const readQuotaOpenshiftIoV1ClusterResourceQuotaOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/quota.openshift.io/v1/clusterresourcequotas/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.exact,
    Parameters.exportParameter,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiquotav1ClusterResourceQuota
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceQuotaOpenshiftIoV1ClusterResourceQuotaOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/quota.openshift.io/v1/clusterresourcequotas/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Comgithubopenshiftapiquotav1ClusterResourceQuota,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiquotav1ClusterResourceQuota
    },
    201: {
      bodyMapper: Mappers.Comgithubopenshiftapiquotav1ClusterResourceQuota
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteQuotaOpenshiftIoV1ClusterResourceQuotaOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/quota.openshift.io/v1/clusterresourcequotas/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy,
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const patchQuotaOpenshiftIoV1ClusterResourceQuotaOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/quota.openshift.io/v1/clusterresourcequotas/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiquotav1ClusterResourceQuota
    },
    401: {},
    default: {}
  },
  serializer
};

const readQuotaOpenshiftIoV1ClusterResourceQuotaStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/quota.openshift.io/v1/clusterresourcequotas/{name}/status",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiquotav1ClusterResourceQuota
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceQuotaOpenshiftIoV1ClusterResourceQuotaStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/quota.openshift.io/v1/clusterresourcequotas/{name}/status",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Comgithubopenshiftapiquotav1ClusterResourceQuota,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiquotav1ClusterResourceQuota
    },
    201: {
      bodyMapper: Mappers.Comgithubopenshiftapiquotav1ClusterResourceQuota
    },
    401: {},
    default: {}
  },
  serializer
};

const patchQuotaOpenshiftIoV1ClusterResourceQuotaStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/quota.openshift.io/v1/clusterresourcequotas/{name}/status",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiquotav1ClusterResourceQuota
    },
    401: {},
    default: {}
  },
  serializer
};

const listQuotaOpenshiftIoV1NamespacedAppliedClusterResourceQuotaOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/quota.openshift.io/v1/namespaces/{namespace}/appliedclusterresourcequotas",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiquotav1AppliedClusterResourceQuotaList
    },
    401: {},
    default: {}
  },
  serializer
};

const readQuotaOpenshiftIoV1NamespacedAppliedClusterResourceQuotaOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/quota.openshift.io/v1/namespaces/{namespace}/appliedclusterresourcequotas/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiquotav1AppliedClusterResourceQuota
    },
    401: {},
    default: {}
  },
  serializer
};

const watchQuotaOpenshiftIoV1ClusterResourceQuotaListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/quota.openshift.io/v1/watch/clusterresourcequotas",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchQuotaOpenshiftIoV1ClusterResourceQuotaOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/quota.openshift.io/v1/watch/clusterresourcequotas/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const getRbacAuthorizationAPIGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/rbac.authorization.k8s.io/",
  responses: {
    200: {
      bodyMapper: Mappers.V1APIGroup
    },
    401: {},
    default: {}
  },
  serializer
};

const getRbacAuthorizationV1APIResourcesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/rbac.authorization.k8s.io/v1/",
  responses: {
    200: {
      bodyMapper: Mappers.V1APIResourceList
    },
    401: {},
    default: {}
  },
  serializer
};

const listRbacAuthorizationV1ClusterRoleBindingOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/rbac.authorization.k8s.io/v1/clusterrolebindings",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1ClusterRoleBindingList
    },
    401: {},
    default: {}
  },
  serializer
};

const createRbacAuthorizationV1ClusterRoleBindingOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/rbac.authorization.k8s.io/v1/clusterrolebindings",
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1ClusterRoleBinding,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1ClusterRoleBinding
    },
    201: {
      bodyMapper: Mappers.V1ClusterRoleBinding
    },
    202: {
      bodyMapper: Mappers.V1ClusterRoleBinding
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteRbacAuthorizationV1CollectionClusterRoleBindingOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/rbac.authorization.k8s.io/v1/clusterrolebindings",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const readRbacAuthorizationV1ClusterRoleBindingOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/rbac.authorization.k8s.io/v1/clusterrolebindings/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1ClusterRoleBinding
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceRbacAuthorizationV1ClusterRoleBindingOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/rbac.authorization.k8s.io/v1/clusterrolebindings/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1ClusterRoleBinding,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1ClusterRoleBinding
    },
    201: {
      bodyMapper: Mappers.V1ClusterRoleBinding
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteRbacAuthorizationV1ClusterRoleBindingOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/rbac.authorization.k8s.io/v1/clusterrolebindings/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy,
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const patchRbacAuthorizationV1ClusterRoleBindingOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/rbac.authorization.k8s.io/v1/clusterrolebindings/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.V1ClusterRoleBinding
    },
    401: {},
    default: {}
  },
  serializer
};

const listRbacAuthorizationV1ClusterRoleOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/rbac.authorization.k8s.io/v1/clusterroles",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1ClusterRoleList
    },
    401: {},
    default: {}
  },
  serializer
};

const createRbacAuthorizationV1ClusterRoleOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/rbac.authorization.k8s.io/v1/clusterroles",
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1ClusterRole,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1ClusterRole
    },
    201: {
      bodyMapper: Mappers.V1ClusterRole
    },
    202: {
      bodyMapper: Mappers.V1ClusterRole
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteRbacAuthorizationV1CollectionClusterRoleOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/rbac.authorization.k8s.io/v1/clusterroles",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const readRbacAuthorizationV1ClusterRoleOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/rbac.authorization.k8s.io/v1/clusterroles/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1ClusterRole
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceRbacAuthorizationV1ClusterRoleOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/rbac.authorization.k8s.io/v1/clusterroles/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1ClusterRole,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1ClusterRole
    },
    201: {
      bodyMapper: Mappers.V1ClusterRole
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteRbacAuthorizationV1ClusterRoleOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/rbac.authorization.k8s.io/v1/clusterroles/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy,
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const patchRbacAuthorizationV1ClusterRoleOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/rbac.authorization.k8s.io/v1/clusterroles/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.V1ClusterRole
    },
    401: {},
    default: {}
  },
  serializer
};

const listRbacAuthorizationV1NamespacedRoleBindingOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1RoleBindingList
    },
    401: {},
    default: {}
  },
  serializer
};

const createRbacAuthorizationV1NamespacedRoleBindingOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1RoleBinding,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1RoleBinding
    },
    201: {
      bodyMapper: Mappers.V1RoleBinding
    },
    202: {
      bodyMapper: Mappers.V1RoleBinding
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteRbacAuthorizationV1CollectionNamespacedRoleBindingOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const readRbacAuthorizationV1NamespacedRoleBindingOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1RoleBinding
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceRbacAuthorizationV1NamespacedRoleBindingOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1RoleBinding,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1RoleBinding
    },
    201: {
      bodyMapper: Mappers.V1RoleBinding
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteRbacAuthorizationV1NamespacedRoleBindingOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy,
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const patchRbacAuthorizationV1NamespacedRoleBindingOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.V1RoleBinding
    },
    401: {},
    default: {}
  },
  serializer
};

const listRbacAuthorizationV1NamespacedRoleOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1RoleList
    },
    401: {},
    default: {}
  },
  serializer
};

const createRbacAuthorizationV1NamespacedRoleOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1Role,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Role
    },
    201: {
      bodyMapper: Mappers.V1Role
    },
    202: {
      bodyMapper: Mappers.V1Role
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteRbacAuthorizationV1CollectionNamespacedRoleOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const readRbacAuthorizationV1NamespacedRoleOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Role
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceRbacAuthorizationV1NamespacedRoleOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1Role,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Role
    },
    201: {
      bodyMapper: Mappers.V1Role
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteRbacAuthorizationV1NamespacedRoleOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy,
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const patchRbacAuthorizationV1NamespacedRoleOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.V1Role
    },
    401: {},
    default: {}
  },
  serializer
};

const listRbacAuthorizationV1RoleBindingForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/rbac.authorization.k8s.io/v1/rolebindings",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1RoleBindingList
    },
    401: {},
    default: {}
  },
  serializer
};

const listRbacAuthorizationV1RoleForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/rbac.authorization.k8s.io/v1/roles",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1RoleList
    },
    401: {},
    default: {}
  },
  serializer
};

const watchRbacAuthorizationV1ClusterRoleBindingListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/rbac.authorization.k8s.io/v1/watch/clusterrolebindings",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchRbacAuthorizationV1ClusterRoleBindingOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/rbac.authorization.k8s.io/v1/watch/clusterrolebindings/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchRbacAuthorizationV1ClusterRoleListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/rbac.authorization.k8s.io/v1/watch/clusterroles",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchRbacAuthorizationV1ClusterRoleOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/rbac.authorization.k8s.io/v1/watch/clusterroles/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchRbacAuthorizationV1NamespacedRoleBindingListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/rbac.authorization.k8s.io/v1/watch/namespaces/{namespace}/rolebindings",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchRbacAuthorizationV1NamespacedRoleBindingOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/rbac.authorization.k8s.io/v1/watch/namespaces/{namespace}/rolebindings/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchRbacAuthorizationV1NamespacedRoleListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/rbac.authorization.k8s.io/v1/watch/namespaces/{namespace}/roles",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchRbacAuthorizationV1NamespacedRoleOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/rbac.authorization.k8s.io/v1/watch/namespaces/{namespace}/roles/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchRbacAuthorizationV1RoleBindingListForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/rbac.authorization.k8s.io/v1/watch/rolebindings",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchRbacAuthorizationV1RoleListForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/rbac.authorization.k8s.io/v1/watch/roles",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const getRbacAuthorizationV1beta1APIResourcesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/rbac.authorization.k8s.io/v1beta1/",
  responses: {
    200: {
      bodyMapper: Mappers.V1APIResourceList
    },
    401: {},
    default: {}
  },
  serializer
};

const listRbacAuthorizationV1beta1ClusterRoleBindingOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/rbac.authorization.k8s.io/v1beta1/clusterrolebindings",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1ClusterRoleBindingList
    },
    401: {},
    default: {}
  },
  serializer
};

const createRbacAuthorizationV1beta1ClusterRoleBindingOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/rbac.authorization.k8s.io/v1beta1/clusterrolebindings",
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1beta1ClusterRoleBinding,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1ClusterRoleBinding
    },
    201: {
      bodyMapper: Mappers.V1beta1ClusterRoleBinding
    },
    202: {
      bodyMapper: Mappers.V1beta1ClusterRoleBinding
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteRbacAuthorizationV1beta1CollectionClusterRoleBindingOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/rbac.authorization.k8s.io/v1beta1/clusterrolebindings",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const readRbacAuthorizationV1beta1ClusterRoleBindingOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/rbac.authorization.k8s.io/v1beta1/clusterrolebindings/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1ClusterRoleBinding
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceRbacAuthorizationV1beta1ClusterRoleBindingOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/rbac.authorization.k8s.io/v1beta1/clusterrolebindings/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1beta1ClusterRoleBinding,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1ClusterRoleBinding
    },
    201: {
      bodyMapper: Mappers.V1beta1ClusterRoleBinding
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteRbacAuthorizationV1beta1ClusterRoleBindingOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/rbac.authorization.k8s.io/v1beta1/clusterrolebindings/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy,
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const patchRbacAuthorizationV1beta1ClusterRoleBindingOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/rbac.authorization.k8s.io/v1beta1/clusterrolebindings/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1ClusterRoleBinding
    },
    401: {},
    default: {}
  },
  serializer
};

const listRbacAuthorizationV1beta1ClusterRoleOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/rbac.authorization.k8s.io/v1beta1/clusterroles",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1ClusterRoleList
    },
    401: {},
    default: {}
  },
  serializer
};

const createRbacAuthorizationV1beta1ClusterRoleOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/rbac.authorization.k8s.io/v1beta1/clusterroles",
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1beta1ClusterRole,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1ClusterRole
    },
    201: {
      bodyMapper: Mappers.V1beta1ClusterRole
    },
    202: {
      bodyMapper: Mappers.V1beta1ClusterRole
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteRbacAuthorizationV1beta1CollectionClusterRoleOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/rbac.authorization.k8s.io/v1beta1/clusterroles",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const readRbacAuthorizationV1beta1ClusterRoleOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/rbac.authorization.k8s.io/v1beta1/clusterroles/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1ClusterRole
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceRbacAuthorizationV1beta1ClusterRoleOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/rbac.authorization.k8s.io/v1beta1/clusterroles/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1beta1ClusterRole,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1ClusterRole
    },
    201: {
      bodyMapper: Mappers.V1beta1ClusterRole
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteRbacAuthorizationV1beta1ClusterRoleOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/rbac.authorization.k8s.io/v1beta1/clusterroles/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy,
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const patchRbacAuthorizationV1beta1ClusterRoleOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/rbac.authorization.k8s.io/v1beta1/clusterroles/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1ClusterRole
    },
    401: {},
    default: {}
  },
  serializer
};

const listRbacAuthorizationV1beta1NamespacedRoleBindingOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/rolebindings",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1RoleBindingList
    },
    401: {},
    default: {}
  },
  serializer
};

const createRbacAuthorizationV1beta1NamespacedRoleBindingOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/rolebindings",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1beta1RoleBinding,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1RoleBinding
    },
    201: {
      bodyMapper: Mappers.V1beta1RoleBinding
    },
    202: {
      bodyMapper: Mappers.V1beta1RoleBinding
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteRbacAuthorizationV1beta1CollectionNamespacedRoleBindingOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/rolebindings",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const readRbacAuthorizationV1beta1NamespacedRoleBindingOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/rolebindings/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1RoleBinding
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceRbacAuthorizationV1beta1NamespacedRoleBindingOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/rolebindings/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1beta1RoleBinding,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1RoleBinding
    },
    201: {
      bodyMapper: Mappers.V1beta1RoleBinding
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteRbacAuthorizationV1beta1NamespacedRoleBindingOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/rolebindings/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy,
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const patchRbacAuthorizationV1beta1NamespacedRoleBindingOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/rolebindings/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1RoleBinding
    },
    401: {},
    default: {}
  },
  serializer
};

const listRbacAuthorizationV1beta1NamespacedRoleOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/roles",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1RoleList
    },
    401: {},
    default: {}
  },
  serializer
};

const createRbacAuthorizationV1beta1NamespacedRoleOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/roles",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1beta1Role,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1Role
    },
    201: {
      bodyMapper: Mappers.V1beta1Role
    },
    202: {
      bodyMapper: Mappers.V1beta1Role
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteRbacAuthorizationV1beta1CollectionNamespacedRoleOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/roles",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const readRbacAuthorizationV1beta1NamespacedRoleOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/roles/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1Role
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceRbacAuthorizationV1beta1NamespacedRoleOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/roles/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1beta1Role,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1Role
    },
    201: {
      bodyMapper: Mappers.V1beta1Role
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteRbacAuthorizationV1beta1NamespacedRoleOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/roles/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy,
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const patchRbacAuthorizationV1beta1NamespacedRoleOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/roles/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1Role
    },
    401: {},
    default: {}
  },
  serializer
};

const listRbacAuthorizationV1beta1RoleBindingForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/rbac.authorization.k8s.io/v1beta1/rolebindings",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1RoleBindingList
    },
    401: {},
    default: {}
  },
  serializer
};

const listRbacAuthorizationV1beta1RoleForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/rbac.authorization.k8s.io/v1beta1/roles",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1RoleList
    },
    401: {},
    default: {}
  },
  serializer
};

const watchRbacAuthorizationV1beta1ClusterRoleBindingListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/rbac.authorization.k8s.io/v1beta1/watch/clusterrolebindings",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchRbacAuthorizationV1beta1ClusterRoleBindingOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/rbac.authorization.k8s.io/v1beta1/watch/clusterrolebindings/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchRbacAuthorizationV1beta1ClusterRoleListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/rbac.authorization.k8s.io/v1beta1/watch/clusterroles",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchRbacAuthorizationV1beta1ClusterRoleOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/rbac.authorization.k8s.io/v1beta1/watch/clusterroles/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchRbacAuthorizationV1beta1NamespacedRoleBindingListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/rbac.authorization.k8s.io/v1beta1/watch/namespaces/{namespace}/rolebindings",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchRbacAuthorizationV1beta1NamespacedRoleBindingOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/rbac.authorization.k8s.io/v1beta1/watch/namespaces/{namespace}/rolebindings/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchRbacAuthorizationV1beta1NamespacedRoleListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/rbac.authorization.k8s.io/v1beta1/watch/namespaces/{namespace}/roles",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchRbacAuthorizationV1beta1NamespacedRoleOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/rbac.authorization.k8s.io/v1beta1/watch/namespaces/{namespace}/roles/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchRbacAuthorizationV1beta1RoleBindingListForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/rbac.authorization.k8s.io/v1beta1/watch/rolebindings",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchRbacAuthorizationV1beta1RoleListForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/rbac.authorization.k8s.io/v1beta1/watch/roles",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const getRouteOpenshiftIoAPIGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/route.openshift.io/",
  responses: {
    200: {
      bodyMapper: Mappers.V1APIGroup
    },
    401: {},
    default: {}
  },
  serializer
};

const getRouteOpenshiftIoV1APIResourcesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/route.openshift.io/v1/",
  responses: {
    200: {
      bodyMapper: Mappers.V1APIResourceList
    },
    401: {},
    default: {}
  },
  serializer
};

const listRouteOpenshiftIoV1NamespacedRouteOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/route.openshift.io/v1/namespaces/{namespace}/routes",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiroutev1RouteList
    },
    401: {},
    default: {}
  },
  serializer
};

const createRouteOpenshiftIoV1NamespacedRouteOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/route.openshift.io/v1/namespaces/{namespace}/routes",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Comgithubopenshiftapiroutev1Route,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiroutev1Route
    },
    201: {
      bodyMapper: Mappers.Comgithubopenshiftapiroutev1Route
    },
    202: {
      bodyMapper: Mappers.Comgithubopenshiftapiroutev1Route
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteRouteOpenshiftIoV1CollectionNamespacedRouteOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/route.openshift.io/v1/namespaces/{namespace}/routes",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const readRouteOpenshiftIoV1NamespacedRouteOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/route.openshift.io/v1/namespaces/{namespace}/routes/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.exact,
    Parameters.exportParameter,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiroutev1Route
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceRouteOpenshiftIoV1NamespacedRouteOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/route.openshift.io/v1/namespaces/{namespace}/routes/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Comgithubopenshiftapiroutev1Route,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiroutev1Route
    },
    201: {
      bodyMapper: Mappers.Comgithubopenshiftapiroutev1Route
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteRouteOpenshiftIoV1NamespacedRouteOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/route.openshift.io/v1/namespaces/{namespace}/routes/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy,
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const patchRouteOpenshiftIoV1NamespacedRouteOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/route.openshift.io/v1/namespaces/{namespace}/routes/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiroutev1Route
    },
    401: {},
    default: {}
  },
  serializer
};

const readRouteOpenshiftIoV1NamespacedRouteStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/route.openshift.io/v1/namespaces/{namespace}/routes/{name}/status",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiroutev1Route
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceRouteOpenshiftIoV1NamespacedRouteStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/route.openshift.io/v1/namespaces/{namespace}/routes/{name}/status",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Comgithubopenshiftapiroutev1Route,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiroutev1Route
    },
    201: {
      bodyMapper: Mappers.Comgithubopenshiftapiroutev1Route
    },
    401: {},
    default: {}
  },
  serializer
};

const patchRouteOpenshiftIoV1NamespacedRouteStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/route.openshift.io/v1/namespaces/{namespace}/routes/{name}/status",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiroutev1Route
    },
    401: {},
    default: {}
  },
  serializer
};

const listRouteOpenshiftIoV1RouteForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/route.openshift.io/v1/routes",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiroutev1RouteList
    },
    401: {},
    default: {}
  },
  serializer
};

const watchRouteOpenshiftIoV1NamespacedRouteListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/route.openshift.io/v1/watch/namespaces/{namespace}/routes",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchRouteOpenshiftIoV1NamespacedRouteOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/route.openshift.io/v1/watch/namespaces/{namespace}/routes/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchRouteOpenshiftIoV1RouteListForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/route.openshift.io/v1/watch/routes",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const getSchedulingAPIGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/scheduling.k8s.io/",
  responses: {
    200: {
      bodyMapper: Mappers.V1APIGroup
    },
    401: {},
    default: {}
  },
  serializer
};

const getSchedulingV1beta1APIResourcesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/scheduling.k8s.io/v1beta1/",
  responses: {
    200: {
      bodyMapper: Mappers.V1APIResourceList
    },
    401: {},
    default: {}
  },
  serializer
};

const listSchedulingV1beta1PriorityClassOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/scheduling.k8s.io/v1beta1/priorityclasses",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1PriorityClassList
    },
    401: {},
    default: {}
  },
  serializer
};

const createSchedulingV1beta1PriorityClassOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/scheduling.k8s.io/v1beta1/priorityclasses",
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1beta1PriorityClass,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1PriorityClass
    },
    201: {
      bodyMapper: Mappers.V1beta1PriorityClass
    },
    202: {
      bodyMapper: Mappers.V1beta1PriorityClass
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteSchedulingV1beta1CollectionPriorityClassOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/scheduling.k8s.io/v1beta1/priorityclasses",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const readSchedulingV1beta1PriorityClassOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/scheduling.k8s.io/v1beta1/priorityclasses/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.exact,
    Parameters.exportParameter,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1PriorityClass
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceSchedulingV1beta1PriorityClassOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/scheduling.k8s.io/v1beta1/priorityclasses/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1beta1PriorityClass,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1PriorityClass
    },
    201: {
      bodyMapper: Mappers.V1beta1PriorityClass
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteSchedulingV1beta1PriorityClassOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/scheduling.k8s.io/v1beta1/priorityclasses/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy,
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const patchSchedulingV1beta1PriorityClassOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/scheduling.k8s.io/v1beta1/priorityclasses/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1PriorityClass
    },
    401: {},
    default: {}
  },
  serializer
};

const watchSchedulingV1beta1PriorityClassListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/scheduling.k8s.io/v1beta1/watch/priorityclasses",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchSchedulingV1beta1PriorityClassOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/scheduling.k8s.io/v1beta1/watch/priorityclasses/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const getSecurityOpenshiftIoAPIGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/security.openshift.io/",
  responses: {
    200: {
      bodyMapper: Mappers.V1APIGroup
    },
    401: {},
    default: {}
  },
  serializer
};

const getSecurityOpenshiftIoV1APIResourcesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/security.openshift.io/v1/",
  responses: {
    200: {
      bodyMapper: Mappers.V1APIResourceList
    },
    401: {},
    default: {}
  },
  serializer
};

const createSecurityOpenshiftIoV1NamespacedPodSecurityPolicyReviewOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/security.openshift.io/v1/namespaces/{namespace}/podsecuritypolicyreviews",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Comgithubopenshiftapisecurityv1PodSecurityPolicyReview,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapisecurityv1PodSecurityPolicyReview
    },
    201: {
      bodyMapper: Mappers.Comgithubopenshiftapisecurityv1PodSecurityPolicyReview
    },
    202: {
      bodyMapper: Mappers.Comgithubopenshiftapisecurityv1PodSecurityPolicyReview
    },
    401: {},
    default: {}
  },
  serializer
};

const createSecurityOpenshiftIoV1NamespacedPodSecurityPolicySelfSubjectReviewOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/security.openshift.io/v1/namespaces/{namespace}/podsecuritypolicyselfsubjectreviews",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Comgithubopenshiftapisecurityv1PodSecurityPolicySelfSubjectReview,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapisecurityv1PodSecurityPolicySelfSubjectReview
    },
    201: {
      bodyMapper: Mappers.Comgithubopenshiftapisecurityv1PodSecurityPolicySelfSubjectReview
    },
    202: {
      bodyMapper: Mappers.Comgithubopenshiftapisecurityv1PodSecurityPolicySelfSubjectReview
    },
    401: {},
    default: {}
  },
  serializer
};

const createSecurityOpenshiftIoV1NamespacedPodSecurityPolicySubjectReviewOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/security.openshift.io/v1/namespaces/{namespace}/podsecuritypolicysubjectreviews",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Comgithubopenshiftapisecurityv1PodSecurityPolicySubjectReview,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapisecurityv1PodSecurityPolicySubjectReview
    },
    201: {
      bodyMapper: Mappers.Comgithubopenshiftapisecurityv1PodSecurityPolicySubjectReview
    },
    202: {
      bodyMapper: Mappers.Comgithubopenshiftapisecurityv1PodSecurityPolicySubjectReview
    },
    401: {},
    default: {}
  },
  serializer
};

const listSecurityOpenshiftIoV1RangeAllocationOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/security.openshift.io/v1/rangeallocations",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapisecurityv1RangeAllocationList
    },
    401: {},
    default: {}
  },
  serializer
};

const createSecurityOpenshiftIoV1RangeAllocationOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/security.openshift.io/v1/rangeallocations",
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Comgithubopenshiftapisecurityv1RangeAllocation,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapisecurityv1RangeAllocation
    },
    201: {
      bodyMapper: Mappers.Comgithubopenshiftapisecurityv1RangeAllocation
    },
    202: {
      bodyMapper: Mappers.Comgithubopenshiftapisecurityv1RangeAllocation
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteSecurityOpenshiftIoV1CollectionRangeAllocationOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/security.openshift.io/v1/rangeallocations",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const readSecurityOpenshiftIoV1RangeAllocationOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/security.openshift.io/v1/rangeallocations/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.exact,
    Parameters.exportParameter,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapisecurityv1RangeAllocation
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceSecurityOpenshiftIoV1RangeAllocationOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/security.openshift.io/v1/rangeallocations/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Comgithubopenshiftapisecurityv1RangeAllocation,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapisecurityv1RangeAllocation
    },
    201: {
      bodyMapper: Mappers.Comgithubopenshiftapisecurityv1RangeAllocation
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteSecurityOpenshiftIoV1RangeAllocationOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/security.openshift.io/v1/rangeallocations/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy,
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const patchSecurityOpenshiftIoV1RangeAllocationOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/security.openshift.io/v1/rangeallocations/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapisecurityv1RangeAllocation
    },
    401: {},
    default: {}
  },
  serializer
};

const listSecurityOpenshiftIoV1SecurityContextConstraintsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/security.openshift.io/v1/securitycontextconstraints",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapisecurityv1SecurityContextConstraintsList
    },
    401: {},
    default: {}
  },
  serializer
};

const createSecurityOpenshiftIoV1SecurityContextConstraintsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/security.openshift.io/v1/securitycontextconstraints",
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Comgithubopenshiftapisecurityv1SecurityContextConstraints,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapisecurityv1SecurityContextConstraints
    },
    201: {
      bodyMapper: Mappers.Comgithubopenshiftapisecurityv1SecurityContextConstraints
    },
    202: {
      bodyMapper: Mappers.Comgithubopenshiftapisecurityv1SecurityContextConstraints
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteSecurityOpenshiftIoV1CollectionSecurityContextConstraintsOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/security.openshift.io/v1/securitycontextconstraints",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const readSecurityOpenshiftIoV1SecurityContextConstraintsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/security.openshift.io/v1/securitycontextconstraints/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.exact,
    Parameters.exportParameter,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapisecurityv1SecurityContextConstraints
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceSecurityOpenshiftIoV1SecurityContextConstraintsOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/security.openshift.io/v1/securitycontextconstraints/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Comgithubopenshiftapisecurityv1SecurityContextConstraints,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapisecurityv1SecurityContextConstraints
    },
    201: {
      bodyMapper: Mappers.Comgithubopenshiftapisecurityv1SecurityContextConstraints
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteSecurityOpenshiftIoV1SecurityContextConstraintsOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/security.openshift.io/v1/securitycontextconstraints/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy,
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const patchSecurityOpenshiftIoV1SecurityContextConstraintsOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/security.openshift.io/v1/securitycontextconstraints/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapisecurityv1SecurityContextConstraints
    },
    401: {},
    default: {}
  },
  serializer
};

const watchSecurityOpenshiftIoV1RangeAllocationListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/security.openshift.io/v1/watch/rangeallocations",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchSecurityOpenshiftIoV1RangeAllocationOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/security.openshift.io/v1/watch/rangeallocations/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchSecurityOpenshiftIoV1SecurityContextConstraintsListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/security.openshift.io/v1/watch/securitycontextconstraints",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchSecurityOpenshiftIoV1SecurityContextConstraintsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/security.openshift.io/v1/watch/securitycontextconstraints/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const getStorageAPIGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/storage.k8s.io/",
  responses: {
    200: {
      bodyMapper: Mappers.V1APIGroup
    },
    401: {},
    default: {}
  },
  serializer
};

const getStorageV1APIResourcesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/storage.k8s.io/v1/",
  responses: {
    200: {
      bodyMapper: Mappers.V1APIResourceList
    },
    401: {},
    default: {}
  },
  serializer
};

const listStorageV1StorageClassOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/storage.k8s.io/v1/storageclasses",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1StorageClassList
    },
    401: {},
    default: {}
  },
  serializer
};

const createStorageV1StorageClassOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/storage.k8s.io/v1/storageclasses",
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1StorageClass,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1StorageClass
    },
    201: {
      bodyMapper: Mappers.V1StorageClass
    },
    202: {
      bodyMapper: Mappers.V1StorageClass
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteStorageV1CollectionStorageClassOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/storage.k8s.io/v1/storageclasses",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const readStorageV1StorageClassOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/storage.k8s.io/v1/storageclasses/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.exact,
    Parameters.exportParameter,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1StorageClass
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceStorageV1StorageClassOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/storage.k8s.io/v1/storageclasses/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1StorageClass,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1StorageClass
    },
    201: {
      bodyMapper: Mappers.V1StorageClass
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteStorageV1StorageClassOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/storage.k8s.io/v1/storageclasses/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy,
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const patchStorageV1StorageClassOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/storage.k8s.io/v1/storageclasses/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.V1StorageClass
    },
    401: {},
    default: {}
  },
  serializer
};

const watchStorageV1StorageClassListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/storage.k8s.io/v1/watch/storageclasses",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchStorageV1StorageClassOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/storage.k8s.io/v1/watch/storageclasses/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const getStorageV1beta1APIResourcesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/storage.k8s.io/v1beta1/",
  responses: {
    200: {
      bodyMapper: Mappers.V1APIResourceList
    },
    401: {},
    default: {}
  },
  serializer
};

const listStorageV1beta1StorageClassOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/storage.k8s.io/v1beta1/storageclasses",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1StorageClassList
    },
    401: {},
    default: {}
  },
  serializer
};

const createStorageV1beta1StorageClassOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/storage.k8s.io/v1beta1/storageclasses",
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1beta1StorageClass,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1StorageClass
    },
    201: {
      bodyMapper: Mappers.V1beta1StorageClass
    },
    202: {
      bodyMapper: Mappers.V1beta1StorageClass
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteStorageV1beta1CollectionStorageClassOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/storage.k8s.io/v1beta1/storageclasses",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const readStorageV1beta1StorageClassOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/storage.k8s.io/v1beta1/storageclasses/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.exact,
    Parameters.exportParameter,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1StorageClass
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceStorageV1beta1StorageClassOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/storage.k8s.io/v1beta1/storageclasses/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1beta1StorageClass,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1StorageClass
    },
    201: {
      bodyMapper: Mappers.V1beta1StorageClass
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteStorageV1beta1StorageClassOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/storage.k8s.io/v1beta1/storageclasses/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy,
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const patchStorageV1beta1StorageClassOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/storage.k8s.io/v1beta1/storageclasses/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1StorageClass
    },
    401: {},
    default: {}
  },
  serializer
};

const listStorageV1beta1VolumeAttachmentOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/storage.k8s.io/v1beta1/volumeattachments",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1VolumeAttachmentList
    },
    401: {},
    default: {}
  },
  serializer
};

const createStorageV1beta1VolumeAttachmentOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/storage.k8s.io/v1beta1/volumeattachments",
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1beta1VolumeAttachment,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1VolumeAttachment
    },
    201: {
      bodyMapper: Mappers.V1beta1VolumeAttachment
    },
    202: {
      bodyMapper: Mappers.V1beta1VolumeAttachment
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteStorageV1beta1CollectionVolumeAttachmentOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/storage.k8s.io/v1beta1/volumeattachments",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const readStorageV1beta1VolumeAttachmentOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/storage.k8s.io/v1beta1/volumeattachments/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.exact,
    Parameters.exportParameter,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1VolumeAttachment
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceStorageV1beta1VolumeAttachmentOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/storage.k8s.io/v1beta1/volumeattachments/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1beta1VolumeAttachment,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1VolumeAttachment
    },
    201: {
      bodyMapper: Mappers.V1beta1VolumeAttachment
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteStorageV1beta1VolumeAttachmentOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/storage.k8s.io/v1beta1/volumeattachments/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy,
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const patchStorageV1beta1VolumeAttachmentOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/storage.k8s.io/v1beta1/volumeattachments/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.V1beta1VolumeAttachment
    },
    401: {},
    default: {}
  },
  serializer
};

const watchStorageV1beta1StorageClassListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/storage.k8s.io/v1beta1/watch/storageclasses",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchStorageV1beta1StorageClassOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/storage.k8s.io/v1beta1/watch/storageclasses/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchStorageV1beta1VolumeAttachmentListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/storage.k8s.io/v1beta1/watch/volumeattachments",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchStorageV1beta1VolumeAttachmentOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/storage.k8s.io/v1beta1/watch/volumeattachments/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const getTemplateOpenshiftIoAPIGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/template.openshift.io/",
  responses: {
    200: {
      bodyMapper: Mappers.V1APIGroup
    },
    401: {},
    default: {}
  },
  serializer
};

const getTemplateOpenshiftIoV1APIResourcesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/template.openshift.io/v1/",
  responses: {
    200: {
      bodyMapper: Mappers.V1APIResourceList
    },
    401: {},
    default: {}
  },
  serializer
};

const listTemplateOpenshiftIoV1BrokerTemplateInstanceOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/template.openshift.io/v1/brokertemplateinstances",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapitemplatev1BrokerTemplateInstanceList
    },
    401: {},
    default: {}
  },
  serializer
};

const createTemplateOpenshiftIoV1BrokerTemplateInstanceOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/template.openshift.io/v1/brokertemplateinstances",
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Comgithubopenshiftapitemplatev1BrokerTemplateInstance,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapitemplatev1BrokerTemplateInstance
    },
    201: {
      bodyMapper: Mappers.Comgithubopenshiftapitemplatev1BrokerTemplateInstance
    },
    202: {
      bodyMapper: Mappers.Comgithubopenshiftapitemplatev1BrokerTemplateInstance
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteTemplateOpenshiftIoV1CollectionBrokerTemplateInstanceOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/template.openshift.io/v1/brokertemplateinstances",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const readTemplateOpenshiftIoV1BrokerTemplateInstanceOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/template.openshift.io/v1/brokertemplateinstances/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.exact,
    Parameters.exportParameter,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapitemplatev1BrokerTemplateInstance
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceTemplateOpenshiftIoV1BrokerTemplateInstanceOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/template.openshift.io/v1/brokertemplateinstances/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Comgithubopenshiftapitemplatev1BrokerTemplateInstance,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapitemplatev1BrokerTemplateInstance
    },
    201: {
      bodyMapper: Mappers.Comgithubopenshiftapitemplatev1BrokerTemplateInstance
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteTemplateOpenshiftIoV1BrokerTemplateInstanceOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/template.openshift.io/v1/brokertemplateinstances/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy,
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const patchTemplateOpenshiftIoV1BrokerTemplateInstanceOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/template.openshift.io/v1/brokertemplateinstances/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapitemplatev1BrokerTemplateInstance
    },
    401: {},
    default: {}
  },
  serializer
};

const createNamespacedProcessedTemplateV1OperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/template.openshift.io/v1/namespaces/{namespace}/processedtemplates",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Comgithubopenshiftapitemplatev1Template,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapitemplatev1Template
    },
    201: {
      bodyMapper: Mappers.Comgithubopenshiftapitemplatev1Template
    },
    202: {
      bodyMapper: Mappers.Comgithubopenshiftapitemplatev1Template
    },
    401: {},
    default: {}
  },
  serializer
};

const listTemplateOpenshiftIoV1NamespacedTemplateInstanceOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/template.openshift.io/v1/namespaces/{namespace}/templateinstances",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapitemplatev1TemplateInstanceList
    },
    401: {},
    default: {}
  },
  serializer
};

const createTemplateOpenshiftIoV1NamespacedTemplateInstanceOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/template.openshift.io/v1/namespaces/{namespace}/templateinstances",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Comgithubopenshiftapitemplatev1TemplateInstance,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapitemplatev1TemplateInstance
    },
    201: {
      bodyMapper: Mappers.Comgithubopenshiftapitemplatev1TemplateInstance
    },
    202: {
      bodyMapper: Mappers.Comgithubopenshiftapitemplatev1TemplateInstance
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteTemplateOpenshiftIoV1CollectionNamespacedTemplateInstanceOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/template.openshift.io/v1/namespaces/{namespace}/templateinstances",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const readTemplateOpenshiftIoV1NamespacedTemplateInstanceOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/template.openshift.io/v1/namespaces/{namespace}/templateinstances/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.exact,
    Parameters.exportParameter,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapitemplatev1TemplateInstance
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceTemplateOpenshiftIoV1NamespacedTemplateInstanceOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/template.openshift.io/v1/namespaces/{namespace}/templateinstances/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Comgithubopenshiftapitemplatev1TemplateInstance,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapitemplatev1TemplateInstance
    },
    201: {
      bodyMapper: Mappers.Comgithubopenshiftapitemplatev1TemplateInstance
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteTemplateOpenshiftIoV1NamespacedTemplateInstanceOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/template.openshift.io/v1/namespaces/{namespace}/templateinstances/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy,
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const patchTemplateOpenshiftIoV1NamespacedTemplateInstanceOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/template.openshift.io/v1/namespaces/{namespace}/templateinstances/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapitemplatev1TemplateInstance
    },
    401: {},
    default: {}
  },
  serializer
};

const readTemplateOpenshiftIoV1NamespacedTemplateInstanceStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/template.openshift.io/v1/namespaces/{namespace}/templateinstances/{name}/status",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapitemplatev1TemplateInstance
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceTemplateOpenshiftIoV1NamespacedTemplateInstanceStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/template.openshift.io/v1/namespaces/{namespace}/templateinstances/{name}/status",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Comgithubopenshiftapitemplatev1TemplateInstance,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapitemplatev1TemplateInstance
    },
    201: {
      bodyMapper: Mappers.Comgithubopenshiftapitemplatev1TemplateInstance
    },
    401: {},
    default: {}
  },
  serializer
};

const patchTemplateOpenshiftIoV1NamespacedTemplateInstanceStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/template.openshift.io/v1/namespaces/{namespace}/templateinstances/{name}/status",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapitemplatev1TemplateInstance
    },
    401: {},
    default: {}
  },
  serializer
};

const listTemplateOpenshiftIoV1NamespacedTemplateOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/template.openshift.io/v1/namespaces/{namespace}/templates",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapitemplatev1TemplateList
    },
    401: {},
    default: {}
  },
  serializer
};

const createTemplateOpenshiftIoV1NamespacedTemplateOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/template.openshift.io/v1/namespaces/{namespace}/templates",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Comgithubopenshiftapitemplatev1Template,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapitemplatev1Template
    },
    201: {
      bodyMapper: Mappers.Comgithubopenshiftapitemplatev1Template
    },
    202: {
      bodyMapper: Mappers.Comgithubopenshiftapitemplatev1Template
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteTemplateOpenshiftIoV1CollectionNamespacedTemplateOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/template.openshift.io/v1/namespaces/{namespace}/templates",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const readTemplateOpenshiftIoV1NamespacedTemplateOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/template.openshift.io/v1/namespaces/{namespace}/templates/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.exact,
    Parameters.exportParameter,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapitemplatev1Template
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceTemplateOpenshiftIoV1NamespacedTemplateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/template.openshift.io/v1/namespaces/{namespace}/templates/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Comgithubopenshiftapitemplatev1Template,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapitemplatev1Template
    },
    201: {
      bodyMapper: Mappers.Comgithubopenshiftapitemplatev1Template
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteTemplateOpenshiftIoV1NamespacedTemplateOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/template.openshift.io/v1/namespaces/{namespace}/templates/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy,
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const patchTemplateOpenshiftIoV1NamespacedTemplateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/template.openshift.io/v1/namespaces/{namespace}/templates/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapitemplatev1Template
    },
    401: {},
    default: {}
  },
  serializer
};

const listTemplateOpenshiftIoV1TemplateInstanceForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/template.openshift.io/v1/templateinstances",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapitemplatev1TemplateInstanceList
    },
    401: {},
    default: {}
  },
  serializer
};

const listTemplateOpenshiftIoV1TemplateForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/template.openshift.io/v1/templates",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapitemplatev1TemplateList
    },
    401: {},
    default: {}
  },
  serializer
};

const watchTemplateOpenshiftIoV1BrokerTemplateInstanceListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/template.openshift.io/v1/watch/brokertemplateinstances",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchTemplateOpenshiftIoV1BrokerTemplateInstanceOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/template.openshift.io/v1/watch/brokertemplateinstances/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchTemplateOpenshiftIoV1NamespacedTemplateInstanceListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/template.openshift.io/v1/watch/namespaces/{namespace}/templateinstances",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchTemplateOpenshiftIoV1NamespacedTemplateInstanceOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/template.openshift.io/v1/watch/namespaces/{namespace}/templateinstances/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchTemplateOpenshiftIoV1NamespacedTemplateListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/template.openshift.io/v1/watch/namespaces/{namespace}/templates",
  urlParameters: [
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchTemplateOpenshiftIoV1NamespacedTemplateOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/template.openshift.io/v1/watch/namespaces/{namespace}/templates/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.namespace
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchTemplateOpenshiftIoV1TemplateInstanceListForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/template.openshift.io/v1/watch/templateinstances",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchTemplateOpenshiftIoV1TemplateListForAllNamespacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/template.openshift.io/v1/watch/templates",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const getUserOpenshiftIoAPIGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/user.openshift.io/",
  responses: {
    200: {
      bodyMapper: Mappers.V1APIGroup
    },
    401: {},
    default: {}
  },
  serializer
};

const getUserOpenshiftIoV1APIResourcesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/user.openshift.io/v1/",
  responses: {
    200: {
      bodyMapper: Mappers.V1APIResourceList
    },
    401: {},
    default: {}
  },
  serializer
};

const listUserOpenshiftIoV1GroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/user.openshift.io/v1/groups",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiuserv1GroupList
    },
    401: {},
    default: {}
  },
  serializer
};

const createUserOpenshiftIoV1GroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/user.openshift.io/v1/groups",
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Comgithubopenshiftapiuserv1Group,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiuserv1Group
    },
    201: {
      bodyMapper: Mappers.Comgithubopenshiftapiuserv1Group
    },
    202: {
      bodyMapper: Mappers.Comgithubopenshiftapiuserv1Group
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteUserOpenshiftIoV1CollectionGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/user.openshift.io/v1/groups",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const readUserOpenshiftIoV1GroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/user.openshift.io/v1/groups/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.exact,
    Parameters.exportParameter,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiuserv1Group
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceUserOpenshiftIoV1GroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/user.openshift.io/v1/groups/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Comgithubopenshiftapiuserv1Group,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiuserv1Group
    },
    201: {
      bodyMapper: Mappers.Comgithubopenshiftapiuserv1Group
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteUserOpenshiftIoV1GroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/user.openshift.io/v1/groups/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy,
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const patchUserOpenshiftIoV1GroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/user.openshift.io/v1/groups/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiuserv1Group
    },
    401: {},
    default: {}
  },
  serializer
};

const listUserOpenshiftIoV1IdentityOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/user.openshift.io/v1/identities",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiuserv1IdentityList
    },
    401: {},
    default: {}
  },
  serializer
};

const createUserOpenshiftIoV1IdentityOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/user.openshift.io/v1/identities",
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Comgithubopenshiftapiuserv1Identity,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiuserv1Identity
    },
    201: {
      bodyMapper: Mappers.Comgithubopenshiftapiuserv1Identity
    },
    202: {
      bodyMapper: Mappers.Comgithubopenshiftapiuserv1Identity
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteUserOpenshiftIoV1CollectionIdentityOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/user.openshift.io/v1/identities",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const readUserOpenshiftIoV1IdentityOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/user.openshift.io/v1/identities/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.exact,
    Parameters.exportParameter,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiuserv1Identity
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceUserOpenshiftIoV1IdentityOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/user.openshift.io/v1/identities/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Comgithubopenshiftapiuserv1Identity,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiuserv1Identity
    },
    201: {
      bodyMapper: Mappers.Comgithubopenshiftapiuserv1Identity
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteUserOpenshiftIoV1IdentityOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/user.openshift.io/v1/identities/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy,
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const patchUserOpenshiftIoV1IdentityOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/user.openshift.io/v1/identities/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiuserv1Identity
    },
    401: {},
    default: {}
  },
  serializer
};

const createUserOpenshiftIoV1UserIdentityMappingOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/user.openshift.io/v1/useridentitymappings",
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Comgithubopenshiftapiuserv1UserIdentityMapping,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiuserv1UserIdentityMapping
    },
    201: {
      bodyMapper: Mappers.Comgithubopenshiftapiuserv1UserIdentityMapping
    },
    202: {
      bodyMapper: Mappers.Comgithubopenshiftapiuserv1UserIdentityMapping
    },
    401: {},
    default: {}
  },
  serializer
};

const readUserOpenshiftIoV1UserIdentityMappingOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/user.openshift.io/v1/useridentitymappings/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiuserv1UserIdentityMapping
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceUserOpenshiftIoV1UserIdentityMappingOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/user.openshift.io/v1/useridentitymappings/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Comgithubopenshiftapiuserv1UserIdentityMapping,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiuserv1UserIdentityMapping
    },
    201: {
      bodyMapper: Mappers.Comgithubopenshiftapiuserv1UserIdentityMapping
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteUserOpenshiftIoV1UserIdentityMappingOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/user.openshift.io/v1/useridentitymappings/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy,
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const patchUserOpenshiftIoV1UserIdentityMappingOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/user.openshift.io/v1/useridentitymappings/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiuserv1UserIdentityMapping
    },
    401: {},
    default: {}
  },
  serializer
};

const listUserOpenshiftIoV1UserOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/user.openshift.io/v1/users",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiuserv1UserList
    },
    401: {},
    default: {}
  },
  serializer
};

const createUserOpenshiftIoV1UserOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apis/user.openshift.io/v1/users",
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Comgithubopenshiftapiuserv1User,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiuserv1User
    },
    201: {
      bodyMapper: Mappers.Comgithubopenshiftapiuserv1User
    },
    202: {
      bodyMapper: Mappers.Comgithubopenshiftapiuserv1User
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteUserOpenshiftIoV1CollectionUserOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/user.openshift.io/v1/users",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const readUserOpenshiftIoV1UserOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/user.openshift.io/v1/users/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.exact,
    Parameters.exportParameter,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiuserv1User
    },
    401: {},
    default: {}
  },
  serializer
};

const replaceUserOpenshiftIoV1UserOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apis/user.openshift.io/v1/users/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Comgithubopenshiftapiuserv1User,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiuserv1User
    },
    201: {
      bodyMapper: Mappers.Comgithubopenshiftapiuserv1User
    },
    401: {},
    default: {}
  },
  serializer
};

const deleteUserOpenshiftIoV1UserOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apis/user.openshift.io/v1/users/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.gracePeriodSeconds,
    Parameters.orphanDependents,
    Parameters.propagationPolicy,
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.V1DeleteOptions,
      required: true
    }
  },
  contentType: "*/*",
  responses: {
    200: {
      bodyMapper: Mappers.V1Status
    },
    401: {},
    default: {}
  },
  serializer
};

const patchUserOpenshiftIoV1UserOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apis/user.openshift.io/v1/users/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.pretty
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.Comgithubopenshiftapiuserv1User
    },
    401: {},
    default: {}
  },
  serializer
};

const watchUserOpenshiftIoV1GroupListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/user.openshift.io/v1/watch/groups",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchUserOpenshiftIoV1GroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/user.openshift.io/v1/watch/groups/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchUserOpenshiftIoV1IdentityListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/user.openshift.io/v1/watch/identities",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchUserOpenshiftIoV1IdentityOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/user.openshift.io/v1/watch/identities/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchUserOpenshiftIoV1UserListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/user.openshift.io/v1/watch/users",
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

const watchUserOpenshiftIoV1UserOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apis/user.openshift.io/v1/watch/users/{name}",
  urlParameters: [
    Parameters.name
  ],
  queryParameters: [
    Parameters.continueParameter,
    Parameters.fieldSelector,
    Parameters.includeUninitialized,
    Parameters.labelSelector,
    Parameters.limit,
    Parameters.pretty,
    Parameters.resourceVersion,
    Parameters.timeoutSeconds,
    Parameters.watch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.V1WatchEvent
    },
    401: {},
    default: {}
  },
  serializer
};

export {
  OpenShiftAPIwithKubernetes,
  OpenShiftAPIwithKubernetesContext,
  Models as OpenShiftAPIwithKubernetesModels,
  Mappers as OpenShiftAPIwithKubernetesMappers
};
